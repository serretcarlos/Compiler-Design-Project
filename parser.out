Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    right_dblquotes
    left_dblquotes

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> program id semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC main nt_ambienteMain CUERPO
Rule 2     nt_cambiarScope -> empty
Rule 3     nt_ambienteMain -> nt_cambiarScope
Rule 4     PROGRAMA_VARS -> VARS
Rule 5     PROGRAMA_VARS -> empty
Rule 6     PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX
Rule 7     PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX
Rule 8     PROGRAMA_FUNC_AUX -> FUNC
Rule 9     PROGRAMA_FUNC_AUX -> empty
Rule 10    VARS -> VARS_AUX
Rule 11    VARS_AUX -> VARS_LIST_VAR
Rule 12    VARS_AUX -> VARS_AUX VARS_LIST_VAR
Rule 13    VARS_LIST_VAR -> VARS_LIST
Rule 14    VARS_LIST_VAR -> VARS_VAR
Rule 15    VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon
Rule 16    nt_hacerLista -> empty
Rule 17    VARS_LIST_AUX -> id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar
Rule 18    VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar
Rule 19    nt_agregarId -> empty
Rule 20    nt_agregarCteLista -> empty
Rule 21    nt_agregarDicVar -> empty
Rule 22    VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon
Rule 23    nt_hacerVar -> empty
Rule 24    VARS_VAR_AUX -> id nt_agregarId nt_agregarDicVar
Rule 25    VARS_VAR_AUX -> VARS_VAR_AUX comma id nt_agregarId nt_agregarDicVar
Rule 26    TIPO -> int nt_cambioTipoActual
Rule 27    TIPO -> float nt_cambioTipoActual
Rule 28    TIPO -> bool nt_cambioTipoActual
Rule 29    TIPO -> string nt_cambioTipoActual
Rule 30    nt_cambioTipoActual -> empty
Rule 31    CUERPO -> left_cb CUERPO_AUX right_cb
Rule 32    CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO
Rule 33    CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO
Rule 34    CUERPO_VARS -> VARS
Rule 35    CUERPO_VARS -> empty
Rule 36    CUERPO_ESTATUTO -> ESTATUTO
Rule 37    CUERPO_ESTATUTO -> empty
Rule 38    CUERPOFUNC -> CUERPOFUNC_AUX
Rule 39    CUERPOFUNC_AUX -> CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO
Rule 40    CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO
Rule 41    CUERPOFUNC_VARS -> VARS
Rule 42    CUERPOFUNC_VARS -> empty
Rule 43    CUERPOFUNC_ESTATUTO -> ESTATUTO
Rule 44    CUERPOFUNC_ESTATUTO -> empty
Rule 45    CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb
Rule 46    CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO
Rule 47    CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO
Rule 48    CUERPORETORNO_CF_AUX -> CUERPOFUNC
Rule 49    CUERPORETORNO_CF_AUX -> empty
Rule 50    RETORNO -> return EXP semicolon
Rule 51    FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_cambiarScope
Rule 52    FUNC -> VOIDFUNC nt_cambiarScope
Rule 53    nt_cambioFuncActual -> empty
Rule 54    nt_agregarIdFunc -> empty
Rule 55    FUNC_PARA -> TIPO id nt_agregarParametro
Rule 56    FUNC_PARA -> FUNC_PARA comma TIPO id nt_agregarParametro
Rule 57    nt_agregarParametro -> empty
Rule 58    VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb
Rule 59    nt_hacerVoid -> empty
Rule 60    VOIDFUNC_PARA -> TIPO id nt_agregarParametro
Rule 61    VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO id nt_agregarParametro
Rule 62    ESTATUTO -> ASIGNACION
Rule 63    ESTATUTO -> CONDICION
Rule 64    ESTATUTO -> CICLO
Rule 65    ESTATUTO -> LECTURA
Rule 66    ESTATUTO -> ESCRITURA
Rule 67    ESTATUTO -> LLAMADA
Rule 68    CONDICION -> if CONDICION_ELSEIF CONDICION_ELSE
Rule 69    CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO
Rule 70    CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO
Rule 71    CONDICION_ELSE -> else CUERPO
Rule 72    CONDICION_ELSE -> empty
Rule 73    CICLO -> while left_par EXPRESION right_par CUERPO
Rule 74    LECTURA -> cread left_par id nt_leer right_par semicolon
Rule 75    nt_leer -> empty
Rule 76    ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon
Rule 77    nt_escribir -> empty
Rule 78    LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon
Rule 79    LLAMADA_EXPRESION -> EXPRESION
Rule 80    LLAMADA_EXPRESION -> LLAMADA_EXPRESION comma EXPRESION
Rule 81    EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
Rule 82    nt_checaAndOrNot -> empty
Rule 83    EXPRESION_NOT -> not nt_pushPOper
Rule 84    EXPRESION_NOT -> empty
Rule 85    EXPRESION_B -> and nt_pushPOper EXPRESION
Rule 86    EXPRESION_B -> or nt_pushPOper EXPRESION
Rule 87    EXPRESION_B -> empty
Rule 88    EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX
Rule 89    EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop
Rule 90    EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop
Rule 91    EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop
Rule 92    EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop
Rule 93    EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop
Rule 94    EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop
Rule 95    EXPRESIONLOGICA_AUX -> empty
Rule 96    nt_checarRelop -> empty
Rule 97    EXP -> TERMINO nt_checar_sumas EXP_AUX
Rule 98    nt_checar_sumas -> empty
Rule 99    EXP_AUX -> plus nt_pushPOper EXP
Rule 100   EXP_AUX -> minus nt_pushPOper EXP
Rule 101   EXP_AUX -> empty
Rule 102   TERMINO -> FACTOR nt_checar_multis TERMINO_AUX
Rule 103   nt_checar_multis -> empty
Rule 104   TERMINO_AUX -> multiply nt_pushPOper TERMINO
Rule 105   TERMINO_AUX -> divide nt_pushPOper TERMINO
Rule 106   TERMINO_AUX -> empty
Rule 107   FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper
Rule 108   FACTOR -> CONSTANTE
Rule 109   FACTOR -> LISTA
Rule 110   FACTOR -> FACTOR_AUX
Rule 111   FACTOR_AUX -> id nt_pushPilaO
Rule 112   FACTOR_AUX -> id LLAMADA_F
Rule 113   LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par
Rule 114   LLAMADAF_AUX -> comma EXPRESION LLAMADAF_AUX
Rule 115   LLAMADAF_AUX -> empty
Rule 116   LISTA -> id left_sb EXP right_sb
Rule 117   CONSTANTE -> NUMERICA
Rule 118   CONSTANTE -> BOOLEANA
Rule 119   CONSTANTE -> STRINGS
Rule 120   NUMERICA -> NUMERICA_AUX
Rule 121   NUMERICA -> plus nt_sigMas NUMERICA_AUX
Rule 122   NUMERICA -> minus nt_sigMenos NUMERICA_AUX
Rule 123   nt_sigMas -> empty
Rule 124   nt_sigMenos -> empty
Rule 125   NUMERICA_AUX -> cteInt nt_pushInt
Rule 126   NUMERICA_AUX -> cteFloat nt_pushFloat
Rule 127   nt_pushInt -> empty
Rule 128   nt_pushFloat -> empty
Rule 129   BOOLEANA -> true
Rule 130   BOOLEANA -> false
Rule 131   STRINGS -> cteString
Rule 132   ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon
Rule 133   nt_checaEquals -> empty
Rule 134   ASIGNACION_AUX -> id nt_pushPilaO
Rule 135   ASIGNACION_AUX -> LISTA
Rule 136   nt_pushPilaO -> empty
Rule 137   nt_pushPOper -> empty
Rule 138   nt_popPOper -> empty
Rule 139   empty -> <empty>

Terminals, with rules where they appear

and                  : 85
bool                 : 28
comma                : 18 25 56 61 80 114
cread                : 74
cteFloat             : 126
cteInt               : 17 18 125
cteString            : 131
cwrite               : 76
divide               : 105
else                 : 71
elseif               : 70
equals               : 132
error                : 
et                   : 94
false                : 130
float                : 27
ge                   : 92
gt                   : 90
id                   : 1 17 18 24 25 51 55 56 58 60 61 74 111 112 116 134
if                   : 68
int                  : 26
le                   : 93
left_cb              : 31 45 58
left_dblquotes       : 
left_par             : 51 58 69 70 73 74 76 78 107 113
left_sb              : 17 18 116
list                 : 15
lt                   : 89
main                 : 1
minus                : 100 122
multiply             : 104
ne                   : 91
not                  : 83
or                   : 86
plus                 : 99 121
program              : 1
return               : 50
right_cb             : 31 45 58
right_dblquotes      : 
right_par            : 51 58 69 70 73 74 76 78 107 113
right_sb             : 17 18 116
semicolon            : 1 15 22 50 74 76 78 132
string               : 29
true                 : 129
var                  : 22
void                 : 58
while                : 73

Nonterminals, with rules where they appear

ASIGNACION           : 62
ASIGNACION_AUX       : 132
BOOLEANA             : 118
CICLO                : 64
CONDICION            : 63
CONDICION_ELSE       : 68
CONDICION_ELSEIF     : 68 70
CONSTANTE            : 108
CUERPO               : 1 69 70 71 73
CUERPOFUNC           : 48 58
CUERPOFUNC_AUX       : 38 40
CUERPOFUNC_ESTATUTO  : 39 40
CUERPOFUNC_VARS      : 39 40
CUERPORETORNO        : 51
CUERPORETORNO_AUX    : 45 47
CUERPORETORNO_CF_AUX : 46 47
CUERPO_AUX           : 31 33
CUERPO_ESTATUTO      : 32 33
CUERPO_VARS          : 32 33
ESCRITURA            : 66
ESTATUTO             : 36 43
EXP                  : 50 88 89 90 91 92 93 94 99 100 116
EXPRESION            : 69 70 73 76 79 80 85 86 107 113 114 132
EXPRESIONLOGICA      : 81
EXPRESIONLOGICA_AUX  : 88
EXPRESION_B          : 81
EXPRESION_NOT        : 81
EXP_AUX              : 97
FACTOR               : 102
FACTOR_AUX           : 110
FUNC                 : 8
FUNC_PARA            : 51 56
LECTURA              : 65
LISTA                : 109 135
LLAMADA              : 67
LLAMADAF_AUX         : 113 114
LLAMADA_EXPRESION    : 78 80
LLAMADA_F            : 112
NUMERICA             : 117
NUMERICA_AUX         : 120 121 122
PROGRAMA             : 0
PROGRAMA_FUNC        : 1 7
PROGRAMA_FUNC_AUX    : 6 7
PROGRAMA_VARS        : 1
RETORNO              : 46 47
STRINGS              : 119
TERMINO              : 97 104 105
TERMINO_AUX          : 102
TIPO                 : 15 22 51 55 56 60 61
VARS                 : 4 34 41
VARS_AUX             : 10 12
VARS_LIST            : 13
VARS_LIST_AUX        : 15 18
VARS_LIST_VAR        : 11 12
VARS_VAR             : 14
VARS_VAR_AUX         : 22 25
VOIDFUNC             : 52
VOIDFUNC_PARA        : 58 61
empty                : 2 5 9 16 19 20 21 23 30 35 37 42 44 49 53 54 57 59 72 75 77 82 84 87 95 96 98 101 103 106 115 123 124 127 128 133 136 137 138
nt_agregarCteLista   : 17 18
nt_agregarDicVar     : 17 18 24 25
nt_agregarId         : 17 18 24 25
nt_agregarIdFunc     : 51 58
nt_agregarParametro  : 55 56 60 61
nt_ambienteMain      : 1
nt_cambiarScope      : 1 3 51 52
nt_cambioFuncActual  : 51
nt_cambioTipoActual  : 26 27 28 29
nt_checaAndOrNot     : 81
nt_checaEquals       : 132
nt_checarRelop       : 89 90 91 92 93 94
nt_checar_multis     : 102
nt_checar_sumas      : 97
nt_escribir          : 76
nt_hacerLista        : 15
nt_hacerVar          : 22
nt_hacerVoid         : 58
nt_leer              : 74
nt_popPOper          : 107
nt_pushFloat         : 126
nt_pushInt           : 125
nt_pushPOper         : 83 85 86 89 90 91 92 93 94 99 100 104 105 107 132
nt_pushPilaO         : 111 134
nt_sigMas            : 121
nt_sigMenos          : 122

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . program id semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC main nt_ambienteMain CUERPO

    program         shift and go to state 1

    PROGRAMA                       shift and go to state 2

state 1

    (1) PROGRAMA -> program . id semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC main nt_ambienteMain CUERPO

    id              shift and go to state 3


state 2

    (0) S' -> PROGRAMA .



state 3

    (1) PROGRAMA -> program id . semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC main nt_ambienteMain CUERPO

    semicolon       shift and go to state 4


state 4

    (1) PROGRAMA -> program id semicolon . PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC main nt_ambienteMain CUERPO
    (4) PROGRAMA_VARS -> . VARS
    (5) PROGRAMA_VARS -> . empty
    (10) VARS -> . VARS_AUX
    (139) empty -> .
    (11) VARS_AUX -> . VARS_LIST_VAR
    (12) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (13) VARS_LIST_VAR -> . VARS_LIST
    (14) VARS_LIST_VAR -> . VARS_VAR
    (15) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (22) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

    int             reduce using rule 139 (empty -> .)
    float           reduce using rule 139 (empty -> .)
    bool            reduce using rule 139 (empty -> .)
    string          reduce using rule 139 (empty -> .)
    void            reduce using rule 139 (empty -> .)
    main            reduce using rule 139 (empty -> .)
    list            shift and go to state 12
    var             shift and go to state 8

    VARS                           shift and go to state 5
    VARS_LIST                      shift and go to state 6
    VARS_LIST_VAR                  shift and go to state 10
    PROGRAMA_VARS                  shift and go to state 7
    VARS_AUX                       shift and go to state 13
    VARS_VAR                       shift and go to state 11
    empty                          shift and go to state 9

state 5

    (4) PROGRAMA_VARS -> VARS .

    int             reduce using rule 4 (PROGRAMA_VARS -> VARS .)
    float           reduce using rule 4 (PROGRAMA_VARS -> VARS .)
    bool            reduce using rule 4 (PROGRAMA_VARS -> VARS .)
    string          reduce using rule 4 (PROGRAMA_VARS -> VARS .)
    void            reduce using rule 4 (PROGRAMA_VARS -> VARS .)
    main            reduce using rule 4 (PROGRAMA_VARS -> VARS .)


state 6

    (13) VARS_LIST_VAR -> VARS_LIST .

    list            reduce using rule 13 (VARS_LIST_VAR -> VARS_LIST .)
    var             reduce using rule 13 (VARS_LIST_VAR -> VARS_LIST .)
    int             reduce using rule 13 (VARS_LIST_VAR -> VARS_LIST .)
    float           reduce using rule 13 (VARS_LIST_VAR -> VARS_LIST .)
    bool            reduce using rule 13 (VARS_LIST_VAR -> VARS_LIST .)
    string          reduce using rule 13 (VARS_LIST_VAR -> VARS_LIST .)
    void            reduce using rule 13 (VARS_LIST_VAR -> VARS_LIST .)
    main            reduce using rule 13 (VARS_LIST_VAR -> VARS_LIST .)
    if              reduce using rule 13 (VARS_LIST_VAR -> VARS_LIST .)
    while           reduce using rule 13 (VARS_LIST_VAR -> VARS_LIST .)
    cread           reduce using rule 13 (VARS_LIST_VAR -> VARS_LIST .)
    cwrite          reduce using rule 13 (VARS_LIST_VAR -> VARS_LIST .)
    left_par        reduce using rule 13 (VARS_LIST_VAR -> VARS_LIST .)
    id              reduce using rule 13 (VARS_LIST_VAR -> VARS_LIST .)
    right_cb        reduce using rule 13 (VARS_LIST_VAR -> VARS_LIST .)
    return          reduce using rule 13 (VARS_LIST_VAR -> VARS_LIST .)


state 7

    (1) PROGRAMA -> program id semicolon PROGRAMA_VARS . nt_cambiarScope PROGRAMA_FUNC main nt_ambienteMain CUERPO
    (2) nt_cambiarScope -> . empty
    (139) empty -> .

    int             reduce using rule 139 (empty -> .)
    float           reduce using rule 139 (empty -> .)
    bool            reduce using rule 139 (empty -> .)
    string          reduce using rule 139 (empty -> .)
    void            reduce using rule 139 (empty -> .)
    main            reduce using rule 139 (empty -> .)

    nt_cambiarScope                shift and go to state 14
    empty                          shift and go to state 15

state 8

    (22) VARS_VAR -> var . nt_hacerVar TIPO VARS_VAR_AUX semicolon
    (23) nt_hacerVar -> . empty
    (139) empty -> .

    int             reduce using rule 139 (empty -> .)
    float           reduce using rule 139 (empty -> .)
    bool            reduce using rule 139 (empty -> .)
    string          reduce using rule 139 (empty -> .)

    nt_hacerVar                    shift and go to state 16
    empty                          shift and go to state 17

state 9

    (5) PROGRAMA_VARS -> empty .

    int             reduce using rule 5 (PROGRAMA_VARS -> empty .)
    float           reduce using rule 5 (PROGRAMA_VARS -> empty .)
    bool            reduce using rule 5 (PROGRAMA_VARS -> empty .)
    string          reduce using rule 5 (PROGRAMA_VARS -> empty .)
    void            reduce using rule 5 (PROGRAMA_VARS -> empty .)
    main            reduce using rule 5 (PROGRAMA_VARS -> empty .)


state 10

    (11) VARS_AUX -> VARS_LIST_VAR .

    list            reduce using rule 11 (VARS_AUX -> VARS_LIST_VAR .)
    var             reduce using rule 11 (VARS_AUX -> VARS_LIST_VAR .)
    if              reduce using rule 11 (VARS_AUX -> VARS_LIST_VAR .)
    while           reduce using rule 11 (VARS_AUX -> VARS_LIST_VAR .)
    cread           reduce using rule 11 (VARS_AUX -> VARS_LIST_VAR .)
    cwrite          reduce using rule 11 (VARS_AUX -> VARS_LIST_VAR .)
    left_par        reduce using rule 11 (VARS_AUX -> VARS_LIST_VAR .)
    id              reduce using rule 11 (VARS_AUX -> VARS_LIST_VAR .)
    return          reduce using rule 11 (VARS_AUX -> VARS_LIST_VAR .)
    right_cb        reduce using rule 11 (VARS_AUX -> VARS_LIST_VAR .)
    int             reduce using rule 11 (VARS_AUX -> VARS_LIST_VAR .)
    float           reduce using rule 11 (VARS_AUX -> VARS_LIST_VAR .)
    bool            reduce using rule 11 (VARS_AUX -> VARS_LIST_VAR .)
    string          reduce using rule 11 (VARS_AUX -> VARS_LIST_VAR .)
    void            reduce using rule 11 (VARS_AUX -> VARS_LIST_VAR .)
    main            reduce using rule 11 (VARS_AUX -> VARS_LIST_VAR .)


state 11

    (14) VARS_LIST_VAR -> VARS_VAR .

    list            reduce using rule 14 (VARS_LIST_VAR -> VARS_VAR .)
    var             reduce using rule 14 (VARS_LIST_VAR -> VARS_VAR .)
    int             reduce using rule 14 (VARS_LIST_VAR -> VARS_VAR .)
    float           reduce using rule 14 (VARS_LIST_VAR -> VARS_VAR .)
    bool            reduce using rule 14 (VARS_LIST_VAR -> VARS_VAR .)
    string          reduce using rule 14 (VARS_LIST_VAR -> VARS_VAR .)
    void            reduce using rule 14 (VARS_LIST_VAR -> VARS_VAR .)
    main            reduce using rule 14 (VARS_LIST_VAR -> VARS_VAR .)
    if              reduce using rule 14 (VARS_LIST_VAR -> VARS_VAR .)
    while           reduce using rule 14 (VARS_LIST_VAR -> VARS_VAR .)
    cread           reduce using rule 14 (VARS_LIST_VAR -> VARS_VAR .)
    cwrite          reduce using rule 14 (VARS_LIST_VAR -> VARS_VAR .)
    left_par        reduce using rule 14 (VARS_LIST_VAR -> VARS_VAR .)
    id              reduce using rule 14 (VARS_LIST_VAR -> VARS_VAR .)
    right_cb        reduce using rule 14 (VARS_LIST_VAR -> VARS_VAR .)
    return          reduce using rule 14 (VARS_LIST_VAR -> VARS_VAR .)


state 12

    (15) VARS_LIST -> list . nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (16) nt_hacerLista -> . empty
    (139) empty -> .

    int             reduce using rule 139 (empty -> .)
    float           reduce using rule 139 (empty -> .)
    bool            reduce using rule 139 (empty -> .)
    string          reduce using rule 139 (empty -> .)

    empty                          shift and go to state 19
    nt_hacerLista                  shift and go to state 18

state 13

    (10) VARS -> VARS_AUX .
    (12) VARS_AUX -> VARS_AUX . VARS_LIST_VAR
    (13) VARS_LIST_VAR -> . VARS_LIST
    (14) VARS_LIST_VAR -> . VARS_VAR
    (15) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (22) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    if              reduce using rule 10 (VARS -> VARS_AUX .)
    while           reduce using rule 10 (VARS -> VARS_AUX .)
    cread           reduce using rule 10 (VARS -> VARS_AUX .)
    cwrite          reduce using rule 10 (VARS -> VARS_AUX .)
    left_par        reduce using rule 10 (VARS -> VARS_AUX .)
    id              reduce using rule 10 (VARS -> VARS_AUX .)
    return          reduce using rule 10 (VARS -> VARS_AUX .)
    right_cb        reduce using rule 10 (VARS -> VARS_AUX .)
    int             reduce using rule 10 (VARS -> VARS_AUX .)
    float           reduce using rule 10 (VARS -> VARS_AUX .)
    bool            reduce using rule 10 (VARS -> VARS_AUX .)
    string          reduce using rule 10 (VARS -> VARS_AUX .)
    void            reduce using rule 10 (VARS -> VARS_AUX .)
    main            reduce using rule 10 (VARS -> VARS_AUX .)
    list            shift and go to state 12
    var             shift and go to state 8

  ! list            [ reduce using rule 10 (VARS -> VARS_AUX .) ]
  ! var             [ reduce using rule 10 (VARS -> VARS_AUX .) ]

    VARS_LIST                      shift and go to state 6
    VARS_LIST_VAR                  shift and go to state 20
    VARS_VAR                       shift and go to state 11

state 14

    (1) PROGRAMA -> program id semicolon PROGRAMA_VARS nt_cambiarScope . PROGRAMA_FUNC main nt_ambienteMain CUERPO
    (6) PROGRAMA_FUNC -> . PROGRAMA_FUNC_AUX
    (7) PROGRAMA_FUNC -> . PROGRAMA_FUNC PROGRAMA_FUNC_AUX
    (8) PROGRAMA_FUNC_AUX -> . FUNC
    (9) PROGRAMA_FUNC_AUX -> . empty
    (51) FUNC -> . TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_cambiarScope
    (52) FUNC -> . VOIDFUNC nt_cambiarScope
    (139) empty -> .
    (26) TIPO -> . int nt_cambioTipoActual
    (27) TIPO -> . float nt_cambioTipoActual
    (28) TIPO -> . bool nt_cambioTipoActual
    (29) TIPO -> . string nt_cambioTipoActual
    (58) VOIDFUNC -> . void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb

  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for bool resolved as shift
  ! shift/reduce conflict for string resolved as shift
  ! shift/reduce conflict for void resolved as shift
    main            reduce using rule 139 (empty -> .)
    int             shift and go to state 22
    float           shift and go to state 23
    bool            shift and go to state 26
    string          shift and go to state 29
    void            shift and go to state 30

  ! int             [ reduce using rule 139 (empty -> .) ]
  ! float           [ reduce using rule 139 (empty -> .) ]
  ! bool            [ reduce using rule 139 (empty -> .) ]
  ! string          [ reduce using rule 139 (empty -> .) ]
  ! void            [ reduce using rule 139 (empty -> .) ]

    PROGRAMA_FUNC_AUX              shift and go to state 25
    TIPO                           shift and go to state 24
    PROGRAMA_FUNC                  shift and go to state 21
    VOIDFUNC                       shift and go to state 27
    FUNC                           shift and go to state 31
    empty                          shift and go to state 28

state 15

    (2) nt_cambiarScope -> empty .

    main            reduce using rule 2 (nt_cambiarScope -> empty .)
    int             reduce using rule 2 (nt_cambiarScope -> empty .)
    float           reduce using rule 2 (nt_cambiarScope -> empty .)
    bool            reduce using rule 2 (nt_cambiarScope -> empty .)
    string          reduce using rule 2 (nt_cambiarScope -> empty .)
    void            reduce using rule 2 (nt_cambiarScope -> empty .)
    left_cb         reduce using rule 2 (nt_cambiarScope -> empty .)


state 16

    (22) VARS_VAR -> var nt_hacerVar . TIPO VARS_VAR_AUX semicolon
    (26) TIPO -> . int nt_cambioTipoActual
    (27) TIPO -> . float nt_cambioTipoActual
    (28) TIPO -> . bool nt_cambioTipoActual
    (29) TIPO -> . string nt_cambioTipoActual

    int             shift and go to state 22
    float           shift and go to state 23
    bool            shift and go to state 26
    string          shift and go to state 29

    TIPO                           shift and go to state 32

state 17

    (23) nt_hacerVar -> empty .

    int             reduce using rule 23 (nt_hacerVar -> empty .)
    float           reduce using rule 23 (nt_hacerVar -> empty .)
    bool            reduce using rule 23 (nt_hacerVar -> empty .)
    string          reduce using rule 23 (nt_hacerVar -> empty .)


state 18

    (15) VARS_LIST -> list nt_hacerLista . TIPO VARS_LIST_AUX semicolon
    (26) TIPO -> . int nt_cambioTipoActual
    (27) TIPO -> . float nt_cambioTipoActual
    (28) TIPO -> . bool nt_cambioTipoActual
    (29) TIPO -> . string nt_cambioTipoActual

    int             shift and go to state 22
    float           shift and go to state 23
    bool            shift and go to state 26
    string          shift and go to state 29

    TIPO                           shift and go to state 33

state 19

    (16) nt_hacerLista -> empty .

    int             reduce using rule 16 (nt_hacerLista -> empty .)
    float           reduce using rule 16 (nt_hacerLista -> empty .)
    bool            reduce using rule 16 (nt_hacerLista -> empty .)
    string          reduce using rule 16 (nt_hacerLista -> empty .)


state 20

    (12) VARS_AUX -> VARS_AUX VARS_LIST_VAR .

    list            reduce using rule 12 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    var             reduce using rule 12 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    if              reduce using rule 12 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    while           reduce using rule 12 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    cread           reduce using rule 12 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    cwrite          reduce using rule 12 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    left_par        reduce using rule 12 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    id              reduce using rule 12 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    return          reduce using rule 12 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    right_cb        reduce using rule 12 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    int             reduce using rule 12 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    float           reduce using rule 12 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    bool            reduce using rule 12 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    string          reduce using rule 12 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    void            reduce using rule 12 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    main            reduce using rule 12 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)


state 21

    (1) PROGRAMA -> program id semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC . main nt_ambienteMain CUERPO
    (7) PROGRAMA_FUNC -> PROGRAMA_FUNC . PROGRAMA_FUNC_AUX
    (8) PROGRAMA_FUNC_AUX -> . FUNC
    (9) PROGRAMA_FUNC_AUX -> . empty
    (51) FUNC -> . TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_cambiarScope
    (52) FUNC -> . VOIDFUNC nt_cambiarScope
    (139) empty -> .
    (26) TIPO -> . int nt_cambioTipoActual
    (27) TIPO -> . float nt_cambioTipoActual
    (28) TIPO -> . bool nt_cambioTipoActual
    (29) TIPO -> . string nt_cambioTipoActual
    (58) VOIDFUNC -> . void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb

  ! shift/reduce conflict for main resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for bool resolved as shift
  ! shift/reduce conflict for string resolved as shift
  ! shift/reduce conflict for void resolved as shift
    main            shift and go to state 35
    int             shift and go to state 22
    float           shift and go to state 23
    bool            shift and go to state 26
    string          shift and go to state 29
    void            shift and go to state 30

  ! main            [ reduce using rule 139 (empty -> .) ]
  ! int             [ reduce using rule 139 (empty -> .) ]
  ! float           [ reduce using rule 139 (empty -> .) ]
  ! bool            [ reduce using rule 139 (empty -> .) ]
  ! string          [ reduce using rule 139 (empty -> .) ]
  ! void            [ reduce using rule 139 (empty -> .) ]

    PROGRAMA_FUNC_AUX              shift and go to state 34
    TIPO                           shift and go to state 24
    VOIDFUNC                       shift and go to state 27
    FUNC                           shift and go to state 31
    empty                          shift and go to state 28

state 22

    (26) TIPO -> int . nt_cambioTipoActual
    (30) nt_cambioTipoActual -> . empty
    (139) empty -> .

    id              reduce using rule 139 (empty -> .)

    nt_cambioTipoActual            shift and go to state 36
    empty                          shift and go to state 37

state 23

    (27) TIPO -> float . nt_cambioTipoActual
    (30) nt_cambioTipoActual -> . empty
    (139) empty -> .

    id              reduce using rule 139 (empty -> .)

    nt_cambioTipoActual            shift and go to state 38
    empty                          shift and go to state 37

state 24

    (51) FUNC -> TIPO . nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_cambiarScope
    (53) nt_cambioFuncActual -> . empty
    (139) empty -> .

    id              reduce using rule 139 (empty -> .)

    nt_cambioFuncActual            shift and go to state 39
    empty                          shift and go to state 40

state 25

    (6) PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .

    main            reduce using rule 6 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)
    int             reduce using rule 6 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)
    float           reduce using rule 6 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)
    bool            reduce using rule 6 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)
    string          reduce using rule 6 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)
    void            reduce using rule 6 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)


state 26

    (28) TIPO -> bool . nt_cambioTipoActual
    (30) nt_cambioTipoActual -> . empty
    (139) empty -> .

    id              reduce using rule 139 (empty -> .)

    nt_cambioTipoActual            shift and go to state 41
    empty                          shift and go to state 37

state 27

    (52) FUNC -> VOIDFUNC . nt_cambiarScope
    (2) nt_cambiarScope -> . empty
    (139) empty -> .

    main            reduce using rule 139 (empty -> .)
    int             reduce using rule 139 (empty -> .)
    float           reduce using rule 139 (empty -> .)
    bool            reduce using rule 139 (empty -> .)
    string          reduce using rule 139 (empty -> .)
    void            reduce using rule 139 (empty -> .)

    nt_cambiarScope                shift and go to state 42
    empty                          shift and go to state 15

state 28

    (9) PROGRAMA_FUNC_AUX -> empty .

    main            reduce using rule 9 (PROGRAMA_FUNC_AUX -> empty .)
    int             reduce using rule 9 (PROGRAMA_FUNC_AUX -> empty .)
    float           reduce using rule 9 (PROGRAMA_FUNC_AUX -> empty .)
    bool            reduce using rule 9 (PROGRAMA_FUNC_AUX -> empty .)
    string          reduce using rule 9 (PROGRAMA_FUNC_AUX -> empty .)
    void            reduce using rule 9 (PROGRAMA_FUNC_AUX -> empty .)


state 29

    (29) TIPO -> string . nt_cambioTipoActual
    (30) nt_cambioTipoActual -> . empty
    (139) empty -> .

    id              reduce using rule 139 (empty -> .)

    nt_cambioTipoActual            shift and go to state 43
    empty                          shift and go to state 37

state 30

    (58) VOIDFUNC -> void . nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb
    (59) nt_hacerVoid -> . empty
    (139) empty -> .

    id              reduce using rule 139 (empty -> .)

    nt_hacerVoid                   shift and go to state 45
    empty                          shift and go to state 44

state 31

    (8) PROGRAMA_FUNC_AUX -> FUNC .

    main            reduce using rule 8 (PROGRAMA_FUNC_AUX -> FUNC .)
    int             reduce using rule 8 (PROGRAMA_FUNC_AUX -> FUNC .)
    float           reduce using rule 8 (PROGRAMA_FUNC_AUX -> FUNC .)
    bool            reduce using rule 8 (PROGRAMA_FUNC_AUX -> FUNC .)
    string          reduce using rule 8 (PROGRAMA_FUNC_AUX -> FUNC .)
    void            reduce using rule 8 (PROGRAMA_FUNC_AUX -> FUNC .)


state 32

    (22) VARS_VAR -> var nt_hacerVar TIPO . VARS_VAR_AUX semicolon
    (24) VARS_VAR_AUX -> . id nt_agregarId nt_agregarDicVar
    (25) VARS_VAR_AUX -> . VARS_VAR_AUX comma id nt_agregarId nt_agregarDicVar

    id              shift and go to state 47

    VARS_VAR_AUX                   shift and go to state 46

state 33

    (15) VARS_LIST -> list nt_hacerLista TIPO . VARS_LIST_AUX semicolon
    (17) VARS_LIST_AUX -> . id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar
    (18) VARS_LIST_AUX -> . VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    id              shift and go to state 49

    VARS_LIST_AUX                  shift and go to state 48

state 34

    (7) PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .

    main            reduce using rule 7 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)
    int             reduce using rule 7 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)
    float           reduce using rule 7 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)
    bool            reduce using rule 7 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)
    string          reduce using rule 7 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)
    void            reduce using rule 7 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)


state 35

    (1) PROGRAMA -> program id semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC main . nt_ambienteMain CUERPO
    (3) nt_ambienteMain -> . nt_cambiarScope
    (2) nt_cambiarScope -> . empty
    (139) empty -> .

    left_cb         reduce using rule 139 (empty -> .)

    nt_ambienteMain                shift and go to state 50
    nt_cambiarScope                shift and go to state 51
    empty                          shift and go to state 15

state 36

    (26) TIPO -> int nt_cambioTipoActual .

    id              reduce using rule 26 (TIPO -> int nt_cambioTipoActual .)


state 37

    (30) nt_cambioTipoActual -> empty .

    id              reduce using rule 30 (nt_cambioTipoActual -> empty .)


state 38

    (27) TIPO -> float nt_cambioTipoActual .

    id              reduce using rule 27 (TIPO -> float nt_cambioTipoActual .)


state 39

    (51) FUNC -> TIPO nt_cambioFuncActual . id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_cambiarScope

    id              shift and go to state 52


state 40

    (53) nt_cambioFuncActual -> empty .

    id              reduce using rule 53 (nt_cambioFuncActual -> empty .)


state 41

    (28) TIPO -> bool nt_cambioTipoActual .

    id              reduce using rule 28 (TIPO -> bool nt_cambioTipoActual .)


state 42

    (52) FUNC -> VOIDFUNC nt_cambiarScope .

    main            reduce using rule 52 (FUNC -> VOIDFUNC nt_cambiarScope .)
    int             reduce using rule 52 (FUNC -> VOIDFUNC nt_cambiarScope .)
    float           reduce using rule 52 (FUNC -> VOIDFUNC nt_cambiarScope .)
    bool            reduce using rule 52 (FUNC -> VOIDFUNC nt_cambiarScope .)
    string          reduce using rule 52 (FUNC -> VOIDFUNC nt_cambiarScope .)
    void            reduce using rule 52 (FUNC -> VOIDFUNC nt_cambiarScope .)


state 43

    (29) TIPO -> string nt_cambioTipoActual .

    id              reduce using rule 29 (TIPO -> string nt_cambioTipoActual .)


state 44

    (59) nt_hacerVoid -> empty .

    id              reduce using rule 59 (nt_hacerVoid -> empty .)


state 45

    (58) VOIDFUNC -> void nt_hacerVoid . id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb

    id              shift and go to state 53


state 46

    (22) VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX . semicolon
    (25) VARS_VAR_AUX -> VARS_VAR_AUX . comma id nt_agregarId nt_agregarDicVar

    semicolon       shift and go to state 54
    comma           shift and go to state 55


state 47

    (24) VARS_VAR_AUX -> id . nt_agregarId nt_agregarDicVar
    (19) nt_agregarId -> . empty
    (139) empty -> .

    semicolon       reduce using rule 139 (empty -> .)
    comma           reduce using rule 139 (empty -> .)

    empty                          shift and go to state 56
    nt_agregarId                   shift and go to state 57

state 48

    (15) VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX . semicolon
    (18) VARS_LIST_AUX -> VARS_LIST_AUX . comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    semicolon       shift and go to state 58
    comma           shift and go to state 59


state 49

    (17) VARS_LIST_AUX -> id . nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar
    (19) nt_agregarId -> . empty
    (139) empty -> .

    left_sb         reduce using rule 139 (empty -> .)

    empty                          shift and go to state 56
    nt_agregarId                   shift and go to state 60

state 50

    (1) PROGRAMA -> program id semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC main nt_ambienteMain . CUERPO
    (31) CUERPO -> . left_cb CUERPO_AUX right_cb

    left_cb         shift and go to state 62

    CUERPO                         shift and go to state 61

state 51

    (3) nt_ambienteMain -> nt_cambiarScope .

    left_cb         reduce using rule 3 (nt_ambienteMain -> nt_cambiarScope .)


state 52

    (51) FUNC -> TIPO nt_cambioFuncActual id . nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_cambiarScope
    (54) nt_agregarIdFunc -> . empty
    (139) empty -> .

    left_par        reduce using rule 139 (empty -> .)

    nt_agregarIdFunc               shift and go to state 63
    empty                          shift and go to state 64

state 53

    (58) VOIDFUNC -> void nt_hacerVoid id . nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb
    (54) nt_agregarIdFunc -> . empty
    (139) empty -> .

    left_par        reduce using rule 139 (empty -> .)

    nt_agregarIdFunc               shift and go to state 65
    empty                          shift and go to state 64

state 54

    (22) VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .

    list            reduce using rule 22 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    var             reduce using rule 22 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    if              reduce using rule 22 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    while           reduce using rule 22 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    cread           reduce using rule 22 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    cwrite          reduce using rule 22 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    left_par        reduce using rule 22 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    id              reduce using rule 22 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    right_cb        reduce using rule 22 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    int             reduce using rule 22 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    float           reduce using rule 22 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    bool            reduce using rule 22 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    string          reduce using rule 22 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    void            reduce using rule 22 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    main            reduce using rule 22 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    return          reduce using rule 22 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)


state 55

    (25) VARS_VAR_AUX -> VARS_VAR_AUX comma . id nt_agregarId nt_agregarDicVar

    id              shift and go to state 66


state 56

    (19) nt_agregarId -> empty .

    left_sb         reduce using rule 19 (nt_agregarId -> empty .)
    semicolon       reduce using rule 19 (nt_agregarId -> empty .)
    comma           reduce using rule 19 (nt_agregarId -> empty .)


state 57

    (24) VARS_VAR_AUX -> id nt_agregarId . nt_agregarDicVar
    (21) nt_agregarDicVar -> . empty
    (139) empty -> .

    semicolon       reduce using rule 139 (empty -> .)
    comma           reduce using rule 139 (empty -> .)

    nt_agregarDicVar               shift and go to state 67
    empty                          shift and go to state 68

state 58

    (15) VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .

    list            reduce using rule 15 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    var             reduce using rule 15 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    int             reduce using rule 15 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    float           reduce using rule 15 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    bool            reduce using rule 15 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    string          reduce using rule 15 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    void            reduce using rule 15 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    main            reduce using rule 15 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    if              reduce using rule 15 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    while           reduce using rule 15 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    cread           reduce using rule 15 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    cwrite          reduce using rule 15 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    left_par        reduce using rule 15 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    id              reduce using rule 15 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    return          reduce using rule 15 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    right_cb        reduce using rule 15 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)


state 59

    (18) VARS_LIST_AUX -> VARS_LIST_AUX comma . id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    id              shift and go to state 69


state 60

    (17) VARS_LIST_AUX -> id nt_agregarId . left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    left_sb         shift and go to state 70


state 61

    (1) PROGRAMA -> program id semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC main nt_ambienteMain CUERPO .

    $end            reduce using rule 1 (PROGRAMA -> program id semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC main nt_ambienteMain CUERPO .)


state 62

    (31) CUERPO -> left_cb . CUERPO_AUX right_cb
    (32) CUERPO_AUX -> . CUERPO_VARS CUERPO_ESTATUTO
    (33) CUERPO_AUX -> . CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO
    (34) CUERPO_VARS -> . VARS
    (35) CUERPO_VARS -> . empty
    (10) VARS -> . VARS_AUX
    (139) empty -> .
    (11) VARS_AUX -> . VARS_LIST_VAR
    (12) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (13) VARS_LIST_VAR -> . VARS_LIST
    (14) VARS_LIST_VAR -> . VARS_VAR
    (15) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (22) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    if              reduce using rule 139 (empty -> .)
    while           reduce using rule 139 (empty -> .)
    cread           reduce using rule 139 (empty -> .)
    cwrite          reduce using rule 139 (empty -> .)
    left_par        reduce using rule 139 (empty -> .)
    id              reduce using rule 139 (empty -> .)
    right_cb        reduce using rule 139 (empty -> .)
    list            shift and go to state 12
    var             shift and go to state 8

  ! list            [ reduce using rule 139 (empty -> .) ]
  ! var             [ reduce using rule 139 (empty -> .) ]

    CUERPO_VARS                    shift and go to state 71
    VARS                           shift and go to state 72
    VARS_LIST                      shift and go to state 6
    VARS_LIST_VAR                  shift and go to state 10
    VARS_AUX                       shift and go to state 13
    CUERPO_AUX                     shift and go to state 74
    VARS_VAR                       shift and go to state 11
    empty                          shift and go to state 73

state 63

    (51) FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc . left_par FUNC_PARA right_par CUERPORETORNO nt_cambiarScope

    left_par        shift and go to state 75


state 64

    (54) nt_agregarIdFunc -> empty .

    left_par        reduce using rule 54 (nt_agregarIdFunc -> empty .)


state 65

    (58) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc . left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb

    left_par        shift and go to state 76


state 66

    (25) VARS_VAR_AUX -> VARS_VAR_AUX comma id . nt_agregarId nt_agregarDicVar
    (19) nt_agregarId -> . empty
    (139) empty -> .

    semicolon       reduce using rule 139 (empty -> .)
    comma           reduce using rule 139 (empty -> .)

    nt_agregarId                   shift and go to state 77
    empty                          shift and go to state 56

state 67

    (24) VARS_VAR_AUX -> id nt_agregarId nt_agregarDicVar .

    semicolon       reduce using rule 24 (VARS_VAR_AUX -> id nt_agregarId nt_agregarDicVar .)
    comma           reduce using rule 24 (VARS_VAR_AUX -> id nt_agregarId nt_agregarDicVar .)


state 68

    (21) nt_agregarDicVar -> empty .

    semicolon       reduce using rule 21 (nt_agregarDicVar -> empty .)
    comma           reduce using rule 21 (nt_agregarDicVar -> empty .)


state 69

    (18) VARS_LIST_AUX -> VARS_LIST_AUX comma id . nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar
    (19) nt_agregarId -> . empty
    (139) empty -> .

    left_sb         reduce using rule 139 (empty -> .)

    empty                          shift and go to state 56
    nt_agregarId                   shift and go to state 78

state 70

    (17) VARS_LIST_AUX -> id nt_agregarId left_sb . cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    cteInt          shift and go to state 79


state 71

    (32) CUERPO_AUX -> CUERPO_VARS . CUERPO_ESTATUTO
    (36) CUERPO_ESTATUTO -> . ESTATUTO
    (37) CUERPO_ESTATUTO -> . empty
    (62) ESTATUTO -> . ASIGNACION
    (63) ESTATUTO -> . CONDICION
    (64) ESTATUTO -> . CICLO
    (65) ESTATUTO -> . LECTURA
    (66) ESTATUTO -> . ESCRITURA
    (67) ESTATUTO -> . LLAMADA
    (139) empty -> .
    (132) ASIGNACION -> . ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon
    (68) CONDICION -> . if CONDICION_ELSEIF CONDICION_ELSE
    (73) CICLO -> . while left_par EXPRESION right_par CUERPO
    (74) LECTURA -> . cread left_par id nt_leer right_par semicolon
    (76) ESCRITURA -> . cwrite left_par EXPRESION nt_escribir right_par semicolon
    (78) LLAMADA -> . left_par LLAMADA_EXPRESION right_par semicolon
    (134) ASIGNACION_AUX -> . id nt_pushPilaO
    (135) ASIGNACION_AUX -> . LISTA
    (116) LISTA -> . id left_sb EXP right_sb

  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for cread resolved as shift
  ! shift/reduce conflict for cwrite resolved as shift
  ! shift/reduce conflict for left_par resolved as shift
  ! shift/reduce conflict for id resolved as shift
    right_cb        reduce using rule 139 (empty -> .)
    list            reduce using rule 139 (empty -> .)
    var             reduce using rule 139 (empty -> .)
    if              shift and go to state 83
    while           shift and go to state 95
    cread           shift and go to state 81
    cwrite          shift and go to state 87
    left_par        shift and go to state 93
    id              shift and go to state 86

  ! if              [ reduce using rule 139 (empty -> .) ]
  ! while           [ reduce using rule 139 (empty -> .) ]
  ! cread           [ reduce using rule 139 (empty -> .) ]
  ! cwrite          [ reduce using rule 139 (empty -> .) ]
  ! left_par        [ reduce using rule 139 (empty -> .) ]
  ! id              [ reduce using rule 139 (empty -> .) ]

    CICLO                          shift and go to state 80
    LECTURA                        shift and go to state 82
    ESCRITURA                      shift and go to state 89
    ASIGNACION                     shift and go to state 84
    ESTATUTO                       shift and go to state 85
    ASIGNACION_AUX                 shift and go to state 88
    empty                          shift and go to state 90
    LLAMADA                        shift and go to state 91
    CONDICION                      shift and go to state 92
    CUERPO_ESTATUTO                shift and go to state 94
    LISTA                          shift and go to state 96

state 72

    (34) CUERPO_VARS -> VARS .

    if              reduce using rule 34 (CUERPO_VARS -> VARS .)
    while           reduce using rule 34 (CUERPO_VARS -> VARS .)
    cread           reduce using rule 34 (CUERPO_VARS -> VARS .)
    cwrite          reduce using rule 34 (CUERPO_VARS -> VARS .)
    left_par        reduce using rule 34 (CUERPO_VARS -> VARS .)
    id              reduce using rule 34 (CUERPO_VARS -> VARS .)
    right_cb        reduce using rule 34 (CUERPO_VARS -> VARS .)
    list            reduce using rule 34 (CUERPO_VARS -> VARS .)
    var             reduce using rule 34 (CUERPO_VARS -> VARS .)


state 73

    (35) CUERPO_VARS -> empty .

    if              reduce using rule 35 (CUERPO_VARS -> empty .)
    while           reduce using rule 35 (CUERPO_VARS -> empty .)
    cread           reduce using rule 35 (CUERPO_VARS -> empty .)
    cwrite          reduce using rule 35 (CUERPO_VARS -> empty .)
    left_par        reduce using rule 35 (CUERPO_VARS -> empty .)
    id              reduce using rule 35 (CUERPO_VARS -> empty .)
    right_cb        reduce using rule 35 (CUERPO_VARS -> empty .)
    list            reduce using rule 35 (CUERPO_VARS -> empty .)
    var             reduce using rule 35 (CUERPO_VARS -> empty .)


state 74

    (31) CUERPO -> left_cb CUERPO_AUX . right_cb
    (33) CUERPO_AUX -> CUERPO_AUX . CUERPO_VARS CUERPO_ESTATUTO
    (34) CUERPO_VARS -> . VARS
    (35) CUERPO_VARS -> . empty
    (10) VARS -> . VARS_AUX
    (139) empty -> .
    (11) VARS_AUX -> . VARS_LIST_VAR
    (12) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (13) VARS_LIST_VAR -> . VARS_LIST
    (14) VARS_LIST_VAR -> . VARS_VAR
    (15) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (22) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for right_cb resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    right_cb        shift and go to state 98
    if              reduce using rule 139 (empty -> .)
    while           reduce using rule 139 (empty -> .)
    cread           reduce using rule 139 (empty -> .)
    cwrite          reduce using rule 139 (empty -> .)
    left_par        reduce using rule 139 (empty -> .)
    id              reduce using rule 139 (empty -> .)
    list            shift and go to state 12
    var             shift and go to state 8

  ! right_cb        [ reduce using rule 139 (empty -> .) ]
  ! list            [ reduce using rule 139 (empty -> .) ]
  ! var             [ reduce using rule 139 (empty -> .) ]

    CUERPO_VARS                    shift and go to state 97
    VARS                           shift and go to state 72
    VARS_LIST                      shift and go to state 6
    VARS_LIST_VAR                  shift and go to state 10
    VARS_AUX                       shift and go to state 13
    VARS_VAR                       shift and go to state 11
    empty                          shift and go to state 73

state 75

    (51) FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par . FUNC_PARA right_par CUERPORETORNO nt_cambiarScope
    (55) FUNC_PARA -> . TIPO id nt_agregarParametro
    (56) FUNC_PARA -> . FUNC_PARA comma TIPO id nt_agregarParametro
    (26) TIPO -> . int nt_cambioTipoActual
    (27) TIPO -> . float nt_cambioTipoActual
    (28) TIPO -> . bool nt_cambioTipoActual
    (29) TIPO -> . string nt_cambioTipoActual

    int             shift and go to state 22
    float           shift and go to state 23
    bool            shift and go to state 26
    string          shift and go to state 29

    TIPO                           shift and go to state 99
    FUNC_PARA                      shift and go to state 100

state 76

    (58) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par . VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb
    (60) VOIDFUNC_PARA -> . TIPO id nt_agregarParametro
    (61) VOIDFUNC_PARA -> . VOIDFUNC_PARA comma TIPO id nt_agregarParametro
    (26) TIPO -> . int nt_cambioTipoActual
    (27) TIPO -> . float nt_cambioTipoActual
    (28) TIPO -> . bool nt_cambioTipoActual
    (29) TIPO -> . string nt_cambioTipoActual

    int             shift and go to state 22
    float           shift and go to state 23
    bool            shift and go to state 26
    string          shift and go to state 29

    TIPO                           shift and go to state 102
    VOIDFUNC_PARA                  shift and go to state 101

state 77

    (25) VARS_VAR_AUX -> VARS_VAR_AUX comma id nt_agregarId . nt_agregarDicVar
    (21) nt_agregarDicVar -> . empty
    (139) empty -> .

    semicolon       reduce using rule 139 (empty -> .)
    comma           reduce using rule 139 (empty -> .)

    nt_agregarDicVar               shift and go to state 103
    empty                          shift and go to state 68

state 78

    (18) VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId . left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    left_sb         shift and go to state 104


state 79

    (17) VARS_LIST_AUX -> id nt_agregarId left_sb cteInt . nt_agregarCteLista right_sb nt_agregarDicVar
    (20) nt_agregarCteLista -> . empty
    (139) empty -> .

    right_sb        reduce using rule 139 (empty -> .)

    nt_agregarCteLista             shift and go to state 105
    empty                          shift and go to state 106

state 80

    (64) ESTATUTO -> CICLO .

    right_cb        reduce using rule 64 (ESTATUTO -> CICLO .)
    list            reduce using rule 64 (ESTATUTO -> CICLO .)
    var             reduce using rule 64 (ESTATUTO -> CICLO .)
    if              reduce using rule 64 (ESTATUTO -> CICLO .)
    while           reduce using rule 64 (ESTATUTO -> CICLO .)
    cread           reduce using rule 64 (ESTATUTO -> CICLO .)
    cwrite          reduce using rule 64 (ESTATUTO -> CICLO .)
    left_par        reduce using rule 64 (ESTATUTO -> CICLO .)
    id              reduce using rule 64 (ESTATUTO -> CICLO .)
    return          reduce using rule 64 (ESTATUTO -> CICLO .)


state 81

    (74) LECTURA -> cread . left_par id nt_leer right_par semicolon

    left_par        shift and go to state 107


state 82

    (65) ESTATUTO -> LECTURA .

    right_cb        reduce using rule 65 (ESTATUTO -> LECTURA .)
    list            reduce using rule 65 (ESTATUTO -> LECTURA .)
    var             reduce using rule 65 (ESTATUTO -> LECTURA .)
    if              reduce using rule 65 (ESTATUTO -> LECTURA .)
    while           reduce using rule 65 (ESTATUTO -> LECTURA .)
    cread           reduce using rule 65 (ESTATUTO -> LECTURA .)
    cwrite          reduce using rule 65 (ESTATUTO -> LECTURA .)
    left_par        reduce using rule 65 (ESTATUTO -> LECTURA .)
    id              reduce using rule 65 (ESTATUTO -> LECTURA .)
    return          reduce using rule 65 (ESTATUTO -> LECTURA .)


state 83

    (68) CONDICION -> if . CONDICION_ELSEIF CONDICION_ELSE
    (69) CONDICION_ELSEIF -> . left_par EXPRESION right_par CUERPO
    (70) CONDICION_ELSEIF -> . CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO

    left_par        shift and go to state 108

    CONDICION_ELSEIF               shift and go to state 109

state 84

    (62) ESTATUTO -> ASIGNACION .

    right_cb        reduce using rule 62 (ESTATUTO -> ASIGNACION .)
    list            reduce using rule 62 (ESTATUTO -> ASIGNACION .)
    var             reduce using rule 62 (ESTATUTO -> ASIGNACION .)
    if              reduce using rule 62 (ESTATUTO -> ASIGNACION .)
    while           reduce using rule 62 (ESTATUTO -> ASIGNACION .)
    cread           reduce using rule 62 (ESTATUTO -> ASIGNACION .)
    cwrite          reduce using rule 62 (ESTATUTO -> ASIGNACION .)
    left_par        reduce using rule 62 (ESTATUTO -> ASIGNACION .)
    id              reduce using rule 62 (ESTATUTO -> ASIGNACION .)
    return          reduce using rule 62 (ESTATUTO -> ASIGNACION .)


state 85

    (36) CUERPO_ESTATUTO -> ESTATUTO .

    right_cb        reduce using rule 36 (CUERPO_ESTATUTO -> ESTATUTO .)
    list            reduce using rule 36 (CUERPO_ESTATUTO -> ESTATUTO .)
    var             reduce using rule 36 (CUERPO_ESTATUTO -> ESTATUTO .)
    if              reduce using rule 36 (CUERPO_ESTATUTO -> ESTATUTO .)
    while           reduce using rule 36 (CUERPO_ESTATUTO -> ESTATUTO .)
    cread           reduce using rule 36 (CUERPO_ESTATUTO -> ESTATUTO .)
    cwrite          reduce using rule 36 (CUERPO_ESTATUTO -> ESTATUTO .)
    left_par        reduce using rule 36 (CUERPO_ESTATUTO -> ESTATUTO .)
    id              reduce using rule 36 (CUERPO_ESTATUTO -> ESTATUTO .)


state 86

    (134) ASIGNACION_AUX -> id . nt_pushPilaO
    (116) LISTA -> id . left_sb EXP right_sb
    (136) nt_pushPilaO -> . empty
    (139) empty -> .

    left_sb         shift and go to state 110
    equals          reduce using rule 139 (empty -> .)

    nt_pushPilaO                   shift and go to state 111
    empty                          shift and go to state 112

state 87

    (76) ESCRITURA -> cwrite . left_par EXPRESION nt_escribir right_par semicolon

    left_par        shift and go to state 113


state 88

    (132) ASIGNACION -> ASIGNACION_AUX . equals nt_pushPOper EXPRESION nt_checaEquals semicolon

    equals          shift and go to state 114


state 89

    (66) ESTATUTO -> ESCRITURA .

    right_cb        reduce using rule 66 (ESTATUTO -> ESCRITURA .)
    list            reduce using rule 66 (ESTATUTO -> ESCRITURA .)
    var             reduce using rule 66 (ESTATUTO -> ESCRITURA .)
    if              reduce using rule 66 (ESTATUTO -> ESCRITURA .)
    while           reduce using rule 66 (ESTATUTO -> ESCRITURA .)
    cread           reduce using rule 66 (ESTATUTO -> ESCRITURA .)
    cwrite          reduce using rule 66 (ESTATUTO -> ESCRITURA .)
    left_par        reduce using rule 66 (ESTATUTO -> ESCRITURA .)
    id              reduce using rule 66 (ESTATUTO -> ESCRITURA .)
    return          reduce using rule 66 (ESTATUTO -> ESCRITURA .)


state 90

    (37) CUERPO_ESTATUTO -> empty .

    right_cb        reduce using rule 37 (CUERPO_ESTATUTO -> empty .)
    list            reduce using rule 37 (CUERPO_ESTATUTO -> empty .)
    var             reduce using rule 37 (CUERPO_ESTATUTO -> empty .)
    if              reduce using rule 37 (CUERPO_ESTATUTO -> empty .)
    while           reduce using rule 37 (CUERPO_ESTATUTO -> empty .)
    cread           reduce using rule 37 (CUERPO_ESTATUTO -> empty .)
    cwrite          reduce using rule 37 (CUERPO_ESTATUTO -> empty .)
    left_par        reduce using rule 37 (CUERPO_ESTATUTO -> empty .)
    id              reduce using rule 37 (CUERPO_ESTATUTO -> empty .)


state 91

    (67) ESTATUTO -> LLAMADA .

    right_cb        reduce using rule 67 (ESTATUTO -> LLAMADA .)
    list            reduce using rule 67 (ESTATUTO -> LLAMADA .)
    var             reduce using rule 67 (ESTATUTO -> LLAMADA .)
    if              reduce using rule 67 (ESTATUTO -> LLAMADA .)
    while           reduce using rule 67 (ESTATUTO -> LLAMADA .)
    cread           reduce using rule 67 (ESTATUTO -> LLAMADA .)
    cwrite          reduce using rule 67 (ESTATUTO -> LLAMADA .)
    left_par        reduce using rule 67 (ESTATUTO -> LLAMADA .)
    id              reduce using rule 67 (ESTATUTO -> LLAMADA .)
    return          reduce using rule 67 (ESTATUTO -> LLAMADA .)


state 92

    (63) ESTATUTO -> CONDICION .

    right_cb        reduce using rule 63 (ESTATUTO -> CONDICION .)
    list            reduce using rule 63 (ESTATUTO -> CONDICION .)
    var             reduce using rule 63 (ESTATUTO -> CONDICION .)
    if              reduce using rule 63 (ESTATUTO -> CONDICION .)
    while           reduce using rule 63 (ESTATUTO -> CONDICION .)
    cread           reduce using rule 63 (ESTATUTO -> CONDICION .)
    cwrite          reduce using rule 63 (ESTATUTO -> CONDICION .)
    left_par        reduce using rule 63 (ESTATUTO -> CONDICION .)
    id              reduce using rule 63 (ESTATUTO -> CONDICION .)
    return          reduce using rule 63 (ESTATUTO -> CONDICION .)


state 93

    (78) LLAMADA -> left_par . LLAMADA_EXPRESION right_par semicolon
    (79) LLAMADA_EXPRESION -> . EXPRESION
    (80) LLAMADA_EXPRESION -> . LLAMADA_EXPRESION comma EXPRESION
    (81) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (83) EXPRESION_NOT -> . not nt_pushPOper
    (84) EXPRESION_NOT -> . empty
    (139) empty -> .

    not             shift and go to state 118
    left_par        reduce using rule 139 (empty -> .)
    id              reduce using rule 139 (empty -> .)
    plus            reduce using rule 139 (empty -> .)
    minus           reduce using rule 139 (empty -> .)
    true            reduce using rule 139 (empty -> .)
    false           reduce using rule 139 (empty -> .)
    cteString       reduce using rule 139 (empty -> .)
    cteInt          reduce using rule 139 (empty -> .)
    cteFloat        reduce using rule 139 (empty -> .)

    EXPRESION                      shift and go to state 115
    EXPRESION_NOT                  shift and go to state 116
    LLAMADA_EXPRESION              shift and go to state 117
    empty                          shift and go to state 119

state 94

    (32) CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .

    right_cb        reduce using rule 32 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    list            reduce using rule 32 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    var             reduce using rule 32 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    if              reduce using rule 32 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    while           reduce using rule 32 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    cread           reduce using rule 32 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    cwrite          reduce using rule 32 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    left_par        reduce using rule 32 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    id              reduce using rule 32 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)


state 95

    (73) CICLO -> while . left_par EXPRESION right_par CUERPO

    left_par        shift and go to state 120


state 96

    (135) ASIGNACION_AUX -> LISTA .

    equals          reduce using rule 135 (ASIGNACION_AUX -> LISTA .)


state 97

    (33) CUERPO_AUX -> CUERPO_AUX CUERPO_VARS . CUERPO_ESTATUTO
    (36) CUERPO_ESTATUTO -> . ESTATUTO
    (37) CUERPO_ESTATUTO -> . empty
    (62) ESTATUTO -> . ASIGNACION
    (63) ESTATUTO -> . CONDICION
    (64) ESTATUTO -> . CICLO
    (65) ESTATUTO -> . LECTURA
    (66) ESTATUTO -> . ESCRITURA
    (67) ESTATUTO -> . LLAMADA
    (139) empty -> .
    (132) ASIGNACION -> . ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon
    (68) CONDICION -> . if CONDICION_ELSEIF CONDICION_ELSE
    (73) CICLO -> . while left_par EXPRESION right_par CUERPO
    (74) LECTURA -> . cread left_par id nt_leer right_par semicolon
    (76) ESCRITURA -> . cwrite left_par EXPRESION nt_escribir right_par semicolon
    (78) LLAMADA -> . left_par LLAMADA_EXPRESION right_par semicolon
    (134) ASIGNACION_AUX -> . id nt_pushPilaO
    (135) ASIGNACION_AUX -> . LISTA
    (116) LISTA -> . id left_sb EXP right_sb

  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for cread resolved as shift
  ! shift/reduce conflict for cwrite resolved as shift
  ! shift/reduce conflict for left_par resolved as shift
  ! shift/reduce conflict for id resolved as shift
    right_cb        reduce using rule 139 (empty -> .)
    list            reduce using rule 139 (empty -> .)
    var             reduce using rule 139 (empty -> .)
    if              shift and go to state 83
    while           shift and go to state 95
    cread           shift and go to state 81
    cwrite          shift and go to state 87
    left_par        shift and go to state 93
    id              shift and go to state 86

  ! if              [ reduce using rule 139 (empty -> .) ]
  ! while           [ reduce using rule 139 (empty -> .) ]
  ! cread           [ reduce using rule 139 (empty -> .) ]
  ! cwrite          [ reduce using rule 139 (empty -> .) ]
  ! left_par        [ reduce using rule 139 (empty -> .) ]
  ! id              [ reduce using rule 139 (empty -> .) ]

    CICLO                          shift and go to state 80
    LECTURA                        shift and go to state 82
    ESCRITURA                      shift and go to state 89
    ASIGNACION                     shift and go to state 84
    ESTATUTO                       shift and go to state 85
    ASIGNACION_AUX                 shift and go to state 88
    empty                          shift and go to state 90
    LLAMADA                        shift and go to state 91
    CONDICION                      shift and go to state 92
    CUERPO_ESTATUTO                shift and go to state 121
    LISTA                          shift and go to state 96

state 98

    (31) CUERPO -> left_cb CUERPO_AUX right_cb .

    $end            reduce using rule 31 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    elseif          reduce using rule 31 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    else            reduce using rule 31 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    right_cb        reduce using rule 31 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    list            reduce using rule 31 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    var             reduce using rule 31 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    if              reduce using rule 31 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    while           reduce using rule 31 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    cread           reduce using rule 31 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    cwrite          reduce using rule 31 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    left_par        reduce using rule 31 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    id              reduce using rule 31 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    return          reduce using rule 31 (CUERPO -> left_cb CUERPO_AUX right_cb .)


state 99

    (55) FUNC_PARA -> TIPO . id nt_agregarParametro

    id              shift and go to state 122


state 100

    (51) FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA . right_par CUERPORETORNO nt_cambiarScope
    (56) FUNC_PARA -> FUNC_PARA . comma TIPO id nt_agregarParametro

    right_par       shift and go to state 123
    comma           shift and go to state 124


state 101

    (58) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA . right_par left_cb CUERPOFUNC right_cb
    (61) VOIDFUNC_PARA -> VOIDFUNC_PARA . comma TIPO id nt_agregarParametro

    right_par       shift and go to state 125
    comma           shift and go to state 126


state 102

    (60) VOIDFUNC_PARA -> TIPO . id nt_agregarParametro

    id              shift and go to state 127


state 103

    (25) VARS_VAR_AUX -> VARS_VAR_AUX comma id nt_agregarId nt_agregarDicVar .

    semicolon       reduce using rule 25 (VARS_VAR_AUX -> VARS_VAR_AUX comma id nt_agregarId nt_agregarDicVar .)
    comma           reduce using rule 25 (VARS_VAR_AUX -> VARS_VAR_AUX comma id nt_agregarId nt_agregarDicVar .)


state 104

    (18) VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb . cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    cteInt          shift and go to state 128


state 105

    (17) VARS_LIST_AUX -> id nt_agregarId left_sb cteInt nt_agregarCteLista . right_sb nt_agregarDicVar

    right_sb        shift and go to state 129


state 106

    (20) nt_agregarCteLista -> empty .

    right_sb        reduce using rule 20 (nt_agregarCteLista -> empty .)


state 107

    (74) LECTURA -> cread left_par . id nt_leer right_par semicolon

    id              shift and go to state 130


state 108

    (69) CONDICION_ELSEIF -> left_par . EXPRESION right_par CUERPO
    (81) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (83) EXPRESION_NOT -> . not nt_pushPOper
    (84) EXPRESION_NOT -> . empty
    (139) empty -> .

    not             shift and go to state 118
    left_par        reduce using rule 139 (empty -> .)
    id              reduce using rule 139 (empty -> .)
    plus            reduce using rule 139 (empty -> .)
    minus           reduce using rule 139 (empty -> .)
    true            reduce using rule 139 (empty -> .)
    false           reduce using rule 139 (empty -> .)
    cteString       reduce using rule 139 (empty -> .)
    cteInt          reduce using rule 139 (empty -> .)
    cteFloat        reduce using rule 139 (empty -> .)

    EXPRESION                      shift and go to state 131
    EXPRESION_NOT                  shift and go to state 116
    empty                          shift and go to state 119

state 109

    (68) CONDICION -> if CONDICION_ELSEIF . CONDICION_ELSE
    (70) CONDICION_ELSEIF -> CONDICION_ELSEIF . elseif left_par EXPRESION right_par CUERPO
    (71) CONDICION_ELSE -> . else CUERPO
    (72) CONDICION_ELSE -> . empty
    (139) empty -> .

    elseif          shift and go to state 134
    else            shift and go to state 133
    right_cb        reduce using rule 139 (empty -> .)
    list            reduce using rule 139 (empty -> .)
    var             reduce using rule 139 (empty -> .)
    if              reduce using rule 139 (empty -> .)
    while           reduce using rule 139 (empty -> .)
    cread           reduce using rule 139 (empty -> .)
    cwrite          reduce using rule 139 (empty -> .)
    left_par        reduce using rule 139 (empty -> .)
    id              reduce using rule 139 (empty -> .)
    return          reduce using rule 139 (empty -> .)

    CONDICION_ELSE                 shift and go to state 132
    empty                          shift and go to state 135

state 110

    (116) LISTA -> id left_sb . EXP right_sb
    (97) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (102) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (107) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (108) FACTOR -> . CONSTANTE
    (109) FACTOR -> . LISTA
    (110) FACTOR -> . FACTOR_AUX
    (117) CONSTANTE -> . NUMERICA
    (118) CONSTANTE -> . BOOLEANA
    (119) CONSTANTE -> . STRINGS
    (116) LISTA -> . id left_sb EXP right_sb
    (111) FACTOR_AUX -> . id nt_pushPilaO
    (112) FACTOR_AUX -> . id LLAMADA_F
    (120) NUMERICA -> . NUMERICA_AUX
    (121) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (122) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (129) BOOLEANA -> . true
    (130) BOOLEANA -> . false
    (131) STRINGS -> . cteString
    (125) NUMERICA_AUX -> . cteInt nt_pushInt
    (126) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 145
    id              shift and go to state 140
    plus            shift and go to state 141
    minus           shift and go to state 154
    true            shift and go to state 146
    false           shift and go to state 136
    cteString       shift and go to state 144
    cteInt          shift and go to state 149
    cteFloat        shift and go to state 138

    BOOLEANA                       shift and go to state 139
    EXP                            shift and go to state 137
    FACTOR_AUX                     shift and go to state 142
    NUMERICA_AUX                   shift and go to state 150
    TERMINO                        shift and go to state 143
    STRINGS                        shift and go to state 147
    CONSTANTE                      shift and go to state 148
    NUMERICA                       shift and go to state 151
    FACTOR                         shift and go to state 152
    LISTA                          shift and go to state 153

state 111

    (134) ASIGNACION_AUX -> id nt_pushPilaO .

    equals          reduce using rule 134 (ASIGNACION_AUX -> id nt_pushPilaO .)


state 112

    (136) nt_pushPilaO -> empty .

    equals          reduce using rule 136 (nt_pushPilaO -> empty .)
    multiply        reduce using rule 136 (nt_pushPilaO -> empty .)
    divide          reduce using rule 136 (nt_pushPilaO -> empty .)
    plus            reduce using rule 136 (nt_pushPilaO -> empty .)
    minus           reduce using rule 136 (nt_pushPilaO -> empty .)
    right_sb        reduce using rule 136 (nt_pushPilaO -> empty .)
    lt              reduce using rule 136 (nt_pushPilaO -> empty .)
    gt              reduce using rule 136 (nt_pushPilaO -> empty .)
    ne              reduce using rule 136 (nt_pushPilaO -> empty .)
    ge              reduce using rule 136 (nt_pushPilaO -> empty .)
    le              reduce using rule 136 (nt_pushPilaO -> empty .)
    et              reduce using rule 136 (nt_pushPilaO -> empty .)
    and             reduce using rule 136 (nt_pushPilaO -> empty .)
    or              reduce using rule 136 (nt_pushPilaO -> empty .)
    right_par       reduce using rule 136 (nt_pushPilaO -> empty .)
    comma           reduce using rule 136 (nt_pushPilaO -> empty .)
    semicolon       reduce using rule 136 (nt_pushPilaO -> empty .)


state 113

    (76) ESCRITURA -> cwrite left_par . EXPRESION nt_escribir right_par semicolon
    (81) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (83) EXPRESION_NOT -> . not nt_pushPOper
    (84) EXPRESION_NOT -> . empty
    (139) empty -> .

    not             shift and go to state 118
    left_par        reduce using rule 139 (empty -> .)
    id              reduce using rule 139 (empty -> .)
    plus            reduce using rule 139 (empty -> .)
    minus           reduce using rule 139 (empty -> .)
    true            reduce using rule 139 (empty -> .)
    false           reduce using rule 139 (empty -> .)
    cteString       reduce using rule 139 (empty -> .)
    cteInt          reduce using rule 139 (empty -> .)
    cteFloat        reduce using rule 139 (empty -> .)

    EXPRESION                      shift and go to state 155
    EXPRESION_NOT                  shift and go to state 116
    empty                          shift and go to state 119

state 114

    (132) ASIGNACION -> ASIGNACION_AUX equals . nt_pushPOper EXPRESION nt_checaEquals semicolon
    (137) nt_pushPOper -> . empty
    (139) empty -> .

    not             reduce using rule 139 (empty -> .)
    left_par        reduce using rule 139 (empty -> .)
    id              reduce using rule 139 (empty -> .)
    plus            reduce using rule 139 (empty -> .)
    minus           reduce using rule 139 (empty -> .)
    true            reduce using rule 139 (empty -> .)
    false           reduce using rule 139 (empty -> .)
    cteString       reduce using rule 139 (empty -> .)
    cteInt          reduce using rule 139 (empty -> .)
    cteFloat        reduce using rule 139 (empty -> .)

    empty                          shift and go to state 156
    nt_pushPOper                   shift and go to state 157

state 115

    (79) LLAMADA_EXPRESION -> EXPRESION .

    right_par       reduce using rule 79 (LLAMADA_EXPRESION -> EXPRESION .)
    comma           reduce using rule 79 (LLAMADA_EXPRESION -> EXPRESION .)


state 116

    (81) EXPRESION -> EXPRESION_NOT . EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (88) EXPRESIONLOGICA -> . EXP EXPRESIONLOGICA_AUX
    (97) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (102) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (107) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (108) FACTOR -> . CONSTANTE
    (109) FACTOR -> . LISTA
    (110) FACTOR -> . FACTOR_AUX
    (117) CONSTANTE -> . NUMERICA
    (118) CONSTANTE -> . BOOLEANA
    (119) CONSTANTE -> . STRINGS
    (116) LISTA -> . id left_sb EXP right_sb
    (111) FACTOR_AUX -> . id nt_pushPilaO
    (112) FACTOR_AUX -> . id LLAMADA_F
    (120) NUMERICA -> . NUMERICA_AUX
    (121) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (122) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (129) BOOLEANA -> . true
    (130) BOOLEANA -> . false
    (131) STRINGS -> . cteString
    (125) NUMERICA_AUX -> . cteInt nt_pushInt
    (126) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 145
    id              shift and go to state 140
    plus            shift and go to state 141
    minus           shift and go to state 154
    true            shift and go to state 146
    false           shift and go to state 136
    cteString       shift and go to state 144
    cteInt          shift and go to state 149
    cteFloat        shift and go to state 138

    EXPRESIONLOGICA                shift and go to state 158
    BOOLEANA                       shift and go to state 139
    EXP                            shift and go to state 159
    FACTOR_AUX                     shift and go to state 142
    TERMINO                        shift and go to state 143
    STRINGS                        shift and go to state 147
    CONSTANTE                      shift and go to state 148
    NUMERICA_AUX                   shift and go to state 150
    NUMERICA                       shift and go to state 151
    FACTOR                         shift and go to state 152
    LISTA                          shift and go to state 153

state 117

    (78) LLAMADA -> left_par LLAMADA_EXPRESION . right_par semicolon
    (80) LLAMADA_EXPRESION -> LLAMADA_EXPRESION . comma EXPRESION

    right_par       shift and go to state 161
    comma           shift and go to state 160


state 118

    (83) EXPRESION_NOT -> not . nt_pushPOper
    (137) nt_pushPOper -> . empty
    (139) empty -> .

    left_par        reduce using rule 139 (empty -> .)
    id              reduce using rule 139 (empty -> .)
    plus            reduce using rule 139 (empty -> .)
    minus           reduce using rule 139 (empty -> .)
    true            reduce using rule 139 (empty -> .)
    false           reduce using rule 139 (empty -> .)
    cteString       reduce using rule 139 (empty -> .)
    cteInt          reduce using rule 139 (empty -> .)
    cteFloat        reduce using rule 139 (empty -> .)

    empty                          shift and go to state 156
    nt_pushPOper                   shift and go to state 162

state 119

    (84) EXPRESION_NOT -> empty .

    left_par        reduce using rule 84 (EXPRESION_NOT -> empty .)
    id              reduce using rule 84 (EXPRESION_NOT -> empty .)
    plus            reduce using rule 84 (EXPRESION_NOT -> empty .)
    minus           reduce using rule 84 (EXPRESION_NOT -> empty .)
    true            reduce using rule 84 (EXPRESION_NOT -> empty .)
    false           reduce using rule 84 (EXPRESION_NOT -> empty .)
    cteString       reduce using rule 84 (EXPRESION_NOT -> empty .)
    cteInt          reduce using rule 84 (EXPRESION_NOT -> empty .)
    cteFloat        reduce using rule 84 (EXPRESION_NOT -> empty .)


state 120

    (73) CICLO -> while left_par . EXPRESION right_par CUERPO
    (81) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (83) EXPRESION_NOT -> . not nt_pushPOper
    (84) EXPRESION_NOT -> . empty
    (139) empty -> .

    not             shift and go to state 118
    left_par        reduce using rule 139 (empty -> .)
    id              reduce using rule 139 (empty -> .)
    plus            reduce using rule 139 (empty -> .)
    minus           reduce using rule 139 (empty -> .)
    true            reduce using rule 139 (empty -> .)
    false           reduce using rule 139 (empty -> .)
    cteString       reduce using rule 139 (empty -> .)
    cteInt          reduce using rule 139 (empty -> .)
    cteFloat        reduce using rule 139 (empty -> .)

    EXPRESION                      shift and go to state 163
    EXPRESION_NOT                  shift and go to state 116
    empty                          shift and go to state 119

state 121

    (33) CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .

    right_cb        reduce using rule 33 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    list            reduce using rule 33 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    var             reduce using rule 33 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    if              reduce using rule 33 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    while           reduce using rule 33 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    cread           reduce using rule 33 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    cwrite          reduce using rule 33 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    left_par        reduce using rule 33 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    id              reduce using rule 33 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)


state 122

    (55) FUNC_PARA -> TIPO id . nt_agregarParametro
    (57) nt_agregarParametro -> . empty
    (139) empty -> .

    right_par       reduce using rule 139 (empty -> .)
    comma           reduce using rule 139 (empty -> .)

    empty                          shift and go to state 164
    nt_agregarParametro            shift and go to state 165

state 123

    (51) FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par . CUERPORETORNO nt_cambiarScope
    (45) CUERPORETORNO -> . left_cb CUERPORETORNO_AUX right_cb

    left_cb         shift and go to state 167

    CUERPORETORNO                  shift and go to state 166

state 124

    (56) FUNC_PARA -> FUNC_PARA comma . TIPO id nt_agregarParametro
    (26) TIPO -> . int nt_cambioTipoActual
    (27) TIPO -> . float nt_cambioTipoActual
    (28) TIPO -> . bool nt_cambioTipoActual
    (29) TIPO -> . string nt_cambioTipoActual

    int             shift and go to state 22
    float           shift and go to state 23
    bool            shift and go to state 26
    string          shift and go to state 29

    TIPO                           shift and go to state 168

state 125

    (58) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par . left_cb CUERPOFUNC right_cb

    left_cb         shift and go to state 169


state 126

    (61) VOIDFUNC_PARA -> VOIDFUNC_PARA comma . TIPO id nt_agregarParametro
    (26) TIPO -> . int nt_cambioTipoActual
    (27) TIPO -> . float nt_cambioTipoActual
    (28) TIPO -> . bool nt_cambioTipoActual
    (29) TIPO -> . string nt_cambioTipoActual

    int             shift and go to state 22
    float           shift and go to state 23
    bool            shift and go to state 26
    string          shift and go to state 29

    TIPO                           shift and go to state 170

state 127

    (60) VOIDFUNC_PARA -> TIPO id . nt_agregarParametro
    (57) nt_agregarParametro -> . empty
    (139) empty -> .

    right_par       reduce using rule 139 (empty -> .)
    comma           reduce using rule 139 (empty -> .)

    empty                          shift and go to state 164
    nt_agregarParametro            shift and go to state 171

state 128

    (18) VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt . nt_agregarCteLista right_sb nt_agregarDicVar
    (20) nt_agregarCteLista -> . empty
    (139) empty -> .

    right_sb        reduce using rule 139 (empty -> .)

    nt_agregarCteLista             shift and go to state 172
    empty                          shift and go to state 106

state 129

    (17) VARS_LIST_AUX -> id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb . nt_agregarDicVar
    (21) nt_agregarDicVar -> . empty
    (139) empty -> .

    semicolon       reduce using rule 139 (empty -> .)
    comma           reduce using rule 139 (empty -> .)

    nt_agregarDicVar               shift and go to state 173
    empty                          shift and go to state 68

state 130

    (74) LECTURA -> cread left_par id . nt_leer right_par semicolon
    (75) nt_leer -> . empty
    (139) empty -> .

    right_par       reduce using rule 139 (empty -> .)

    empty                          shift and go to state 175
    nt_leer                        shift and go to state 174

state 131

    (69) CONDICION_ELSEIF -> left_par EXPRESION . right_par CUERPO

    right_par       shift and go to state 176


state 132

    (68) CONDICION -> if CONDICION_ELSEIF CONDICION_ELSE .

    list            reduce using rule 68 (CONDICION -> if CONDICION_ELSEIF CONDICION_ELSE .)
    var             reduce using rule 68 (CONDICION -> if CONDICION_ELSEIF CONDICION_ELSE .)
    if              reduce using rule 68 (CONDICION -> if CONDICION_ELSEIF CONDICION_ELSE .)
    while           reduce using rule 68 (CONDICION -> if CONDICION_ELSEIF CONDICION_ELSE .)
    cread           reduce using rule 68 (CONDICION -> if CONDICION_ELSEIF CONDICION_ELSE .)
    cwrite          reduce using rule 68 (CONDICION -> if CONDICION_ELSEIF CONDICION_ELSE .)
    left_par        reduce using rule 68 (CONDICION -> if CONDICION_ELSEIF CONDICION_ELSE .)
    id              reduce using rule 68 (CONDICION -> if CONDICION_ELSEIF CONDICION_ELSE .)
    return          reduce using rule 68 (CONDICION -> if CONDICION_ELSEIF CONDICION_ELSE .)
    right_cb        reduce using rule 68 (CONDICION -> if CONDICION_ELSEIF CONDICION_ELSE .)


state 133

    (71) CONDICION_ELSE -> else . CUERPO
    (31) CUERPO -> . left_cb CUERPO_AUX right_cb

    left_cb         shift and go to state 62

    CUERPO                         shift and go to state 177

state 134

    (70) CONDICION_ELSEIF -> CONDICION_ELSEIF elseif . left_par EXPRESION right_par CUERPO

    left_par        shift and go to state 178


state 135

    (72) CONDICION_ELSE -> empty .

    right_cb        reduce using rule 72 (CONDICION_ELSE -> empty .)
    list            reduce using rule 72 (CONDICION_ELSE -> empty .)
    var             reduce using rule 72 (CONDICION_ELSE -> empty .)
    if              reduce using rule 72 (CONDICION_ELSE -> empty .)
    while           reduce using rule 72 (CONDICION_ELSE -> empty .)
    cread           reduce using rule 72 (CONDICION_ELSE -> empty .)
    cwrite          reduce using rule 72 (CONDICION_ELSE -> empty .)
    left_par        reduce using rule 72 (CONDICION_ELSE -> empty .)
    id              reduce using rule 72 (CONDICION_ELSE -> empty .)
    return          reduce using rule 72 (CONDICION_ELSE -> empty .)


state 136

    (130) BOOLEANA -> false .

    multiply        reduce using rule 130 (BOOLEANA -> false .)
    divide          reduce using rule 130 (BOOLEANA -> false .)
    plus            reduce using rule 130 (BOOLEANA -> false .)
    minus           reduce using rule 130 (BOOLEANA -> false .)
    and             reduce using rule 130 (BOOLEANA -> false .)
    or              reduce using rule 130 (BOOLEANA -> false .)
    right_par       reduce using rule 130 (BOOLEANA -> false .)
    comma           reduce using rule 130 (BOOLEANA -> false .)
    semicolon       reduce using rule 130 (BOOLEANA -> false .)
    right_sb        reduce using rule 130 (BOOLEANA -> false .)
    lt              reduce using rule 130 (BOOLEANA -> false .)
    gt              reduce using rule 130 (BOOLEANA -> false .)
    ne              reduce using rule 130 (BOOLEANA -> false .)
    ge              reduce using rule 130 (BOOLEANA -> false .)
    le              reduce using rule 130 (BOOLEANA -> false .)
    et              reduce using rule 130 (BOOLEANA -> false .)


state 137

    (116) LISTA -> id left_sb EXP . right_sb

    right_sb        shift and go to state 179


state 138

    (126) NUMERICA_AUX -> cteFloat . nt_pushFloat
    (128) nt_pushFloat -> . empty
    (139) empty -> .

    multiply        reduce using rule 139 (empty -> .)
    divide          reduce using rule 139 (empty -> .)
    plus            reduce using rule 139 (empty -> .)
    minus           reduce using rule 139 (empty -> .)
    right_sb        reduce using rule 139 (empty -> .)
    lt              reduce using rule 139 (empty -> .)
    gt              reduce using rule 139 (empty -> .)
    ne              reduce using rule 139 (empty -> .)
    ge              reduce using rule 139 (empty -> .)
    le              reduce using rule 139 (empty -> .)
    et              reduce using rule 139 (empty -> .)
    and             reduce using rule 139 (empty -> .)
    or              reduce using rule 139 (empty -> .)
    right_par       reduce using rule 139 (empty -> .)
    comma           reduce using rule 139 (empty -> .)
    semicolon       reduce using rule 139 (empty -> .)

    nt_pushFloat                   shift and go to state 180
    empty                          shift and go to state 181

state 139

    (118) CONSTANTE -> BOOLEANA .

    multiply        reduce using rule 118 (CONSTANTE -> BOOLEANA .)
    divide          reduce using rule 118 (CONSTANTE -> BOOLEANA .)
    plus            reduce using rule 118 (CONSTANTE -> BOOLEANA .)
    minus           reduce using rule 118 (CONSTANTE -> BOOLEANA .)
    and             reduce using rule 118 (CONSTANTE -> BOOLEANA .)
    or              reduce using rule 118 (CONSTANTE -> BOOLEANA .)
    right_par       reduce using rule 118 (CONSTANTE -> BOOLEANA .)
    comma           reduce using rule 118 (CONSTANTE -> BOOLEANA .)
    semicolon       reduce using rule 118 (CONSTANTE -> BOOLEANA .)
    right_sb        reduce using rule 118 (CONSTANTE -> BOOLEANA .)
    lt              reduce using rule 118 (CONSTANTE -> BOOLEANA .)
    gt              reduce using rule 118 (CONSTANTE -> BOOLEANA .)
    ne              reduce using rule 118 (CONSTANTE -> BOOLEANA .)
    ge              reduce using rule 118 (CONSTANTE -> BOOLEANA .)
    le              reduce using rule 118 (CONSTANTE -> BOOLEANA .)
    et              reduce using rule 118 (CONSTANTE -> BOOLEANA .)


state 140

    (116) LISTA -> id . left_sb EXP right_sb
    (111) FACTOR_AUX -> id . nt_pushPilaO
    (112) FACTOR_AUX -> id . LLAMADA_F
    (136) nt_pushPilaO -> . empty
    (113) LLAMADA_F -> . left_par EXPRESION LLAMADAF_AUX right_par
    (139) empty -> .

    left_sb         shift and go to state 110
    left_par        shift and go to state 183
    multiply        reduce using rule 139 (empty -> .)
    divide          reduce using rule 139 (empty -> .)
    plus            reduce using rule 139 (empty -> .)
    minus           reduce using rule 139 (empty -> .)
    right_sb        reduce using rule 139 (empty -> .)
    lt              reduce using rule 139 (empty -> .)
    gt              reduce using rule 139 (empty -> .)
    ne              reduce using rule 139 (empty -> .)
    ge              reduce using rule 139 (empty -> .)
    le              reduce using rule 139 (empty -> .)
    et              reduce using rule 139 (empty -> .)
    and             reduce using rule 139 (empty -> .)
    or              reduce using rule 139 (empty -> .)
    right_par       reduce using rule 139 (empty -> .)
    comma           reduce using rule 139 (empty -> .)
    semicolon       reduce using rule 139 (empty -> .)

    nt_pushPilaO                   shift and go to state 182
    LLAMADA_F                      shift and go to state 184
    empty                          shift and go to state 112

state 141

    (121) NUMERICA -> plus . nt_sigMas NUMERICA_AUX
    (123) nt_sigMas -> . empty
    (139) empty -> .

    cteInt          reduce using rule 139 (empty -> .)
    cteFloat        reduce using rule 139 (empty -> .)

    nt_sigMas                      shift and go to state 185
    empty                          shift and go to state 186

state 142

    (110) FACTOR -> FACTOR_AUX .

    multiply        reduce using rule 110 (FACTOR -> FACTOR_AUX .)
    divide          reduce using rule 110 (FACTOR -> FACTOR_AUX .)
    plus            reduce using rule 110 (FACTOR -> FACTOR_AUX .)
    minus           reduce using rule 110 (FACTOR -> FACTOR_AUX .)
    and             reduce using rule 110 (FACTOR -> FACTOR_AUX .)
    or              reduce using rule 110 (FACTOR -> FACTOR_AUX .)
    right_par       reduce using rule 110 (FACTOR -> FACTOR_AUX .)
    comma           reduce using rule 110 (FACTOR -> FACTOR_AUX .)
    semicolon       reduce using rule 110 (FACTOR -> FACTOR_AUX .)
    right_sb        reduce using rule 110 (FACTOR -> FACTOR_AUX .)
    lt              reduce using rule 110 (FACTOR -> FACTOR_AUX .)
    gt              reduce using rule 110 (FACTOR -> FACTOR_AUX .)
    ne              reduce using rule 110 (FACTOR -> FACTOR_AUX .)
    ge              reduce using rule 110 (FACTOR -> FACTOR_AUX .)
    le              reduce using rule 110 (FACTOR -> FACTOR_AUX .)
    et              reduce using rule 110 (FACTOR -> FACTOR_AUX .)


state 143

    (97) EXP -> TERMINO . nt_checar_sumas EXP_AUX
    (98) nt_checar_sumas -> . empty
    (139) empty -> .

    plus            reduce using rule 139 (empty -> .)
    minus           reduce using rule 139 (empty -> .)
    right_sb        reduce using rule 139 (empty -> .)
    lt              reduce using rule 139 (empty -> .)
    gt              reduce using rule 139 (empty -> .)
    ne              reduce using rule 139 (empty -> .)
    ge              reduce using rule 139 (empty -> .)
    le              reduce using rule 139 (empty -> .)
    et              reduce using rule 139 (empty -> .)
    and             reduce using rule 139 (empty -> .)
    or              reduce using rule 139 (empty -> .)
    right_par       reduce using rule 139 (empty -> .)
    comma           reduce using rule 139 (empty -> .)
    semicolon       reduce using rule 139 (empty -> .)

    empty                          shift and go to state 187
    nt_checar_sumas                shift and go to state 188

state 144

    (131) STRINGS -> cteString .

    multiply        reduce using rule 131 (STRINGS -> cteString .)
    divide          reduce using rule 131 (STRINGS -> cteString .)
    plus            reduce using rule 131 (STRINGS -> cteString .)
    minus           reduce using rule 131 (STRINGS -> cteString .)
    and             reduce using rule 131 (STRINGS -> cteString .)
    or              reduce using rule 131 (STRINGS -> cteString .)
    right_par       reduce using rule 131 (STRINGS -> cteString .)
    comma           reduce using rule 131 (STRINGS -> cteString .)
    semicolon       reduce using rule 131 (STRINGS -> cteString .)
    right_sb        reduce using rule 131 (STRINGS -> cteString .)
    lt              reduce using rule 131 (STRINGS -> cteString .)
    gt              reduce using rule 131 (STRINGS -> cteString .)
    ne              reduce using rule 131 (STRINGS -> cteString .)
    ge              reduce using rule 131 (STRINGS -> cteString .)
    le              reduce using rule 131 (STRINGS -> cteString .)
    et              reduce using rule 131 (STRINGS -> cteString .)


state 145

    (107) FACTOR -> left_par . nt_pushPOper EXPRESION right_par nt_popPOper
    (137) nt_pushPOper -> . empty
    (139) empty -> .

    not             reduce using rule 139 (empty -> .)
    left_par        reduce using rule 139 (empty -> .)
    id              reduce using rule 139 (empty -> .)
    plus            reduce using rule 139 (empty -> .)
    minus           reduce using rule 139 (empty -> .)
    true            reduce using rule 139 (empty -> .)
    false           reduce using rule 139 (empty -> .)
    cteString       reduce using rule 139 (empty -> .)
    cteInt          reduce using rule 139 (empty -> .)
    cteFloat        reduce using rule 139 (empty -> .)

    empty                          shift and go to state 156
    nt_pushPOper                   shift and go to state 189

state 146

    (129) BOOLEANA -> true .

    multiply        reduce using rule 129 (BOOLEANA -> true .)
    divide          reduce using rule 129 (BOOLEANA -> true .)
    plus            reduce using rule 129 (BOOLEANA -> true .)
    minus           reduce using rule 129 (BOOLEANA -> true .)
    and             reduce using rule 129 (BOOLEANA -> true .)
    or              reduce using rule 129 (BOOLEANA -> true .)
    right_par       reduce using rule 129 (BOOLEANA -> true .)
    comma           reduce using rule 129 (BOOLEANA -> true .)
    semicolon       reduce using rule 129 (BOOLEANA -> true .)
    right_sb        reduce using rule 129 (BOOLEANA -> true .)
    lt              reduce using rule 129 (BOOLEANA -> true .)
    gt              reduce using rule 129 (BOOLEANA -> true .)
    ne              reduce using rule 129 (BOOLEANA -> true .)
    ge              reduce using rule 129 (BOOLEANA -> true .)
    le              reduce using rule 129 (BOOLEANA -> true .)
    et              reduce using rule 129 (BOOLEANA -> true .)


state 147

    (119) CONSTANTE -> STRINGS .

    multiply        reduce using rule 119 (CONSTANTE -> STRINGS .)
    divide          reduce using rule 119 (CONSTANTE -> STRINGS .)
    plus            reduce using rule 119 (CONSTANTE -> STRINGS .)
    minus           reduce using rule 119 (CONSTANTE -> STRINGS .)
    and             reduce using rule 119 (CONSTANTE -> STRINGS .)
    or              reduce using rule 119 (CONSTANTE -> STRINGS .)
    right_par       reduce using rule 119 (CONSTANTE -> STRINGS .)
    comma           reduce using rule 119 (CONSTANTE -> STRINGS .)
    semicolon       reduce using rule 119 (CONSTANTE -> STRINGS .)
    right_sb        reduce using rule 119 (CONSTANTE -> STRINGS .)
    lt              reduce using rule 119 (CONSTANTE -> STRINGS .)
    gt              reduce using rule 119 (CONSTANTE -> STRINGS .)
    ne              reduce using rule 119 (CONSTANTE -> STRINGS .)
    ge              reduce using rule 119 (CONSTANTE -> STRINGS .)
    le              reduce using rule 119 (CONSTANTE -> STRINGS .)
    et              reduce using rule 119 (CONSTANTE -> STRINGS .)


state 148

    (108) FACTOR -> CONSTANTE .

    multiply        reduce using rule 108 (FACTOR -> CONSTANTE .)
    divide          reduce using rule 108 (FACTOR -> CONSTANTE .)
    plus            reduce using rule 108 (FACTOR -> CONSTANTE .)
    minus           reduce using rule 108 (FACTOR -> CONSTANTE .)
    and             reduce using rule 108 (FACTOR -> CONSTANTE .)
    or              reduce using rule 108 (FACTOR -> CONSTANTE .)
    right_par       reduce using rule 108 (FACTOR -> CONSTANTE .)
    comma           reduce using rule 108 (FACTOR -> CONSTANTE .)
    semicolon       reduce using rule 108 (FACTOR -> CONSTANTE .)
    right_sb        reduce using rule 108 (FACTOR -> CONSTANTE .)
    lt              reduce using rule 108 (FACTOR -> CONSTANTE .)
    gt              reduce using rule 108 (FACTOR -> CONSTANTE .)
    ne              reduce using rule 108 (FACTOR -> CONSTANTE .)
    ge              reduce using rule 108 (FACTOR -> CONSTANTE .)
    le              reduce using rule 108 (FACTOR -> CONSTANTE .)
    et              reduce using rule 108 (FACTOR -> CONSTANTE .)


state 149

    (125) NUMERICA_AUX -> cteInt . nt_pushInt
    (127) nt_pushInt -> . empty
    (139) empty -> .

    multiply        reduce using rule 139 (empty -> .)
    divide          reduce using rule 139 (empty -> .)
    plus            reduce using rule 139 (empty -> .)
    minus           reduce using rule 139 (empty -> .)
    right_sb        reduce using rule 139 (empty -> .)
    lt              reduce using rule 139 (empty -> .)
    gt              reduce using rule 139 (empty -> .)
    ne              reduce using rule 139 (empty -> .)
    ge              reduce using rule 139 (empty -> .)
    le              reduce using rule 139 (empty -> .)
    et              reduce using rule 139 (empty -> .)
    and             reduce using rule 139 (empty -> .)
    or              reduce using rule 139 (empty -> .)
    right_par       reduce using rule 139 (empty -> .)
    comma           reduce using rule 139 (empty -> .)
    semicolon       reduce using rule 139 (empty -> .)

    empty                          shift and go to state 190
    nt_pushInt                     shift and go to state 191

state 150

    (120) NUMERICA -> NUMERICA_AUX .

    multiply        reduce using rule 120 (NUMERICA -> NUMERICA_AUX .)
    divide          reduce using rule 120 (NUMERICA -> NUMERICA_AUX .)
    plus            reduce using rule 120 (NUMERICA -> NUMERICA_AUX .)
    minus           reduce using rule 120 (NUMERICA -> NUMERICA_AUX .)
    and             reduce using rule 120 (NUMERICA -> NUMERICA_AUX .)
    or              reduce using rule 120 (NUMERICA -> NUMERICA_AUX .)
    right_par       reduce using rule 120 (NUMERICA -> NUMERICA_AUX .)
    comma           reduce using rule 120 (NUMERICA -> NUMERICA_AUX .)
    semicolon       reduce using rule 120 (NUMERICA -> NUMERICA_AUX .)
    right_sb        reduce using rule 120 (NUMERICA -> NUMERICA_AUX .)
    lt              reduce using rule 120 (NUMERICA -> NUMERICA_AUX .)
    gt              reduce using rule 120 (NUMERICA -> NUMERICA_AUX .)
    ne              reduce using rule 120 (NUMERICA -> NUMERICA_AUX .)
    ge              reduce using rule 120 (NUMERICA -> NUMERICA_AUX .)
    le              reduce using rule 120 (NUMERICA -> NUMERICA_AUX .)
    et              reduce using rule 120 (NUMERICA -> NUMERICA_AUX .)


state 151

    (117) CONSTANTE -> NUMERICA .

    multiply        reduce using rule 117 (CONSTANTE -> NUMERICA .)
    divide          reduce using rule 117 (CONSTANTE -> NUMERICA .)
    plus            reduce using rule 117 (CONSTANTE -> NUMERICA .)
    minus           reduce using rule 117 (CONSTANTE -> NUMERICA .)
    and             reduce using rule 117 (CONSTANTE -> NUMERICA .)
    or              reduce using rule 117 (CONSTANTE -> NUMERICA .)
    right_par       reduce using rule 117 (CONSTANTE -> NUMERICA .)
    comma           reduce using rule 117 (CONSTANTE -> NUMERICA .)
    semicolon       reduce using rule 117 (CONSTANTE -> NUMERICA .)
    right_sb        reduce using rule 117 (CONSTANTE -> NUMERICA .)
    lt              reduce using rule 117 (CONSTANTE -> NUMERICA .)
    gt              reduce using rule 117 (CONSTANTE -> NUMERICA .)
    ne              reduce using rule 117 (CONSTANTE -> NUMERICA .)
    ge              reduce using rule 117 (CONSTANTE -> NUMERICA .)
    le              reduce using rule 117 (CONSTANTE -> NUMERICA .)
    et              reduce using rule 117 (CONSTANTE -> NUMERICA .)


state 152

    (102) TERMINO -> FACTOR . nt_checar_multis TERMINO_AUX
    (103) nt_checar_multis -> . empty
    (139) empty -> .

    multiply        reduce using rule 139 (empty -> .)
    divide          reduce using rule 139 (empty -> .)
    plus            reduce using rule 139 (empty -> .)
    minus           reduce using rule 139 (empty -> .)
    right_sb        reduce using rule 139 (empty -> .)
    lt              reduce using rule 139 (empty -> .)
    gt              reduce using rule 139 (empty -> .)
    ne              reduce using rule 139 (empty -> .)
    ge              reduce using rule 139 (empty -> .)
    le              reduce using rule 139 (empty -> .)
    et              reduce using rule 139 (empty -> .)
    and             reduce using rule 139 (empty -> .)
    or              reduce using rule 139 (empty -> .)
    right_par       reduce using rule 139 (empty -> .)
    comma           reduce using rule 139 (empty -> .)
    semicolon       reduce using rule 139 (empty -> .)

    nt_checar_multis               shift and go to state 192
    empty                          shift and go to state 193

state 153

    (109) FACTOR -> LISTA .

    multiply        reduce using rule 109 (FACTOR -> LISTA .)
    divide          reduce using rule 109 (FACTOR -> LISTA .)
    plus            reduce using rule 109 (FACTOR -> LISTA .)
    minus           reduce using rule 109 (FACTOR -> LISTA .)
    and             reduce using rule 109 (FACTOR -> LISTA .)
    or              reduce using rule 109 (FACTOR -> LISTA .)
    right_par       reduce using rule 109 (FACTOR -> LISTA .)
    comma           reduce using rule 109 (FACTOR -> LISTA .)
    semicolon       reduce using rule 109 (FACTOR -> LISTA .)
    right_sb        reduce using rule 109 (FACTOR -> LISTA .)
    lt              reduce using rule 109 (FACTOR -> LISTA .)
    gt              reduce using rule 109 (FACTOR -> LISTA .)
    ne              reduce using rule 109 (FACTOR -> LISTA .)
    ge              reduce using rule 109 (FACTOR -> LISTA .)
    le              reduce using rule 109 (FACTOR -> LISTA .)
    et              reduce using rule 109 (FACTOR -> LISTA .)


state 154

    (122) NUMERICA -> minus . nt_sigMenos NUMERICA_AUX
    (124) nt_sigMenos -> . empty
    (139) empty -> .

    cteInt          reduce using rule 139 (empty -> .)
    cteFloat        reduce using rule 139 (empty -> .)

    nt_sigMenos                    shift and go to state 195
    empty                          shift and go to state 194

state 155

    (76) ESCRITURA -> cwrite left_par EXPRESION . nt_escribir right_par semicolon
    (77) nt_escribir -> . empty
    (139) empty -> .

    right_par       reduce using rule 139 (empty -> .)

    nt_escribir                    shift and go to state 196
    empty                          shift and go to state 197

state 156

    (137) nt_pushPOper -> empty .

    not             reduce using rule 137 (nt_pushPOper -> empty .)
    left_par        reduce using rule 137 (nt_pushPOper -> empty .)
    id              reduce using rule 137 (nt_pushPOper -> empty .)
    plus            reduce using rule 137 (nt_pushPOper -> empty .)
    minus           reduce using rule 137 (nt_pushPOper -> empty .)
    true            reduce using rule 137 (nt_pushPOper -> empty .)
    false           reduce using rule 137 (nt_pushPOper -> empty .)
    cteString       reduce using rule 137 (nt_pushPOper -> empty .)
    cteInt          reduce using rule 137 (nt_pushPOper -> empty .)
    cteFloat        reduce using rule 137 (nt_pushPOper -> empty .)


state 157

    (132) ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper . EXPRESION nt_checaEquals semicolon
    (81) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (83) EXPRESION_NOT -> . not nt_pushPOper
    (84) EXPRESION_NOT -> . empty
    (139) empty -> .

    not             shift and go to state 118
    left_par        reduce using rule 139 (empty -> .)
    id              reduce using rule 139 (empty -> .)
    plus            reduce using rule 139 (empty -> .)
    minus           reduce using rule 139 (empty -> .)
    true            reduce using rule 139 (empty -> .)
    false           reduce using rule 139 (empty -> .)
    cteString       reduce using rule 139 (empty -> .)
    cteInt          reduce using rule 139 (empty -> .)
    cteFloat        reduce using rule 139 (empty -> .)

    EXPRESION                      shift and go to state 198
    EXPRESION_NOT                  shift and go to state 116
    empty                          shift and go to state 119

state 158

    (81) EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA . nt_checaAndOrNot EXPRESION_B
    (82) nt_checaAndOrNot -> . empty
    (139) empty -> .

    and             reduce using rule 139 (empty -> .)
    or              reduce using rule 139 (empty -> .)
    right_par       reduce using rule 139 (empty -> .)
    comma           reduce using rule 139 (empty -> .)
    semicolon       reduce using rule 139 (empty -> .)

    nt_checaAndOrNot               shift and go to state 199
    empty                          shift and go to state 200

state 159

    (88) EXPRESIONLOGICA -> EXP . EXPRESIONLOGICA_AUX
    (89) EXPRESIONLOGICA_AUX -> . lt nt_pushPOper EXP nt_checarRelop
    (90) EXPRESIONLOGICA_AUX -> . gt nt_pushPOper EXP nt_checarRelop
    (91) EXPRESIONLOGICA_AUX -> . ne nt_pushPOper EXP nt_checarRelop
    (92) EXPRESIONLOGICA_AUX -> . ge nt_pushPOper EXP nt_checarRelop
    (93) EXPRESIONLOGICA_AUX -> . le nt_pushPOper EXP nt_checarRelop
    (94) EXPRESIONLOGICA_AUX -> . et nt_pushPOper EXP nt_checarRelop
    (95) EXPRESIONLOGICA_AUX -> . empty
    (139) empty -> .

    lt              shift and go to state 205
    gt              shift and go to state 202
    ne              shift and go to state 204
    ge              shift and go to state 201
    le              shift and go to state 206
    et              shift and go to state 207
    and             reduce using rule 139 (empty -> .)
    or              reduce using rule 139 (empty -> .)
    right_par       reduce using rule 139 (empty -> .)
    comma           reduce using rule 139 (empty -> .)
    semicolon       reduce using rule 139 (empty -> .)

    empty                          shift and go to state 208
    EXPRESIONLOGICA_AUX            shift and go to state 203

state 160

    (80) LLAMADA_EXPRESION -> LLAMADA_EXPRESION comma . EXPRESION
    (81) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (83) EXPRESION_NOT -> . not nt_pushPOper
    (84) EXPRESION_NOT -> . empty
    (139) empty -> .

    not             shift and go to state 118
    left_par        reduce using rule 139 (empty -> .)
    id              reduce using rule 139 (empty -> .)
    plus            reduce using rule 139 (empty -> .)
    minus           reduce using rule 139 (empty -> .)
    true            reduce using rule 139 (empty -> .)
    false           reduce using rule 139 (empty -> .)
    cteString       reduce using rule 139 (empty -> .)
    cteInt          reduce using rule 139 (empty -> .)
    cteFloat        reduce using rule 139 (empty -> .)

    EXPRESION                      shift and go to state 209
    EXPRESION_NOT                  shift and go to state 116
    empty                          shift and go to state 119

state 161

    (78) LLAMADA -> left_par LLAMADA_EXPRESION right_par . semicolon

    semicolon       shift and go to state 210


state 162

    (83) EXPRESION_NOT -> not nt_pushPOper .

    left_par        reduce using rule 83 (EXPRESION_NOT -> not nt_pushPOper .)
    id              reduce using rule 83 (EXPRESION_NOT -> not nt_pushPOper .)
    plus            reduce using rule 83 (EXPRESION_NOT -> not nt_pushPOper .)
    minus           reduce using rule 83 (EXPRESION_NOT -> not nt_pushPOper .)
    true            reduce using rule 83 (EXPRESION_NOT -> not nt_pushPOper .)
    false           reduce using rule 83 (EXPRESION_NOT -> not nt_pushPOper .)
    cteString       reduce using rule 83 (EXPRESION_NOT -> not nt_pushPOper .)
    cteInt          reduce using rule 83 (EXPRESION_NOT -> not nt_pushPOper .)
    cteFloat        reduce using rule 83 (EXPRESION_NOT -> not nt_pushPOper .)


state 163

    (73) CICLO -> while left_par EXPRESION . right_par CUERPO

    right_par       shift and go to state 211


state 164

    (57) nt_agregarParametro -> empty .

    right_par       reduce using rule 57 (nt_agregarParametro -> empty .)
    comma           reduce using rule 57 (nt_agregarParametro -> empty .)


state 165

    (55) FUNC_PARA -> TIPO id nt_agregarParametro .

    right_par       reduce using rule 55 (FUNC_PARA -> TIPO id nt_agregarParametro .)
    comma           reduce using rule 55 (FUNC_PARA -> TIPO id nt_agregarParametro .)


state 166

    (51) FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO . nt_cambiarScope
    (2) nt_cambiarScope -> . empty
    (139) empty -> .

    main            reduce using rule 139 (empty -> .)
    int             reduce using rule 139 (empty -> .)
    float           reduce using rule 139 (empty -> .)
    bool            reduce using rule 139 (empty -> .)
    string          reduce using rule 139 (empty -> .)
    void            reduce using rule 139 (empty -> .)

    empty                          shift and go to state 15
    nt_cambiarScope                shift and go to state 212

state 167

    (45) CUERPORETORNO -> left_cb . CUERPORETORNO_AUX right_cb
    (46) CUERPORETORNO_AUX -> . CUERPORETORNO_CF_AUX RETORNO
    (47) CUERPORETORNO_AUX -> . CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO
    (48) CUERPORETORNO_CF_AUX -> . CUERPOFUNC
    (49) CUERPORETORNO_CF_AUX -> . empty
    (38) CUERPOFUNC -> . CUERPOFUNC_AUX
    (139) empty -> .
    (39) CUERPOFUNC_AUX -> . CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO
    (40) CUERPOFUNC_AUX -> . CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO
    (41) CUERPOFUNC_VARS -> . VARS
    (42) CUERPOFUNC_VARS -> . empty
    (10) VARS -> . VARS_AUX
    (11) VARS_AUX -> . VARS_LIST_VAR
    (12) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (13) VARS_LIST_VAR -> . VARS_LIST
    (14) VARS_LIST_VAR -> . VARS_VAR
    (15) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (22) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    return          reduce using rule 139 (empty -> .)
    if              reduce using rule 139 (empty -> .)
    while           reduce using rule 139 (empty -> .)
    cread           reduce using rule 139 (empty -> .)
    cwrite          reduce using rule 139 (empty -> .)
    left_par        reduce using rule 139 (empty -> .)
    id              reduce using rule 139 (empty -> .)
    list            shift and go to state 12
    var             shift and go to state 8

  ! list            [ reduce using rule 139 (empty -> .) ]
  ! var             [ reduce using rule 139 (empty -> .) ]

    CUERPORETORNO_CF_AUX           shift and go to state 215
    VARS                           shift and go to state 219
    CUERPOFUNC                     shift and go to state 216
    VARS_LIST                      shift and go to state 6
    VARS_LIST_VAR                  shift and go to state 10
    VARS_VAR                       shift and go to state 11
    VARS_AUX                       shift and go to state 13
    CUERPORETORNO_AUX              shift and go to state 213
    CUERPOFUNC_VARS                shift and go to state 217
    CUERPOFUNC_AUX                 shift and go to state 214
    empty                          shift and go to state 218

state 168

    (56) FUNC_PARA -> FUNC_PARA comma TIPO . id nt_agregarParametro

    id              shift and go to state 220


state 169

    (58) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb . CUERPOFUNC right_cb
    (38) CUERPOFUNC -> . CUERPOFUNC_AUX
    (39) CUERPOFUNC_AUX -> . CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO
    (40) CUERPOFUNC_AUX -> . CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO
    (41) CUERPOFUNC_VARS -> . VARS
    (42) CUERPOFUNC_VARS -> . empty
    (10) VARS -> . VARS_AUX
    (139) empty -> .
    (11) VARS_AUX -> . VARS_LIST_VAR
    (12) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (13) VARS_LIST_VAR -> . VARS_LIST
    (14) VARS_LIST_VAR -> . VARS_VAR
    (15) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (22) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    if              reduce using rule 139 (empty -> .)
    while           reduce using rule 139 (empty -> .)
    cread           reduce using rule 139 (empty -> .)
    cwrite          reduce using rule 139 (empty -> .)
    left_par        reduce using rule 139 (empty -> .)
    id              reduce using rule 139 (empty -> .)
    right_cb        reduce using rule 139 (empty -> .)
    list            shift and go to state 12
    var             shift and go to state 8

  ! list            [ reduce using rule 139 (empty -> .) ]
  ! var             [ reduce using rule 139 (empty -> .) ]

    VARS                           shift and go to state 219
    CUERPOFUNC                     shift and go to state 221
    VARS_AUX                       shift and go to state 13
    VARS_LIST_VAR                  shift and go to state 10
    VARS_LIST                      shift and go to state 6
    CUERPOFUNC_VARS                shift and go to state 217
    VARS_VAR                       shift and go to state 11
    CUERPOFUNC_AUX                 shift and go to state 214
    empty                          shift and go to state 222

state 170

    (61) VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO . id nt_agregarParametro

    id              shift and go to state 223


state 171

    (60) VOIDFUNC_PARA -> TIPO id nt_agregarParametro .

    right_par       reduce using rule 60 (VOIDFUNC_PARA -> TIPO id nt_agregarParametro .)
    comma           reduce using rule 60 (VOIDFUNC_PARA -> TIPO id nt_agregarParametro .)


state 172

    (18) VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista . right_sb nt_agregarDicVar

    right_sb        shift and go to state 224


state 173

    (17) VARS_LIST_AUX -> id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar .

    semicolon       reduce using rule 17 (VARS_LIST_AUX -> id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar .)
    comma           reduce using rule 17 (VARS_LIST_AUX -> id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar .)


state 174

    (74) LECTURA -> cread left_par id nt_leer . right_par semicolon

    right_par       shift and go to state 225


state 175

    (75) nt_leer -> empty .

    right_par       reduce using rule 75 (nt_leer -> empty .)


state 176

    (69) CONDICION_ELSEIF -> left_par EXPRESION right_par . CUERPO
    (31) CUERPO -> . left_cb CUERPO_AUX right_cb

    left_cb         shift and go to state 62

    CUERPO                         shift and go to state 226

state 177

    (71) CONDICION_ELSE -> else CUERPO .

    right_cb        reduce using rule 71 (CONDICION_ELSE -> else CUERPO .)
    list            reduce using rule 71 (CONDICION_ELSE -> else CUERPO .)
    var             reduce using rule 71 (CONDICION_ELSE -> else CUERPO .)
    if              reduce using rule 71 (CONDICION_ELSE -> else CUERPO .)
    while           reduce using rule 71 (CONDICION_ELSE -> else CUERPO .)
    cread           reduce using rule 71 (CONDICION_ELSE -> else CUERPO .)
    cwrite          reduce using rule 71 (CONDICION_ELSE -> else CUERPO .)
    left_par        reduce using rule 71 (CONDICION_ELSE -> else CUERPO .)
    id              reduce using rule 71 (CONDICION_ELSE -> else CUERPO .)
    return          reduce using rule 71 (CONDICION_ELSE -> else CUERPO .)


state 178

    (70) CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par . EXPRESION right_par CUERPO
    (81) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (83) EXPRESION_NOT -> . not nt_pushPOper
    (84) EXPRESION_NOT -> . empty
    (139) empty -> .

    not             shift and go to state 118
    left_par        reduce using rule 139 (empty -> .)
    id              reduce using rule 139 (empty -> .)
    plus            reduce using rule 139 (empty -> .)
    minus           reduce using rule 139 (empty -> .)
    true            reduce using rule 139 (empty -> .)
    false           reduce using rule 139 (empty -> .)
    cteString       reduce using rule 139 (empty -> .)
    cteInt          reduce using rule 139 (empty -> .)
    cteFloat        reduce using rule 139 (empty -> .)

    EXPRESION                      shift and go to state 227
    EXPRESION_NOT                  shift and go to state 116
    empty                          shift and go to state 119

state 179

    (116) LISTA -> id left_sb EXP right_sb .

    multiply        reduce using rule 116 (LISTA -> id left_sb EXP right_sb .)
    divide          reduce using rule 116 (LISTA -> id left_sb EXP right_sb .)
    plus            reduce using rule 116 (LISTA -> id left_sb EXP right_sb .)
    minus           reduce using rule 116 (LISTA -> id left_sb EXP right_sb .)
    and             reduce using rule 116 (LISTA -> id left_sb EXP right_sb .)
    or              reduce using rule 116 (LISTA -> id left_sb EXP right_sb .)
    right_par       reduce using rule 116 (LISTA -> id left_sb EXP right_sb .)
    comma           reduce using rule 116 (LISTA -> id left_sb EXP right_sb .)
    semicolon       reduce using rule 116 (LISTA -> id left_sb EXP right_sb .)
    right_sb        reduce using rule 116 (LISTA -> id left_sb EXP right_sb .)
    lt              reduce using rule 116 (LISTA -> id left_sb EXP right_sb .)
    gt              reduce using rule 116 (LISTA -> id left_sb EXP right_sb .)
    ne              reduce using rule 116 (LISTA -> id left_sb EXP right_sb .)
    ge              reduce using rule 116 (LISTA -> id left_sb EXP right_sb .)
    le              reduce using rule 116 (LISTA -> id left_sb EXP right_sb .)
    et              reduce using rule 116 (LISTA -> id left_sb EXP right_sb .)
    equals          reduce using rule 116 (LISTA -> id left_sb EXP right_sb .)


state 180

    (126) NUMERICA_AUX -> cteFloat nt_pushFloat .

    multiply        reduce using rule 126 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    divide          reduce using rule 126 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    plus            reduce using rule 126 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    minus           reduce using rule 126 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    and             reduce using rule 126 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    or              reduce using rule 126 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    right_par       reduce using rule 126 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    comma           reduce using rule 126 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    semicolon       reduce using rule 126 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    right_sb        reduce using rule 126 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    lt              reduce using rule 126 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    gt              reduce using rule 126 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    ne              reduce using rule 126 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    ge              reduce using rule 126 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    le              reduce using rule 126 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    et              reduce using rule 126 (NUMERICA_AUX -> cteFloat nt_pushFloat .)


state 181

    (128) nt_pushFloat -> empty .

    multiply        reduce using rule 128 (nt_pushFloat -> empty .)
    divide          reduce using rule 128 (nt_pushFloat -> empty .)
    plus            reduce using rule 128 (nt_pushFloat -> empty .)
    minus           reduce using rule 128 (nt_pushFloat -> empty .)
    right_sb        reduce using rule 128 (nt_pushFloat -> empty .)
    lt              reduce using rule 128 (nt_pushFloat -> empty .)
    gt              reduce using rule 128 (nt_pushFloat -> empty .)
    ne              reduce using rule 128 (nt_pushFloat -> empty .)
    ge              reduce using rule 128 (nt_pushFloat -> empty .)
    le              reduce using rule 128 (nt_pushFloat -> empty .)
    et              reduce using rule 128 (nt_pushFloat -> empty .)
    and             reduce using rule 128 (nt_pushFloat -> empty .)
    or              reduce using rule 128 (nt_pushFloat -> empty .)
    right_par       reduce using rule 128 (nt_pushFloat -> empty .)
    comma           reduce using rule 128 (nt_pushFloat -> empty .)
    semicolon       reduce using rule 128 (nt_pushFloat -> empty .)


state 182

    (111) FACTOR_AUX -> id nt_pushPilaO .

    multiply        reduce using rule 111 (FACTOR_AUX -> id nt_pushPilaO .)
    divide          reduce using rule 111 (FACTOR_AUX -> id nt_pushPilaO .)
    plus            reduce using rule 111 (FACTOR_AUX -> id nt_pushPilaO .)
    minus           reduce using rule 111 (FACTOR_AUX -> id nt_pushPilaO .)
    right_sb        reduce using rule 111 (FACTOR_AUX -> id nt_pushPilaO .)
    lt              reduce using rule 111 (FACTOR_AUX -> id nt_pushPilaO .)
    gt              reduce using rule 111 (FACTOR_AUX -> id nt_pushPilaO .)
    ne              reduce using rule 111 (FACTOR_AUX -> id nt_pushPilaO .)
    ge              reduce using rule 111 (FACTOR_AUX -> id nt_pushPilaO .)
    le              reduce using rule 111 (FACTOR_AUX -> id nt_pushPilaO .)
    et              reduce using rule 111 (FACTOR_AUX -> id nt_pushPilaO .)
    and             reduce using rule 111 (FACTOR_AUX -> id nt_pushPilaO .)
    or              reduce using rule 111 (FACTOR_AUX -> id nt_pushPilaO .)
    right_par       reduce using rule 111 (FACTOR_AUX -> id nt_pushPilaO .)
    comma           reduce using rule 111 (FACTOR_AUX -> id nt_pushPilaO .)
    semicolon       reduce using rule 111 (FACTOR_AUX -> id nt_pushPilaO .)


state 183

    (113) LLAMADA_F -> left_par . EXPRESION LLAMADAF_AUX right_par
    (81) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (83) EXPRESION_NOT -> . not nt_pushPOper
    (84) EXPRESION_NOT -> . empty
    (139) empty -> .

    not             shift and go to state 118
    left_par        reduce using rule 139 (empty -> .)
    id              reduce using rule 139 (empty -> .)
    plus            reduce using rule 139 (empty -> .)
    minus           reduce using rule 139 (empty -> .)
    true            reduce using rule 139 (empty -> .)
    false           reduce using rule 139 (empty -> .)
    cteString       reduce using rule 139 (empty -> .)
    cteInt          reduce using rule 139 (empty -> .)
    cteFloat        reduce using rule 139 (empty -> .)

    EXPRESION                      shift and go to state 228
    EXPRESION_NOT                  shift and go to state 116
    empty                          shift and go to state 119

state 184

    (112) FACTOR_AUX -> id LLAMADA_F .

    multiply        reduce using rule 112 (FACTOR_AUX -> id LLAMADA_F .)
    divide          reduce using rule 112 (FACTOR_AUX -> id LLAMADA_F .)
    plus            reduce using rule 112 (FACTOR_AUX -> id LLAMADA_F .)
    minus           reduce using rule 112 (FACTOR_AUX -> id LLAMADA_F .)
    right_sb        reduce using rule 112 (FACTOR_AUX -> id LLAMADA_F .)
    lt              reduce using rule 112 (FACTOR_AUX -> id LLAMADA_F .)
    gt              reduce using rule 112 (FACTOR_AUX -> id LLAMADA_F .)
    ne              reduce using rule 112 (FACTOR_AUX -> id LLAMADA_F .)
    ge              reduce using rule 112 (FACTOR_AUX -> id LLAMADA_F .)
    le              reduce using rule 112 (FACTOR_AUX -> id LLAMADA_F .)
    et              reduce using rule 112 (FACTOR_AUX -> id LLAMADA_F .)
    and             reduce using rule 112 (FACTOR_AUX -> id LLAMADA_F .)
    or              reduce using rule 112 (FACTOR_AUX -> id LLAMADA_F .)
    right_par       reduce using rule 112 (FACTOR_AUX -> id LLAMADA_F .)
    comma           reduce using rule 112 (FACTOR_AUX -> id LLAMADA_F .)
    semicolon       reduce using rule 112 (FACTOR_AUX -> id LLAMADA_F .)


state 185

    (121) NUMERICA -> plus nt_sigMas . NUMERICA_AUX
    (125) NUMERICA_AUX -> . cteInt nt_pushInt
    (126) NUMERICA_AUX -> . cteFloat nt_pushFloat

    cteInt          shift and go to state 149
    cteFloat        shift and go to state 138

    NUMERICA_AUX                   shift and go to state 229

state 186

    (123) nt_sigMas -> empty .

    cteInt          reduce using rule 123 (nt_sigMas -> empty .)
    cteFloat        reduce using rule 123 (nt_sigMas -> empty .)


state 187

    (98) nt_checar_sumas -> empty .

    plus            reduce using rule 98 (nt_checar_sumas -> empty .)
    minus           reduce using rule 98 (nt_checar_sumas -> empty .)
    right_sb        reduce using rule 98 (nt_checar_sumas -> empty .)
    lt              reduce using rule 98 (nt_checar_sumas -> empty .)
    gt              reduce using rule 98 (nt_checar_sumas -> empty .)
    ne              reduce using rule 98 (nt_checar_sumas -> empty .)
    ge              reduce using rule 98 (nt_checar_sumas -> empty .)
    le              reduce using rule 98 (nt_checar_sumas -> empty .)
    et              reduce using rule 98 (nt_checar_sumas -> empty .)
    and             reduce using rule 98 (nt_checar_sumas -> empty .)
    or              reduce using rule 98 (nt_checar_sumas -> empty .)
    right_par       reduce using rule 98 (nt_checar_sumas -> empty .)
    comma           reduce using rule 98 (nt_checar_sumas -> empty .)
    semicolon       reduce using rule 98 (nt_checar_sumas -> empty .)


state 188

    (97) EXP -> TERMINO nt_checar_sumas . EXP_AUX
    (99) EXP_AUX -> . plus nt_pushPOper EXP
    (100) EXP_AUX -> . minus nt_pushPOper EXP
    (101) EXP_AUX -> . empty
    (139) empty -> .

    plus            shift and go to state 232
    minus           shift and go to state 230
    right_sb        reduce using rule 139 (empty -> .)
    lt              reduce using rule 139 (empty -> .)
    gt              reduce using rule 139 (empty -> .)
    ne              reduce using rule 139 (empty -> .)
    ge              reduce using rule 139 (empty -> .)
    le              reduce using rule 139 (empty -> .)
    et              reduce using rule 139 (empty -> .)
    and             reduce using rule 139 (empty -> .)
    or              reduce using rule 139 (empty -> .)
    right_par       reduce using rule 139 (empty -> .)
    comma           reduce using rule 139 (empty -> .)
    semicolon       reduce using rule 139 (empty -> .)

    EXP_AUX                        shift and go to state 233
    empty                          shift and go to state 231

state 189

    (107) FACTOR -> left_par nt_pushPOper . EXPRESION right_par nt_popPOper
    (81) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (83) EXPRESION_NOT -> . not nt_pushPOper
    (84) EXPRESION_NOT -> . empty
    (139) empty -> .

    not             shift and go to state 118
    left_par        reduce using rule 139 (empty -> .)
    id              reduce using rule 139 (empty -> .)
    plus            reduce using rule 139 (empty -> .)
    minus           reduce using rule 139 (empty -> .)
    true            reduce using rule 139 (empty -> .)
    false           reduce using rule 139 (empty -> .)
    cteString       reduce using rule 139 (empty -> .)
    cteInt          reduce using rule 139 (empty -> .)
    cteFloat        reduce using rule 139 (empty -> .)

    EXPRESION                      shift and go to state 234
    EXPRESION_NOT                  shift and go to state 116
    empty                          shift and go to state 119

state 190

    (127) nt_pushInt -> empty .

    multiply        reduce using rule 127 (nt_pushInt -> empty .)
    divide          reduce using rule 127 (nt_pushInt -> empty .)
    plus            reduce using rule 127 (nt_pushInt -> empty .)
    minus           reduce using rule 127 (nt_pushInt -> empty .)
    right_sb        reduce using rule 127 (nt_pushInt -> empty .)
    lt              reduce using rule 127 (nt_pushInt -> empty .)
    gt              reduce using rule 127 (nt_pushInt -> empty .)
    ne              reduce using rule 127 (nt_pushInt -> empty .)
    ge              reduce using rule 127 (nt_pushInt -> empty .)
    le              reduce using rule 127 (nt_pushInt -> empty .)
    et              reduce using rule 127 (nt_pushInt -> empty .)
    and             reduce using rule 127 (nt_pushInt -> empty .)
    or              reduce using rule 127 (nt_pushInt -> empty .)
    right_par       reduce using rule 127 (nt_pushInt -> empty .)
    comma           reduce using rule 127 (nt_pushInt -> empty .)
    semicolon       reduce using rule 127 (nt_pushInt -> empty .)


state 191

    (125) NUMERICA_AUX -> cteInt nt_pushInt .

    multiply        reduce using rule 125 (NUMERICA_AUX -> cteInt nt_pushInt .)
    divide          reduce using rule 125 (NUMERICA_AUX -> cteInt nt_pushInt .)
    plus            reduce using rule 125 (NUMERICA_AUX -> cteInt nt_pushInt .)
    minus           reduce using rule 125 (NUMERICA_AUX -> cteInt nt_pushInt .)
    and             reduce using rule 125 (NUMERICA_AUX -> cteInt nt_pushInt .)
    or              reduce using rule 125 (NUMERICA_AUX -> cteInt nt_pushInt .)
    right_par       reduce using rule 125 (NUMERICA_AUX -> cteInt nt_pushInt .)
    comma           reduce using rule 125 (NUMERICA_AUX -> cteInt nt_pushInt .)
    semicolon       reduce using rule 125 (NUMERICA_AUX -> cteInt nt_pushInt .)
    right_sb        reduce using rule 125 (NUMERICA_AUX -> cteInt nt_pushInt .)
    lt              reduce using rule 125 (NUMERICA_AUX -> cteInt nt_pushInt .)
    gt              reduce using rule 125 (NUMERICA_AUX -> cteInt nt_pushInt .)
    ne              reduce using rule 125 (NUMERICA_AUX -> cteInt nt_pushInt .)
    ge              reduce using rule 125 (NUMERICA_AUX -> cteInt nt_pushInt .)
    le              reduce using rule 125 (NUMERICA_AUX -> cteInt nt_pushInt .)
    et              reduce using rule 125 (NUMERICA_AUX -> cteInt nt_pushInt .)


state 192

    (102) TERMINO -> FACTOR nt_checar_multis . TERMINO_AUX
    (104) TERMINO_AUX -> . multiply nt_pushPOper TERMINO
    (105) TERMINO_AUX -> . divide nt_pushPOper TERMINO
    (106) TERMINO_AUX -> . empty
    (139) empty -> .

    multiply        shift and go to state 237
    divide          shift and go to state 236
    plus            reduce using rule 139 (empty -> .)
    minus           reduce using rule 139 (empty -> .)
    right_sb        reduce using rule 139 (empty -> .)
    lt              reduce using rule 139 (empty -> .)
    gt              reduce using rule 139 (empty -> .)
    ne              reduce using rule 139 (empty -> .)
    ge              reduce using rule 139 (empty -> .)
    le              reduce using rule 139 (empty -> .)
    et              reduce using rule 139 (empty -> .)
    and             reduce using rule 139 (empty -> .)
    or              reduce using rule 139 (empty -> .)
    right_par       reduce using rule 139 (empty -> .)
    comma           reduce using rule 139 (empty -> .)
    semicolon       reduce using rule 139 (empty -> .)

    TERMINO_AUX                    shift and go to state 235
    empty                          shift and go to state 238

state 193

    (103) nt_checar_multis -> empty .

    multiply        reduce using rule 103 (nt_checar_multis -> empty .)
    divide          reduce using rule 103 (nt_checar_multis -> empty .)
    plus            reduce using rule 103 (nt_checar_multis -> empty .)
    minus           reduce using rule 103 (nt_checar_multis -> empty .)
    right_sb        reduce using rule 103 (nt_checar_multis -> empty .)
    lt              reduce using rule 103 (nt_checar_multis -> empty .)
    gt              reduce using rule 103 (nt_checar_multis -> empty .)
    ne              reduce using rule 103 (nt_checar_multis -> empty .)
    ge              reduce using rule 103 (nt_checar_multis -> empty .)
    le              reduce using rule 103 (nt_checar_multis -> empty .)
    et              reduce using rule 103 (nt_checar_multis -> empty .)
    and             reduce using rule 103 (nt_checar_multis -> empty .)
    or              reduce using rule 103 (nt_checar_multis -> empty .)
    right_par       reduce using rule 103 (nt_checar_multis -> empty .)
    comma           reduce using rule 103 (nt_checar_multis -> empty .)
    semicolon       reduce using rule 103 (nt_checar_multis -> empty .)


state 194

    (124) nt_sigMenos -> empty .

    cteInt          reduce using rule 124 (nt_sigMenos -> empty .)
    cteFloat        reduce using rule 124 (nt_sigMenos -> empty .)


state 195

    (122) NUMERICA -> minus nt_sigMenos . NUMERICA_AUX
    (125) NUMERICA_AUX -> . cteInt nt_pushInt
    (126) NUMERICA_AUX -> . cteFloat nt_pushFloat

    cteInt          shift and go to state 149
    cteFloat        shift and go to state 138

    NUMERICA_AUX                   shift and go to state 239

state 196

    (76) ESCRITURA -> cwrite left_par EXPRESION nt_escribir . right_par semicolon

    right_par       shift and go to state 240


state 197

    (77) nt_escribir -> empty .

    right_par       reduce using rule 77 (nt_escribir -> empty .)


state 198

    (132) ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION . nt_checaEquals semicolon
    (133) nt_checaEquals -> . empty
    (139) empty -> .

    semicolon       reduce using rule 139 (empty -> .)

    nt_checaEquals                 shift and go to state 241
    empty                          shift and go to state 242

state 199

    (81) EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot . EXPRESION_B
    (85) EXPRESION_B -> . and nt_pushPOper EXPRESION
    (86) EXPRESION_B -> . or nt_pushPOper EXPRESION
    (87) EXPRESION_B -> . empty
    (139) empty -> .

    and             shift and go to state 243
    or              shift and go to state 245
    right_par       reduce using rule 139 (empty -> .)
    comma           reduce using rule 139 (empty -> .)
    semicolon       reduce using rule 139 (empty -> .)

    EXPRESION_B                    shift and go to state 244
    empty                          shift and go to state 246

state 200

    (82) nt_checaAndOrNot -> empty .

    and             reduce using rule 82 (nt_checaAndOrNot -> empty .)
    or              reduce using rule 82 (nt_checaAndOrNot -> empty .)
    right_par       reduce using rule 82 (nt_checaAndOrNot -> empty .)
    comma           reduce using rule 82 (nt_checaAndOrNot -> empty .)
    semicolon       reduce using rule 82 (nt_checaAndOrNot -> empty .)


state 201

    (92) EXPRESIONLOGICA_AUX -> ge . nt_pushPOper EXP nt_checarRelop
    (137) nt_pushPOper -> . empty
    (139) empty -> .

    left_par        reduce using rule 139 (empty -> .)
    id              reduce using rule 139 (empty -> .)
    plus            reduce using rule 139 (empty -> .)
    minus           reduce using rule 139 (empty -> .)
    true            reduce using rule 139 (empty -> .)
    false           reduce using rule 139 (empty -> .)
    cteString       reduce using rule 139 (empty -> .)
    cteInt          reduce using rule 139 (empty -> .)
    cteFloat        reduce using rule 139 (empty -> .)

    empty                          shift and go to state 156
    nt_pushPOper                   shift and go to state 247

state 202

    (90) EXPRESIONLOGICA_AUX -> gt . nt_pushPOper EXP nt_checarRelop
    (137) nt_pushPOper -> . empty
    (139) empty -> .

    left_par        reduce using rule 139 (empty -> .)
    id              reduce using rule 139 (empty -> .)
    plus            reduce using rule 139 (empty -> .)
    minus           reduce using rule 139 (empty -> .)
    true            reduce using rule 139 (empty -> .)
    false           reduce using rule 139 (empty -> .)
    cteString       reduce using rule 139 (empty -> .)
    cteInt          reduce using rule 139 (empty -> .)
    cteFloat        reduce using rule 139 (empty -> .)

    empty                          shift and go to state 156
    nt_pushPOper                   shift and go to state 248

state 203

    (88) EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .

    and             reduce using rule 88 (EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .)
    or              reduce using rule 88 (EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .)
    right_par       reduce using rule 88 (EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .)
    comma           reduce using rule 88 (EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .)
    semicolon       reduce using rule 88 (EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .)


state 204

    (91) EXPRESIONLOGICA_AUX -> ne . nt_pushPOper EXP nt_checarRelop
    (137) nt_pushPOper -> . empty
    (139) empty -> .

    left_par        reduce using rule 139 (empty -> .)
    id              reduce using rule 139 (empty -> .)
    plus            reduce using rule 139 (empty -> .)
    minus           reduce using rule 139 (empty -> .)
    true            reduce using rule 139 (empty -> .)
    false           reduce using rule 139 (empty -> .)
    cteString       reduce using rule 139 (empty -> .)
    cteInt          reduce using rule 139 (empty -> .)
    cteFloat        reduce using rule 139 (empty -> .)

    empty                          shift and go to state 156
    nt_pushPOper                   shift and go to state 249

state 205

    (89) EXPRESIONLOGICA_AUX -> lt . nt_pushPOper EXP nt_checarRelop
    (137) nt_pushPOper -> . empty
    (139) empty -> .

    left_par        reduce using rule 139 (empty -> .)
    id              reduce using rule 139 (empty -> .)
    plus            reduce using rule 139 (empty -> .)
    minus           reduce using rule 139 (empty -> .)
    true            reduce using rule 139 (empty -> .)
    false           reduce using rule 139 (empty -> .)
    cteString       reduce using rule 139 (empty -> .)
    cteInt          reduce using rule 139 (empty -> .)
    cteFloat        reduce using rule 139 (empty -> .)

    empty                          shift and go to state 156
    nt_pushPOper                   shift and go to state 250

state 206

    (93) EXPRESIONLOGICA_AUX -> le . nt_pushPOper EXP nt_checarRelop
    (137) nt_pushPOper -> . empty
    (139) empty -> .

    left_par        reduce using rule 139 (empty -> .)
    id              reduce using rule 139 (empty -> .)
    plus            reduce using rule 139 (empty -> .)
    minus           reduce using rule 139 (empty -> .)
    true            reduce using rule 139 (empty -> .)
    false           reduce using rule 139 (empty -> .)
    cteString       reduce using rule 139 (empty -> .)
    cteInt          reduce using rule 139 (empty -> .)
    cteFloat        reduce using rule 139 (empty -> .)

    empty                          shift and go to state 156
    nt_pushPOper                   shift and go to state 251

state 207

    (94) EXPRESIONLOGICA_AUX -> et . nt_pushPOper EXP nt_checarRelop
    (137) nt_pushPOper -> . empty
    (139) empty -> .

    left_par        reduce using rule 139 (empty -> .)
    id              reduce using rule 139 (empty -> .)
    plus            reduce using rule 139 (empty -> .)
    minus           reduce using rule 139 (empty -> .)
    true            reduce using rule 139 (empty -> .)
    false           reduce using rule 139 (empty -> .)
    cteString       reduce using rule 139 (empty -> .)
    cteInt          reduce using rule 139 (empty -> .)
    cteFloat        reduce using rule 139 (empty -> .)

    empty                          shift and go to state 156
    nt_pushPOper                   shift and go to state 252

state 208

    (95) EXPRESIONLOGICA_AUX -> empty .

    and             reduce using rule 95 (EXPRESIONLOGICA_AUX -> empty .)
    or              reduce using rule 95 (EXPRESIONLOGICA_AUX -> empty .)
    right_par       reduce using rule 95 (EXPRESIONLOGICA_AUX -> empty .)
    comma           reduce using rule 95 (EXPRESIONLOGICA_AUX -> empty .)
    semicolon       reduce using rule 95 (EXPRESIONLOGICA_AUX -> empty .)


state 209

    (80) LLAMADA_EXPRESION -> LLAMADA_EXPRESION comma EXPRESION .

    right_par       reduce using rule 80 (LLAMADA_EXPRESION -> LLAMADA_EXPRESION comma EXPRESION .)
    comma           reduce using rule 80 (LLAMADA_EXPRESION -> LLAMADA_EXPRESION comma EXPRESION .)


state 210

    (78) LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .

    list            reduce using rule 78 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    var             reduce using rule 78 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    if              reduce using rule 78 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    while           reduce using rule 78 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    cread           reduce using rule 78 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    cwrite          reduce using rule 78 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    left_par        reduce using rule 78 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    id              reduce using rule 78 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    return          reduce using rule 78 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    right_cb        reduce using rule 78 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)


state 211

    (73) CICLO -> while left_par EXPRESION right_par . CUERPO
    (31) CUERPO -> . left_cb CUERPO_AUX right_cb

    left_cb         shift and go to state 62

    CUERPO                         shift and go to state 253

state 212

    (51) FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_cambiarScope .

    main            reduce using rule 51 (FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_cambiarScope .)
    int             reduce using rule 51 (FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_cambiarScope .)
    float           reduce using rule 51 (FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_cambiarScope .)
    bool            reduce using rule 51 (FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_cambiarScope .)
    string          reduce using rule 51 (FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_cambiarScope .)
    void            reduce using rule 51 (FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_cambiarScope .)


state 213

    (45) CUERPORETORNO -> left_cb CUERPORETORNO_AUX . right_cb
    (47) CUERPORETORNO_AUX -> CUERPORETORNO_AUX . CUERPORETORNO_CF_AUX RETORNO
    (48) CUERPORETORNO_CF_AUX -> . CUERPOFUNC
    (49) CUERPORETORNO_CF_AUX -> . empty
    (38) CUERPOFUNC -> . CUERPOFUNC_AUX
    (139) empty -> .
    (39) CUERPOFUNC_AUX -> . CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO
    (40) CUERPOFUNC_AUX -> . CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO
    (41) CUERPOFUNC_VARS -> . VARS
    (42) CUERPOFUNC_VARS -> . empty
    (10) VARS -> . VARS_AUX
    (11) VARS_AUX -> . VARS_LIST_VAR
    (12) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (13) VARS_LIST_VAR -> . VARS_LIST
    (14) VARS_LIST_VAR -> . VARS_VAR
    (15) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (22) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    right_cb        shift and go to state 255
    return          reduce using rule 139 (empty -> .)
    if              reduce using rule 139 (empty -> .)
    while           reduce using rule 139 (empty -> .)
    cread           reduce using rule 139 (empty -> .)
    cwrite          reduce using rule 139 (empty -> .)
    left_par        reduce using rule 139 (empty -> .)
    id              reduce using rule 139 (empty -> .)
    list            shift and go to state 12
    var             shift and go to state 8

  ! list            [ reduce using rule 139 (empty -> .) ]
  ! var             [ reduce using rule 139 (empty -> .) ]

    CUERPORETORNO_CF_AUX           shift and go to state 254
    VARS                           shift and go to state 219
    CUERPOFUNC                     shift and go to state 216
    VARS_LIST                      shift and go to state 6
    VARS_LIST_VAR                  shift and go to state 10
    VARS_VAR                       shift and go to state 11
    VARS_AUX                       shift and go to state 13
    CUERPOFUNC_VARS                shift and go to state 217
    CUERPOFUNC_AUX                 shift and go to state 214
    empty                          shift and go to state 218

state 214

    (38) CUERPOFUNC -> CUERPOFUNC_AUX .
    (40) CUERPOFUNC_AUX -> CUERPOFUNC_AUX . CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO
    (41) CUERPOFUNC_VARS -> . VARS
    (42) CUERPOFUNC_VARS -> . empty
    (10) VARS -> . VARS_AUX
    (139) empty -> .
    (11) VARS_AUX -> . VARS_LIST_VAR
    (12) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (13) VARS_LIST_VAR -> . VARS_LIST
    (14) VARS_LIST_VAR -> . VARS_VAR
    (15) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (22) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! reduce/reduce conflict for return resolved using rule 38 (CUERPOFUNC -> CUERPOFUNC_AUX .)
  ! reduce/reduce conflict for right_cb resolved using rule 38 (CUERPOFUNC -> CUERPOFUNC_AUX .)
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    return          reduce using rule 38 (CUERPOFUNC -> CUERPOFUNC_AUX .)
    right_cb        reduce using rule 38 (CUERPOFUNC -> CUERPOFUNC_AUX .)
    if              reduce using rule 139 (empty -> .)
    while           reduce using rule 139 (empty -> .)
    cread           reduce using rule 139 (empty -> .)
    cwrite          reduce using rule 139 (empty -> .)
    left_par        reduce using rule 139 (empty -> .)
    id              reduce using rule 139 (empty -> .)
    list            shift and go to state 12
    var             shift and go to state 8

  ! list            [ reduce using rule 139 (empty -> .) ]
  ! var             [ reduce using rule 139 (empty -> .) ]
  ! return          [ reduce using rule 139 (empty -> .) ]
  ! right_cb        [ reduce using rule 139 (empty -> .) ]

    VARS                           shift and go to state 219
    VARS_LIST                      shift and go to state 6
    VARS_LIST_VAR                  shift and go to state 10
    VARS_AUX                       shift and go to state 13
    CUERPOFUNC_VARS                shift and go to state 256
    VARS_VAR                       shift and go to state 11
    empty                          shift and go to state 222

state 215

    (46) CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX . RETORNO
    (50) RETORNO -> . return EXP semicolon

    return          shift and go to state 258

    RETORNO                        shift and go to state 257

state 216

    (48) CUERPORETORNO_CF_AUX -> CUERPOFUNC .

    return          reduce using rule 48 (CUERPORETORNO_CF_AUX -> CUERPOFUNC .)


state 217

    (39) CUERPOFUNC_AUX -> CUERPOFUNC_VARS . CUERPOFUNC_ESTATUTO
    (43) CUERPOFUNC_ESTATUTO -> . ESTATUTO
    (44) CUERPOFUNC_ESTATUTO -> . empty
    (62) ESTATUTO -> . ASIGNACION
    (63) ESTATUTO -> . CONDICION
    (64) ESTATUTO -> . CICLO
    (65) ESTATUTO -> . LECTURA
    (66) ESTATUTO -> . ESCRITURA
    (67) ESTATUTO -> . LLAMADA
    (139) empty -> .
    (132) ASIGNACION -> . ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon
    (68) CONDICION -> . if CONDICION_ELSEIF CONDICION_ELSE
    (73) CICLO -> . while left_par EXPRESION right_par CUERPO
    (74) LECTURA -> . cread left_par id nt_leer right_par semicolon
    (76) ESCRITURA -> . cwrite left_par EXPRESION nt_escribir right_par semicolon
    (78) LLAMADA -> . left_par LLAMADA_EXPRESION right_par semicolon
    (134) ASIGNACION_AUX -> . id nt_pushPilaO
    (135) ASIGNACION_AUX -> . LISTA
    (116) LISTA -> . id left_sb EXP right_sb

  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for cread resolved as shift
  ! shift/reduce conflict for cwrite resolved as shift
  ! shift/reduce conflict for left_par resolved as shift
  ! shift/reduce conflict for id resolved as shift
    list            reduce using rule 139 (empty -> .)
    var             reduce using rule 139 (empty -> .)
    return          reduce using rule 139 (empty -> .)
    right_cb        reduce using rule 139 (empty -> .)
    if              shift and go to state 83
    while           shift and go to state 95
    cread           shift and go to state 81
    cwrite          shift and go to state 87
    left_par        shift and go to state 93
    id              shift and go to state 86

  ! if              [ reduce using rule 139 (empty -> .) ]
  ! while           [ reduce using rule 139 (empty -> .) ]
  ! cread           [ reduce using rule 139 (empty -> .) ]
  ! cwrite          [ reduce using rule 139 (empty -> .) ]
  ! left_par        [ reduce using rule 139 (empty -> .) ]
  ! id              [ reduce using rule 139 (empty -> .) ]

    CICLO                          shift and go to state 80
    LECTURA                        shift and go to state 82
    ESCRITURA                      shift and go to state 89
    CUERPOFUNC_ESTATUTO            shift and go to state 259
    ASIGNACION                     shift and go to state 84
    ESTATUTO                       shift and go to state 260
    ASIGNACION_AUX                 shift and go to state 88
    empty                          shift and go to state 261
    LLAMADA                        shift and go to state 91
    CONDICION                      shift and go to state 92
    LISTA                          shift and go to state 96

state 218

    (49) CUERPORETORNO_CF_AUX -> empty .
    (42) CUERPOFUNC_VARS -> empty .

  ! reduce/reduce conflict for return resolved using rule 42 (CUERPOFUNC_VARS -> empty .)
    if              reduce using rule 42 (CUERPOFUNC_VARS -> empty .)
    while           reduce using rule 42 (CUERPOFUNC_VARS -> empty .)
    cread           reduce using rule 42 (CUERPOFUNC_VARS -> empty .)
    cwrite          reduce using rule 42 (CUERPOFUNC_VARS -> empty .)
    left_par        reduce using rule 42 (CUERPOFUNC_VARS -> empty .)
    id              reduce using rule 42 (CUERPOFUNC_VARS -> empty .)
    list            reduce using rule 42 (CUERPOFUNC_VARS -> empty .)
    var             reduce using rule 42 (CUERPOFUNC_VARS -> empty .)
    return          reduce using rule 42 (CUERPOFUNC_VARS -> empty .)

  ! return          [ reduce using rule 49 (CUERPORETORNO_CF_AUX -> empty .) ]


state 219

    (41) CUERPOFUNC_VARS -> VARS .

    if              reduce using rule 41 (CUERPOFUNC_VARS -> VARS .)
    while           reduce using rule 41 (CUERPOFUNC_VARS -> VARS .)
    cread           reduce using rule 41 (CUERPOFUNC_VARS -> VARS .)
    cwrite          reduce using rule 41 (CUERPOFUNC_VARS -> VARS .)
    left_par        reduce using rule 41 (CUERPOFUNC_VARS -> VARS .)
    id              reduce using rule 41 (CUERPOFUNC_VARS -> VARS .)
    list            reduce using rule 41 (CUERPOFUNC_VARS -> VARS .)
    var             reduce using rule 41 (CUERPOFUNC_VARS -> VARS .)
    return          reduce using rule 41 (CUERPOFUNC_VARS -> VARS .)
    right_cb        reduce using rule 41 (CUERPOFUNC_VARS -> VARS .)


state 220

    (56) FUNC_PARA -> FUNC_PARA comma TIPO id . nt_agregarParametro
    (57) nt_agregarParametro -> . empty
    (139) empty -> .

    right_par       reduce using rule 139 (empty -> .)
    comma           reduce using rule 139 (empty -> .)

    empty                          shift and go to state 164
    nt_agregarParametro            shift and go to state 262

state 221

    (58) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC . right_cb

    right_cb        shift and go to state 263


state 222

    (42) CUERPOFUNC_VARS -> empty .

    if              reduce using rule 42 (CUERPOFUNC_VARS -> empty .)
    while           reduce using rule 42 (CUERPOFUNC_VARS -> empty .)
    cread           reduce using rule 42 (CUERPOFUNC_VARS -> empty .)
    cwrite          reduce using rule 42 (CUERPOFUNC_VARS -> empty .)
    left_par        reduce using rule 42 (CUERPOFUNC_VARS -> empty .)
    id              reduce using rule 42 (CUERPOFUNC_VARS -> empty .)
    list            reduce using rule 42 (CUERPOFUNC_VARS -> empty .)
    var             reduce using rule 42 (CUERPOFUNC_VARS -> empty .)
    return          reduce using rule 42 (CUERPOFUNC_VARS -> empty .)
    right_cb        reduce using rule 42 (CUERPOFUNC_VARS -> empty .)


state 223

    (61) VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO id . nt_agregarParametro
    (57) nt_agregarParametro -> . empty
    (139) empty -> .

    right_par       reduce using rule 139 (empty -> .)
    comma           reduce using rule 139 (empty -> .)

    empty                          shift and go to state 164
    nt_agregarParametro            shift and go to state 264

state 224

    (18) VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb . nt_agregarDicVar
    (21) nt_agregarDicVar -> . empty
    (139) empty -> .

    semicolon       reduce using rule 139 (empty -> .)
    comma           reduce using rule 139 (empty -> .)

    nt_agregarDicVar               shift and go to state 265
    empty                          shift and go to state 68

state 225

    (74) LECTURA -> cread left_par id nt_leer right_par . semicolon

    semicolon       shift and go to state 266


state 226

    (69) CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO .

    elseif          reduce using rule 69 (CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO .)
    else            reduce using rule 69 (CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO .)
    right_cb        reduce using rule 69 (CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO .)
    list            reduce using rule 69 (CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO .)
    var             reduce using rule 69 (CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO .)
    if              reduce using rule 69 (CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO .)
    while           reduce using rule 69 (CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO .)
    cread           reduce using rule 69 (CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO .)
    cwrite          reduce using rule 69 (CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO .)
    left_par        reduce using rule 69 (CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO .)
    id              reduce using rule 69 (CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO .)
    return          reduce using rule 69 (CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO .)


state 227

    (70) CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION . right_par CUERPO

    right_par       shift and go to state 267


state 228

    (113) LLAMADA_F -> left_par EXPRESION . LLAMADAF_AUX right_par
    (114) LLAMADAF_AUX -> . comma EXPRESION LLAMADAF_AUX
    (115) LLAMADAF_AUX -> . empty
    (139) empty -> .

    comma           shift and go to state 269
    right_par       reduce using rule 139 (empty -> .)

    LLAMADAF_AUX                   shift and go to state 268
    empty                          shift and go to state 270

state 229

    (121) NUMERICA -> plus nt_sigMas NUMERICA_AUX .

    multiply        reduce using rule 121 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    divide          reduce using rule 121 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    plus            reduce using rule 121 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    minus           reduce using rule 121 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    and             reduce using rule 121 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    or              reduce using rule 121 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    right_par       reduce using rule 121 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    comma           reduce using rule 121 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    semicolon       reduce using rule 121 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    right_sb        reduce using rule 121 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    lt              reduce using rule 121 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    gt              reduce using rule 121 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    ne              reduce using rule 121 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    ge              reduce using rule 121 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    le              reduce using rule 121 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    et              reduce using rule 121 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)


state 230

    (100) EXP_AUX -> minus . nt_pushPOper EXP
    (137) nt_pushPOper -> . empty
    (139) empty -> .

    left_par        reduce using rule 139 (empty -> .)
    id              reduce using rule 139 (empty -> .)
    plus            reduce using rule 139 (empty -> .)
    minus           reduce using rule 139 (empty -> .)
    true            reduce using rule 139 (empty -> .)
    false           reduce using rule 139 (empty -> .)
    cteString       reduce using rule 139 (empty -> .)
    cteInt          reduce using rule 139 (empty -> .)
    cteFloat        reduce using rule 139 (empty -> .)

    empty                          shift and go to state 156
    nt_pushPOper                   shift and go to state 271

state 231

    (101) EXP_AUX -> empty .

    right_sb        reduce using rule 101 (EXP_AUX -> empty .)
    lt              reduce using rule 101 (EXP_AUX -> empty .)
    gt              reduce using rule 101 (EXP_AUX -> empty .)
    ne              reduce using rule 101 (EXP_AUX -> empty .)
    ge              reduce using rule 101 (EXP_AUX -> empty .)
    le              reduce using rule 101 (EXP_AUX -> empty .)
    et              reduce using rule 101 (EXP_AUX -> empty .)
    and             reduce using rule 101 (EXP_AUX -> empty .)
    or              reduce using rule 101 (EXP_AUX -> empty .)
    right_par       reduce using rule 101 (EXP_AUX -> empty .)
    comma           reduce using rule 101 (EXP_AUX -> empty .)
    semicolon       reduce using rule 101 (EXP_AUX -> empty .)


state 232

    (99) EXP_AUX -> plus . nt_pushPOper EXP
    (137) nt_pushPOper -> . empty
    (139) empty -> .

    left_par        reduce using rule 139 (empty -> .)
    id              reduce using rule 139 (empty -> .)
    plus            reduce using rule 139 (empty -> .)
    minus           reduce using rule 139 (empty -> .)
    true            reduce using rule 139 (empty -> .)
    false           reduce using rule 139 (empty -> .)
    cteString       reduce using rule 139 (empty -> .)
    cteInt          reduce using rule 139 (empty -> .)
    cteFloat        reduce using rule 139 (empty -> .)

    empty                          shift and go to state 156
    nt_pushPOper                   shift and go to state 272

state 233

    (97) EXP -> TERMINO nt_checar_sumas EXP_AUX .

    lt              reduce using rule 97 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    gt              reduce using rule 97 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    ne              reduce using rule 97 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    ge              reduce using rule 97 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    le              reduce using rule 97 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    et              reduce using rule 97 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    and             reduce using rule 97 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    or              reduce using rule 97 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    right_par       reduce using rule 97 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    comma           reduce using rule 97 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    semicolon       reduce using rule 97 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    right_sb        reduce using rule 97 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)


state 234

    (107) FACTOR -> left_par nt_pushPOper EXPRESION . right_par nt_popPOper

    right_par       shift and go to state 273


state 235

    (102) TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .

    plus            reduce using rule 102 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    minus           reduce using rule 102 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    right_sb        reduce using rule 102 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    lt              reduce using rule 102 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    gt              reduce using rule 102 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    ne              reduce using rule 102 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    ge              reduce using rule 102 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    le              reduce using rule 102 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    et              reduce using rule 102 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    and             reduce using rule 102 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    or              reduce using rule 102 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    right_par       reduce using rule 102 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    comma           reduce using rule 102 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    semicolon       reduce using rule 102 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)


state 236

    (105) TERMINO_AUX -> divide . nt_pushPOper TERMINO
    (137) nt_pushPOper -> . empty
    (139) empty -> .

    left_par        reduce using rule 139 (empty -> .)
    id              reduce using rule 139 (empty -> .)
    plus            reduce using rule 139 (empty -> .)
    minus           reduce using rule 139 (empty -> .)
    true            reduce using rule 139 (empty -> .)
    false           reduce using rule 139 (empty -> .)
    cteString       reduce using rule 139 (empty -> .)
    cteInt          reduce using rule 139 (empty -> .)
    cteFloat        reduce using rule 139 (empty -> .)

    empty                          shift and go to state 156
    nt_pushPOper                   shift and go to state 274

state 237

    (104) TERMINO_AUX -> multiply . nt_pushPOper TERMINO
    (137) nt_pushPOper -> . empty
    (139) empty -> .

    left_par        reduce using rule 139 (empty -> .)
    id              reduce using rule 139 (empty -> .)
    plus            reduce using rule 139 (empty -> .)
    minus           reduce using rule 139 (empty -> .)
    true            reduce using rule 139 (empty -> .)
    false           reduce using rule 139 (empty -> .)
    cteString       reduce using rule 139 (empty -> .)
    cteInt          reduce using rule 139 (empty -> .)
    cteFloat        reduce using rule 139 (empty -> .)

    empty                          shift and go to state 156
    nt_pushPOper                   shift and go to state 275

state 238

    (106) TERMINO_AUX -> empty .

    plus            reduce using rule 106 (TERMINO_AUX -> empty .)
    minus           reduce using rule 106 (TERMINO_AUX -> empty .)
    right_sb        reduce using rule 106 (TERMINO_AUX -> empty .)
    lt              reduce using rule 106 (TERMINO_AUX -> empty .)
    gt              reduce using rule 106 (TERMINO_AUX -> empty .)
    ne              reduce using rule 106 (TERMINO_AUX -> empty .)
    ge              reduce using rule 106 (TERMINO_AUX -> empty .)
    le              reduce using rule 106 (TERMINO_AUX -> empty .)
    et              reduce using rule 106 (TERMINO_AUX -> empty .)
    and             reduce using rule 106 (TERMINO_AUX -> empty .)
    or              reduce using rule 106 (TERMINO_AUX -> empty .)
    right_par       reduce using rule 106 (TERMINO_AUX -> empty .)
    comma           reduce using rule 106 (TERMINO_AUX -> empty .)
    semicolon       reduce using rule 106 (TERMINO_AUX -> empty .)


state 239

    (122) NUMERICA -> minus nt_sigMenos NUMERICA_AUX .

    multiply        reduce using rule 122 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    divide          reduce using rule 122 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    plus            reduce using rule 122 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    minus           reduce using rule 122 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    and             reduce using rule 122 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    or              reduce using rule 122 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    right_par       reduce using rule 122 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    comma           reduce using rule 122 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    semicolon       reduce using rule 122 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    right_sb        reduce using rule 122 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    lt              reduce using rule 122 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    gt              reduce using rule 122 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    ne              reduce using rule 122 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    ge              reduce using rule 122 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    le              reduce using rule 122 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    et              reduce using rule 122 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)


state 240

    (76) ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par . semicolon

    semicolon       shift and go to state 276


state 241

    (132) ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals . semicolon

    semicolon       shift and go to state 277


state 242

    (133) nt_checaEquals -> empty .

    semicolon       reduce using rule 133 (nt_checaEquals -> empty .)


state 243

    (85) EXPRESION_B -> and . nt_pushPOper EXPRESION
    (137) nt_pushPOper -> . empty
    (139) empty -> .

    not             reduce using rule 139 (empty -> .)
    left_par        reduce using rule 139 (empty -> .)
    id              reduce using rule 139 (empty -> .)
    plus            reduce using rule 139 (empty -> .)
    minus           reduce using rule 139 (empty -> .)
    true            reduce using rule 139 (empty -> .)
    false           reduce using rule 139 (empty -> .)
    cteString       reduce using rule 139 (empty -> .)
    cteInt          reduce using rule 139 (empty -> .)
    cteFloat        reduce using rule 139 (empty -> .)

    empty                          shift and go to state 156
    nt_pushPOper                   shift and go to state 278

state 244

    (81) EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B .

    right_par       reduce using rule 81 (EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B .)
    comma           reduce using rule 81 (EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B .)
    semicolon       reduce using rule 81 (EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B .)


state 245

    (86) EXPRESION_B -> or . nt_pushPOper EXPRESION
    (137) nt_pushPOper -> . empty
    (139) empty -> .

    not             reduce using rule 139 (empty -> .)
    left_par        reduce using rule 139 (empty -> .)
    id              reduce using rule 139 (empty -> .)
    plus            reduce using rule 139 (empty -> .)
    minus           reduce using rule 139 (empty -> .)
    true            reduce using rule 139 (empty -> .)
    false           reduce using rule 139 (empty -> .)
    cteString       reduce using rule 139 (empty -> .)
    cteInt          reduce using rule 139 (empty -> .)
    cteFloat        reduce using rule 139 (empty -> .)

    empty                          shift and go to state 156
    nt_pushPOper                   shift and go to state 279

state 246

    (87) EXPRESION_B -> empty .

    right_par       reduce using rule 87 (EXPRESION_B -> empty .)
    comma           reduce using rule 87 (EXPRESION_B -> empty .)
    semicolon       reduce using rule 87 (EXPRESION_B -> empty .)


state 247

    (92) EXPRESIONLOGICA_AUX -> ge nt_pushPOper . EXP nt_checarRelop
    (97) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (102) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (107) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (108) FACTOR -> . CONSTANTE
    (109) FACTOR -> . LISTA
    (110) FACTOR -> . FACTOR_AUX
    (117) CONSTANTE -> . NUMERICA
    (118) CONSTANTE -> . BOOLEANA
    (119) CONSTANTE -> . STRINGS
    (116) LISTA -> . id left_sb EXP right_sb
    (111) FACTOR_AUX -> . id nt_pushPilaO
    (112) FACTOR_AUX -> . id LLAMADA_F
    (120) NUMERICA -> . NUMERICA_AUX
    (121) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (122) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (129) BOOLEANA -> . true
    (130) BOOLEANA -> . false
    (131) STRINGS -> . cteString
    (125) NUMERICA_AUX -> . cteInt nt_pushInt
    (126) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 145
    id              shift and go to state 140
    plus            shift and go to state 141
    minus           shift and go to state 154
    true            shift and go to state 146
    false           shift and go to state 136
    cteString       shift and go to state 144
    cteInt          shift and go to state 149
    cteFloat        shift and go to state 138

    BOOLEANA                       shift and go to state 139
    EXP                            shift and go to state 280
    FACTOR_AUX                     shift and go to state 142
    NUMERICA_AUX                   shift and go to state 150
    TERMINO                        shift and go to state 143
    STRINGS                        shift and go to state 147
    CONSTANTE                      shift and go to state 148
    NUMERICA                       shift and go to state 151
    FACTOR                         shift and go to state 152
    LISTA                          shift and go to state 153

state 248

    (90) EXPRESIONLOGICA_AUX -> gt nt_pushPOper . EXP nt_checarRelop
    (97) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (102) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (107) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (108) FACTOR -> . CONSTANTE
    (109) FACTOR -> . LISTA
    (110) FACTOR -> . FACTOR_AUX
    (117) CONSTANTE -> . NUMERICA
    (118) CONSTANTE -> . BOOLEANA
    (119) CONSTANTE -> . STRINGS
    (116) LISTA -> . id left_sb EXP right_sb
    (111) FACTOR_AUX -> . id nt_pushPilaO
    (112) FACTOR_AUX -> . id LLAMADA_F
    (120) NUMERICA -> . NUMERICA_AUX
    (121) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (122) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (129) BOOLEANA -> . true
    (130) BOOLEANA -> . false
    (131) STRINGS -> . cteString
    (125) NUMERICA_AUX -> . cteInt nt_pushInt
    (126) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 145
    id              shift and go to state 140
    plus            shift and go to state 141
    minus           shift and go to state 154
    true            shift and go to state 146
    false           shift and go to state 136
    cteString       shift and go to state 144
    cteInt          shift and go to state 149
    cteFloat        shift and go to state 138

    BOOLEANA                       shift and go to state 139
    EXP                            shift and go to state 281
    FACTOR_AUX                     shift and go to state 142
    NUMERICA_AUX                   shift and go to state 150
    TERMINO                        shift and go to state 143
    STRINGS                        shift and go to state 147
    CONSTANTE                      shift and go to state 148
    NUMERICA                       shift and go to state 151
    FACTOR                         shift and go to state 152
    LISTA                          shift and go to state 153

state 249

    (91) EXPRESIONLOGICA_AUX -> ne nt_pushPOper . EXP nt_checarRelop
    (97) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (102) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (107) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (108) FACTOR -> . CONSTANTE
    (109) FACTOR -> . LISTA
    (110) FACTOR -> . FACTOR_AUX
    (117) CONSTANTE -> . NUMERICA
    (118) CONSTANTE -> . BOOLEANA
    (119) CONSTANTE -> . STRINGS
    (116) LISTA -> . id left_sb EXP right_sb
    (111) FACTOR_AUX -> . id nt_pushPilaO
    (112) FACTOR_AUX -> . id LLAMADA_F
    (120) NUMERICA -> . NUMERICA_AUX
    (121) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (122) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (129) BOOLEANA -> . true
    (130) BOOLEANA -> . false
    (131) STRINGS -> . cteString
    (125) NUMERICA_AUX -> . cteInt nt_pushInt
    (126) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 145
    id              shift and go to state 140
    plus            shift and go to state 141
    minus           shift and go to state 154
    true            shift and go to state 146
    false           shift and go to state 136
    cteString       shift and go to state 144
    cteInt          shift and go to state 149
    cteFloat        shift and go to state 138

    BOOLEANA                       shift and go to state 139
    EXP                            shift and go to state 282
    FACTOR_AUX                     shift and go to state 142
    NUMERICA_AUX                   shift and go to state 150
    TERMINO                        shift and go to state 143
    STRINGS                        shift and go to state 147
    CONSTANTE                      shift and go to state 148
    NUMERICA                       shift and go to state 151
    FACTOR                         shift and go to state 152
    LISTA                          shift and go to state 153

state 250

    (89) EXPRESIONLOGICA_AUX -> lt nt_pushPOper . EXP nt_checarRelop
    (97) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (102) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (107) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (108) FACTOR -> . CONSTANTE
    (109) FACTOR -> . LISTA
    (110) FACTOR -> . FACTOR_AUX
    (117) CONSTANTE -> . NUMERICA
    (118) CONSTANTE -> . BOOLEANA
    (119) CONSTANTE -> . STRINGS
    (116) LISTA -> . id left_sb EXP right_sb
    (111) FACTOR_AUX -> . id nt_pushPilaO
    (112) FACTOR_AUX -> . id LLAMADA_F
    (120) NUMERICA -> . NUMERICA_AUX
    (121) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (122) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (129) BOOLEANA -> . true
    (130) BOOLEANA -> . false
    (131) STRINGS -> . cteString
    (125) NUMERICA_AUX -> . cteInt nt_pushInt
    (126) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 145
    id              shift and go to state 140
    plus            shift and go to state 141
    minus           shift and go to state 154
    true            shift and go to state 146
    false           shift and go to state 136
    cteString       shift and go to state 144
    cteInt          shift and go to state 149
    cteFloat        shift and go to state 138

    BOOLEANA                       shift and go to state 139
    EXP                            shift and go to state 283
    FACTOR_AUX                     shift and go to state 142
    NUMERICA_AUX                   shift and go to state 150
    TERMINO                        shift and go to state 143
    STRINGS                        shift and go to state 147
    CONSTANTE                      shift and go to state 148
    NUMERICA                       shift and go to state 151
    FACTOR                         shift and go to state 152
    LISTA                          shift and go to state 153

state 251

    (93) EXPRESIONLOGICA_AUX -> le nt_pushPOper . EXP nt_checarRelop
    (97) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (102) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (107) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (108) FACTOR -> . CONSTANTE
    (109) FACTOR -> . LISTA
    (110) FACTOR -> . FACTOR_AUX
    (117) CONSTANTE -> . NUMERICA
    (118) CONSTANTE -> . BOOLEANA
    (119) CONSTANTE -> . STRINGS
    (116) LISTA -> . id left_sb EXP right_sb
    (111) FACTOR_AUX -> . id nt_pushPilaO
    (112) FACTOR_AUX -> . id LLAMADA_F
    (120) NUMERICA -> . NUMERICA_AUX
    (121) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (122) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (129) BOOLEANA -> . true
    (130) BOOLEANA -> . false
    (131) STRINGS -> . cteString
    (125) NUMERICA_AUX -> . cteInt nt_pushInt
    (126) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 145
    id              shift and go to state 140
    plus            shift and go to state 141
    minus           shift and go to state 154
    true            shift and go to state 146
    false           shift and go to state 136
    cteString       shift and go to state 144
    cteInt          shift and go to state 149
    cteFloat        shift and go to state 138

    BOOLEANA                       shift and go to state 139
    EXP                            shift and go to state 284
    FACTOR_AUX                     shift and go to state 142
    NUMERICA_AUX                   shift and go to state 150
    TERMINO                        shift and go to state 143
    STRINGS                        shift and go to state 147
    CONSTANTE                      shift and go to state 148
    NUMERICA                       shift and go to state 151
    FACTOR                         shift and go to state 152
    LISTA                          shift and go to state 153

state 252

    (94) EXPRESIONLOGICA_AUX -> et nt_pushPOper . EXP nt_checarRelop
    (97) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (102) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (107) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (108) FACTOR -> . CONSTANTE
    (109) FACTOR -> . LISTA
    (110) FACTOR -> . FACTOR_AUX
    (117) CONSTANTE -> . NUMERICA
    (118) CONSTANTE -> . BOOLEANA
    (119) CONSTANTE -> . STRINGS
    (116) LISTA -> . id left_sb EXP right_sb
    (111) FACTOR_AUX -> . id nt_pushPilaO
    (112) FACTOR_AUX -> . id LLAMADA_F
    (120) NUMERICA -> . NUMERICA_AUX
    (121) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (122) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (129) BOOLEANA -> . true
    (130) BOOLEANA -> . false
    (131) STRINGS -> . cteString
    (125) NUMERICA_AUX -> . cteInt nt_pushInt
    (126) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 145
    id              shift and go to state 140
    plus            shift and go to state 141
    minus           shift and go to state 154
    true            shift and go to state 146
    false           shift and go to state 136
    cteString       shift and go to state 144
    cteInt          shift and go to state 149
    cteFloat        shift and go to state 138

    BOOLEANA                       shift and go to state 139
    EXP                            shift and go to state 285
    FACTOR_AUX                     shift and go to state 142
    NUMERICA_AUX                   shift and go to state 150
    TERMINO                        shift and go to state 143
    STRINGS                        shift and go to state 147
    CONSTANTE                      shift and go to state 148
    NUMERICA                       shift and go to state 151
    FACTOR                         shift and go to state 152
    LISTA                          shift and go to state 153

state 253

    (73) CICLO -> while left_par EXPRESION right_par CUERPO .

    list            reduce using rule 73 (CICLO -> while left_par EXPRESION right_par CUERPO .)
    var             reduce using rule 73 (CICLO -> while left_par EXPRESION right_par CUERPO .)
    if              reduce using rule 73 (CICLO -> while left_par EXPRESION right_par CUERPO .)
    while           reduce using rule 73 (CICLO -> while left_par EXPRESION right_par CUERPO .)
    cread           reduce using rule 73 (CICLO -> while left_par EXPRESION right_par CUERPO .)
    cwrite          reduce using rule 73 (CICLO -> while left_par EXPRESION right_par CUERPO .)
    left_par        reduce using rule 73 (CICLO -> while left_par EXPRESION right_par CUERPO .)
    id              reduce using rule 73 (CICLO -> while left_par EXPRESION right_par CUERPO .)
    return          reduce using rule 73 (CICLO -> while left_par EXPRESION right_par CUERPO .)
    right_cb        reduce using rule 73 (CICLO -> while left_par EXPRESION right_par CUERPO .)


state 254

    (47) CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX . RETORNO
    (50) RETORNO -> . return EXP semicolon

    return          shift and go to state 258

    RETORNO                        shift and go to state 286

state 255

    (45) CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .

    main            reduce using rule 45 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)
    int             reduce using rule 45 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)
    float           reduce using rule 45 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)
    bool            reduce using rule 45 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)
    string          reduce using rule 45 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)
    void            reduce using rule 45 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)


state 256

    (40) CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS . CUERPOFUNC_ESTATUTO
    (43) CUERPOFUNC_ESTATUTO -> . ESTATUTO
    (44) CUERPOFUNC_ESTATUTO -> . empty
    (62) ESTATUTO -> . ASIGNACION
    (63) ESTATUTO -> . CONDICION
    (64) ESTATUTO -> . CICLO
    (65) ESTATUTO -> . LECTURA
    (66) ESTATUTO -> . ESCRITURA
    (67) ESTATUTO -> . LLAMADA
    (139) empty -> .
    (132) ASIGNACION -> . ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon
    (68) CONDICION -> . if CONDICION_ELSEIF CONDICION_ELSE
    (73) CICLO -> . while left_par EXPRESION right_par CUERPO
    (74) LECTURA -> . cread left_par id nt_leer right_par semicolon
    (76) ESCRITURA -> . cwrite left_par EXPRESION nt_escribir right_par semicolon
    (78) LLAMADA -> . left_par LLAMADA_EXPRESION right_par semicolon
    (134) ASIGNACION_AUX -> . id nt_pushPilaO
    (135) ASIGNACION_AUX -> . LISTA
    (116) LISTA -> . id left_sb EXP right_sb

  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for cread resolved as shift
  ! shift/reduce conflict for cwrite resolved as shift
  ! shift/reduce conflict for left_par resolved as shift
  ! shift/reduce conflict for id resolved as shift
    list            reduce using rule 139 (empty -> .)
    var             reduce using rule 139 (empty -> .)
    return          reduce using rule 139 (empty -> .)
    right_cb        reduce using rule 139 (empty -> .)
    if              shift and go to state 83
    while           shift and go to state 95
    cread           shift and go to state 81
    cwrite          shift and go to state 87
    left_par        shift and go to state 93
    id              shift and go to state 86

  ! if              [ reduce using rule 139 (empty -> .) ]
  ! while           [ reduce using rule 139 (empty -> .) ]
  ! cread           [ reduce using rule 139 (empty -> .) ]
  ! cwrite          [ reduce using rule 139 (empty -> .) ]
  ! left_par        [ reduce using rule 139 (empty -> .) ]
  ! id              [ reduce using rule 139 (empty -> .) ]

    CICLO                          shift and go to state 80
    LECTURA                        shift and go to state 82
    ESCRITURA                      shift and go to state 89
    CUERPOFUNC_ESTATUTO            shift and go to state 287
    ASIGNACION                     shift and go to state 84
    ESTATUTO                       shift and go to state 260
    ASIGNACION_AUX                 shift and go to state 88
    empty                          shift and go to state 261
    LLAMADA                        shift and go to state 91
    CONDICION                      shift and go to state 92
    LISTA                          shift and go to state 96

state 257

    (46) CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .

    right_cb        reduce using rule 46 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    list            reduce using rule 46 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    var             reduce using rule 46 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    return          reduce using rule 46 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    if              reduce using rule 46 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    while           reduce using rule 46 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    cread           reduce using rule 46 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    cwrite          reduce using rule 46 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    left_par        reduce using rule 46 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    id              reduce using rule 46 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)


state 258

    (50) RETORNO -> return . EXP semicolon
    (97) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (102) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (107) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (108) FACTOR -> . CONSTANTE
    (109) FACTOR -> . LISTA
    (110) FACTOR -> . FACTOR_AUX
    (117) CONSTANTE -> . NUMERICA
    (118) CONSTANTE -> . BOOLEANA
    (119) CONSTANTE -> . STRINGS
    (116) LISTA -> . id left_sb EXP right_sb
    (111) FACTOR_AUX -> . id nt_pushPilaO
    (112) FACTOR_AUX -> . id LLAMADA_F
    (120) NUMERICA -> . NUMERICA_AUX
    (121) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (122) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (129) BOOLEANA -> . true
    (130) BOOLEANA -> . false
    (131) STRINGS -> . cteString
    (125) NUMERICA_AUX -> . cteInt nt_pushInt
    (126) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 145
    id              shift and go to state 140
    plus            shift and go to state 141
    minus           shift and go to state 154
    true            shift and go to state 146
    false           shift and go to state 136
    cteString       shift and go to state 144
    cteInt          shift and go to state 149
    cteFloat        shift and go to state 138

    BOOLEANA                       shift and go to state 139
    EXP                            shift and go to state 288
    FACTOR_AUX                     shift and go to state 142
    NUMERICA_AUX                   shift and go to state 150
    TERMINO                        shift and go to state 143
    STRINGS                        shift and go to state 147
    CONSTANTE                      shift and go to state 148
    NUMERICA                       shift and go to state 151
    FACTOR                         shift and go to state 152
    LISTA                          shift and go to state 153

state 259

    (39) CUERPOFUNC_AUX -> CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .

    list            reduce using rule 39 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    var             reduce using rule 39 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    if              reduce using rule 39 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    while           reduce using rule 39 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    cread           reduce using rule 39 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    cwrite          reduce using rule 39 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    left_par        reduce using rule 39 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    id              reduce using rule 39 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    right_cb        reduce using rule 39 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    return          reduce using rule 39 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)


state 260

    (43) CUERPOFUNC_ESTATUTO -> ESTATUTO .

    list            reduce using rule 43 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    var             reduce using rule 43 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    if              reduce using rule 43 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    while           reduce using rule 43 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    cread           reduce using rule 43 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    cwrite          reduce using rule 43 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    left_par        reduce using rule 43 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    id              reduce using rule 43 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    return          reduce using rule 43 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    right_cb        reduce using rule 43 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)


state 261

    (44) CUERPOFUNC_ESTATUTO -> empty .

    list            reduce using rule 44 (CUERPOFUNC_ESTATUTO -> empty .)
    var             reduce using rule 44 (CUERPOFUNC_ESTATUTO -> empty .)
    if              reduce using rule 44 (CUERPOFUNC_ESTATUTO -> empty .)
    while           reduce using rule 44 (CUERPOFUNC_ESTATUTO -> empty .)
    cread           reduce using rule 44 (CUERPOFUNC_ESTATUTO -> empty .)
    cwrite          reduce using rule 44 (CUERPOFUNC_ESTATUTO -> empty .)
    left_par        reduce using rule 44 (CUERPOFUNC_ESTATUTO -> empty .)
    id              reduce using rule 44 (CUERPOFUNC_ESTATUTO -> empty .)
    return          reduce using rule 44 (CUERPOFUNC_ESTATUTO -> empty .)
    right_cb        reduce using rule 44 (CUERPOFUNC_ESTATUTO -> empty .)


state 262

    (56) FUNC_PARA -> FUNC_PARA comma TIPO id nt_agregarParametro .

    right_par       reduce using rule 56 (FUNC_PARA -> FUNC_PARA comma TIPO id nt_agregarParametro .)
    comma           reduce using rule 56 (FUNC_PARA -> FUNC_PARA comma TIPO id nt_agregarParametro .)


state 263

    (58) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .

    main            reduce using rule 58 (VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)
    int             reduce using rule 58 (VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)
    float           reduce using rule 58 (VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)
    bool            reduce using rule 58 (VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)
    string          reduce using rule 58 (VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)
    void            reduce using rule 58 (VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)


state 264

    (61) VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO id nt_agregarParametro .

    right_par       reduce using rule 61 (VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO id nt_agregarParametro .)
    comma           reduce using rule 61 (VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO id nt_agregarParametro .)


state 265

    (18) VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar .

    semicolon       reduce using rule 18 (VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar .)
    comma           reduce using rule 18 (VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar .)


state 266

    (74) LECTURA -> cread left_par id nt_leer right_par semicolon .

    list            reduce using rule 74 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    var             reduce using rule 74 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    if              reduce using rule 74 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    while           reduce using rule 74 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    cread           reduce using rule 74 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    cwrite          reduce using rule 74 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    left_par        reduce using rule 74 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    id              reduce using rule 74 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    return          reduce using rule 74 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    right_cb        reduce using rule 74 (LECTURA -> cread left_par id nt_leer right_par semicolon .)


state 267

    (70) CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par . CUERPO
    (31) CUERPO -> . left_cb CUERPO_AUX right_cb

    left_cb         shift and go to state 62

    CUERPO                         shift and go to state 289

state 268

    (113) LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX . right_par

    right_par       shift and go to state 290


state 269

    (114) LLAMADAF_AUX -> comma . EXPRESION LLAMADAF_AUX
    (81) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (83) EXPRESION_NOT -> . not nt_pushPOper
    (84) EXPRESION_NOT -> . empty
    (139) empty -> .

    not             shift and go to state 118
    left_par        reduce using rule 139 (empty -> .)
    id              reduce using rule 139 (empty -> .)
    plus            reduce using rule 139 (empty -> .)
    minus           reduce using rule 139 (empty -> .)
    true            reduce using rule 139 (empty -> .)
    false           reduce using rule 139 (empty -> .)
    cteString       reduce using rule 139 (empty -> .)
    cteInt          reduce using rule 139 (empty -> .)
    cteFloat        reduce using rule 139 (empty -> .)

    EXPRESION                      shift and go to state 291
    EXPRESION_NOT                  shift and go to state 116
    empty                          shift and go to state 119

state 270

    (115) LLAMADAF_AUX -> empty .

    right_par       reduce using rule 115 (LLAMADAF_AUX -> empty .)


state 271

    (100) EXP_AUX -> minus nt_pushPOper . EXP
    (97) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (102) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (107) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (108) FACTOR -> . CONSTANTE
    (109) FACTOR -> . LISTA
    (110) FACTOR -> . FACTOR_AUX
    (117) CONSTANTE -> . NUMERICA
    (118) CONSTANTE -> . BOOLEANA
    (119) CONSTANTE -> . STRINGS
    (116) LISTA -> . id left_sb EXP right_sb
    (111) FACTOR_AUX -> . id nt_pushPilaO
    (112) FACTOR_AUX -> . id LLAMADA_F
    (120) NUMERICA -> . NUMERICA_AUX
    (121) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (122) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (129) BOOLEANA -> . true
    (130) BOOLEANA -> . false
    (131) STRINGS -> . cteString
    (125) NUMERICA_AUX -> . cteInt nt_pushInt
    (126) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 145
    id              shift and go to state 140
    plus            shift and go to state 141
    minus           shift and go to state 154
    true            shift and go to state 146
    false           shift and go to state 136
    cteString       shift and go to state 144
    cteInt          shift and go to state 149
    cteFloat        shift and go to state 138

    BOOLEANA                       shift and go to state 139
    EXP                            shift and go to state 292
    FACTOR_AUX                     shift and go to state 142
    NUMERICA_AUX                   shift and go to state 150
    TERMINO                        shift and go to state 143
    STRINGS                        shift and go to state 147
    CONSTANTE                      shift and go to state 148
    NUMERICA                       shift and go to state 151
    FACTOR                         shift and go to state 152
    LISTA                          shift and go to state 153

state 272

    (99) EXP_AUX -> plus nt_pushPOper . EXP
    (97) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (102) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (107) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (108) FACTOR -> . CONSTANTE
    (109) FACTOR -> . LISTA
    (110) FACTOR -> . FACTOR_AUX
    (117) CONSTANTE -> . NUMERICA
    (118) CONSTANTE -> . BOOLEANA
    (119) CONSTANTE -> . STRINGS
    (116) LISTA -> . id left_sb EXP right_sb
    (111) FACTOR_AUX -> . id nt_pushPilaO
    (112) FACTOR_AUX -> . id LLAMADA_F
    (120) NUMERICA -> . NUMERICA_AUX
    (121) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (122) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (129) BOOLEANA -> . true
    (130) BOOLEANA -> . false
    (131) STRINGS -> . cteString
    (125) NUMERICA_AUX -> . cteInt nt_pushInt
    (126) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 145
    id              shift and go to state 140
    plus            shift and go to state 141
    minus           shift and go to state 154
    true            shift and go to state 146
    false           shift and go to state 136
    cteString       shift and go to state 144
    cteInt          shift and go to state 149
    cteFloat        shift and go to state 138

    BOOLEANA                       shift and go to state 139
    EXP                            shift and go to state 293
    FACTOR_AUX                     shift and go to state 142
    NUMERICA_AUX                   shift and go to state 150
    TERMINO                        shift and go to state 143
    STRINGS                        shift and go to state 147
    CONSTANTE                      shift and go to state 148
    NUMERICA                       shift and go to state 151
    FACTOR                         shift and go to state 152
    LISTA                          shift and go to state 153

state 273

    (107) FACTOR -> left_par nt_pushPOper EXPRESION right_par . nt_popPOper
    (138) nt_popPOper -> . empty
    (139) empty -> .

    multiply        reduce using rule 139 (empty -> .)
    divide          reduce using rule 139 (empty -> .)
    plus            reduce using rule 139 (empty -> .)
    minus           reduce using rule 139 (empty -> .)
    right_sb        reduce using rule 139 (empty -> .)
    lt              reduce using rule 139 (empty -> .)
    gt              reduce using rule 139 (empty -> .)
    ne              reduce using rule 139 (empty -> .)
    ge              reduce using rule 139 (empty -> .)
    le              reduce using rule 139 (empty -> .)
    et              reduce using rule 139 (empty -> .)
    and             reduce using rule 139 (empty -> .)
    or              reduce using rule 139 (empty -> .)
    right_par       reduce using rule 139 (empty -> .)
    comma           reduce using rule 139 (empty -> .)
    semicolon       reduce using rule 139 (empty -> .)

    nt_popPOper                    shift and go to state 294
    empty                          shift and go to state 295

state 274

    (105) TERMINO_AUX -> divide nt_pushPOper . TERMINO
    (102) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (107) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (108) FACTOR -> . CONSTANTE
    (109) FACTOR -> . LISTA
    (110) FACTOR -> . FACTOR_AUX
    (117) CONSTANTE -> . NUMERICA
    (118) CONSTANTE -> . BOOLEANA
    (119) CONSTANTE -> . STRINGS
    (116) LISTA -> . id left_sb EXP right_sb
    (111) FACTOR_AUX -> . id nt_pushPilaO
    (112) FACTOR_AUX -> . id LLAMADA_F
    (120) NUMERICA -> . NUMERICA_AUX
    (121) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (122) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (129) BOOLEANA -> . true
    (130) BOOLEANA -> . false
    (131) STRINGS -> . cteString
    (125) NUMERICA_AUX -> . cteInt nt_pushInt
    (126) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 145
    id              shift and go to state 140
    plus            shift and go to state 141
    minus           shift and go to state 154
    true            shift and go to state 146
    false           shift and go to state 136
    cteString       shift and go to state 144
    cteInt          shift and go to state 149
    cteFloat        shift and go to state 138

    CONSTANTE                      shift and go to state 148
    FACTOR_AUX                     shift and go to state 142
    NUMERICA                       shift and go to state 151
    NUMERICA_AUX                   shift and go to state 150
    BOOLEANA                       shift and go to state 139
    TERMINO                        shift and go to state 296
    FACTOR                         shift and go to state 152
    LISTA                          shift and go to state 153
    STRINGS                        shift and go to state 147

state 275

    (104) TERMINO_AUX -> multiply nt_pushPOper . TERMINO
    (102) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (107) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (108) FACTOR -> . CONSTANTE
    (109) FACTOR -> . LISTA
    (110) FACTOR -> . FACTOR_AUX
    (117) CONSTANTE -> . NUMERICA
    (118) CONSTANTE -> . BOOLEANA
    (119) CONSTANTE -> . STRINGS
    (116) LISTA -> . id left_sb EXP right_sb
    (111) FACTOR_AUX -> . id nt_pushPilaO
    (112) FACTOR_AUX -> . id LLAMADA_F
    (120) NUMERICA -> . NUMERICA_AUX
    (121) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (122) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (129) BOOLEANA -> . true
    (130) BOOLEANA -> . false
    (131) STRINGS -> . cteString
    (125) NUMERICA_AUX -> . cteInt nt_pushInt
    (126) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 145
    id              shift and go to state 140
    plus            shift and go to state 141
    minus           shift and go to state 154
    true            shift and go to state 146
    false           shift and go to state 136
    cteString       shift and go to state 144
    cteInt          shift and go to state 149
    cteFloat        shift and go to state 138

    CONSTANTE                      shift and go to state 148
    FACTOR_AUX                     shift and go to state 142
    NUMERICA                       shift and go to state 151
    NUMERICA_AUX                   shift and go to state 150
    BOOLEANA                       shift and go to state 139
    TERMINO                        shift and go to state 297
    FACTOR                         shift and go to state 152
    LISTA                          shift and go to state 153
    STRINGS                        shift and go to state 147

state 276

    (76) ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .

    right_cb        reduce using rule 76 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    list            reduce using rule 76 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    var             reduce using rule 76 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    if              reduce using rule 76 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    while           reduce using rule 76 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    cread           reduce using rule 76 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    cwrite          reduce using rule 76 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    left_par        reduce using rule 76 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    id              reduce using rule 76 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    return          reduce using rule 76 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)


state 277

    (132) ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .

    right_cb        reduce using rule 132 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    list            reduce using rule 132 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    var             reduce using rule 132 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    if              reduce using rule 132 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    while           reduce using rule 132 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    cread           reduce using rule 132 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    cwrite          reduce using rule 132 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    left_par        reduce using rule 132 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    id              reduce using rule 132 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    return          reduce using rule 132 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)


state 278

    (85) EXPRESION_B -> and nt_pushPOper . EXPRESION
    (81) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (83) EXPRESION_NOT -> . not nt_pushPOper
    (84) EXPRESION_NOT -> . empty
    (139) empty -> .

    not             shift and go to state 118
    left_par        reduce using rule 139 (empty -> .)
    id              reduce using rule 139 (empty -> .)
    plus            reduce using rule 139 (empty -> .)
    minus           reduce using rule 139 (empty -> .)
    true            reduce using rule 139 (empty -> .)
    false           reduce using rule 139 (empty -> .)
    cteString       reduce using rule 139 (empty -> .)
    cteInt          reduce using rule 139 (empty -> .)
    cteFloat        reduce using rule 139 (empty -> .)

    EXPRESION                      shift and go to state 298
    EXPRESION_NOT                  shift and go to state 116
    empty                          shift and go to state 119

state 279

    (86) EXPRESION_B -> or nt_pushPOper . EXPRESION
    (81) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (83) EXPRESION_NOT -> . not nt_pushPOper
    (84) EXPRESION_NOT -> . empty
    (139) empty -> .

    not             shift and go to state 118
    left_par        reduce using rule 139 (empty -> .)
    id              reduce using rule 139 (empty -> .)
    plus            reduce using rule 139 (empty -> .)
    minus           reduce using rule 139 (empty -> .)
    true            reduce using rule 139 (empty -> .)
    false           reduce using rule 139 (empty -> .)
    cteString       reduce using rule 139 (empty -> .)
    cteInt          reduce using rule 139 (empty -> .)
    cteFloat        reduce using rule 139 (empty -> .)

    EXPRESION                      shift and go to state 299
    EXPRESION_NOT                  shift and go to state 116
    empty                          shift and go to state 119

state 280

    (92) EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP . nt_checarRelop
    (96) nt_checarRelop -> . empty
    (139) empty -> .

    and             reduce using rule 139 (empty -> .)
    or              reduce using rule 139 (empty -> .)
    right_par       reduce using rule 139 (empty -> .)
    comma           reduce using rule 139 (empty -> .)
    semicolon       reduce using rule 139 (empty -> .)

    nt_checarRelop                 shift and go to state 300
    empty                          shift and go to state 301

state 281

    (90) EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP . nt_checarRelop
    (96) nt_checarRelop -> . empty
    (139) empty -> .

    and             reduce using rule 139 (empty -> .)
    or              reduce using rule 139 (empty -> .)
    right_par       reduce using rule 139 (empty -> .)
    comma           reduce using rule 139 (empty -> .)
    semicolon       reduce using rule 139 (empty -> .)

    nt_checarRelop                 shift and go to state 302
    empty                          shift and go to state 301

state 282

    (91) EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP . nt_checarRelop
    (96) nt_checarRelop -> . empty
    (139) empty -> .

    and             reduce using rule 139 (empty -> .)
    or              reduce using rule 139 (empty -> .)
    right_par       reduce using rule 139 (empty -> .)
    comma           reduce using rule 139 (empty -> .)
    semicolon       reduce using rule 139 (empty -> .)

    nt_checarRelop                 shift and go to state 303
    empty                          shift and go to state 301

state 283

    (89) EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP . nt_checarRelop
    (96) nt_checarRelop -> . empty
    (139) empty -> .

    and             reduce using rule 139 (empty -> .)
    or              reduce using rule 139 (empty -> .)
    right_par       reduce using rule 139 (empty -> .)
    comma           reduce using rule 139 (empty -> .)
    semicolon       reduce using rule 139 (empty -> .)

    nt_checarRelop                 shift and go to state 304
    empty                          shift and go to state 301

state 284

    (93) EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP . nt_checarRelop
    (96) nt_checarRelop -> . empty
    (139) empty -> .

    and             reduce using rule 139 (empty -> .)
    or              reduce using rule 139 (empty -> .)
    right_par       reduce using rule 139 (empty -> .)
    comma           reduce using rule 139 (empty -> .)
    semicolon       reduce using rule 139 (empty -> .)

    nt_checarRelop                 shift and go to state 305
    empty                          shift and go to state 301

state 285

    (94) EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP . nt_checarRelop
    (96) nt_checarRelop -> . empty
    (139) empty -> .

    and             reduce using rule 139 (empty -> .)
    or              reduce using rule 139 (empty -> .)
    right_par       reduce using rule 139 (empty -> .)
    comma           reduce using rule 139 (empty -> .)
    semicolon       reduce using rule 139 (empty -> .)

    nt_checarRelop                 shift and go to state 306
    empty                          shift and go to state 301

state 286

    (47) CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .

    right_cb        reduce using rule 47 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    list            reduce using rule 47 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    var             reduce using rule 47 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    return          reduce using rule 47 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    if              reduce using rule 47 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    while           reduce using rule 47 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    cread           reduce using rule 47 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    cwrite          reduce using rule 47 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    left_par        reduce using rule 47 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    id              reduce using rule 47 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)


state 287

    (40) CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .

    list            reduce using rule 40 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    var             reduce using rule 40 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    if              reduce using rule 40 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    while           reduce using rule 40 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    cread           reduce using rule 40 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    cwrite          reduce using rule 40 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    left_par        reduce using rule 40 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    id              reduce using rule 40 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    right_cb        reduce using rule 40 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    return          reduce using rule 40 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)


state 288

    (50) RETORNO -> return EXP . semicolon

    semicolon       shift and go to state 307


state 289

    (70) CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO .

    elseif          reduce using rule 70 (CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO .)
    else            reduce using rule 70 (CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO .)
    right_cb        reduce using rule 70 (CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO .)
    list            reduce using rule 70 (CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO .)
    var             reduce using rule 70 (CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO .)
    if              reduce using rule 70 (CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO .)
    while           reduce using rule 70 (CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO .)
    cread           reduce using rule 70 (CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO .)
    cwrite          reduce using rule 70 (CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO .)
    left_par        reduce using rule 70 (CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO .)
    id              reduce using rule 70 (CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO .)
    return          reduce using rule 70 (CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO .)


state 290

    (113) LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .

    multiply        reduce using rule 113 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    divide          reduce using rule 113 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    plus            reduce using rule 113 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    minus           reduce using rule 113 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    right_sb        reduce using rule 113 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    lt              reduce using rule 113 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    gt              reduce using rule 113 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    ne              reduce using rule 113 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    ge              reduce using rule 113 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    le              reduce using rule 113 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    et              reduce using rule 113 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    and             reduce using rule 113 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    or              reduce using rule 113 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    right_par       reduce using rule 113 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    comma           reduce using rule 113 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    semicolon       reduce using rule 113 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)


state 291

    (114) LLAMADAF_AUX -> comma EXPRESION . LLAMADAF_AUX
    (114) LLAMADAF_AUX -> . comma EXPRESION LLAMADAF_AUX
    (115) LLAMADAF_AUX -> . empty
    (139) empty -> .

    comma           shift and go to state 269
    right_par       reduce using rule 139 (empty -> .)

    LLAMADAF_AUX                   shift and go to state 308
    empty                          shift and go to state 270

state 292

    (100) EXP_AUX -> minus nt_pushPOper EXP .

    right_sb        reduce using rule 100 (EXP_AUX -> minus nt_pushPOper EXP .)
    lt              reduce using rule 100 (EXP_AUX -> minus nt_pushPOper EXP .)
    gt              reduce using rule 100 (EXP_AUX -> minus nt_pushPOper EXP .)
    ne              reduce using rule 100 (EXP_AUX -> minus nt_pushPOper EXP .)
    ge              reduce using rule 100 (EXP_AUX -> minus nt_pushPOper EXP .)
    le              reduce using rule 100 (EXP_AUX -> minus nt_pushPOper EXP .)
    et              reduce using rule 100 (EXP_AUX -> minus nt_pushPOper EXP .)
    and             reduce using rule 100 (EXP_AUX -> minus nt_pushPOper EXP .)
    or              reduce using rule 100 (EXP_AUX -> minus nt_pushPOper EXP .)
    right_par       reduce using rule 100 (EXP_AUX -> minus nt_pushPOper EXP .)
    comma           reduce using rule 100 (EXP_AUX -> minus nt_pushPOper EXP .)
    semicolon       reduce using rule 100 (EXP_AUX -> minus nt_pushPOper EXP .)


state 293

    (99) EXP_AUX -> plus nt_pushPOper EXP .

    right_sb        reduce using rule 99 (EXP_AUX -> plus nt_pushPOper EXP .)
    lt              reduce using rule 99 (EXP_AUX -> plus nt_pushPOper EXP .)
    gt              reduce using rule 99 (EXP_AUX -> plus nt_pushPOper EXP .)
    ne              reduce using rule 99 (EXP_AUX -> plus nt_pushPOper EXP .)
    ge              reduce using rule 99 (EXP_AUX -> plus nt_pushPOper EXP .)
    le              reduce using rule 99 (EXP_AUX -> plus nt_pushPOper EXP .)
    et              reduce using rule 99 (EXP_AUX -> plus nt_pushPOper EXP .)
    and             reduce using rule 99 (EXP_AUX -> plus nt_pushPOper EXP .)
    or              reduce using rule 99 (EXP_AUX -> plus nt_pushPOper EXP .)
    right_par       reduce using rule 99 (EXP_AUX -> plus nt_pushPOper EXP .)
    comma           reduce using rule 99 (EXP_AUX -> plus nt_pushPOper EXP .)
    semicolon       reduce using rule 99 (EXP_AUX -> plus nt_pushPOper EXP .)


state 294

    (107) FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .

    multiply        reduce using rule 107 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    divide          reduce using rule 107 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    plus            reduce using rule 107 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    minus           reduce using rule 107 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    and             reduce using rule 107 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    or              reduce using rule 107 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    right_par       reduce using rule 107 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    comma           reduce using rule 107 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    semicolon       reduce using rule 107 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    right_sb        reduce using rule 107 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    lt              reduce using rule 107 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    gt              reduce using rule 107 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    ne              reduce using rule 107 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    ge              reduce using rule 107 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    le              reduce using rule 107 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    et              reduce using rule 107 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)


state 295

    (138) nt_popPOper -> empty .

    multiply        reduce using rule 138 (nt_popPOper -> empty .)
    divide          reduce using rule 138 (nt_popPOper -> empty .)
    plus            reduce using rule 138 (nt_popPOper -> empty .)
    minus           reduce using rule 138 (nt_popPOper -> empty .)
    right_sb        reduce using rule 138 (nt_popPOper -> empty .)
    lt              reduce using rule 138 (nt_popPOper -> empty .)
    gt              reduce using rule 138 (nt_popPOper -> empty .)
    ne              reduce using rule 138 (nt_popPOper -> empty .)
    ge              reduce using rule 138 (nt_popPOper -> empty .)
    le              reduce using rule 138 (nt_popPOper -> empty .)
    et              reduce using rule 138 (nt_popPOper -> empty .)
    and             reduce using rule 138 (nt_popPOper -> empty .)
    or              reduce using rule 138 (nt_popPOper -> empty .)
    right_par       reduce using rule 138 (nt_popPOper -> empty .)
    comma           reduce using rule 138 (nt_popPOper -> empty .)
    semicolon       reduce using rule 138 (nt_popPOper -> empty .)


state 296

    (105) TERMINO_AUX -> divide nt_pushPOper TERMINO .

    plus            reduce using rule 105 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    minus           reduce using rule 105 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    right_sb        reduce using rule 105 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    lt              reduce using rule 105 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    gt              reduce using rule 105 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    ne              reduce using rule 105 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    ge              reduce using rule 105 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    le              reduce using rule 105 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    et              reduce using rule 105 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    and             reduce using rule 105 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    or              reduce using rule 105 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    right_par       reduce using rule 105 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    comma           reduce using rule 105 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    semicolon       reduce using rule 105 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)


state 297

    (104) TERMINO_AUX -> multiply nt_pushPOper TERMINO .

    plus            reduce using rule 104 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    minus           reduce using rule 104 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    right_sb        reduce using rule 104 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    lt              reduce using rule 104 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    gt              reduce using rule 104 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    ne              reduce using rule 104 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    ge              reduce using rule 104 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    le              reduce using rule 104 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    et              reduce using rule 104 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    and             reduce using rule 104 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    or              reduce using rule 104 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    right_par       reduce using rule 104 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    comma           reduce using rule 104 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    semicolon       reduce using rule 104 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)


state 298

    (85) EXPRESION_B -> and nt_pushPOper EXPRESION .

    right_par       reduce using rule 85 (EXPRESION_B -> and nt_pushPOper EXPRESION .)
    comma           reduce using rule 85 (EXPRESION_B -> and nt_pushPOper EXPRESION .)
    semicolon       reduce using rule 85 (EXPRESION_B -> and nt_pushPOper EXPRESION .)


state 299

    (86) EXPRESION_B -> or nt_pushPOper EXPRESION .

    right_par       reduce using rule 86 (EXPRESION_B -> or nt_pushPOper EXPRESION .)
    comma           reduce using rule 86 (EXPRESION_B -> or nt_pushPOper EXPRESION .)
    semicolon       reduce using rule 86 (EXPRESION_B -> or nt_pushPOper EXPRESION .)


state 300

    (92) EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop .

    and             reduce using rule 92 (EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop .)
    or              reduce using rule 92 (EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop .)
    right_par       reduce using rule 92 (EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop .)
    comma           reduce using rule 92 (EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop .)
    semicolon       reduce using rule 92 (EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop .)


state 301

    (96) nt_checarRelop -> empty .

    and             reduce using rule 96 (nt_checarRelop -> empty .)
    or              reduce using rule 96 (nt_checarRelop -> empty .)
    right_par       reduce using rule 96 (nt_checarRelop -> empty .)
    comma           reduce using rule 96 (nt_checarRelop -> empty .)
    semicolon       reduce using rule 96 (nt_checarRelop -> empty .)


state 302

    (90) EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop .

    and             reduce using rule 90 (EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop .)
    or              reduce using rule 90 (EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop .)
    right_par       reduce using rule 90 (EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop .)
    comma           reduce using rule 90 (EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop .)
    semicolon       reduce using rule 90 (EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop .)


state 303

    (91) EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop .

    and             reduce using rule 91 (EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop .)
    or              reduce using rule 91 (EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop .)
    right_par       reduce using rule 91 (EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop .)
    comma           reduce using rule 91 (EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop .)
    semicolon       reduce using rule 91 (EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop .)


state 304

    (89) EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop .

    and             reduce using rule 89 (EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop .)
    or              reduce using rule 89 (EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop .)
    right_par       reduce using rule 89 (EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop .)
    comma           reduce using rule 89 (EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop .)
    semicolon       reduce using rule 89 (EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop .)


state 305

    (93) EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop .

    and             reduce using rule 93 (EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop .)
    or              reduce using rule 93 (EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop .)
    right_par       reduce using rule 93 (EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop .)
    comma           reduce using rule 93 (EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop .)
    semicolon       reduce using rule 93 (EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop .)


state 306

    (94) EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop .

    and             reduce using rule 94 (EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop .)
    or              reduce using rule 94 (EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop .)
    right_par       reduce using rule 94 (EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop .)
    comma           reduce using rule 94 (EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop .)
    semicolon       reduce using rule 94 (EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop .)


state 307

    (50) RETORNO -> return EXP semicolon .

    right_cb        reduce using rule 50 (RETORNO -> return EXP semicolon .)
    list            reduce using rule 50 (RETORNO -> return EXP semicolon .)
    var             reduce using rule 50 (RETORNO -> return EXP semicolon .)
    return          reduce using rule 50 (RETORNO -> return EXP semicolon .)
    if              reduce using rule 50 (RETORNO -> return EXP semicolon .)
    while           reduce using rule 50 (RETORNO -> return EXP semicolon .)
    cread           reduce using rule 50 (RETORNO -> return EXP semicolon .)
    cwrite          reduce using rule 50 (RETORNO -> return EXP semicolon .)
    left_par        reduce using rule 50 (RETORNO -> return EXP semicolon .)
    id              reduce using rule 50 (RETORNO -> return EXP semicolon .)


state 308

    (114) LLAMADAF_AUX -> comma EXPRESION LLAMADAF_AUX .

    right_par       reduce using rule 114 (LLAMADAF_AUX -> comma EXPRESION LLAMADAF_AUX .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for list in state 13 resolved as shift
WARNING: shift/reduce conflict for var in state 13 resolved as shift
WARNING: shift/reduce conflict for int in state 14 resolved as shift
WARNING: shift/reduce conflict for float in state 14 resolved as shift
WARNING: shift/reduce conflict for bool in state 14 resolved as shift
WARNING: shift/reduce conflict for string in state 14 resolved as shift
WARNING: shift/reduce conflict for void in state 14 resolved as shift
WARNING: shift/reduce conflict for main in state 21 resolved as shift
WARNING: shift/reduce conflict for int in state 21 resolved as shift
WARNING: shift/reduce conflict for float in state 21 resolved as shift
WARNING: shift/reduce conflict for bool in state 21 resolved as shift
WARNING: shift/reduce conflict for string in state 21 resolved as shift
WARNING: shift/reduce conflict for void in state 21 resolved as shift
WARNING: shift/reduce conflict for list in state 62 resolved as shift
WARNING: shift/reduce conflict for var in state 62 resolved as shift
WARNING: shift/reduce conflict for if in state 71 resolved as shift
WARNING: shift/reduce conflict for while in state 71 resolved as shift
WARNING: shift/reduce conflict for cread in state 71 resolved as shift
WARNING: shift/reduce conflict for cwrite in state 71 resolved as shift
WARNING: shift/reduce conflict for left_par in state 71 resolved as shift
WARNING: shift/reduce conflict for id in state 71 resolved as shift
WARNING: shift/reduce conflict for right_cb in state 74 resolved as shift
WARNING: shift/reduce conflict for list in state 74 resolved as shift
WARNING: shift/reduce conflict for var in state 74 resolved as shift
WARNING: shift/reduce conflict for if in state 97 resolved as shift
WARNING: shift/reduce conflict for while in state 97 resolved as shift
WARNING: shift/reduce conflict for cread in state 97 resolved as shift
WARNING: shift/reduce conflict for cwrite in state 97 resolved as shift
WARNING: shift/reduce conflict for left_par in state 97 resolved as shift
WARNING: shift/reduce conflict for id in state 97 resolved as shift
WARNING: shift/reduce conflict for list in state 167 resolved as shift
WARNING: shift/reduce conflict for var in state 167 resolved as shift
WARNING: shift/reduce conflict for list in state 169 resolved as shift
WARNING: shift/reduce conflict for var in state 169 resolved as shift
WARNING: shift/reduce conflict for list in state 213 resolved as shift
WARNING: shift/reduce conflict for var in state 213 resolved as shift
WARNING: shift/reduce conflict for list in state 214 resolved as shift
WARNING: shift/reduce conflict for var in state 214 resolved as shift
WARNING: shift/reduce conflict for if in state 217 resolved as shift
WARNING: shift/reduce conflict for while in state 217 resolved as shift
WARNING: shift/reduce conflict for cread in state 217 resolved as shift
WARNING: shift/reduce conflict for cwrite in state 217 resolved as shift
WARNING: shift/reduce conflict for left_par in state 217 resolved as shift
WARNING: shift/reduce conflict for id in state 217 resolved as shift
WARNING: shift/reduce conflict for if in state 256 resolved as shift
WARNING: shift/reduce conflict for while in state 256 resolved as shift
WARNING: shift/reduce conflict for cread in state 256 resolved as shift
WARNING: shift/reduce conflict for cwrite in state 256 resolved as shift
WARNING: shift/reduce conflict for left_par in state 256 resolved as shift
WARNING: shift/reduce conflict for id in state 256 resolved as shift
WARNING: reduce/reduce conflict in state 214 resolved using rule (CUERPOFUNC -> CUERPOFUNC_AUX)
WARNING: rejected rule (empty -> <empty>) in state 214
WARNING: reduce/reduce conflict in state 218 resolved using rule (CUERPOFUNC_VARS -> empty)
WARNING: rejected rule (CUERPORETORNO_CF_AUX -> empty) in state 218
WARNING: Rule (CUERPORETORNO_CF_AUX -> empty) is never reduced
