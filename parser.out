Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    right_dblquotes
    left_dblquotes

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> program id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO
Rule 2     nt_cambiarScope -> empty
Rule 3     nt_ambienteMain -> nt_cambiarScope
Rule 4     nt_pushJmpMain -> empty
Rule 5     PROGRAMA_VARS -> VARS
Rule 6     PROGRAMA_VARS -> empty
Rule 7     PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX
Rule 8     PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX
Rule 9     PROGRAMA_FUNC_AUX -> FUNC
Rule 10    PROGRAMA_FUNC_AUX -> empty
Rule 11    VARS -> VARS_AUX
Rule 12    VARS_AUX -> VARS_LIST_VAR
Rule 13    VARS_AUX -> VARS_AUX VARS_LIST_VAR
Rule 14    VARS_LIST_VAR -> VARS_LIST
Rule 15    VARS_LIST_VAR -> VARS_VAR
Rule 16    VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon
Rule 17    nt_hacerLista -> empty
Rule 18    VARS_LIST_AUX -> id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar
Rule 19    VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar
Rule 20    nt_agregarId -> empty
Rule 21    nt_agregarCteLista -> empty
Rule 22    nt_agregarDicVar -> empty
Rule 23    VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon
Rule 24    nt_hacerVar -> empty
Rule 25    VARS_VAR_AUX -> id nt_agregarId nt_agregarDicVar
Rule 26    VARS_VAR_AUX -> VARS_VAR_AUX comma id nt_agregarId nt_agregarDicVar
Rule 27    TIPO -> int nt_cambioTipoActual
Rule 28    TIPO -> float nt_cambioTipoActual
Rule 29    TIPO -> bool nt_cambioTipoActual
Rule 30    TIPO -> string nt_cambioTipoActual
Rule 31    nt_cambioTipoActual -> empty
Rule 32    CUERPO -> left_cb CUERPO_AUX right_cb
Rule 33    CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO
Rule 34    CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO
Rule 35    CUERPO_VARS -> VARS
Rule 36    CUERPO_VARS -> empty
Rule 37    CUERPO_ESTATUTO -> ESTATUTO
Rule 38    CUERPO_ESTATUTO -> empty
Rule 39    CUERPOFUNC -> CUERPOFUNC_AUX
Rule 40    CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
Rule 41    CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
Rule 42    nt_funcInicio -> empty
Rule 43    CUERPOFUNC_VARS -> VARS
Rule 44    CUERPOFUNC_VARS -> empty
Rule 45    CUERPOFUNC_ESTATUTO -> ESTATUTO
Rule 46    CUERPOFUNC_ESTATUTO -> empty
Rule 47    CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb
Rule 48    CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO
Rule 49    CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO
Rule 50    CUERPORETORNO_CF_AUX -> CUERPOFUNC
Rule 51    CUERPORETORNO_CF_AUX -> empty
Rule 52    RETORNO -> return EXP semicolon
Rule 53    FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub
Rule 54    FUNC -> VOIDFUNC nt_pushEndsub
Rule 55    nt_pushEndsub -> empty
Rule 56    test_print -> empty
Rule 57    nt_cambioFuncActual -> empty
Rule 58    nt_agregarIdFunc -> empty
Rule 59    FUNC_PARA -> TIPO id nt_agregarParametro
Rule 60    FUNC_PARA -> FUNC_PARA comma TIPO id nt_agregarParametro
Rule 61    FUNC_PARA -> empty
Rule 62    nt_agregarParametro -> empty
Rule 63    VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb
Rule 64    nt_hacerVoid -> empty
Rule 65    VOIDFUNC_PARA -> TIPO id nt_agregarParametro
Rule 66    VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO id nt_agregarParametro
Rule 67    ESTATUTO -> ASIGNACION
Rule 68    ESTATUTO -> CONDICION
Rule 69    ESTATUTO -> CICLO
Rule 70    ESTATUTO -> LECTURA
Rule 71    ESTATUTO -> ESCRITURA
Rule 72    ESTATUTO -> LLAMADA
Rule 73    CONDICION -> if CONDICION_AUX
Rule 74    CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto
Rule 75    ELSE_ELIF -> ELSE
Rule 76    ELSE_ELIF -> ELIF
Rule 77    ELSE_ELIF -> empty
Rule 78    ELSE -> else nt_pushElse CUERPO
Rule 79    ELIF -> elseif nt_pushElse CONDICION_AUX
Rule 80    nt_checarBool -> empty
Rule 81    nt_pushSalto -> empty
Rule 82    nt_pushElse -> empty
Rule 83    CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop
Rule 84    nt_saltoLoop -> empty
Rule 85    nt_pushLoop -> empty
Rule 86    LECTURA -> cread left_par id nt_leer right_par semicolon
Rule 87    nt_leer -> empty
Rule 88    ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon
Rule 89    nt_escribir -> empty
Rule 90    LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon
Rule 91    LLAMADA_EXPRESION -> EXPRESION
Rule 92    LLAMADA_EXPRESION -> LLAMADA_EXPRESION comma EXPRESION
Rule 93    EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
Rule 94    nt_checaAndOrNot -> empty
Rule 95    EXPRESION_NOT -> not nt_pushPOper
Rule 96    EXPRESION_NOT -> empty
Rule 97    EXPRESION_B -> and nt_pushPOper EXPRESION
Rule 98    EXPRESION_B -> or nt_pushPOper EXPRESION
Rule 99    EXPRESION_B -> empty
Rule 100   EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX
Rule 101   EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop
Rule 102   EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop
Rule 103   EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop
Rule 104   EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop
Rule 105   EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop
Rule 106   EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop
Rule 107   EXPRESIONLOGICA_AUX -> empty
Rule 108   nt_checarRelop -> empty
Rule 109   EXP -> TERMINO nt_checar_sumas EXP_AUX
Rule 110   nt_checar_sumas -> empty
Rule 111   EXP_AUX -> plus nt_pushPOper EXP
Rule 112   EXP_AUX -> minus nt_pushPOper EXP
Rule 113   EXP_AUX -> empty
Rule 114   TERMINO -> FACTOR nt_checar_multis TERMINO_AUX
Rule 115   nt_checar_multis -> empty
Rule 116   TERMINO_AUX -> multiply nt_pushPOper TERMINO
Rule 117   TERMINO_AUX -> divide nt_pushPOper TERMINO
Rule 118   TERMINO_AUX -> empty
Rule 119   FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper
Rule 120   FACTOR -> CONSTANTE
Rule 121   FACTOR -> LISTA
Rule 122   FACTOR -> FACTOR_AUX
Rule 123   FACTOR_AUX -> id nt_pushPilaO
Rule 124   FACTOR_AUX -> id LLAMADA_F
Rule 125   LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par
Rule 126   LLAMADAF_AUX -> comma EXPRESION LLAMADAF_AUX
Rule 127   LLAMADAF_AUX -> empty
Rule 128   LISTA -> id left_sb EXP right_sb
Rule 129   CONSTANTE -> NUMERICA
Rule 130   CONSTANTE -> BOOLEANA
Rule 131   CONSTANTE -> STRINGS
Rule 132   NUMERICA -> NUMERICA_AUX
Rule 133   NUMERICA -> plus nt_sigMas NUMERICA_AUX
Rule 134   NUMERICA -> minus nt_sigMenos NUMERICA_AUX
Rule 135   nt_sigMas -> empty
Rule 136   nt_sigMenos -> empty
Rule 137   NUMERICA_AUX -> cteInt nt_pushInt
Rule 138   NUMERICA_AUX -> cteFloat nt_pushFloat
Rule 139   nt_pushInt -> empty
Rule 140   nt_pushFloat -> empty
Rule 141   BOOLEANA -> true
Rule 142   BOOLEANA -> false
Rule 143   STRINGS -> cteString
Rule 144   ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon
Rule 145   nt_checaEquals -> empty
Rule 146   ASIGNACION_AUX -> id nt_pushPilaO
Rule 147   ASIGNACION_AUX -> LISTA
Rule 148   nt_pushPilaO -> empty
Rule 149   nt_pushPOper -> empty
Rule 150   nt_popPOper -> empty
Rule 151   empty -> <empty>

Terminals, with rules where they appear

and                  : 97
bool                 : 29
comma                : 19 26 60 66 92 126
cread                : 86
cteFloat             : 138
cteInt               : 18 19 137
cteString            : 143
cwrite               : 88
divide               : 117
else                 : 78
elseif               : 79
equals               : 144
error                : 
et                   : 106
false                : 142
float                : 28
ge                   : 104
gt                   : 102
id                   : 1 18 19 25 26 53 59 60 63 65 66 86 123 124 128 146
if                   : 73
int                  : 27
le                   : 105
left_cb              : 32 47 63
left_dblquotes       : 
left_par             : 53 63 74 83 86 88 90 119 125
left_sb              : 18 19 128
list                 : 16
lt                   : 101
main                 : 1
minus                : 112 134
multiply             : 116
ne                   : 103
not                  : 95
or                   : 98
plus                 : 111 133
program              : 1
return               : 52
right_cb             : 32 47 63
right_dblquotes      : 
right_par            : 53 63 74 83 86 88 90 119 125
right_sb             : 18 19 128
semicolon            : 1 16 23 52 86 88 90 144
string               : 30
true                 : 141
var                  : 23
void                 : 63
while                : 83

Nonterminals, with rules where they appear

ASIGNACION           : 67
ASIGNACION_AUX       : 144
BOOLEANA             : 130
CICLO                : 69
CONDICION            : 68
CONDICION_AUX        : 73 79
CONSTANTE            : 120
CUERPO               : 1 74 78 83
CUERPOFUNC           : 50 63
CUERPOFUNC_AUX       : 39 41
CUERPOFUNC_ESTATUTO  : 40 41
CUERPOFUNC_VARS      : 40 41
CUERPORETORNO        : 53
CUERPORETORNO_AUX    : 47 49
CUERPORETORNO_CF_AUX : 48 49
CUERPO_AUX           : 32 34
CUERPO_ESTATUTO      : 33 34
CUERPO_VARS          : 33 34
ELIF                 : 76
ELSE                 : 75
ELSE_ELIF            : 74
ESCRITURA            : 71
ESTATUTO             : 37 45
EXP                  : 52 100 101 102 103 104 105 106 111 112 128
EXPRESION            : 74 83 88 91 92 97 98 119 125 126 144
EXPRESIONLOGICA      : 93
EXPRESIONLOGICA_AUX  : 100
EXPRESION_B          : 93
EXPRESION_NOT        : 93
EXP_AUX              : 109
FACTOR               : 114
FACTOR_AUX           : 122
FUNC                 : 9
FUNC_PARA            : 53 60
LECTURA              : 70
LISTA                : 121 147
LLAMADA              : 72
LLAMADAF_AUX         : 125 126
LLAMADA_EXPRESION    : 90 92
LLAMADA_F            : 124
NUMERICA             : 129
NUMERICA_AUX         : 132 133 134
PROGRAMA             : 0
PROGRAMA_FUNC        : 1 8
PROGRAMA_FUNC_AUX    : 7 8
PROGRAMA_VARS        : 1
RETORNO              : 48 49
STRINGS              : 131
TERMINO              : 109 116 117
TERMINO_AUX          : 114
TIPO                 : 16 23 53 59 60 65 66
VARS                 : 5 35 43
VARS_AUX             : 11 13
VARS_LIST            : 14
VARS_LIST_AUX        : 16 19
VARS_LIST_VAR        : 12 13
VARS_VAR             : 15
VARS_VAR_AUX         : 23 26
VOIDFUNC             : 54
VOIDFUNC_PARA        : 63 66
empty                : 2 4 6 10 17 20 21 22 24 31 36 38 42 44 46 51 55 56 57 58 61 62 64 77 80 81 82 84 85 87 89 94 96 99 107 108 110 113 115 118 127 135 136 139 140 145 148 149 150
nt_agregarCteLista   : 18 19
nt_agregarDicVar     : 18 19 25 26
nt_agregarId         : 18 19 25 26
nt_agregarIdFunc     : 53 63
nt_agregarParametro  : 59 60 65 66
nt_ambienteMain      : 1
nt_cambiarScope      : 1 1 3
nt_cambioFuncActual  : 53
nt_cambioTipoActual  : 27 28 29 30
nt_checaAndOrNot     : 93
nt_checaEquals       : 144
nt_checarBool        : 74 83
nt_checarRelop       : 101 102 103 104 105 106
nt_checar_multis     : 114
nt_checar_sumas      : 109
nt_escribir          : 88
nt_funcInicio        : 40 41
nt_hacerLista        : 16
nt_hacerVar          : 23
nt_hacerVoid         : 63
nt_leer              : 86
nt_popPOper          : 119
nt_pushElse          : 78 79
nt_pushEndsub        : 53 54
nt_pushFloat         : 138
nt_pushInt           : 137
nt_pushJmpMain       : 1
nt_pushLoop          : 83
nt_pushPOper         : 95 97 98 101 102 103 104 105 106 111 112 116 117 119 144
nt_pushPilaO         : 123 146
nt_pushSalto         : 74
nt_saltoLoop         : 83
nt_sigMas            : 133
nt_sigMenos          : 134
test_print           : 

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . program id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO

    program         shift and go to state 1

    PROGRAMA                       shift and go to state 2

state 1

    (1) PROGRAMA -> program . id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO

    id              shift and go to state 3


state 2

    (0) S' -> PROGRAMA .



state 3

    (1) PROGRAMA -> program id . nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO
    (4) nt_pushJmpMain -> . empty
    (151) empty -> .

    semicolon       reduce using rule 151 (empty -> .)

    nt_pushJmpMain                 shift and go to state 4
    empty                          shift and go to state 5

state 4

    (1) PROGRAMA -> program id nt_pushJmpMain . semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO

    semicolon       shift and go to state 6


state 5

    (4) nt_pushJmpMain -> empty .

    semicolon       reduce using rule 4 (nt_pushJmpMain -> empty .)


state 6

    (1) PROGRAMA -> program id nt_pushJmpMain semicolon . PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO
    (5) PROGRAMA_VARS -> . VARS
    (6) PROGRAMA_VARS -> . empty
    (11) VARS -> . VARS_AUX
    (151) empty -> .
    (12) VARS_AUX -> . VARS_LIST_VAR
    (13) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (14) VARS_LIST_VAR -> . VARS_LIST
    (15) VARS_LIST_VAR -> . VARS_VAR
    (16) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (23) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

    int             reduce using rule 151 (empty -> .)
    float           reduce using rule 151 (empty -> .)
    bool            reduce using rule 151 (empty -> .)
    string          reduce using rule 151 (empty -> .)
    void            reduce using rule 151 (empty -> .)
    main            reduce using rule 151 (empty -> .)
    list            shift and go to state 14
    var             shift and go to state 10

    VARS                           shift and go to state 7
    VARS_LIST                      shift and go to state 9
    VARS_LIST_VAR                  shift and go to state 12
    PROGRAMA_VARS                  shift and go to state 8
    VARS_AUX                       shift and go to state 15
    VARS_VAR                       shift and go to state 13
    empty                          shift and go to state 11

state 7

    (5) PROGRAMA_VARS -> VARS .

    int             reduce using rule 5 (PROGRAMA_VARS -> VARS .)
    float           reduce using rule 5 (PROGRAMA_VARS -> VARS .)
    bool            reduce using rule 5 (PROGRAMA_VARS -> VARS .)
    string          reduce using rule 5 (PROGRAMA_VARS -> VARS .)
    void            reduce using rule 5 (PROGRAMA_VARS -> VARS .)
    main            reduce using rule 5 (PROGRAMA_VARS -> VARS .)


state 8

    (1) PROGRAMA -> program id nt_pushJmpMain semicolon PROGRAMA_VARS . nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO
    (2) nt_cambiarScope -> . empty
    (151) empty -> .

    int             reduce using rule 151 (empty -> .)
    float           reduce using rule 151 (empty -> .)
    bool            reduce using rule 151 (empty -> .)
    string          reduce using rule 151 (empty -> .)
    void            reduce using rule 151 (empty -> .)
    main            reduce using rule 151 (empty -> .)

    nt_cambiarScope                shift and go to state 16
    empty                          shift and go to state 17

state 9

    (14) VARS_LIST_VAR -> VARS_LIST .

    list            reduce using rule 14 (VARS_LIST_VAR -> VARS_LIST .)
    var             reduce using rule 14 (VARS_LIST_VAR -> VARS_LIST .)
    if              reduce using rule 14 (VARS_LIST_VAR -> VARS_LIST .)
    while           reduce using rule 14 (VARS_LIST_VAR -> VARS_LIST .)
    cread           reduce using rule 14 (VARS_LIST_VAR -> VARS_LIST .)
    cwrite          reduce using rule 14 (VARS_LIST_VAR -> VARS_LIST .)
    left_par        reduce using rule 14 (VARS_LIST_VAR -> VARS_LIST .)
    id              reduce using rule 14 (VARS_LIST_VAR -> VARS_LIST .)
    right_cb        reduce using rule 14 (VARS_LIST_VAR -> VARS_LIST .)
    int             reduce using rule 14 (VARS_LIST_VAR -> VARS_LIST .)
    float           reduce using rule 14 (VARS_LIST_VAR -> VARS_LIST .)
    bool            reduce using rule 14 (VARS_LIST_VAR -> VARS_LIST .)
    string          reduce using rule 14 (VARS_LIST_VAR -> VARS_LIST .)
    void            reduce using rule 14 (VARS_LIST_VAR -> VARS_LIST .)
    main            reduce using rule 14 (VARS_LIST_VAR -> VARS_LIST .)
    return          reduce using rule 14 (VARS_LIST_VAR -> VARS_LIST .)


state 10

    (23) VARS_VAR -> var . nt_hacerVar TIPO VARS_VAR_AUX semicolon
    (24) nt_hacerVar -> . empty
    (151) empty -> .

    int             reduce using rule 151 (empty -> .)
    float           reduce using rule 151 (empty -> .)
    bool            reduce using rule 151 (empty -> .)
    string          reduce using rule 151 (empty -> .)

    nt_hacerVar                    shift and go to state 18
    empty                          shift and go to state 19

state 11

    (6) PROGRAMA_VARS -> empty .

    int             reduce using rule 6 (PROGRAMA_VARS -> empty .)
    float           reduce using rule 6 (PROGRAMA_VARS -> empty .)
    bool            reduce using rule 6 (PROGRAMA_VARS -> empty .)
    string          reduce using rule 6 (PROGRAMA_VARS -> empty .)
    void            reduce using rule 6 (PROGRAMA_VARS -> empty .)
    main            reduce using rule 6 (PROGRAMA_VARS -> empty .)


state 12

    (12) VARS_AUX -> VARS_LIST_VAR .

    list            reduce using rule 12 (VARS_AUX -> VARS_LIST_VAR .)
    var             reduce using rule 12 (VARS_AUX -> VARS_LIST_VAR .)
    if              reduce using rule 12 (VARS_AUX -> VARS_LIST_VAR .)
    while           reduce using rule 12 (VARS_AUX -> VARS_LIST_VAR .)
    cread           reduce using rule 12 (VARS_AUX -> VARS_LIST_VAR .)
    cwrite          reduce using rule 12 (VARS_AUX -> VARS_LIST_VAR .)
    left_par        reduce using rule 12 (VARS_AUX -> VARS_LIST_VAR .)
    id              reduce using rule 12 (VARS_AUX -> VARS_LIST_VAR .)
    return          reduce using rule 12 (VARS_AUX -> VARS_LIST_VAR .)
    right_cb        reduce using rule 12 (VARS_AUX -> VARS_LIST_VAR .)
    int             reduce using rule 12 (VARS_AUX -> VARS_LIST_VAR .)
    float           reduce using rule 12 (VARS_AUX -> VARS_LIST_VAR .)
    bool            reduce using rule 12 (VARS_AUX -> VARS_LIST_VAR .)
    string          reduce using rule 12 (VARS_AUX -> VARS_LIST_VAR .)
    void            reduce using rule 12 (VARS_AUX -> VARS_LIST_VAR .)
    main            reduce using rule 12 (VARS_AUX -> VARS_LIST_VAR .)


state 13

    (15) VARS_LIST_VAR -> VARS_VAR .

    list            reduce using rule 15 (VARS_LIST_VAR -> VARS_VAR .)
    var             reduce using rule 15 (VARS_LIST_VAR -> VARS_VAR .)
    if              reduce using rule 15 (VARS_LIST_VAR -> VARS_VAR .)
    while           reduce using rule 15 (VARS_LIST_VAR -> VARS_VAR .)
    cread           reduce using rule 15 (VARS_LIST_VAR -> VARS_VAR .)
    cwrite          reduce using rule 15 (VARS_LIST_VAR -> VARS_VAR .)
    left_par        reduce using rule 15 (VARS_LIST_VAR -> VARS_VAR .)
    id              reduce using rule 15 (VARS_LIST_VAR -> VARS_VAR .)
    right_cb        reduce using rule 15 (VARS_LIST_VAR -> VARS_VAR .)
    int             reduce using rule 15 (VARS_LIST_VAR -> VARS_VAR .)
    float           reduce using rule 15 (VARS_LIST_VAR -> VARS_VAR .)
    bool            reduce using rule 15 (VARS_LIST_VAR -> VARS_VAR .)
    string          reduce using rule 15 (VARS_LIST_VAR -> VARS_VAR .)
    void            reduce using rule 15 (VARS_LIST_VAR -> VARS_VAR .)
    main            reduce using rule 15 (VARS_LIST_VAR -> VARS_VAR .)
    return          reduce using rule 15 (VARS_LIST_VAR -> VARS_VAR .)


state 14

    (16) VARS_LIST -> list . nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (17) nt_hacerLista -> . empty
    (151) empty -> .

    int             reduce using rule 151 (empty -> .)
    float           reduce using rule 151 (empty -> .)
    bool            reduce using rule 151 (empty -> .)
    string          reduce using rule 151 (empty -> .)

    empty                          shift and go to state 21
    nt_hacerLista                  shift and go to state 20

state 15

    (11) VARS -> VARS_AUX .
    (13) VARS_AUX -> VARS_AUX . VARS_LIST_VAR
    (14) VARS_LIST_VAR -> . VARS_LIST
    (15) VARS_LIST_VAR -> . VARS_VAR
    (16) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (23) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    int             reduce using rule 11 (VARS -> VARS_AUX .)
    float           reduce using rule 11 (VARS -> VARS_AUX .)
    bool            reduce using rule 11 (VARS -> VARS_AUX .)
    string          reduce using rule 11 (VARS -> VARS_AUX .)
    void            reduce using rule 11 (VARS -> VARS_AUX .)
    main            reduce using rule 11 (VARS -> VARS_AUX .)
    if              reduce using rule 11 (VARS -> VARS_AUX .)
    while           reduce using rule 11 (VARS -> VARS_AUX .)
    cread           reduce using rule 11 (VARS -> VARS_AUX .)
    cwrite          reduce using rule 11 (VARS -> VARS_AUX .)
    left_par        reduce using rule 11 (VARS -> VARS_AUX .)
    id              reduce using rule 11 (VARS -> VARS_AUX .)
    right_cb        reduce using rule 11 (VARS -> VARS_AUX .)
    return          reduce using rule 11 (VARS -> VARS_AUX .)
    list            shift and go to state 14
    var             shift and go to state 10

  ! list            [ reduce using rule 11 (VARS -> VARS_AUX .) ]
  ! var             [ reduce using rule 11 (VARS -> VARS_AUX .) ]

    VARS_LIST                      shift and go to state 9
    VARS_LIST_VAR                  shift and go to state 22
    VARS_VAR                       shift and go to state 13

state 16

    (1) PROGRAMA -> program id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope . PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO
    (7) PROGRAMA_FUNC -> . PROGRAMA_FUNC_AUX
    (8) PROGRAMA_FUNC -> . PROGRAMA_FUNC PROGRAMA_FUNC_AUX
    (9) PROGRAMA_FUNC_AUX -> . FUNC
    (10) PROGRAMA_FUNC_AUX -> . empty
    (53) FUNC -> . TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub
    (54) FUNC -> . VOIDFUNC nt_pushEndsub
    (151) empty -> .
    (27) TIPO -> . int nt_cambioTipoActual
    (28) TIPO -> . float nt_cambioTipoActual
    (29) TIPO -> . bool nt_cambioTipoActual
    (30) TIPO -> . string nt_cambioTipoActual
    (63) VOIDFUNC -> . void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb

  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for bool resolved as shift
  ! shift/reduce conflict for string resolved as shift
  ! shift/reduce conflict for void resolved as shift
    main            reduce using rule 151 (empty -> .)
    int             shift and go to state 23
    float           shift and go to state 24
    bool            shift and go to state 28
    string          shift and go to state 31
    void            shift and go to state 32

  ! int             [ reduce using rule 151 (empty -> .) ]
  ! float           [ reduce using rule 151 (empty -> .) ]
  ! bool            [ reduce using rule 151 (empty -> .) ]
  ! string          [ reduce using rule 151 (empty -> .) ]
  ! void            [ reduce using rule 151 (empty -> .) ]

    PROGRAMA_FUNC_AUX              shift and go to state 27
    TIPO                           shift and go to state 25
    PROGRAMA_FUNC                  shift and go to state 26
    VOIDFUNC                       shift and go to state 29
    FUNC                           shift and go to state 33
    empty                          shift and go to state 30

state 17

    (2) nt_cambiarScope -> empty .

    left_cb         reduce using rule 2 (nt_cambiarScope -> empty .)
    int             reduce using rule 2 (nt_cambiarScope -> empty .)
    float           reduce using rule 2 (nt_cambiarScope -> empty .)
    bool            reduce using rule 2 (nt_cambiarScope -> empty .)
    string          reduce using rule 2 (nt_cambiarScope -> empty .)
    void            reduce using rule 2 (nt_cambiarScope -> empty .)
    main            reduce using rule 2 (nt_cambiarScope -> empty .)


state 18

    (23) VARS_VAR -> var nt_hacerVar . TIPO VARS_VAR_AUX semicolon
    (27) TIPO -> . int nt_cambioTipoActual
    (28) TIPO -> . float nt_cambioTipoActual
    (29) TIPO -> . bool nt_cambioTipoActual
    (30) TIPO -> . string nt_cambioTipoActual

    int             shift and go to state 23
    float           shift and go to state 24
    bool            shift and go to state 28
    string          shift and go to state 31

    TIPO                           shift and go to state 34

state 19

    (24) nt_hacerVar -> empty .

    int             reduce using rule 24 (nt_hacerVar -> empty .)
    float           reduce using rule 24 (nt_hacerVar -> empty .)
    bool            reduce using rule 24 (nt_hacerVar -> empty .)
    string          reduce using rule 24 (nt_hacerVar -> empty .)


state 20

    (16) VARS_LIST -> list nt_hacerLista . TIPO VARS_LIST_AUX semicolon
    (27) TIPO -> . int nt_cambioTipoActual
    (28) TIPO -> . float nt_cambioTipoActual
    (29) TIPO -> . bool nt_cambioTipoActual
    (30) TIPO -> . string nt_cambioTipoActual

    int             shift and go to state 23
    float           shift and go to state 24
    bool            shift and go to state 28
    string          shift and go to state 31

    TIPO                           shift and go to state 35

state 21

    (17) nt_hacerLista -> empty .

    int             reduce using rule 17 (nt_hacerLista -> empty .)
    float           reduce using rule 17 (nt_hacerLista -> empty .)
    bool            reduce using rule 17 (nt_hacerLista -> empty .)
    string          reduce using rule 17 (nt_hacerLista -> empty .)


state 22

    (13) VARS_AUX -> VARS_AUX VARS_LIST_VAR .

    list            reduce using rule 13 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    var             reduce using rule 13 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    if              reduce using rule 13 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    while           reduce using rule 13 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    cread           reduce using rule 13 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    cwrite          reduce using rule 13 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    left_par        reduce using rule 13 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    id              reduce using rule 13 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    return          reduce using rule 13 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    right_cb        reduce using rule 13 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    int             reduce using rule 13 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    float           reduce using rule 13 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    bool            reduce using rule 13 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    string          reduce using rule 13 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    void            reduce using rule 13 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    main            reduce using rule 13 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)


state 23

    (27) TIPO -> int . nt_cambioTipoActual
    (31) nt_cambioTipoActual -> . empty
    (151) empty -> .

    id              reduce using rule 151 (empty -> .)

    nt_cambioTipoActual            shift and go to state 36
    empty                          shift and go to state 37

state 24

    (28) TIPO -> float . nt_cambioTipoActual
    (31) nt_cambioTipoActual -> . empty
    (151) empty -> .

    id              reduce using rule 151 (empty -> .)

    nt_cambioTipoActual            shift and go to state 38
    empty                          shift and go to state 37

state 25

    (53) FUNC -> TIPO . nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub
    (57) nt_cambioFuncActual -> . empty
    (151) empty -> .

    id              reduce using rule 151 (empty -> .)

    nt_cambioFuncActual            shift and go to state 39
    empty                          shift and go to state 40

state 26

    (1) PROGRAMA -> program id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC . nt_cambiarScope main nt_ambienteMain CUERPO
    (8) PROGRAMA_FUNC -> PROGRAMA_FUNC . PROGRAMA_FUNC_AUX
    (2) nt_cambiarScope -> . empty
    (9) PROGRAMA_FUNC_AUX -> . FUNC
    (10) PROGRAMA_FUNC_AUX -> . empty
    (151) empty -> .
    (53) FUNC -> . TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub
    (54) FUNC -> . VOIDFUNC nt_pushEndsub
    (27) TIPO -> . int nt_cambioTipoActual
    (28) TIPO -> . float nt_cambioTipoActual
    (29) TIPO -> . bool nt_cambioTipoActual
    (30) TIPO -> . string nt_cambioTipoActual
    (63) VOIDFUNC -> . void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb

  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for bool resolved as shift
  ! shift/reduce conflict for string resolved as shift
  ! shift/reduce conflict for void resolved as shift
    main            reduce using rule 151 (empty -> .)
    int             shift and go to state 23
    float           shift and go to state 24
    bool            shift and go to state 28
    string          shift and go to state 31
    void            shift and go to state 32

  ! int             [ reduce using rule 151 (empty -> .) ]
  ! float           [ reduce using rule 151 (empty -> .) ]
  ! bool            [ reduce using rule 151 (empty -> .) ]
  ! string          [ reduce using rule 151 (empty -> .) ]
  ! void            [ reduce using rule 151 (empty -> .) ]

    PROGRAMA_FUNC_AUX              shift and go to state 41
    TIPO                           shift and go to state 25
    VOIDFUNC                       shift and go to state 29
    FUNC                           shift and go to state 33
    nt_cambiarScope                shift and go to state 43
    empty                          shift and go to state 42

state 27

    (7) PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .

    int             reduce using rule 7 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)
    float           reduce using rule 7 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)
    bool            reduce using rule 7 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)
    string          reduce using rule 7 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)
    void            reduce using rule 7 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)
    main            reduce using rule 7 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)


state 28

    (29) TIPO -> bool . nt_cambioTipoActual
    (31) nt_cambioTipoActual -> . empty
    (151) empty -> .

    id              reduce using rule 151 (empty -> .)

    nt_cambioTipoActual            shift and go to state 44
    empty                          shift and go to state 37

state 29

    (54) FUNC -> VOIDFUNC . nt_pushEndsub
    (55) nt_pushEndsub -> . empty
    (151) empty -> .

    int             reduce using rule 151 (empty -> .)
    float           reduce using rule 151 (empty -> .)
    bool            reduce using rule 151 (empty -> .)
    string          reduce using rule 151 (empty -> .)
    void            reduce using rule 151 (empty -> .)
    main            reduce using rule 151 (empty -> .)

    nt_pushEndsub                  shift and go to state 45
    empty                          shift and go to state 46

state 30

    (10) PROGRAMA_FUNC_AUX -> empty .

    int             reduce using rule 10 (PROGRAMA_FUNC_AUX -> empty .)
    float           reduce using rule 10 (PROGRAMA_FUNC_AUX -> empty .)
    bool            reduce using rule 10 (PROGRAMA_FUNC_AUX -> empty .)
    string          reduce using rule 10 (PROGRAMA_FUNC_AUX -> empty .)
    void            reduce using rule 10 (PROGRAMA_FUNC_AUX -> empty .)
    main            reduce using rule 10 (PROGRAMA_FUNC_AUX -> empty .)


state 31

    (30) TIPO -> string . nt_cambioTipoActual
    (31) nt_cambioTipoActual -> . empty
    (151) empty -> .

    id              reduce using rule 151 (empty -> .)

    nt_cambioTipoActual            shift and go to state 47
    empty                          shift and go to state 37

state 32

    (63) VOIDFUNC -> void . nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb
    (64) nt_hacerVoid -> . empty
    (151) empty -> .

    id              reduce using rule 151 (empty -> .)

    nt_hacerVoid                   shift and go to state 49
    empty                          shift and go to state 48

state 33

    (9) PROGRAMA_FUNC_AUX -> FUNC .

    int             reduce using rule 9 (PROGRAMA_FUNC_AUX -> FUNC .)
    float           reduce using rule 9 (PROGRAMA_FUNC_AUX -> FUNC .)
    bool            reduce using rule 9 (PROGRAMA_FUNC_AUX -> FUNC .)
    string          reduce using rule 9 (PROGRAMA_FUNC_AUX -> FUNC .)
    void            reduce using rule 9 (PROGRAMA_FUNC_AUX -> FUNC .)
    main            reduce using rule 9 (PROGRAMA_FUNC_AUX -> FUNC .)


state 34

    (23) VARS_VAR -> var nt_hacerVar TIPO . VARS_VAR_AUX semicolon
    (25) VARS_VAR_AUX -> . id nt_agregarId nt_agregarDicVar
    (26) VARS_VAR_AUX -> . VARS_VAR_AUX comma id nt_agregarId nt_agregarDicVar

    id              shift and go to state 51

    VARS_VAR_AUX                   shift and go to state 50

state 35

    (16) VARS_LIST -> list nt_hacerLista TIPO . VARS_LIST_AUX semicolon
    (18) VARS_LIST_AUX -> . id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar
    (19) VARS_LIST_AUX -> . VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    id              shift and go to state 53

    VARS_LIST_AUX                  shift and go to state 52

state 36

    (27) TIPO -> int nt_cambioTipoActual .

    id              reduce using rule 27 (TIPO -> int nt_cambioTipoActual .)


state 37

    (31) nt_cambioTipoActual -> empty .

    id              reduce using rule 31 (nt_cambioTipoActual -> empty .)


state 38

    (28) TIPO -> float nt_cambioTipoActual .

    id              reduce using rule 28 (TIPO -> float nt_cambioTipoActual .)


state 39

    (53) FUNC -> TIPO nt_cambioFuncActual . id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub

    id              shift and go to state 54


state 40

    (57) nt_cambioFuncActual -> empty .

    id              reduce using rule 57 (nt_cambioFuncActual -> empty .)


state 41

    (8) PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .

    int             reduce using rule 8 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)
    float           reduce using rule 8 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)
    bool            reduce using rule 8 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)
    string          reduce using rule 8 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)
    void            reduce using rule 8 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)
    main            reduce using rule 8 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)


state 42

    (2) nt_cambiarScope -> empty .
    (10) PROGRAMA_FUNC_AUX -> empty .

  ! reduce/reduce conflict for main resolved using rule 2 (nt_cambiarScope -> empty .)
    main            reduce using rule 2 (nt_cambiarScope -> empty .)
    int             reduce using rule 10 (PROGRAMA_FUNC_AUX -> empty .)
    float           reduce using rule 10 (PROGRAMA_FUNC_AUX -> empty .)
    bool            reduce using rule 10 (PROGRAMA_FUNC_AUX -> empty .)
    string          reduce using rule 10 (PROGRAMA_FUNC_AUX -> empty .)
    void            reduce using rule 10 (PROGRAMA_FUNC_AUX -> empty .)

  ! main            [ reduce using rule 10 (PROGRAMA_FUNC_AUX -> empty .) ]


state 43

    (1) PROGRAMA -> program id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope . main nt_ambienteMain CUERPO

    main            shift and go to state 55


state 44

    (29) TIPO -> bool nt_cambioTipoActual .

    id              reduce using rule 29 (TIPO -> bool nt_cambioTipoActual .)


state 45

    (54) FUNC -> VOIDFUNC nt_pushEndsub .

    int             reduce using rule 54 (FUNC -> VOIDFUNC nt_pushEndsub .)
    float           reduce using rule 54 (FUNC -> VOIDFUNC nt_pushEndsub .)
    bool            reduce using rule 54 (FUNC -> VOIDFUNC nt_pushEndsub .)
    string          reduce using rule 54 (FUNC -> VOIDFUNC nt_pushEndsub .)
    void            reduce using rule 54 (FUNC -> VOIDFUNC nt_pushEndsub .)
    main            reduce using rule 54 (FUNC -> VOIDFUNC nt_pushEndsub .)


state 46

    (55) nt_pushEndsub -> empty .

    int             reduce using rule 55 (nt_pushEndsub -> empty .)
    float           reduce using rule 55 (nt_pushEndsub -> empty .)
    bool            reduce using rule 55 (nt_pushEndsub -> empty .)
    string          reduce using rule 55 (nt_pushEndsub -> empty .)
    void            reduce using rule 55 (nt_pushEndsub -> empty .)
    main            reduce using rule 55 (nt_pushEndsub -> empty .)


state 47

    (30) TIPO -> string nt_cambioTipoActual .

    id              reduce using rule 30 (TIPO -> string nt_cambioTipoActual .)


state 48

    (64) nt_hacerVoid -> empty .

    id              reduce using rule 64 (nt_hacerVoid -> empty .)


state 49

    (63) VOIDFUNC -> void nt_hacerVoid . id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb

    id              shift and go to state 56


state 50

    (23) VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX . semicolon
    (26) VARS_VAR_AUX -> VARS_VAR_AUX . comma id nt_agregarId nt_agregarDicVar

    semicolon       shift and go to state 57
    comma           shift and go to state 58


state 51

    (25) VARS_VAR_AUX -> id . nt_agregarId nt_agregarDicVar
    (20) nt_agregarId -> . empty
    (151) empty -> .

    semicolon       reduce using rule 151 (empty -> .)
    comma           reduce using rule 151 (empty -> .)

    empty                          shift and go to state 59
    nt_agregarId                   shift and go to state 60

state 52

    (16) VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX . semicolon
    (19) VARS_LIST_AUX -> VARS_LIST_AUX . comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    semicolon       shift and go to state 61
    comma           shift and go to state 62


state 53

    (18) VARS_LIST_AUX -> id . nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar
    (20) nt_agregarId -> . empty
    (151) empty -> .

    left_sb         reduce using rule 151 (empty -> .)

    empty                          shift and go to state 59
    nt_agregarId                   shift and go to state 63

state 54

    (53) FUNC -> TIPO nt_cambioFuncActual id . nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub
    (58) nt_agregarIdFunc -> . empty
    (151) empty -> .

    left_par        reduce using rule 151 (empty -> .)

    nt_agregarIdFunc               shift and go to state 64
    empty                          shift and go to state 65

state 55

    (1) PROGRAMA -> program id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main . nt_ambienteMain CUERPO
    (3) nt_ambienteMain -> . nt_cambiarScope
    (2) nt_cambiarScope -> . empty
    (151) empty -> .

    left_cb         reduce using rule 151 (empty -> .)

    nt_ambienteMain                shift and go to state 66
    nt_cambiarScope                shift and go to state 67
    empty                          shift and go to state 17

state 56

    (63) VOIDFUNC -> void nt_hacerVoid id . nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb
    (58) nt_agregarIdFunc -> . empty
    (151) empty -> .

    left_par        reduce using rule 151 (empty -> .)

    nt_agregarIdFunc               shift and go to state 68
    empty                          shift and go to state 65

state 57

    (23) VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .

    list            reduce using rule 23 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    var             reduce using rule 23 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    if              reduce using rule 23 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    while           reduce using rule 23 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    cread           reduce using rule 23 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    cwrite          reduce using rule 23 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    left_par        reduce using rule 23 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    id              reduce using rule 23 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    return          reduce using rule 23 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    right_cb        reduce using rule 23 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    int             reduce using rule 23 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    float           reduce using rule 23 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    bool            reduce using rule 23 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    string          reduce using rule 23 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    void            reduce using rule 23 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    main            reduce using rule 23 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)


state 58

    (26) VARS_VAR_AUX -> VARS_VAR_AUX comma . id nt_agregarId nt_agregarDicVar

    id              shift and go to state 69


state 59

    (20) nt_agregarId -> empty .

    semicolon       reduce using rule 20 (nt_agregarId -> empty .)
    comma           reduce using rule 20 (nt_agregarId -> empty .)
    left_sb         reduce using rule 20 (nt_agregarId -> empty .)


state 60

    (25) VARS_VAR_AUX -> id nt_agregarId . nt_agregarDicVar
    (22) nt_agregarDicVar -> . empty
    (151) empty -> .

    semicolon       reduce using rule 151 (empty -> .)
    comma           reduce using rule 151 (empty -> .)

    nt_agregarDicVar               shift and go to state 70
    empty                          shift and go to state 71

state 61

    (16) VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .

    list            reduce using rule 16 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    var             reduce using rule 16 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    if              reduce using rule 16 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    while           reduce using rule 16 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    cread           reduce using rule 16 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    cwrite          reduce using rule 16 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    left_par        reduce using rule 16 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    id              reduce using rule 16 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    return          reduce using rule 16 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    right_cb        reduce using rule 16 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    int             reduce using rule 16 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    float           reduce using rule 16 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    bool            reduce using rule 16 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    string          reduce using rule 16 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    void            reduce using rule 16 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    main            reduce using rule 16 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)


state 62

    (19) VARS_LIST_AUX -> VARS_LIST_AUX comma . id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    id              shift and go to state 72


state 63

    (18) VARS_LIST_AUX -> id nt_agregarId . left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    left_sb         shift and go to state 73


state 64

    (53) FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc . left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub

    left_par        shift and go to state 74


state 65

    (58) nt_agregarIdFunc -> empty .

    left_par        reduce using rule 58 (nt_agregarIdFunc -> empty .)


state 66

    (1) PROGRAMA -> program id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain . CUERPO
    (32) CUERPO -> . left_cb CUERPO_AUX right_cb

    left_cb         shift and go to state 76

    CUERPO                         shift and go to state 75

state 67

    (3) nt_ambienteMain -> nt_cambiarScope .

    left_cb         reduce using rule 3 (nt_ambienteMain -> nt_cambiarScope .)


state 68

    (63) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc . left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb

    left_par        shift and go to state 77


state 69

    (26) VARS_VAR_AUX -> VARS_VAR_AUX comma id . nt_agregarId nt_agregarDicVar
    (20) nt_agregarId -> . empty
    (151) empty -> .

    semicolon       reduce using rule 151 (empty -> .)
    comma           reduce using rule 151 (empty -> .)

    nt_agregarId                   shift and go to state 78
    empty                          shift and go to state 59

state 70

    (25) VARS_VAR_AUX -> id nt_agregarId nt_agregarDicVar .

    semicolon       reduce using rule 25 (VARS_VAR_AUX -> id nt_agregarId nt_agregarDicVar .)
    comma           reduce using rule 25 (VARS_VAR_AUX -> id nt_agregarId nt_agregarDicVar .)


state 71

    (22) nt_agregarDicVar -> empty .

    semicolon       reduce using rule 22 (nt_agregarDicVar -> empty .)
    comma           reduce using rule 22 (nt_agregarDicVar -> empty .)


state 72

    (19) VARS_LIST_AUX -> VARS_LIST_AUX comma id . nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar
    (20) nt_agregarId -> . empty
    (151) empty -> .

    left_sb         reduce using rule 151 (empty -> .)

    empty                          shift and go to state 59
    nt_agregarId                   shift and go to state 79

state 73

    (18) VARS_LIST_AUX -> id nt_agregarId left_sb . cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    cteInt          shift and go to state 80


state 74

    (53) FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par . FUNC_PARA right_par CUERPORETORNO nt_pushEndsub
    (59) FUNC_PARA -> . TIPO id nt_agregarParametro
    (60) FUNC_PARA -> . FUNC_PARA comma TIPO id nt_agregarParametro
    (61) FUNC_PARA -> . empty
    (27) TIPO -> . int nt_cambioTipoActual
    (28) TIPO -> . float nt_cambioTipoActual
    (29) TIPO -> . bool nt_cambioTipoActual
    (30) TIPO -> . string nt_cambioTipoActual
    (151) empty -> .

    int             shift and go to state 23
    float           shift and go to state 24
    bool            shift and go to state 28
    string          shift and go to state 31
    right_par       reduce using rule 151 (empty -> .)
    comma           reduce using rule 151 (empty -> .)

    TIPO                           shift and go to state 81
    empty                          shift and go to state 82
    FUNC_PARA                      shift and go to state 83

state 75

    (1) PROGRAMA -> program id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO .

    $end            reduce using rule 1 (PROGRAMA -> program id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO .)


state 76

    (32) CUERPO -> left_cb . CUERPO_AUX right_cb
    (33) CUERPO_AUX -> . CUERPO_VARS CUERPO_ESTATUTO
    (34) CUERPO_AUX -> . CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO
    (35) CUERPO_VARS -> . VARS
    (36) CUERPO_VARS -> . empty
    (11) VARS -> . VARS_AUX
    (151) empty -> .
    (12) VARS_AUX -> . VARS_LIST_VAR
    (13) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (14) VARS_LIST_VAR -> . VARS_LIST
    (15) VARS_LIST_VAR -> . VARS_VAR
    (16) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (23) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    if              reduce using rule 151 (empty -> .)
    while           reduce using rule 151 (empty -> .)
    cread           reduce using rule 151 (empty -> .)
    cwrite          reduce using rule 151 (empty -> .)
    left_par        reduce using rule 151 (empty -> .)
    id              reduce using rule 151 (empty -> .)
    right_cb        reduce using rule 151 (empty -> .)
    list            shift and go to state 14
    var             shift and go to state 10

  ! list            [ reduce using rule 151 (empty -> .) ]
  ! var             [ reduce using rule 151 (empty -> .) ]

    CUERPO_VARS                    shift and go to state 84
    VARS                           shift and go to state 85
    VARS_LIST                      shift and go to state 9
    VARS_LIST_VAR                  shift and go to state 12
    VARS_AUX                       shift and go to state 15
    CUERPO_AUX                     shift and go to state 87
    VARS_VAR                       shift and go to state 13
    empty                          shift and go to state 86

state 77

    (63) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par . VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb
    (65) VOIDFUNC_PARA -> . TIPO id nt_agregarParametro
    (66) VOIDFUNC_PARA -> . VOIDFUNC_PARA comma TIPO id nt_agregarParametro
    (27) TIPO -> . int nt_cambioTipoActual
    (28) TIPO -> . float nt_cambioTipoActual
    (29) TIPO -> . bool nt_cambioTipoActual
    (30) TIPO -> . string nt_cambioTipoActual

    int             shift and go to state 23
    float           shift and go to state 24
    bool            shift and go to state 28
    string          shift and go to state 31

    TIPO                           shift and go to state 89
    VOIDFUNC_PARA                  shift and go to state 88

state 78

    (26) VARS_VAR_AUX -> VARS_VAR_AUX comma id nt_agregarId . nt_agregarDicVar
    (22) nt_agregarDicVar -> . empty
    (151) empty -> .

    semicolon       reduce using rule 151 (empty -> .)
    comma           reduce using rule 151 (empty -> .)

    nt_agregarDicVar               shift and go to state 90
    empty                          shift and go to state 71

state 79

    (19) VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId . left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    left_sb         shift and go to state 91


state 80

    (18) VARS_LIST_AUX -> id nt_agregarId left_sb cteInt . nt_agregarCteLista right_sb nt_agregarDicVar
    (21) nt_agregarCteLista -> . empty
    (151) empty -> .

    right_sb        reduce using rule 151 (empty -> .)

    nt_agregarCteLista             shift and go to state 92
    empty                          shift and go to state 93

state 81

    (59) FUNC_PARA -> TIPO . id nt_agregarParametro

    id              shift and go to state 94


state 82

    (61) FUNC_PARA -> empty .

    right_par       reduce using rule 61 (FUNC_PARA -> empty .)
    comma           reduce using rule 61 (FUNC_PARA -> empty .)


state 83

    (53) FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA . right_par CUERPORETORNO nt_pushEndsub
    (60) FUNC_PARA -> FUNC_PARA . comma TIPO id nt_agregarParametro

    right_par       shift and go to state 95
    comma           shift and go to state 96


state 84

    (33) CUERPO_AUX -> CUERPO_VARS . CUERPO_ESTATUTO
    (37) CUERPO_ESTATUTO -> . ESTATUTO
    (38) CUERPO_ESTATUTO -> . empty
    (67) ESTATUTO -> . ASIGNACION
    (68) ESTATUTO -> . CONDICION
    (69) ESTATUTO -> . CICLO
    (70) ESTATUTO -> . LECTURA
    (71) ESTATUTO -> . ESCRITURA
    (72) ESTATUTO -> . LLAMADA
    (151) empty -> .
    (144) ASIGNACION -> . ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon
    (73) CONDICION -> . if CONDICION_AUX
    (83) CICLO -> . while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop
    (86) LECTURA -> . cread left_par id nt_leer right_par semicolon
    (88) ESCRITURA -> . cwrite left_par EXPRESION nt_escribir right_par semicolon
    (90) LLAMADA -> . left_par LLAMADA_EXPRESION right_par semicolon
    (146) ASIGNACION_AUX -> . id nt_pushPilaO
    (147) ASIGNACION_AUX -> . LISTA
    (128) LISTA -> . id left_sb EXP right_sb

  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for cread resolved as shift
  ! shift/reduce conflict for cwrite resolved as shift
  ! shift/reduce conflict for left_par resolved as shift
  ! shift/reduce conflict for id resolved as shift
    right_cb        reduce using rule 151 (empty -> .)
    list            reduce using rule 151 (empty -> .)
    var             reduce using rule 151 (empty -> .)
    if              shift and go to state 100
    while           shift and go to state 112
    cread           shift and go to state 98
    cwrite          shift and go to state 104
    left_par        shift and go to state 110
    id              shift and go to state 103

  ! if              [ reduce using rule 151 (empty -> .) ]
  ! while           [ reduce using rule 151 (empty -> .) ]
  ! cread           [ reduce using rule 151 (empty -> .) ]
  ! cwrite          [ reduce using rule 151 (empty -> .) ]
  ! left_par        [ reduce using rule 151 (empty -> .) ]
  ! id              [ reduce using rule 151 (empty -> .) ]

    CICLO                          shift and go to state 97
    LECTURA                        shift and go to state 99
    ESCRITURA                      shift and go to state 106
    ASIGNACION                     shift and go to state 101
    ESTATUTO                       shift and go to state 102
    ASIGNACION_AUX                 shift and go to state 105
    empty                          shift and go to state 107
    LLAMADA                        shift and go to state 108
    CONDICION                      shift and go to state 109
    CUERPO_ESTATUTO                shift and go to state 111
    LISTA                          shift and go to state 113

state 85

    (35) CUERPO_VARS -> VARS .

    if              reduce using rule 35 (CUERPO_VARS -> VARS .)
    while           reduce using rule 35 (CUERPO_VARS -> VARS .)
    cread           reduce using rule 35 (CUERPO_VARS -> VARS .)
    cwrite          reduce using rule 35 (CUERPO_VARS -> VARS .)
    left_par        reduce using rule 35 (CUERPO_VARS -> VARS .)
    id              reduce using rule 35 (CUERPO_VARS -> VARS .)
    right_cb        reduce using rule 35 (CUERPO_VARS -> VARS .)
    list            reduce using rule 35 (CUERPO_VARS -> VARS .)
    var             reduce using rule 35 (CUERPO_VARS -> VARS .)


state 86

    (36) CUERPO_VARS -> empty .

    if              reduce using rule 36 (CUERPO_VARS -> empty .)
    while           reduce using rule 36 (CUERPO_VARS -> empty .)
    cread           reduce using rule 36 (CUERPO_VARS -> empty .)
    cwrite          reduce using rule 36 (CUERPO_VARS -> empty .)
    left_par        reduce using rule 36 (CUERPO_VARS -> empty .)
    id              reduce using rule 36 (CUERPO_VARS -> empty .)
    right_cb        reduce using rule 36 (CUERPO_VARS -> empty .)
    list            reduce using rule 36 (CUERPO_VARS -> empty .)
    var             reduce using rule 36 (CUERPO_VARS -> empty .)


state 87

    (32) CUERPO -> left_cb CUERPO_AUX . right_cb
    (34) CUERPO_AUX -> CUERPO_AUX . CUERPO_VARS CUERPO_ESTATUTO
    (35) CUERPO_VARS -> . VARS
    (36) CUERPO_VARS -> . empty
    (11) VARS -> . VARS_AUX
    (151) empty -> .
    (12) VARS_AUX -> . VARS_LIST_VAR
    (13) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (14) VARS_LIST_VAR -> . VARS_LIST
    (15) VARS_LIST_VAR -> . VARS_VAR
    (16) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (23) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for right_cb resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    right_cb        shift and go to state 115
    if              reduce using rule 151 (empty -> .)
    while           reduce using rule 151 (empty -> .)
    cread           reduce using rule 151 (empty -> .)
    cwrite          reduce using rule 151 (empty -> .)
    left_par        reduce using rule 151 (empty -> .)
    id              reduce using rule 151 (empty -> .)
    list            shift and go to state 14
    var             shift and go to state 10

  ! right_cb        [ reduce using rule 151 (empty -> .) ]
  ! list            [ reduce using rule 151 (empty -> .) ]
  ! var             [ reduce using rule 151 (empty -> .) ]

    CUERPO_VARS                    shift and go to state 114
    VARS                           shift and go to state 85
    VARS_LIST                      shift and go to state 9
    VARS_LIST_VAR                  shift and go to state 12
    VARS_AUX                       shift and go to state 15
    VARS_VAR                       shift and go to state 13
    empty                          shift and go to state 86

state 88

    (63) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA . right_par left_cb CUERPOFUNC right_cb
    (66) VOIDFUNC_PARA -> VOIDFUNC_PARA . comma TIPO id nt_agregarParametro

    right_par       shift and go to state 116
    comma           shift and go to state 117


state 89

    (65) VOIDFUNC_PARA -> TIPO . id nt_agregarParametro

    id              shift and go to state 118


state 90

    (26) VARS_VAR_AUX -> VARS_VAR_AUX comma id nt_agregarId nt_agregarDicVar .

    semicolon       reduce using rule 26 (VARS_VAR_AUX -> VARS_VAR_AUX comma id nt_agregarId nt_agregarDicVar .)
    comma           reduce using rule 26 (VARS_VAR_AUX -> VARS_VAR_AUX comma id nt_agregarId nt_agregarDicVar .)


state 91

    (19) VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb . cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    cteInt          shift and go to state 119


state 92

    (18) VARS_LIST_AUX -> id nt_agregarId left_sb cteInt nt_agregarCteLista . right_sb nt_agregarDicVar

    right_sb        shift and go to state 120


state 93

    (21) nt_agregarCteLista -> empty .

    right_sb        reduce using rule 21 (nt_agregarCteLista -> empty .)


state 94

    (59) FUNC_PARA -> TIPO id . nt_agregarParametro
    (62) nt_agregarParametro -> . empty
    (151) empty -> .

    right_par       reduce using rule 151 (empty -> .)
    comma           reduce using rule 151 (empty -> .)

    empty                          shift and go to state 121
    nt_agregarParametro            shift and go to state 122

state 95

    (53) FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par . CUERPORETORNO nt_pushEndsub
    (47) CUERPORETORNO -> . left_cb CUERPORETORNO_AUX right_cb

    left_cb         shift and go to state 124

    CUERPORETORNO                  shift and go to state 123

state 96

    (60) FUNC_PARA -> FUNC_PARA comma . TIPO id nt_agregarParametro
    (27) TIPO -> . int nt_cambioTipoActual
    (28) TIPO -> . float nt_cambioTipoActual
    (29) TIPO -> . bool nt_cambioTipoActual
    (30) TIPO -> . string nt_cambioTipoActual

    int             shift and go to state 23
    float           shift and go to state 24
    bool            shift and go to state 28
    string          shift and go to state 31

    TIPO                           shift and go to state 125

state 97

    (69) ESTATUTO -> CICLO .

    list            reduce using rule 69 (ESTATUTO -> CICLO .)
    var             reduce using rule 69 (ESTATUTO -> CICLO .)
    if              reduce using rule 69 (ESTATUTO -> CICLO .)
    while           reduce using rule 69 (ESTATUTO -> CICLO .)
    cread           reduce using rule 69 (ESTATUTO -> CICLO .)
    cwrite          reduce using rule 69 (ESTATUTO -> CICLO .)
    left_par        reduce using rule 69 (ESTATUTO -> CICLO .)
    id              reduce using rule 69 (ESTATUTO -> CICLO .)
    return          reduce using rule 69 (ESTATUTO -> CICLO .)
    right_cb        reduce using rule 69 (ESTATUTO -> CICLO .)


state 98

    (86) LECTURA -> cread . left_par id nt_leer right_par semicolon

    left_par        shift and go to state 126


state 99

    (70) ESTATUTO -> LECTURA .

    list            reduce using rule 70 (ESTATUTO -> LECTURA .)
    var             reduce using rule 70 (ESTATUTO -> LECTURA .)
    if              reduce using rule 70 (ESTATUTO -> LECTURA .)
    while           reduce using rule 70 (ESTATUTO -> LECTURA .)
    cread           reduce using rule 70 (ESTATUTO -> LECTURA .)
    cwrite          reduce using rule 70 (ESTATUTO -> LECTURA .)
    left_par        reduce using rule 70 (ESTATUTO -> LECTURA .)
    id              reduce using rule 70 (ESTATUTO -> LECTURA .)
    return          reduce using rule 70 (ESTATUTO -> LECTURA .)
    right_cb        reduce using rule 70 (ESTATUTO -> LECTURA .)


state 100

    (73) CONDICION -> if . CONDICION_AUX
    (74) CONDICION_AUX -> . left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto

    left_par        shift and go to state 127

    CONDICION_AUX                  shift and go to state 128

state 101

    (67) ESTATUTO -> ASIGNACION .

    list            reduce using rule 67 (ESTATUTO -> ASIGNACION .)
    var             reduce using rule 67 (ESTATUTO -> ASIGNACION .)
    if              reduce using rule 67 (ESTATUTO -> ASIGNACION .)
    while           reduce using rule 67 (ESTATUTO -> ASIGNACION .)
    cread           reduce using rule 67 (ESTATUTO -> ASIGNACION .)
    cwrite          reduce using rule 67 (ESTATUTO -> ASIGNACION .)
    left_par        reduce using rule 67 (ESTATUTO -> ASIGNACION .)
    id              reduce using rule 67 (ESTATUTO -> ASIGNACION .)
    return          reduce using rule 67 (ESTATUTO -> ASIGNACION .)
    right_cb        reduce using rule 67 (ESTATUTO -> ASIGNACION .)


state 102

    (37) CUERPO_ESTATUTO -> ESTATUTO .

    right_cb        reduce using rule 37 (CUERPO_ESTATUTO -> ESTATUTO .)
    list            reduce using rule 37 (CUERPO_ESTATUTO -> ESTATUTO .)
    var             reduce using rule 37 (CUERPO_ESTATUTO -> ESTATUTO .)
    if              reduce using rule 37 (CUERPO_ESTATUTO -> ESTATUTO .)
    while           reduce using rule 37 (CUERPO_ESTATUTO -> ESTATUTO .)
    cread           reduce using rule 37 (CUERPO_ESTATUTO -> ESTATUTO .)
    cwrite          reduce using rule 37 (CUERPO_ESTATUTO -> ESTATUTO .)
    left_par        reduce using rule 37 (CUERPO_ESTATUTO -> ESTATUTO .)
    id              reduce using rule 37 (CUERPO_ESTATUTO -> ESTATUTO .)


state 103

    (146) ASIGNACION_AUX -> id . nt_pushPilaO
    (128) LISTA -> id . left_sb EXP right_sb
    (148) nt_pushPilaO -> . empty
    (151) empty -> .

    left_sb         shift and go to state 129
    equals          reduce using rule 151 (empty -> .)

    nt_pushPilaO                   shift and go to state 130
    empty                          shift and go to state 131

state 104

    (88) ESCRITURA -> cwrite . left_par EXPRESION nt_escribir right_par semicolon

    left_par        shift and go to state 132


state 105

    (144) ASIGNACION -> ASIGNACION_AUX . equals nt_pushPOper EXPRESION nt_checaEquals semicolon

    equals          shift and go to state 133


state 106

    (71) ESTATUTO -> ESCRITURA .

    list            reduce using rule 71 (ESTATUTO -> ESCRITURA .)
    var             reduce using rule 71 (ESTATUTO -> ESCRITURA .)
    if              reduce using rule 71 (ESTATUTO -> ESCRITURA .)
    while           reduce using rule 71 (ESTATUTO -> ESCRITURA .)
    cread           reduce using rule 71 (ESTATUTO -> ESCRITURA .)
    cwrite          reduce using rule 71 (ESTATUTO -> ESCRITURA .)
    left_par        reduce using rule 71 (ESTATUTO -> ESCRITURA .)
    id              reduce using rule 71 (ESTATUTO -> ESCRITURA .)
    return          reduce using rule 71 (ESTATUTO -> ESCRITURA .)
    right_cb        reduce using rule 71 (ESTATUTO -> ESCRITURA .)


state 107

    (38) CUERPO_ESTATUTO -> empty .

    right_cb        reduce using rule 38 (CUERPO_ESTATUTO -> empty .)
    list            reduce using rule 38 (CUERPO_ESTATUTO -> empty .)
    var             reduce using rule 38 (CUERPO_ESTATUTO -> empty .)
    if              reduce using rule 38 (CUERPO_ESTATUTO -> empty .)
    while           reduce using rule 38 (CUERPO_ESTATUTO -> empty .)
    cread           reduce using rule 38 (CUERPO_ESTATUTO -> empty .)
    cwrite          reduce using rule 38 (CUERPO_ESTATUTO -> empty .)
    left_par        reduce using rule 38 (CUERPO_ESTATUTO -> empty .)
    id              reduce using rule 38 (CUERPO_ESTATUTO -> empty .)


state 108

    (72) ESTATUTO -> LLAMADA .

    list            reduce using rule 72 (ESTATUTO -> LLAMADA .)
    var             reduce using rule 72 (ESTATUTO -> LLAMADA .)
    if              reduce using rule 72 (ESTATUTO -> LLAMADA .)
    while           reduce using rule 72 (ESTATUTO -> LLAMADA .)
    cread           reduce using rule 72 (ESTATUTO -> LLAMADA .)
    cwrite          reduce using rule 72 (ESTATUTO -> LLAMADA .)
    left_par        reduce using rule 72 (ESTATUTO -> LLAMADA .)
    id              reduce using rule 72 (ESTATUTO -> LLAMADA .)
    return          reduce using rule 72 (ESTATUTO -> LLAMADA .)
    right_cb        reduce using rule 72 (ESTATUTO -> LLAMADA .)


state 109

    (68) ESTATUTO -> CONDICION .

    list            reduce using rule 68 (ESTATUTO -> CONDICION .)
    var             reduce using rule 68 (ESTATUTO -> CONDICION .)
    if              reduce using rule 68 (ESTATUTO -> CONDICION .)
    while           reduce using rule 68 (ESTATUTO -> CONDICION .)
    cread           reduce using rule 68 (ESTATUTO -> CONDICION .)
    cwrite          reduce using rule 68 (ESTATUTO -> CONDICION .)
    left_par        reduce using rule 68 (ESTATUTO -> CONDICION .)
    id              reduce using rule 68 (ESTATUTO -> CONDICION .)
    return          reduce using rule 68 (ESTATUTO -> CONDICION .)
    right_cb        reduce using rule 68 (ESTATUTO -> CONDICION .)


state 110

    (90) LLAMADA -> left_par . LLAMADA_EXPRESION right_par semicolon
    (91) LLAMADA_EXPRESION -> . EXPRESION
    (92) LLAMADA_EXPRESION -> . LLAMADA_EXPRESION comma EXPRESION
    (93) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (95) EXPRESION_NOT -> . not nt_pushPOper
    (96) EXPRESION_NOT -> . empty
    (151) empty -> .

    not             shift and go to state 137
    left_par        reduce using rule 151 (empty -> .)
    id              reduce using rule 151 (empty -> .)
    plus            reduce using rule 151 (empty -> .)
    minus           reduce using rule 151 (empty -> .)
    true            reduce using rule 151 (empty -> .)
    false           reduce using rule 151 (empty -> .)
    cteString       reduce using rule 151 (empty -> .)
    cteInt          reduce using rule 151 (empty -> .)
    cteFloat        reduce using rule 151 (empty -> .)

    EXPRESION                      shift and go to state 134
    EXPRESION_NOT                  shift and go to state 135
    LLAMADA_EXPRESION              shift and go to state 136
    empty                          shift and go to state 138

state 111

    (33) CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .

    right_cb        reduce using rule 33 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    list            reduce using rule 33 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    var             reduce using rule 33 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    if              reduce using rule 33 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    while           reduce using rule 33 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    cread           reduce using rule 33 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    cwrite          reduce using rule 33 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    left_par        reduce using rule 33 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    id              reduce using rule 33 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)


state 112

    (83) CICLO -> while . nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop
    (84) nt_saltoLoop -> . empty
    (151) empty -> .

    left_par        reduce using rule 151 (empty -> .)

    nt_saltoLoop                   shift and go to state 140
    empty                          shift and go to state 139

state 113

    (147) ASIGNACION_AUX -> LISTA .

    equals          reduce using rule 147 (ASIGNACION_AUX -> LISTA .)


state 114

    (34) CUERPO_AUX -> CUERPO_AUX CUERPO_VARS . CUERPO_ESTATUTO
    (37) CUERPO_ESTATUTO -> . ESTATUTO
    (38) CUERPO_ESTATUTO -> . empty
    (67) ESTATUTO -> . ASIGNACION
    (68) ESTATUTO -> . CONDICION
    (69) ESTATUTO -> . CICLO
    (70) ESTATUTO -> . LECTURA
    (71) ESTATUTO -> . ESCRITURA
    (72) ESTATUTO -> . LLAMADA
    (151) empty -> .
    (144) ASIGNACION -> . ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon
    (73) CONDICION -> . if CONDICION_AUX
    (83) CICLO -> . while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop
    (86) LECTURA -> . cread left_par id nt_leer right_par semicolon
    (88) ESCRITURA -> . cwrite left_par EXPRESION nt_escribir right_par semicolon
    (90) LLAMADA -> . left_par LLAMADA_EXPRESION right_par semicolon
    (146) ASIGNACION_AUX -> . id nt_pushPilaO
    (147) ASIGNACION_AUX -> . LISTA
    (128) LISTA -> . id left_sb EXP right_sb

  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for cread resolved as shift
  ! shift/reduce conflict for cwrite resolved as shift
  ! shift/reduce conflict for left_par resolved as shift
  ! shift/reduce conflict for id resolved as shift
    right_cb        reduce using rule 151 (empty -> .)
    list            reduce using rule 151 (empty -> .)
    var             reduce using rule 151 (empty -> .)
    if              shift and go to state 100
    while           shift and go to state 112
    cread           shift and go to state 98
    cwrite          shift and go to state 104
    left_par        shift and go to state 110
    id              shift and go to state 103

  ! if              [ reduce using rule 151 (empty -> .) ]
  ! while           [ reduce using rule 151 (empty -> .) ]
  ! cread           [ reduce using rule 151 (empty -> .) ]
  ! cwrite          [ reduce using rule 151 (empty -> .) ]
  ! left_par        [ reduce using rule 151 (empty -> .) ]
  ! id              [ reduce using rule 151 (empty -> .) ]

    CICLO                          shift and go to state 97
    LECTURA                        shift and go to state 99
    ESCRITURA                      shift and go to state 106
    ASIGNACION                     shift and go to state 101
    ESTATUTO                       shift and go to state 102
    ASIGNACION_AUX                 shift and go to state 105
    empty                          shift and go to state 107
    LLAMADA                        shift and go to state 108
    CONDICION                      shift and go to state 109
    CUERPO_ESTATUTO                shift and go to state 141
    LISTA                          shift and go to state 113

state 115

    (32) CUERPO -> left_cb CUERPO_AUX right_cb .

    else            reduce using rule 32 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    elseif          reduce using rule 32 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    right_cb        reduce using rule 32 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    list            reduce using rule 32 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    var             reduce using rule 32 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    if              reduce using rule 32 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    while           reduce using rule 32 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    cread           reduce using rule 32 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    cwrite          reduce using rule 32 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    left_par        reduce using rule 32 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    id              reduce using rule 32 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    return          reduce using rule 32 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    $end            reduce using rule 32 (CUERPO -> left_cb CUERPO_AUX right_cb .)


state 116

    (63) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par . left_cb CUERPOFUNC right_cb

    left_cb         shift and go to state 142


state 117

    (66) VOIDFUNC_PARA -> VOIDFUNC_PARA comma . TIPO id nt_agregarParametro
    (27) TIPO -> . int nt_cambioTipoActual
    (28) TIPO -> . float nt_cambioTipoActual
    (29) TIPO -> . bool nt_cambioTipoActual
    (30) TIPO -> . string nt_cambioTipoActual

    int             shift and go to state 23
    float           shift and go to state 24
    bool            shift and go to state 28
    string          shift and go to state 31

    TIPO                           shift and go to state 143

state 118

    (65) VOIDFUNC_PARA -> TIPO id . nt_agregarParametro
    (62) nt_agregarParametro -> . empty
    (151) empty -> .

    right_par       reduce using rule 151 (empty -> .)
    comma           reduce using rule 151 (empty -> .)

    empty                          shift and go to state 121
    nt_agregarParametro            shift and go to state 144

state 119

    (19) VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt . nt_agregarCteLista right_sb nt_agregarDicVar
    (21) nt_agregarCteLista -> . empty
    (151) empty -> .

    right_sb        reduce using rule 151 (empty -> .)

    nt_agregarCteLista             shift and go to state 145
    empty                          shift and go to state 93

state 120

    (18) VARS_LIST_AUX -> id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb . nt_agregarDicVar
    (22) nt_agregarDicVar -> . empty
    (151) empty -> .

    semicolon       reduce using rule 151 (empty -> .)
    comma           reduce using rule 151 (empty -> .)

    nt_agregarDicVar               shift and go to state 146
    empty                          shift and go to state 71

state 121

    (62) nt_agregarParametro -> empty .

    right_par       reduce using rule 62 (nt_agregarParametro -> empty .)
    comma           reduce using rule 62 (nt_agregarParametro -> empty .)


state 122

    (59) FUNC_PARA -> TIPO id nt_agregarParametro .

    right_par       reduce using rule 59 (FUNC_PARA -> TIPO id nt_agregarParametro .)
    comma           reduce using rule 59 (FUNC_PARA -> TIPO id nt_agregarParametro .)


state 123

    (53) FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO . nt_pushEndsub
    (55) nt_pushEndsub -> . empty
    (151) empty -> .

    int             reduce using rule 151 (empty -> .)
    float           reduce using rule 151 (empty -> .)
    bool            reduce using rule 151 (empty -> .)
    string          reduce using rule 151 (empty -> .)
    void            reduce using rule 151 (empty -> .)
    main            reduce using rule 151 (empty -> .)

    nt_pushEndsub                  shift and go to state 147
    empty                          shift and go to state 46

state 124

    (47) CUERPORETORNO -> left_cb . CUERPORETORNO_AUX right_cb
    (48) CUERPORETORNO_AUX -> . CUERPORETORNO_CF_AUX RETORNO
    (49) CUERPORETORNO_AUX -> . CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO
    (50) CUERPORETORNO_CF_AUX -> . CUERPOFUNC
    (51) CUERPORETORNO_CF_AUX -> . empty
    (39) CUERPOFUNC -> . CUERPOFUNC_AUX
    (151) empty -> .
    (40) CUERPOFUNC_AUX -> . CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
    (41) CUERPOFUNC_AUX -> . CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
    (43) CUERPOFUNC_VARS -> . VARS
    (44) CUERPOFUNC_VARS -> . empty
    (11) VARS -> . VARS_AUX
    (12) VARS_AUX -> . VARS_LIST_VAR
    (13) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (14) VARS_LIST_VAR -> . VARS_LIST
    (15) VARS_LIST_VAR -> . VARS_VAR
    (16) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (23) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    return          reduce using rule 151 (empty -> .)
    if              reduce using rule 151 (empty -> .)
    while           reduce using rule 151 (empty -> .)
    cread           reduce using rule 151 (empty -> .)
    cwrite          reduce using rule 151 (empty -> .)
    left_par        reduce using rule 151 (empty -> .)
    id              reduce using rule 151 (empty -> .)
    list            shift and go to state 14
    var             shift and go to state 10

  ! list            [ reduce using rule 151 (empty -> .) ]
  ! var             [ reduce using rule 151 (empty -> .) ]

    CUERPORETORNO_CF_AUX           shift and go to state 151
    VARS                           shift and go to state 152
    CUERPOFUNC                     shift and go to state 148
    VARS_LIST                      shift and go to state 9
    VARS_LIST_VAR                  shift and go to state 12
    VARS_VAR                       shift and go to state 13
    VARS_AUX                       shift and go to state 15
    CUERPORETORNO_AUX              shift and go to state 149
    CUERPOFUNC_VARS                shift and go to state 153
    CUERPOFUNC_AUX                 shift and go to state 150
    empty                          shift and go to state 154

state 125

    (60) FUNC_PARA -> FUNC_PARA comma TIPO . id nt_agregarParametro

    id              shift and go to state 155


state 126

    (86) LECTURA -> cread left_par . id nt_leer right_par semicolon

    id              shift and go to state 156


state 127

    (74) CONDICION_AUX -> left_par . EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto
    (93) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (95) EXPRESION_NOT -> . not nt_pushPOper
    (96) EXPRESION_NOT -> . empty
    (151) empty -> .

    not             shift and go to state 137
    left_par        reduce using rule 151 (empty -> .)
    id              reduce using rule 151 (empty -> .)
    plus            reduce using rule 151 (empty -> .)
    minus           reduce using rule 151 (empty -> .)
    true            reduce using rule 151 (empty -> .)
    false           reduce using rule 151 (empty -> .)
    cteString       reduce using rule 151 (empty -> .)
    cteInt          reduce using rule 151 (empty -> .)
    cteFloat        reduce using rule 151 (empty -> .)

    EXPRESION                      shift and go to state 157
    EXPRESION_NOT                  shift and go to state 135
    empty                          shift and go to state 138

state 128

    (73) CONDICION -> if CONDICION_AUX .

    list            reduce using rule 73 (CONDICION -> if CONDICION_AUX .)
    var             reduce using rule 73 (CONDICION -> if CONDICION_AUX .)
    if              reduce using rule 73 (CONDICION -> if CONDICION_AUX .)
    while           reduce using rule 73 (CONDICION -> if CONDICION_AUX .)
    cread           reduce using rule 73 (CONDICION -> if CONDICION_AUX .)
    cwrite          reduce using rule 73 (CONDICION -> if CONDICION_AUX .)
    left_par        reduce using rule 73 (CONDICION -> if CONDICION_AUX .)
    id              reduce using rule 73 (CONDICION -> if CONDICION_AUX .)
    return          reduce using rule 73 (CONDICION -> if CONDICION_AUX .)
    right_cb        reduce using rule 73 (CONDICION -> if CONDICION_AUX .)


state 129

    (128) LISTA -> id left_sb . EXP right_sb
    (109) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (114) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (119) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (120) FACTOR -> . CONSTANTE
    (121) FACTOR -> . LISTA
    (122) FACTOR -> . FACTOR_AUX
    (129) CONSTANTE -> . NUMERICA
    (130) CONSTANTE -> . BOOLEANA
    (131) CONSTANTE -> . STRINGS
    (128) LISTA -> . id left_sb EXP right_sb
    (123) FACTOR_AUX -> . id nt_pushPilaO
    (124) FACTOR_AUX -> . id LLAMADA_F
    (132) NUMERICA -> . NUMERICA_AUX
    (133) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (134) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (141) BOOLEANA -> . true
    (142) BOOLEANA -> . false
    (143) STRINGS -> . cteString
    (137) NUMERICA_AUX -> . cteInt nt_pushInt
    (138) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 167
    id              shift and go to state 162
    plus            shift and go to state 163
    minus           shift and go to state 176
    true            shift and go to state 168
    false           shift and go to state 158
    cteString       shift and go to state 166
    cteInt          shift and go to state 171
    cteFloat        shift and go to state 160

    BOOLEANA                       shift and go to state 161
    EXP                            shift and go to state 159
    FACTOR_AUX                     shift and go to state 164
    NUMERICA_AUX                   shift and go to state 172
    TERMINO                        shift and go to state 165
    STRINGS                        shift and go to state 169
    CONSTANTE                      shift and go to state 170
    NUMERICA                       shift and go to state 173
    FACTOR                         shift and go to state 174
    LISTA                          shift and go to state 175

state 130

    (146) ASIGNACION_AUX -> id nt_pushPilaO .

    equals          reduce using rule 146 (ASIGNACION_AUX -> id nt_pushPilaO .)


state 131

    (148) nt_pushPilaO -> empty .

    equals          reduce using rule 148 (nt_pushPilaO -> empty .)
    multiply        reduce using rule 148 (nt_pushPilaO -> empty .)
    divide          reduce using rule 148 (nt_pushPilaO -> empty .)
    plus            reduce using rule 148 (nt_pushPilaO -> empty .)
    minus           reduce using rule 148 (nt_pushPilaO -> empty .)
    right_sb        reduce using rule 148 (nt_pushPilaO -> empty .)
    lt              reduce using rule 148 (nt_pushPilaO -> empty .)
    gt              reduce using rule 148 (nt_pushPilaO -> empty .)
    ne              reduce using rule 148 (nt_pushPilaO -> empty .)
    ge              reduce using rule 148 (nt_pushPilaO -> empty .)
    le              reduce using rule 148 (nt_pushPilaO -> empty .)
    et              reduce using rule 148 (nt_pushPilaO -> empty .)
    and             reduce using rule 148 (nt_pushPilaO -> empty .)
    or              reduce using rule 148 (nt_pushPilaO -> empty .)
    right_par       reduce using rule 148 (nt_pushPilaO -> empty .)
    comma           reduce using rule 148 (nt_pushPilaO -> empty .)
    semicolon       reduce using rule 148 (nt_pushPilaO -> empty .)


state 132

    (88) ESCRITURA -> cwrite left_par . EXPRESION nt_escribir right_par semicolon
    (93) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (95) EXPRESION_NOT -> . not nt_pushPOper
    (96) EXPRESION_NOT -> . empty
    (151) empty -> .

    not             shift and go to state 137
    left_par        reduce using rule 151 (empty -> .)
    id              reduce using rule 151 (empty -> .)
    plus            reduce using rule 151 (empty -> .)
    minus           reduce using rule 151 (empty -> .)
    true            reduce using rule 151 (empty -> .)
    false           reduce using rule 151 (empty -> .)
    cteString       reduce using rule 151 (empty -> .)
    cteInt          reduce using rule 151 (empty -> .)
    cteFloat        reduce using rule 151 (empty -> .)

    EXPRESION                      shift and go to state 177
    EXPRESION_NOT                  shift and go to state 135
    empty                          shift and go to state 138

state 133

    (144) ASIGNACION -> ASIGNACION_AUX equals . nt_pushPOper EXPRESION nt_checaEquals semicolon
    (149) nt_pushPOper -> . empty
    (151) empty -> .

    not             reduce using rule 151 (empty -> .)
    left_par        reduce using rule 151 (empty -> .)
    id              reduce using rule 151 (empty -> .)
    plus            reduce using rule 151 (empty -> .)
    minus           reduce using rule 151 (empty -> .)
    true            reduce using rule 151 (empty -> .)
    false           reduce using rule 151 (empty -> .)
    cteString       reduce using rule 151 (empty -> .)
    cteInt          reduce using rule 151 (empty -> .)
    cteFloat        reduce using rule 151 (empty -> .)

    empty                          shift and go to state 178
    nt_pushPOper                   shift and go to state 179

state 134

    (91) LLAMADA_EXPRESION -> EXPRESION .

    right_par       reduce using rule 91 (LLAMADA_EXPRESION -> EXPRESION .)
    comma           reduce using rule 91 (LLAMADA_EXPRESION -> EXPRESION .)


state 135

    (93) EXPRESION -> EXPRESION_NOT . EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (100) EXPRESIONLOGICA -> . EXP EXPRESIONLOGICA_AUX
    (109) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (114) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (119) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (120) FACTOR -> . CONSTANTE
    (121) FACTOR -> . LISTA
    (122) FACTOR -> . FACTOR_AUX
    (129) CONSTANTE -> . NUMERICA
    (130) CONSTANTE -> . BOOLEANA
    (131) CONSTANTE -> . STRINGS
    (128) LISTA -> . id left_sb EXP right_sb
    (123) FACTOR_AUX -> . id nt_pushPilaO
    (124) FACTOR_AUX -> . id LLAMADA_F
    (132) NUMERICA -> . NUMERICA_AUX
    (133) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (134) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (141) BOOLEANA -> . true
    (142) BOOLEANA -> . false
    (143) STRINGS -> . cteString
    (137) NUMERICA_AUX -> . cteInt nt_pushInt
    (138) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 167
    id              shift and go to state 162
    plus            shift and go to state 163
    minus           shift and go to state 176
    true            shift and go to state 168
    false           shift and go to state 158
    cteString       shift and go to state 166
    cteInt          shift and go to state 171
    cteFloat        shift and go to state 160

    EXPRESIONLOGICA                shift and go to state 180
    BOOLEANA                       shift and go to state 161
    EXP                            shift and go to state 181
    FACTOR_AUX                     shift and go to state 164
    TERMINO                        shift and go to state 165
    STRINGS                        shift and go to state 169
    CONSTANTE                      shift and go to state 170
    NUMERICA_AUX                   shift and go to state 172
    NUMERICA                       shift and go to state 173
    FACTOR                         shift and go to state 174
    LISTA                          shift and go to state 175

state 136

    (90) LLAMADA -> left_par LLAMADA_EXPRESION . right_par semicolon
    (92) LLAMADA_EXPRESION -> LLAMADA_EXPRESION . comma EXPRESION

    right_par       shift and go to state 183
    comma           shift and go to state 182


state 137

    (95) EXPRESION_NOT -> not . nt_pushPOper
    (149) nt_pushPOper -> . empty
    (151) empty -> .

    left_par        reduce using rule 151 (empty -> .)
    id              reduce using rule 151 (empty -> .)
    plus            reduce using rule 151 (empty -> .)
    minus           reduce using rule 151 (empty -> .)
    true            reduce using rule 151 (empty -> .)
    false           reduce using rule 151 (empty -> .)
    cteString       reduce using rule 151 (empty -> .)
    cteInt          reduce using rule 151 (empty -> .)
    cteFloat        reduce using rule 151 (empty -> .)

    empty                          shift and go to state 178
    nt_pushPOper                   shift and go to state 184

state 138

    (96) EXPRESION_NOT -> empty .

    left_par        reduce using rule 96 (EXPRESION_NOT -> empty .)
    id              reduce using rule 96 (EXPRESION_NOT -> empty .)
    plus            reduce using rule 96 (EXPRESION_NOT -> empty .)
    minus           reduce using rule 96 (EXPRESION_NOT -> empty .)
    true            reduce using rule 96 (EXPRESION_NOT -> empty .)
    false           reduce using rule 96 (EXPRESION_NOT -> empty .)
    cteString       reduce using rule 96 (EXPRESION_NOT -> empty .)
    cteInt          reduce using rule 96 (EXPRESION_NOT -> empty .)
    cteFloat        reduce using rule 96 (EXPRESION_NOT -> empty .)


state 139

    (84) nt_saltoLoop -> empty .

    left_par        reduce using rule 84 (nt_saltoLoop -> empty .)


state 140

    (83) CICLO -> while nt_saltoLoop . left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop

    left_par        shift and go to state 185


state 141

    (34) CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .

    right_cb        reduce using rule 34 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    list            reduce using rule 34 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    var             reduce using rule 34 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    if              reduce using rule 34 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    while           reduce using rule 34 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    cread           reduce using rule 34 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    cwrite          reduce using rule 34 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    left_par        reduce using rule 34 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    id              reduce using rule 34 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)


state 142

    (63) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb . CUERPOFUNC right_cb
    (39) CUERPOFUNC -> . CUERPOFUNC_AUX
    (40) CUERPOFUNC_AUX -> . CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
    (41) CUERPOFUNC_AUX -> . CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
    (43) CUERPOFUNC_VARS -> . VARS
    (44) CUERPOFUNC_VARS -> . empty
    (11) VARS -> . VARS_AUX
    (151) empty -> .
    (12) VARS_AUX -> . VARS_LIST_VAR
    (13) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (14) VARS_LIST_VAR -> . VARS_LIST
    (15) VARS_LIST_VAR -> . VARS_VAR
    (16) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (23) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    if              reduce using rule 151 (empty -> .)
    while           reduce using rule 151 (empty -> .)
    cread           reduce using rule 151 (empty -> .)
    cwrite          reduce using rule 151 (empty -> .)
    left_par        reduce using rule 151 (empty -> .)
    id              reduce using rule 151 (empty -> .)
    right_cb        reduce using rule 151 (empty -> .)
    list            shift and go to state 14
    var             shift and go to state 10

  ! list            [ reduce using rule 151 (empty -> .) ]
  ! var             [ reduce using rule 151 (empty -> .) ]

    VARS_LIST                      shift and go to state 9
    VARS                           shift and go to state 152
    CUERPOFUNC                     shift and go to state 186
    VARS_AUX                       shift and go to state 15
    VARS_LIST_VAR                  shift and go to state 12
    CUERPOFUNC_VARS                shift and go to state 153
    VARS_VAR                       shift and go to state 13
    CUERPOFUNC_AUX                 shift and go to state 150
    empty                          shift and go to state 187

state 143

    (66) VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO . id nt_agregarParametro

    id              shift and go to state 188


state 144

    (65) VOIDFUNC_PARA -> TIPO id nt_agregarParametro .

    right_par       reduce using rule 65 (VOIDFUNC_PARA -> TIPO id nt_agregarParametro .)
    comma           reduce using rule 65 (VOIDFUNC_PARA -> TIPO id nt_agregarParametro .)


state 145

    (19) VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista . right_sb nt_agregarDicVar

    right_sb        shift and go to state 189


state 146

    (18) VARS_LIST_AUX -> id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar .

    semicolon       reduce using rule 18 (VARS_LIST_AUX -> id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar .)
    comma           reduce using rule 18 (VARS_LIST_AUX -> id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar .)


state 147

    (53) FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub .

    int             reduce using rule 53 (FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub .)
    float           reduce using rule 53 (FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub .)
    bool            reduce using rule 53 (FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub .)
    string          reduce using rule 53 (FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub .)
    void            reduce using rule 53 (FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub .)
    main            reduce using rule 53 (FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub .)


state 148

    (50) CUERPORETORNO_CF_AUX -> CUERPOFUNC .

    return          reduce using rule 50 (CUERPORETORNO_CF_AUX -> CUERPOFUNC .)


state 149

    (47) CUERPORETORNO -> left_cb CUERPORETORNO_AUX . right_cb
    (49) CUERPORETORNO_AUX -> CUERPORETORNO_AUX . CUERPORETORNO_CF_AUX RETORNO
    (50) CUERPORETORNO_CF_AUX -> . CUERPOFUNC
    (51) CUERPORETORNO_CF_AUX -> . empty
    (39) CUERPOFUNC -> . CUERPOFUNC_AUX
    (151) empty -> .
    (40) CUERPOFUNC_AUX -> . CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
    (41) CUERPOFUNC_AUX -> . CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
    (43) CUERPOFUNC_VARS -> . VARS
    (44) CUERPOFUNC_VARS -> . empty
    (11) VARS -> . VARS_AUX
    (12) VARS_AUX -> . VARS_LIST_VAR
    (13) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (14) VARS_LIST_VAR -> . VARS_LIST
    (15) VARS_LIST_VAR -> . VARS_VAR
    (16) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (23) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    right_cb        shift and go to state 191
    return          reduce using rule 151 (empty -> .)
    if              reduce using rule 151 (empty -> .)
    while           reduce using rule 151 (empty -> .)
    cread           reduce using rule 151 (empty -> .)
    cwrite          reduce using rule 151 (empty -> .)
    left_par        reduce using rule 151 (empty -> .)
    id              reduce using rule 151 (empty -> .)
    list            shift and go to state 14
    var             shift and go to state 10

  ! list            [ reduce using rule 151 (empty -> .) ]
  ! var             [ reduce using rule 151 (empty -> .) ]

    CUERPORETORNO_CF_AUX           shift and go to state 190
    VARS                           shift and go to state 152
    CUERPOFUNC                     shift and go to state 148
    VARS_LIST                      shift and go to state 9
    VARS_LIST_VAR                  shift and go to state 12
    VARS_VAR                       shift and go to state 13
    VARS_AUX                       shift and go to state 15
    CUERPOFUNC_VARS                shift and go to state 153
    CUERPOFUNC_AUX                 shift and go to state 150
    empty                          shift and go to state 154

state 150

    (39) CUERPOFUNC -> CUERPOFUNC_AUX .
    (41) CUERPOFUNC_AUX -> CUERPOFUNC_AUX . CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
    (43) CUERPOFUNC_VARS -> . VARS
    (44) CUERPOFUNC_VARS -> . empty
    (11) VARS -> . VARS_AUX
    (151) empty -> .
    (12) VARS_AUX -> . VARS_LIST_VAR
    (13) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (14) VARS_LIST_VAR -> . VARS_LIST
    (15) VARS_LIST_VAR -> . VARS_VAR
    (16) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (23) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! reduce/reduce conflict for return resolved using rule 39 (CUERPOFUNC -> CUERPOFUNC_AUX .)
  ! reduce/reduce conflict for right_cb resolved using rule 39 (CUERPOFUNC -> CUERPOFUNC_AUX .)
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    return          reduce using rule 39 (CUERPOFUNC -> CUERPOFUNC_AUX .)
    right_cb        reduce using rule 39 (CUERPOFUNC -> CUERPOFUNC_AUX .)
    if              reduce using rule 151 (empty -> .)
    while           reduce using rule 151 (empty -> .)
    cread           reduce using rule 151 (empty -> .)
    cwrite          reduce using rule 151 (empty -> .)
    left_par        reduce using rule 151 (empty -> .)
    id              reduce using rule 151 (empty -> .)
    list            shift and go to state 14
    var             shift and go to state 10

  ! list            [ reduce using rule 151 (empty -> .) ]
  ! var             [ reduce using rule 151 (empty -> .) ]
  ! return          [ reduce using rule 151 (empty -> .) ]
  ! right_cb        [ reduce using rule 151 (empty -> .) ]

    VARS                           shift and go to state 152
    VARS_LIST                      shift and go to state 9
    VARS_LIST_VAR                  shift and go to state 12
    VARS_AUX                       shift and go to state 15
    CUERPOFUNC_VARS                shift and go to state 192
    VARS_VAR                       shift and go to state 13
    empty                          shift and go to state 187

state 151

    (48) CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX . RETORNO
    (52) RETORNO -> . return EXP semicolon

    return          shift and go to state 194

    RETORNO                        shift and go to state 193

state 152

    (43) CUERPOFUNC_VARS -> VARS .

    if              reduce using rule 43 (CUERPOFUNC_VARS -> VARS .)
    while           reduce using rule 43 (CUERPOFUNC_VARS -> VARS .)
    cread           reduce using rule 43 (CUERPOFUNC_VARS -> VARS .)
    cwrite          reduce using rule 43 (CUERPOFUNC_VARS -> VARS .)
    left_par        reduce using rule 43 (CUERPOFUNC_VARS -> VARS .)
    id              reduce using rule 43 (CUERPOFUNC_VARS -> VARS .)
    list            reduce using rule 43 (CUERPOFUNC_VARS -> VARS .)
    var             reduce using rule 43 (CUERPOFUNC_VARS -> VARS .)
    return          reduce using rule 43 (CUERPOFUNC_VARS -> VARS .)
    right_cb        reduce using rule 43 (CUERPOFUNC_VARS -> VARS .)


state 153

    (40) CUERPOFUNC_AUX -> CUERPOFUNC_VARS . nt_funcInicio CUERPOFUNC_ESTATUTO
    (42) nt_funcInicio -> . empty
    (151) empty -> .

    if              reduce using rule 151 (empty -> .)
    while           reduce using rule 151 (empty -> .)
    cread           reduce using rule 151 (empty -> .)
    cwrite          reduce using rule 151 (empty -> .)
    left_par        reduce using rule 151 (empty -> .)
    id              reduce using rule 151 (empty -> .)
    list            reduce using rule 151 (empty -> .)
    var             reduce using rule 151 (empty -> .)
    return          reduce using rule 151 (empty -> .)
    right_cb        reduce using rule 151 (empty -> .)

    empty                          shift and go to state 195
    nt_funcInicio                  shift and go to state 196

state 154

    (51) CUERPORETORNO_CF_AUX -> empty .
    (44) CUERPOFUNC_VARS -> empty .

  ! reduce/reduce conflict for return resolved using rule 44 (CUERPOFUNC_VARS -> empty .)
    if              reduce using rule 44 (CUERPOFUNC_VARS -> empty .)
    while           reduce using rule 44 (CUERPOFUNC_VARS -> empty .)
    cread           reduce using rule 44 (CUERPOFUNC_VARS -> empty .)
    cwrite          reduce using rule 44 (CUERPOFUNC_VARS -> empty .)
    left_par        reduce using rule 44 (CUERPOFUNC_VARS -> empty .)
    id              reduce using rule 44 (CUERPOFUNC_VARS -> empty .)
    list            reduce using rule 44 (CUERPOFUNC_VARS -> empty .)
    var             reduce using rule 44 (CUERPOFUNC_VARS -> empty .)
    return          reduce using rule 44 (CUERPOFUNC_VARS -> empty .)

  ! return          [ reduce using rule 51 (CUERPORETORNO_CF_AUX -> empty .) ]


state 155

    (60) FUNC_PARA -> FUNC_PARA comma TIPO id . nt_agregarParametro
    (62) nt_agregarParametro -> . empty
    (151) empty -> .

    right_par       reduce using rule 151 (empty -> .)
    comma           reduce using rule 151 (empty -> .)

    empty                          shift and go to state 121
    nt_agregarParametro            shift and go to state 197

state 156

    (86) LECTURA -> cread left_par id . nt_leer right_par semicolon
    (87) nt_leer -> . empty
    (151) empty -> .

    right_par       reduce using rule 151 (empty -> .)

    empty                          shift and go to state 199
    nt_leer                        shift and go to state 198

state 157

    (74) CONDICION_AUX -> left_par EXPRESION . nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto
    (80) nt_checarBool -> . empty
    (151) empty -> .

    right_par       reduce using rule 151 (empty -> .)

    nt_checarBool                  shift and go to state 200
    empty                          shift and go to state 201

state 158

    (142) BOOLEANA -> false .

    multiply        reduce using rule 142 (BOOLEANA -> false .)
    divide          reduce using rule 142 (BOOLEANA -> false .)
    plus            reduce using rule 142 (BOOLEANA -> false .)
    minus           reduce using rule 142 (BOOLEANA -> false .)
    semicolon       reduce using rule 142 (BOOLEANA -> false .)
    and             reduce using rule 142 (BOOLEANA -> false .)
    or              reduce using rule 142 (BOOLEANA -> false .)
    right_par       reduce using rule 142 (BOOLEANA -> false .)
    comma           reduce using rule 142 (BOOLEANA -> false .)
    right_sb        reduce using rule 142 (BOOLEANA -> false .)
    lt              reduce using rule 142 (BOOLEANA -> false .)
    gt              reduce using rule 142 (BOOLEANA -> false .)
    ne              reduce using rule 142 (BOOLEANA -> false .)
    ge              reduce using rule 142 (BOOLEANA -> false .)
    le              reduce using rule 142 (BOOLEANA -> false .)
    et              reduce using rule 142 (BOOLEANA -> false .)


state 159

    (128) LISTA -> id left_sb EXP . right_sb

    right_sb        shift and go to state 202


state 160

    (138) NUMERICA_AUX -> cteFloat . nt_pushFloat
    (140) nt_pushFloat -> . empty
    (151) empty -> .

    multiply        reduce using rule 151 (empty -> .)
    divide          reduce using rule 151 (empty -> .)
    plus            reduce using rule 151 (empty -> .)
    minus           reduce using rule 151 (empty -> .)
    right_sb        reduce using rule 151 (empty -> .)
    lt              reduce using rule 151 (empty -> .)
    gt              reduce using rule 151 (empty -> .)
    ne              reduce using rule 151 (empty -> .)
    ge              reduce using rule 151 (empty -> .)
    le              reduce using rule 151 (empty -> .)
    et              reduce using rule 151 (empty -> .)
    and             reduce using rule 151 (empty -> .)
    or              reduce using rule 151 (empty -> .)
    right_par       reduce using rule 151 (empty -> .)
    comma           reduce using rule 151 (empty -> .)
    semicolon       reduce using rule 151 (empty -> .)

    nt_pushFloat                   shift and go to state 203
    empty                          shift and go to state 204

state 161

    (130) CONSTANTE -> BOOLEANA .

    multiply        reduce using rule 130 (CONSTANTE -> BOOLEANA .)
    divide          reduce using rule 130 (CONSTANTE -> BOOLEANA .)
    plus            reduce using rule 130 (CONSTANTE -> BOOLEANA .)
    minus           reduce using rule 130 (CONSTANTE -> BOOLEANA .)
    and             reduce using rule 130 (CONSTANTE -> BOOLEANA .)
    or              reduce using rule 130 (CONSTANTE -> BOOLEANA .)
    right_par       reduce using rule 130 (CONSTANTE -> BOOLEANA .)
    comma           reduce using rule 130 (CONSTANTE -> BOOLEANA .)
    semicolon       reduce using rule 130 (CONSTANTE -> BOOLEANA .)
    right_sb        reduce using rule 130 (CONSTANTE -> BOOLEANA .)
    lt              reduce using rule 130 (CONSTANTE -> BOOLEANA .)
    gt              reduce using rule 130 (CONSTANTE -> BOOLEANA .)
    ne              reduce using rule 130 (CONSTANTE -> BOOLEANA .)
    ge              reduce using rule 130 (CONSTANTE -> BOOLEANA .)
    le              reduce using rule 130 (CONSTANTE -> BOOLEANA .)
    et              reduce using rule 130 (CONSTANTE -> BOOLEANA .)


state 162

    (128) LISTA -> id . left_sb EXP right_sb
    (123) FACTOR_AUX -> id . nt_pushPilaO
    (124) FACTOR_AUX -> id . LLAMADA_F
    (148) nt_pushPilaO -> . empty
    (125) LLAMADA_F -> . left_par EXPRESION LLAMADAF_AUX right_par
    (151) empty -> .

    left_sb         shift and go to state 129
    left_par        shift and go to state 206
    multiply        reduce using rule 151 (empty -> .)
    divide          reduce using rule 151 (empty -> .)
    plus            reduce using rule 151 (empty -> .)
    minus           reduce using rule 151 (empty -> .)
    right_sb        reduce using rule 151 (empty -> .)
    lt              reduce using rule 151 (empty -> .)
    gt              reduce using rule 151 (empty -> .)
    ne              reduce using rule 151 (empty -> .)
    ge              reduce using rule 151 (empty -> .)
    le              reduce using rule 151 (empty -> .)
    et              reduce using rule 151 (empty -> .)
    and             reduce using rule 151 (empty -> .)
    or              reduce using rule 151 (empty -> .)
    right_par       reduce using rule 151 (empty -> .)
    comma           reduce using rule 151 (empty -> .)
    semicolon       reduce using rule 151 (empty -> .)

    nt_pushPilaO                   shift and go to state 205
    LLAMADA_F                      shift and go to state 207
    empty                          shift and go to state 131

state 163

    (133) NUMERICA -> plus . nt_sigMas NUMERICA_AUX
    (135) nt_sigMas -> . empty
    (151) empty -> .

    cteInt          reduce using rule 151 (empty -> .)
    cteFloat        reduce using rule 151 (empty -> .)

    nt_sigMas                      shift and go to state 208
    empty                          shift and go to state 209

state 164

    (122) FACTOR -> FACTOR_AUX .

    multiply        reduce using rule 122 (FACTOR -> FACTOR_AUX .)
    divide          reduce using rule 122 (FACTOR -> FACTOR_AUX .)
    plus            reduce using rule 122 (FACTOR -> FACTOR_AUX .)
    minus           reduce using rule 122 (FACTOR -> FACTOR_AUX .)
    lt              reduce using rule 122 (FACTOR -> FACTOR_AUX .)
    gt              reduce using rule 122 (FACTOR -> FACTOR_AUX .)
    ne              reduce using rule 122 (FACTOR -> FACTOR_AUX .)
    ge              reduce using rule 122 (FACTOR -> FACTOR_AUX .)
    le              reduce using rule 122 (FACTOR -> FACTOR_AUX .)
    et              reduce using rule 122 (FACTOR -> FACTOR_AUX .)
    and             reduce using rule 122 (FACTOR -> FACTOR_AUX .)
    or              reduce using rule 122 (FACTOR -> FACTOR_AUX .)
    right_par       reduce using rule 122 (FACTOR -> FACTOR_AUX .)
    comma           reduce using rule 122 (FACTOR -> FACTOR_AUX .)
    semicolon       reduce using rule 122 (FACTOR -> FACTOR_AUX .)
    right_sb        reduce using rule 122 (FACTOR -> FACTOR_AUX .)


state 165

    (109) EXP -> TERMINO . nt_checar_sumas EXP_AUX
    (110) nt_checar_sumas -> . empty
    (151) empty -> .

    plus            reduce using rule 151 (empty -> .)
    minus           reduce using rule 151 (empty -> .)
    right_sb        reduce using rule 151 (empty -> .)
    lt              reduce using rule 151 (empty -> .)
    gt              reduce using rule 151 (empty -> .)
    ne              reduce using rule 151 (empty -> .)
    ge              reduce using rule 151 (empty -> .)
    le              reduce using rule 151 (empty -> .)
    et              reduce using rule 151 (empty -> .)
    and             reduce using rule 151 (empty -> .)
    or              reduce using rule 151 (empty -> .)
    right_par       reduce using rule 151 (empty -> .)
    comma           reduce using rule 151 (empty -> .)
    semicolon       reduce using rule 151 (empty -> .)

    empty                          shift and go to state 210
    nt_checar_sumas                shift and go to state 211

state 166

    (143) STRINGS -> cteString .

    multiply        reduce using rule 143 (STRINGS -> cteString .)
    divide          reduce using rule 143 (STRINGS -> cteString .)
    plus            reduce using rule 143 (STRINGS -> cteString .)
    minus           reduce using rule 143 (STRINGS -> cteString .)
    right_sb        reduce using rule 143 (STRINGS -> cteString .)
    lt              reduce using rule 143 (STRINGS -> cteString .)
    gt              reduce using rule 143 (STRINGS -> cteString .)
    ne              reduce using rule 143 (STRINGS -> cteString .)
    ge              reduce using rule 143 (STRINGS -> cteString .)
    le              reduce using rule 143 (STRINGS -> cteString .)
    et              reduce using rule 143 (STRINGS -> cteString .)
    and             reduce using rule 143 (STRINGS -> cteString .)
    or              reduce using rule 143 (STRINGS -> cteString .)
    right_par       reduce using rule 143 (STRINGS -> cteString .)
    comma           reduce using rule 143 (STRINGS -> cteString .)
    semicolon       reduce using rule 143 (STRINGS -> cteString .)


state 167

    (119) FACTOR -> left_par . nt_pushPOper EXPRESION right_par nt_popPOper
    (149) nt_pushPOper -> . empty
    (151) empty -> .

    not             reduce using rule 151 (empty -> .)
    left_par        reduce using rule 151 (empty -> .)
    id              reduce using rule 151 (empty -> .)
    plus            reduce using rule 151 (empty -> .)
    minus           reduce using rule 151 (empty -> .)
    true            reduce using rule 151 (empty -> .)
    false           reduce using rule 151 (empty -> .)
    cteString       reduce using rule 151 (empty -> .)
    cteInt          reduce using rule 151 (empty -> .)
    cteFloat        reduce using rule 151 (empty -> .)

    empty                          shift and go to state 178
    nt_pushPOper                   shift and go to state 212

state 168

    (141) BOOLEANA -> true .

    multiply        reduce using rule 141 (BOOLEANA -> true .)
    divide          reduce using rule 141 (BOOLEANA -> true .)
    plus            reduce using rule 141 (BOOLEANA -> true .)
    minus           reduce using rule 141 (BOOLEANA -> true .)
    semicolon       reduce using rule 141 (BOOLEANA -> true .)
    and             reduce using rule 141 (BOOLEANA -> true .)
    or              reduce using rule 141 (BOOLEANA -> true .)
    right_par       reduce using rule 141 (BOOLEANA -> true .)
    comma           reduce using rule 141 (BOOLEANA -> true .)
    right_sb        reduce using rule 141 (BOOLEANA -> true .)
    lt              reduce using rule 141 (BOOLEANA -> true .)
    gt              reduce using rule 141 (BOOLEANA -> true .)
    ne              reduce using rule 141 (BOOLEANA -> true .)
    ge              reduce using rule 141 (BOOLEANA -> true .)
    le              reduce using rule 141 (BOOLEANA -> true .)
    et              reduce using rule 141 (BOOLEANA -> true .)


state 169

    (131) CONSTANTE -> STRINGS .

    multiply        reduce using rule 131 (CONSTANTE -> STRINGS .)
    divide          reduce using rule 131 (CONSTANTE -> STRINGS .)
    plus            reduce using rule 131 (CONSTANTE -> STRINGS .)
    minus           reduce using rule 131 (CONSTANTE -> STRINGS .)
    and             reduce using rule 131 (CONSTANTE -> STRINGS .)
    or              reduce using rule 131 (CONSTANTE -> STRINGS .)
    right_par       reduce using rule 131 (CONSTANTE -> STRINGS .)
    comma           reduce using rule 131 (CONSTANTE -> STRINGS .)
    semicolon       reduce using rule 131 (CONSTANTE -> STRINGS .)
    right_sb        reduce using rule 131 (CONSTANTE -> STRINGS .)
    lt              reduce using rule 131 (CONSTANTE -> STRINGS .)
    gt              reduce using rule 131 (CONSTANTE -> STRINGS .)
    ne              reduce using rule 131 (CONSTANTE -> STRINGS .)
    ge              reduce using rule 131 (CONSTANTE -> STRINGS .)
    le              reduce using rule 131 (CONSTANTE -> STRINGS .)
    et              reduce using rule 131 (CONSTANTE -> STRINGS .)


state 170

    (120) FACTOR -> CONSTANTE .

    multiply        reduce using rule 120 (FACTOR -> CONSTANTE .)
    divide          reduce using rule 120 (FACTOR -> CONSTANTE .)
    plus            reduce using rule 120 (FACTOR -> CONSTANTE .)
    minus           reduce using rule 120 (FACTOR -> CONSTANTE .)
    lt              reduce using rule 120 (FACTOR -> CONSTANTE .)
    gt              reduce using rule 120 (FACTOR -> CONSTANTE .)
    ne              reduce using rule 120 (FACTOR -> CONSTANTE .)
    ge              reduce using rule 120 (FACTOR -> CONSTANTE .)
    le              reduce using rule 120 (FACTOR -> CONSTANTE .)
    et              reduce using rule 120 (FACTOR -> CONSTANTE .)
    and             reduce using rule 120 (FACTOR -> CONSTANTE .)
    or              reduce using rule 120 (FACTOR -> CONSTANTE .)
    right_par       reduce using rule 120 (FACTOR -> CONSTANTE .)
    comma           reduce using rule 120 (FACTOR -> CONSTANTE .)
    semicolon       reduce using rule 120 (FACTOR -> CONSTANTE .)
    right_sb        reduce using rule 120 (FACTOR -> CONSTANTE .)


state 171

    (137) NUMERICA_AUX -> cteInt . nt_pushInt
    (139) nt_pushInt -> . empty
    (151) empty -> .

    multiply        reduce using rule 151 (empty -> .)
    divide          reduce using rule 151 (empty -> .)
    plus            reduce using rule 151 (empty -> .)
    minus           reduce using rule 151 (empty -> .)
    right_sb        reduce using rule 151 (empty -> .)
    lt              reduce using rule 151 (empty -> .)
    gt              reduce using rule 151 (empty -> .)
    ne              reduce using rule 151 (empty -> .)
    ge              reduce using rule 151 (empty -> .)
    le              reduce using rule 151 (empty -> .)
    et              reduce using rule 151 (empty -> .)
    and             reduce using rule 151 (empty -> .)
    or              reduce using rule 151 (empty -> .)
    right_par       reduce using rule 151 (empty -> .)
    comma           reduce using rule 151 (empty -> .)
    semicolon       reduce using rule 151 (empty -> .)

    empty                          shift and go to state 213
    nt_pushInt                     shift and go to state 214

state 172

    (132) NUMERICA -> NUMERICA_AUX .

    multiply        reduce using rule 132 (NUMERICA -> NUMERICA_AUX .)
    divide          reduce using rule 132 (NUMERICA -> NUMERICA_AUX .)
    plus            reduce using rule 132 (NUMERICA -> NUMERICA_AUX .)
    minus           reduce using rule 132 (NUMERICA -> NUMERICA_AUX .)
    and             reduce using rule 132 (NUMERICA -> NUMERICA_AUX .)
    or              reduce using rule 132 (NUMERICA -> NUMERICA_AUX .)
    right_par       reduce using rule 132 (NUMERICA -> NUMERICA_AUX .)
    comma           reduce using rule 132 (NUMERICA -> NUMERICA_AUX .)
    semicolon       reduce using rule 132 (NUMERICA -> NUMERICA_AUX .)
    right_sb        reduce using rule 132 (NUMERICA -> NUMERICA_AUX .)
    lt              reduce using rule 132 (NUMERICA -> NUMERICA_AUX .)
    gt              reduce using rule 132 (NUMERICA -> NUMERICA_AUX .)
    ne              reduce using rule 132 (NUMERICA -> NUMERICA_AUX .)
    ge              reduce using rule 132 (NUMERICA -> NUMERICA_AUX .)
    le              reduce using rule 132 (NUMERICA -> NUMERICA_AUX .)
    et              reduce using rule 132 (NUMERICA -> NUMERICA_AUX .)


state 173

    (129) CONSTANTE -> NUMERICA .

    multiply        reduce using rule 129 (CONSTANTE -> NUMERICA .)
    divide          reduce using rule 129 (CONSTANTE -> NUMERICA .)
    plus            reduce using rule 129 (CONSTANTE -> NUMERICA .)
    minus           reduce using rule 129 (CONSTANTE -> NUMERICA .)
    and             reduce using rule 129 (CONSTANTE -> NUMERICA .)
    or              reduce using rule 129 (CONSTANTE -> NUMERICA .)
    right_par       reduce using rule 129 (CONSTANTE -> NUMERICA .)
    comma           reduce using rule 129 (CONSTANTE -> NUMERICA .)
    semicolon       reduce using rule 129 (CONSTANTE -> NUMERICA .)
    right_sb        reduce using rule 129 (CONSTANTE -> NUMERICA .)
    lt              reduce using rule 129 (CONSTANTE -> NUMERICA .)
    gt              reduce using rule 129 (CONSTANTE -> NUMERICA .)
    ne              reduce using rule 129 (CONSTANTE -> NUMERICA .)
    ge              reduce using rule 129 (CONSTANTE -> NUMERICA .)
    le              reduce using rule 129 (CONSTANTE -> NUMERICA .)
    et              reduce using rule 129 (CONSTANTE -> NUMERICA .)


state 174

    (114) TERMINO -> FACTOR . nt_checar_multis TERMINO_AUX
    (115) nt_checar_multis -> . empty
    (151) empty -> .

    multiply        reduce using rule 151 (empty -> .)
    divide          reduce using rule 151 (empty -> .)
    plus            reduce using rule 151 (empty -> .)
    minus           reduce using rule 151 (empty -> .)
    right_sb        reduce using rule 151 (empty -> .)
    lt              reduce using rule 151 (empty -> .)
    gt              reduce using rule 151 (empty -> .)
    ne              reduce using rule 151 (empty -> .)
    ge              reduce using rule 151 (empty -> .)
    le              reduce using rule 151 (empty -> .)
    et              reduce using rule 151 (empty -> .)
    and             reduce using rule 151 (empty -> .)
    or              reduce using rule 151 (empty -> .)
    right_par       reduce using rule 151 (empty -> .)
    comma           reduce using rule 151 (empty -> .)
    semicolon       reduce using rule 151 (empty -> .)

    nt_checar_multis               shift and go to state 215
    empty                          shift and go to state 216

state 175

    (121) FACTOR -> LISTA .

    multiply        reduce using rule 121 (FACTOR -> LISTA .)
    divide          reduce using rule 121 (FACTOR -> LISTA .)
    plus            reduce using rule 121 (FACTOR -> LISTA .)
    minus           reduce using rule 121 (FACTOR -> LISTA .)
    lt              reduce using rule 121 (FACTOR -> LISTA .)
    gt              reduce using rule 121 (FACTOR -> LISTA .)
    ne              reduce using rule 121 (FACTOR -> LISTA .)
    ge              reduce using rule 121 (FACTOR -> LISTA .)
    le              reduce using rule 121 (FACTOR -> LISTA .)
    et              reduce using rule 121 (FACTOR -> LISTA .)
    and             reduce using rule 121 (FACTOR -> LISTA .)
    or              reduce using rule 121 (FACTOR -> LISTA .)
    right_par       reduce using rule 121 (FACTOR -> LISTA .)
    comma           reduce using rule 121 (FACTOR -> LISTA .)
    semicolon       reduce using rule 121 (FACTOR -> LISTA .)
    right_sb        reduce using rule 121 (FACTOR -> LISTA .)


state 176

    (134) NUMERICA -> minus . nt_sigMenos NUMERICA_AUX
    (136) nt_sigMenos -> . empty
    (151) empty -> .

    cteInt          reduce using rule 151 (empty -> .)
    cteFloat        reduce using rule 151 (empty -> .)

    nt_sigMenos                    shift and go to state 218
    empty                          shift and go to state 217

state 177

    (88) ESCRITURA -> cwrite left_par EXPRESION . nt_escribir right_par semicolon
    (89) nt_escribir -> . empty
    (151) empty -> .

    right_par       reduce using rule 151 (empty -> .)

    nt_escribir                    shift and go to state 219
    empty                          shift and go to state 220

state 178

    (149) nt_pushPOper -> empty .

    left_par        reduce using rule 149 (nt_pushPOper -> empty .)
    id              reduce using rule 149 (nt_pushPOper -> empty .)
    plus            reduce using rule 149 (nt_pushPOper -> empty .)
    minus           reduce using rule 149 (nt_pushPOper -> empty .)
    true            reduce using rule 149 (nt_pushPOper -> empty .)
    false           reduce using rule 149 (nt_pushPOper -> empty .)
    cteString       reduce using rule 149 (nt_pushPOper -> empty .)
    cteInt          reduce using rule 149 (nt_pushPOper -> empty .)
    cteFloat        reduce using rule 149 (nt_pushPOper -> empty .)
    not             reduce using rule 149 (nt_pushPOper -> empty .)


state 179

    (144) ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper . EXPRESION nt_checaEquals semicolon
    (93) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (95) EXPRESION_NOT -> . not nt_pushPOper
    (96) EXPRESION_NOT -> . empty
    (151) empty -> .

    not             shift and go to state 137
    left_par        reduce using rule 151 (empty -> .)
    id              reduce using rule 151 (empty -> .)
    plus            reduce using rule 151 (empty -> .)
    minus           reduce using rule 151 (empty -> .)
    true            reduce using rule 151 (empty -> .)
    false           reduce using rule 151 (empty -> .)
    cteString       reduce using rule 151 (empty -> .)
    cteInt          reduce using rule 151 (empty -> .)
    cteFloat        reduce using rule 151 (empty -> .)

    EXPRESION                      shift and go to state 221
    EXPRESION_NOT                  shift and go to state 135
    empty                          shift and go to state 138

state 180

    (93) EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA . nt_checaAndOrNot EXPRESION_B
    (94) nt_checaAndOrNot -> . empty
    (151) empty -> .

    and             reduce using rule 151 (empty -> .)
    or              reduce using rule 151 (empty -> .)
    right_par       reduce using rule 151 (empty -> .)
    comma           reduce using rule 151 (empty -> .)
    semicolon       reduce using rule 151 (empty -> .)

    nt_checaAndOrNot               shift and go to state 222
    empty                          shift and go to state 223

state 181

    (100) EXPRESIONLOGICA -> EXP . EXPRESIONLOGICA_AUX
    (101) EXPRESIONLOGICA_AUX -> . lt nt_pushPOper EXP nt_checarRelop
    (102) EXPRESIONLOGICA_AUX -> . gt nt_pushPOper EXP nt_checarRelop
    (103) EXPRESIONLOGICA_AUX -> . ne nt_pushPOper EXP nt_checarRelop
    (104) EXPRESIONLOGICA_AUX -> . ge nt_pushPOper EXP nt_checarRelop
    (105) EXPRESIONLOGICA_AUX -> . le nt_pushPOper EXP nt_checarRelop
    (106) EXPRESIONLOGICA_AUX -> . et nt_pushPOper EXP nt_checarRelop
    (107) EXPRESIONLOGICA_AUX -> . empty
    (151) empty -> .

    lt              shift and go to state 228
    gt              shift and go to state 225
    ne              shift and go to state 227
    ge              shift and go to state 224
    le              shift and go to state 229
    et              shift and go to state 230
    and             reduce using rule 151 (empty -> .)
    or              reduce using rule 151 (empty -> .)
    right_par       reduce using rule 151 (empty -> .)
    comma           reduce using rule 151 (empty -> .)
    semicolon       reduce using rule 151 (empty -> .)

    empty                          shift and go to state 231
    EXPRESIONLOGICA_AUX            shift and go to state 226

state 182

    (92) LLAMADA_EXPRESION -> LLAMADA_EXPRESION comma . EXPRESION
    (93) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (95) EXPRESION_NOT -> . not nt_pushPOper
    (96) EXPRESION_NOT -> . empty
    (151) empty -> .

    not             shift and go to state 137
    left_par        reduce using rule 151 (empty -> .)
    id              reduce using rule 151 (empty -> .)
    plus            reduce using rule 151 (empty -> .)
    minus           reduce using rule 151 (empty -> .)
    true            reduce using rule 151 (empty -> .)
    false           reduce using rule 151 (empty -> .)
    cteString       reduce using rule 151 (empty -> .)
    cteInt          reduce using rule 151 (empty -> .)
    cteFloat        reduce using rule 151 (empty -> .)

    EXPRESION                      shift and go to state 232
    EXPRESION_NOT                  shift and go to state 135
    empty                          shift and go to state 138

state 183

    (90) LLAMADA -> left_par LLAMADA_EXPRESION right_par . semicolon

    semicolon       shift and go to state 233


state 184

    (95) EXPRESION_NOT -> not nt_pushPOper .

    left_par        reduce using rule 95 (EXPRESION_NOT -> not nt_pushPOper .)
    id              reduce using rule 95 (EXPRESION_NOT -> not nt_pushPOper .)
    plus            reduce using rule 95 (EXPRESION_NOT -> not nt_pushPOper .)
    minus           reduce using rule 95 (EXPRESION_NOT -> not nt_pushPOper .)
    true            reduce using rule 95 (EXPRESION_NOT -> not nt_pushPOper .)
    false           reduce using rule 95 (EXPRESION_NOT -> not nt_pushPOper .)
    cteString       reduce using rule 95 (EXPRESION_NOT -> not nt_pushPOper .)
    cteInt          reduce using rule 95 (EXPRESION_NOT -> not nt_pushPOper .)
    cteFloat        reduce using rule 95 (EXPRESION_NOT -> not nt_pushPOper .)


state 185

    (83) CICLO -> while nt_saltoLoop left_par . EXPRESION nt_checarBool right_par CUERPO nt_pushLoop
    (93) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (95) EXPRESION_NOT -> . not nt_pushPOper
    (96) EXPRESION_NOT -> . empty
    (151) empty -> .

    not             shift and go to state 137
    left_par        reduce using rule 151 (empty -> .)
    id              reduce using rule 151 (empty -> .)
    plus            reduce using rule 151 (empty -> .)
    minus           reduce using rule 151 (empty -> .)
    true            reduce using rule 151 (empty -> .)
    false           reduce using rule 151 (empty -> .)
    cteString       reduce using rule 151 (empty -> .)
    cteInt          reduce using rule 151 (empty -> .)
    cteFloat        reduce using rule 151 (empty -> .)

    EXPRESION                      shift and go to state 234
    EXPRESION_NOT                  shift and go to state 135
    empty                          shift and go to state 138

state 186

    (63) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC . right_cb

    right_cb        shift and go to state 235


state 187

    (44) CUERPOFUNC_VARS -> empty .

    if              reduce using rule 44 (CUERPOFUNC_VARS -> empty .)
    while           reduce using rule 44 (CUERPOFUNC_VARS -> empty .)
    cread           reduce using rule 44 (CUERPOFUNC_VARS -> empty .)
    cwrite          reduce using rule 44 (CUERPOFUNC_VARS -> empty .)
    left_par        reduce using rule 44 (CUERPOFUNC_VARS -> empty .)
    id              reduce using rule 44 (CUERPOFUNC_VARS -> empty .)
    list            reduce using rule 44 (CUERPOFUNC_VARS -> empty .)
    var             reduce using rule 44 (CUERPOFUNC_VARS -> empty .)
    return          reduce using rule 44 (CUERPOFUNC_VARS -> empty .)
    right_cb        reduce using rule 44 (CUERPOFUNC_VARS -> empty .)


state 188

    (66) VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO id . nt_agregarParametro
    (62) nt_agregarParametro -> . empty
    (151) empty -> .

    right_par       reduce using rule 151 (empty -> .)
    comma           reduce using rule 151 (empty -> .)

    empty                          shift and go to state 121
    nt_agregarParametro            shift and go to state 236

state 189

    (19) VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb . nt_agregarDicVar
    (22) nt_agregarDicVar -> . empty
    (151) empty -> .

    semicolon       reduce using rule 151 (empty -> .)
    comma           reduce using rule 151 (empty -> .)

    nt_agregarDicVar               shift and go to state 237
    empty                          shift and go to state 71

state 190

    (49) CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX . RETORNO
    (52) RETORNO -> . return EXP semicolon

    return          shift and go to state 194

    RETORNO                        shift and go to state 238

state 191

    (47) CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .

    int             reduce using rule 47 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)
    float           reduce using rule 47 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)
    bool            reduce using rule 47 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)
    string          reduce using rule 47 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)
    void            reduce using rule 47 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)
    main            reduce using rule 47 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)


state 192

    (41) CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS . nt_funcInicio CUERPOFUNC_ESTATUTO
    (42) nt_funcInicio -> . empty
    (151) empty -> .

    if              reduce using rule 151 (empty -> .)
    while           reduce using rule 151 (empty -> .)
    cread           reduce using rule 151 (empty -> .)
    cwrite          reduce using rule 151 (empty -> .)
    left_par        reduce using rule 151 (empty -> .)
    id              reduce using rule 151 (empty -> .)
    list            reduce using rule 151 (empty -> .)
    var             reduce using rule 151 (empty -> .)
    return          reduce using rule 151 (empty -> .)
    right_cb        reduce using rule 151 (empty -> .)

    empty                          shift and go to state 195
    nt_funcInicio                  shift and go to state 239

state 193

    (48) CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .

    right_cb        reduce using rule 48 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    list            reduce using rule 48 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    var             reduce using rule 48 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    return          reduce using rule 48 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    if              reduce using rule 48 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    while           reduce using rule 48 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    cread           reduce using rule 48 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    cwrite          reduce using rule 48 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    left_par        reduce using rule 48 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    id              reduce using rule 48 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)


state 194

    (52) RETORNO -> return . EXP semicolon
    (109) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (114) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (119) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (120) FACTOR -> . CONSTANTE
    (121) FACTOR -> . LISTA
    (122) FACTOR -> . FACTOR_AUX
    (129) CONSTANTE -> . NUMERICA
    (130) CONSTANTE -> . BOOLEANA
    (131) CONSTANTE -> . STRINGS
    (128) LISTA -> . id left_sb EXP right_sb
    (123) FACTOR_AUX -> . id nt_pushPilaO
    (124) FACTOR_AUX -> . id LLAMADA_F
    (132) NUMERICA -> . NUMERICA_AUX
    (133) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (134) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (141) BOOLEANA -> . true
    (142) BOOLEANA -> . false
    (143) STRINGS -> . cteString
    (137) NUMERICA_AUX -> . cteInt nt_pushInt
    (138) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 167
    id              shift and go to state 162
    plus            shift and go to state 163
    minus           shift and go to state 176
    true            shift and go to state 168
    false           shift and go to state 158
    cteString       shift and go to state 166
    cteInt          shift and go to state 171
    cteFloat        shift and go to state 160

    BOOLEANA                       shift and go to state 161
    EXP                            shift and go to state 240
    FACTOR_AUX                     shift and go to state 164
    NUMERICA_AUX                   shift and go to state 172
    TERMINO                        shift and go to state 165
    STRINGS                        shift and go to state 169
    CONSTANTE                      shift and go to state 170
    NUMERICA                       shift and go to state 173
    FACTOR                         shift and go to state 174
    LISTA                          shift and go to state 175

state 195

    (42) nt_funcInicio -> empty .

    if              reduce using rule 42 (nt_funcInicio -> empty .)
    while           reduce using rule 42 (nt_funcInicio -> empty .)
    cread           reduce using rule 42 (nt_funcInicio -> empty .)
    cwrite          reduce using rule 42 (nt_funcInicio -> empty .)
    left_par        reduce using rule 42 (nt_funcInicio -> empty .)
    id              reduce using rule 42 (nt_funcInicio -> empty .)
    list            reduce using rule 42 (nt_funcInicio -> empty .)
    var             reduce using rule 42 (nt_funcInicio -> empty .)
    return          reduce using rule 42 (nt_funcInicio -> empty .)
    right_cb        reduce using rule 42 (nt_funcInicio -> empty .)


state 196

    (40) CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio . CUERPOFUNC_ESTATUTO
    (45) CUERPOFUNC_ESTATUTO -> . ESTATUTO
    (46) CUERPOFUNC_ESTATUTO -> . empty
    (67) ESTATUTO -> . ASIGNACION
    (68) ESTATUTO -> . CONDICION
    (69) ESTATUTO -> . CICLO
    (70) ESTATUTO -> . LECTURA
    (71) ESTATUTO -> . ESCRITURA
    (72) ESTATUTO -> . LLAMADA
    (151) empty -> .
    (144) ASIGNACION -> . ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon
    (73) CONDICION -> . if CONDICION_AUX
    (83) CICLO -> . while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop
    (86) LECTURA -> . cread left_par id nt_leer right_par semicolon
    (88) ESCRITURA -> . cwrite left_par EXPRESION nt_escribir right_par semicolon
    (90) LLAMADA -> . left_par LLAMADA_EXPRESION right_par semicolon
    (146) ASIGNACION_AUX -> . id nt_pushPilaO
    (147) ASIGNACION_AUX -> . LISTA
    (128) LISTA -> . id left_sb EXP right_sb

  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for cread resolved as shift
  ! shift/reduce conflict for cwrite resolved as shift
  ! shift/reduce conflict for left_par resolved as shift
  ! shift/reduce conflict for id resolved as shift
    list            reduce using rule 151 (empty -> .)
    var             reduce using rule 151 (empty -> .)
    return          reduce using rule 151 (empty -> .)
    right_cb        reduce using rule 151 (empty -> .)
    if              shift and go to state 100
    while           shift and go to state 112
    cread           shift and go to state 98
    cwrite          shift and go to state 104
    left_par        shift and go to state 110
    id              shift and go to state 103

  ! if              [ reduce using rule 151 (empty -> .) ]
  ! while           [ reduce using rule 151 (empty -> .) ]
  ! cread           [ reduce using rule 151 (empty -> .) ]
  ! cwrite          [ reduce using rule 151 (empty -> .) ]
  ! left_par        [ reduce using rule 151 (empty -> .) ]
  ! id              [ reduce using rule 151 (empty -> .) ]

    CICLO                          shift and go to state 97
    LECTURA                        shift and go to state 99
    ESCRITURA                      shift and go to state 106
    CUERPOFUNC_ESTATUTO            shift and go to state 241
    ASIGNACION                     shift and go to state 101
    ESTATUTO                       shift and go to state 242
    ASIGNACION_AUX                 shift and go to state 105
    empty                          shift and go to state 243
    LLAMADA                        shift and go to state 108
    CONDICION                      shift and go to state 109
    LISTA                          shift and go to state 113

state 197

    (60) FUNC_PARA -> FUNC_PARA comma TIPO id nt_agregarParametro .

    right_par       reduce using rule 60 (FUNC_PARA -> FUNC_PARA comma TIPO id nt_agregarParametro .)
    comma           reduce using rule 60 (FUNC_PARA -> FUNC_PARA comma TIPO id nt_agregarParametro .)


state 198

    (86) LECTURA -> cread left_par id nt_leer . right_par semicolon

    right_par       shift and go to state 244


state 199

    (87) nt_leer -> empty .

    right_par       reduce using rule 87 (nt_leer -> empty .)


state 200

    (74) CONDICION_AUX -> left_par EXPRESION nt_checarBool . right_par CUERPO ELSE_ELIF nt_pushSalto

    right_par       shift and go to state 245


state 201

    (80) nt_checarBool -> empty .

    right_par       reduce using rule 80 (nt_checarBool -> empty .)


state 202

    (128) LISTA -> id left_sb EXP right_sb .

    multiply        reduce using rule 128 (LISTA -> id left_sb EXP right_sb .)
    divide          reduce using rule 128 (LISTA -> id left_sb EXP right_sb .)
    plus            reduce using rule 128 (LISTA -> id left_sb EXP right_sb .)
    minus           reduce using rule 128 (LISTA -> id left_sb EXP right_sb .)
    right_sb        reduce using rule 128 (LISTA -> id left_sb EXP right_sb .)
    lt              reduce using rule 128 (LISTA -> id left_sb EXP right_sb .)
    gt              reduce using rule 128 (LISTA -> id left_sb EXP right_sb .)
    ne              reduce using rule 128 (LISTA -> id left_sb EXP right_sb .)
    ge              reduce using rule 128 (LISTA -> id left_sb EXP right_sb .)
    le              reduce using rule 128 (LISTA -> id left_sb EXP right_sb .)
    et              reduce using rule 128 (LISTA -> id left_sb EXP right_sb .)
    and             reduce using rule 128 (LISTA -> id left_sb EXP right_sb .)
    or              reduce using rule 128 (LISTA -> id left_sb EXP right_sb .)
    right_par       reduce using rule 128 (LISTA -> id left_sb EXP right_sb .)
    comma           reduce using rule 128 (LISTA -> id left_sb EXP right_sb .)
    semicolon       reduce using rule 128 (LISTA -> id left_sb EXP right_sb .)
    equals          reduce using rule 128 (LISTA -> id left_sb EXP right_sb .)


state 203

    (138) NUMERICA_AUX -> cteFloat nt_pushFloat .

    multiply        reduce using rule 138 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    divide          reduce using rule 138 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    plus            reduce using rule 138 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    minus           reduce using rule 138 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    and             reduce using rule 138 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    or              reduce using rule 138 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    right_par       reduce using rule 138 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    comma           reduce using rule 138 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    semicolon       reduce using rule 138 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    right_sb        reduce using rule 138 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    lt              reduce using rule 138 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    gt              reduce using rule 138 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    ne              reduce using rule 138 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    ge              reduce using rule 138 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    le              reduce using rule 138 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    et              reduce using rule 138 (NUMERICA_AUX -> cteFloat nt_pushFloat .)


state 204

    (140) nt_pushFloat -> empty .

    multiply        reduce using rule 140 (nt_pushFloat -> empty .)
    divide          reduce using rule 140 (nt_pushFloat -> empty .)
    plus            reduce using rule 140 (nt_pushFloat -> empty .)
    minus           reduce using rule 140 (nt_pushFloat -> empty .)
    right_sb        reduce using rule 140 (nt_pushFloat -> empty .)
    lt              reduce using rule 140 (nt_pushFloat -> empty .)
    gt              reduce using rule 140 (nt_pushFloat -> empty .)
    ne              reduce using rule 140 (nt_pushFloat -> empty .)
    ge              reduce using rule 140 (nt_pushFloat -> empty .)
    le              reduce using rule 140 (nt_pushFloat -> empty .)
    et              reduce using rule 140 (nt_pushFloat -> empty .)
    and             reduce using rule 140 (nt_pushFloat -> empty .)
    or              reduce using rule 140 (nt_pushFloat -> empty .)
    right_par       reduce using rule 140 (nt_pushFloat -> empty .)
    comma           reduce using rule 140 (nt_pushFloat -> empty .)
    semicolon       reduce using rule 140 (nt_pushFloat -> empty .)


state 205

    (123) FACTOR_AUX -> id nt_pushPilaO .

    multiply        reduce using rule 123 (FACTOR_AUX -> id nt_pushPilaO .)
    divide          reduce using rule 123 (FACTOR_AUX -> id nt_pushPilaO .)
    plus            reduce using rule 123 (FACTOR_AUX -> id nt_pushPilaO .)
    minus           reduce using rule 123 (FACTOR_AUX -> id nt_pushPilaO .)
    and             reduce using rule 123 (FACTOR_AUX -> id nt_pushPilaO .)
    or              reduce using rule 123 (FACTOR_AUX -> id nt_pushPilaO .)
    right_par       reduce using rule 123 (FACTOR_AUX -> id nt_pushPilaO .)
    comma           reduce using rule 123 (FACTOR_AUX -> id nt_pushPilaO .)
    semicolon       reduce using rule 123 (FACTOR_AUX -> id nt_pushPilaO .)
    right_sb        reduce using rule 123 (FACTOR_AUX -> id nt_pushPilaO .)
    lt              reduce using rule 123 (FACTOR_AUX -> id nt_pushPilaO .)
    gt              reduce using rule 123 (FACTOR_AUX -> id nt_pushPilaO .)
    ne              reduce using rule 123 (FACTOR_AUX -> id nt_pushPilaO .)
    ge              reduce using rule 123 (FACTOR_AUX -> id nt_pushPilaO .)
    le              reduce using rule 123 (FACTOR_AUX -> id nt_pushPilaO .)
    et              reduce using rule 123 (FACTOR_AUX -> id nt_pushPilaO .)


state 206

    (125) LLAMADA_F -> left_par . EXPRESION LLAMADAF_AUX right_par
    (93) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (95) EXPRESION_NOT -> . not nt_pushPOper
    (96) EXPRESION_NOT -> . empty
    (151) empty -> .

    not             shift and go to state 137
    left_par        reduce using rule 151 (empty -> .)
    id              reduce using rule 151 (empty -> .)
    plus            reduce using rule 151 (empty -> .)
    minus           reduce using rule 151 (empty -> .)
    true            reduce using rule 151 (empty -> .)
    false           reduce using rule 151 (empty -> .)
    cteString       reduce using rule 151 (empty -> .)
    cteInt          reduce using rule 151 (empty -> .)
    cteFloat        reduce using rule 151 (empty -> .)

    EXPRESION                      shift and go to state 246
    EXPRESION_NOT                  shift and go to state 135
    empty                          shift and go to state 138

state 207

    (124) FACTOR_AUX -> id LLAMADA_F .

    multiply        reduce using rule 124 (FACTOR_AUX -> id LLAMADA_F .)
    divide          reduce using rule 124 (FACTOR_AUX -> id LLAMADA_F .)
    plus            reduce using rule 124 (FACTOR_AUX -> id LLAMADA_F .)
    minus           reduce using rule 124 (FACTOR_AUX -> id LLAMADA_F .)
    and             reduce using rule 124 (FACTOR_AUX -> id LLAMADA_F .)
    or              reduce using rule 124 (FACTOR_AUX -> id LLAMADA_F .)
    right_par       reduce using rule 124 (FACTOR_AUX -> id LLAMADA_F .)
    comma           reduce using rule 124 (FACTOR_AUX -> id LLAMADA_F .)
    semicolon       reduce using rule 124 (FACTOR_AUX -> id LLAMADA_F .)
    right_sb        reduce using rule 124 (FACTOR_AUX -> id LLAMADA_F .)
    lt              reduce using rule 124 (FACTOR_AUX -> id LLAMADA_F .)
    gt              reduce using rule 124 (FACTOR_AUX -> id LLAMADA_F .)
    ne              reduce using rule 124 (FACTOR_AUX -> id LLAMADA_F .)
    ge              reduce using rule 124 (FACTOR_AUX -> id LLAMADA_F .)
    le              reduce using rule 124 (FACTOR_AUX -> id LLAMADA_F .)
    et              reduce using rule 124 (FACTOR_AUX -> id LLAMADA_F .)


state 208

    (133) NUMERICA -> plus nt_sigMas . NUMERICA_AUX
    (137) NUMERICA_AUX -> . cteInt nt_pushInt
    (138) NUMERICA_AUX -> . cteFloat nt_pushFloat

    cteInt          shift and go to state 171
    cteFloat        shift and go to state 160

    NUMERICA_AUX                   shift and go to state 247

state 209

    (135) nt_sigMas -> empty .

    cteInt          reduce using rule 135 (nt_sigMas -> empty .)
    cteFloat        reduce using rule 135 (nt_sigMas -> empty .)


state 210

    (110) nt_checar_sumas -> empty .

    plus            reduce using rule 110 (nt_checar_sumas -> empty .)
    minus           reduce using rule 110 (nt_checar_sumas -> empty .)
    right_sb        reduce using rule 110 (nt_checar_sumas -> empty .)
    lt              reduce using rule 110 (nt_checar_sumas -> empty .)
    gt              reduce using rule 110 (nt_checar_sumas -> empty .)
    ne              reduce using rule 110 (nt_checar_sumas -> empty .)
    ge              reduce using rule 110 (nt_checar_sumas -> empty .)
    le              reduce using rule 110 (nt_checar_sumas -> empty .)
    et              reduce using rule 110 (nt_checar_sumas -> empty .)
    and             reduce using rule 110 (nt_checar_sumas -> empty .)
    or              reduce using rule 110 (nt_checar_sumas -> empty .)
    right_par       reduce using rule 110 (nt_checar_sumas -> empty .)
    comma           reduce using rule 110 (nt_checar_sumas -> empty .)
    semicolon       reduce using rule 110 (nt_checar_sumas -> empty .)


state 211

    (109) EXP -> TERMINO nt_checar_sumas . EXP_AUX
    (111) EXP_AUX -> . plus nt_pushPOper EXP
    (112) EXP_AUX -> . minus nt_pushPOper EXP
    (113) EXP_AUX -> . empty
    (151) empty -> .

    plus            shift and go to state 250
    minus           shift and go to state 248
    right_sb        reduce using rule 151 (empty -> .)
    lt              reduce using rule 151 (empty -> .)
    gt              reduce using rule 151 (empty -> .)
    ne              reduce using rule 151 (empty -> .)
    ge              reduce using rule 151 (empty -> .)
    le              reduce using rule 151 (empty -> .)
    et              reduce using rule 151 (empty -> .)
    and             reduce using rule 151 (empty -> .)
    or              reduce using rule 151 (empty -> .)
    right_par       reduce using rule 151 (empty -> .)
    comma           reduce using rule 151 (empty -> .)
    semicolon       reduce using rule 151 (empty -> .)

    EXP_AUX                        shift and go to state 251
    empty                          shift and go to state 249

state 212

    (119) FACTOR -> left_par nt_pushPOper . EXPRESION right_par nt_popPOper
    (93) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (95) EXPRESION_NOT -> . not nt_pushPOper
    (96) EXPRESION_NOT -> . empty
    (151) empty -> .

    not             shift and go to state 137
    left_par        reduce using rule 151 (empty -> .)
    id              reduce using rule 151 (empty -> .)
    plus            reduce using rule 151 (empty -> .)
    minus           reduce using rule 151 (empty -> .)
    true            reduce using rule 151 (empty -> .)
    false           reduce using rule 151 (empty -> .)
    cteString       reduce using rule 151 (empty -> .)
    cteInt          reduce using rule 151 (empty -> .)
    cteFloat        reduce using rule 151 (empty -> .)

    EXPRESION                      shift and go to state 252
    EXPRESION_NOT                  shift and go to state 135
    empty                          shift and go to state 138

state 213

    (139) nt_pushInt -> empty .

    multiply        reduce using rule 139 (nt_pushInt -> empty .)
    divide          reduce using rule 139 (nt_pushInt -> empty .)
    plus            reduce using rule 139 (nt_pushInt -> empty .)
    minus           reduce using rule 139 (nt_pushInt -> empty .)
    right_sb        reduce using rule 139 (nt_pushInt -> empty .)
    lt              reduce using rule 139 (nt_pushInt -> empty .)
    gt              reduce using rule 139 (nt_pushInt -> empty .)
    ne              reduce using rule 139 (nt_pushInt -> empty .)
    ge              reduce using rule 139 (nt_pushInt -> empty .)
    le              reduce using rule 139 (nt_pushInt -> empty .)
    et              reduce using rule 139 (nt_pushInt -> empty .)
    and             reduce using rule 139 (nt_pushInt -> empty .)
    or              reduce using rule 139 (nt_pushInt -> empty .)
    right_par       reduce using rule 139 (nt_pushInt -> empty .)
    comma           reduce using rule 139 (nt_pushInt -> empty .)
    semicolon       reduce using rule 139 (nt_pushInt -> empty .)


state 214

    (137) NUMERICA_AUX -> cteInt nt_pushInt .

    multiply        reduce using rule 137 (NUMERICA_AUX -> cteInt nt_pushInt .)
    divide          reduce using rule 137 (NUMERICA_AUX -> cteInt nt_pushInt .)
    plus            reduce using rule 137 (NUMERICA_AUX -> cteInt nt_pushInt .)
    minus           reduce using rule 137 (NUMERICA_AUX -> cteInt nt_pushInt .)
    and             reduce using rule 137 (NUMERICA_AUX -> cteInt nt_pushInt .)
    or              reduce using rule 137 (NUMERICA_AUX -> cteInt nt_pushInt .)
    right_par       reduce using rule 137 (NUMERICA_AUX -> cteInt nt_pushInt .)
    comma           reduce using rule 137 (NUMERICA_AUX -> cteInt nt_pushInt .)
    semicolon       reduce using rule 137 (NUMERICA_AUX -> cteInt nt_pushInt .)
    right_sb        reduce using rule 137 (NUMERICA_AUX -> cteInt nt_pushInt .)
    lt              reduce using rule 137 (NUMERICA_AUX -> cteInt nt_pushInt .)
    gt              reduce using rule 137 (NUMERICA_AUX -> cteInt nt_pushInt .)
    ne              reduce using rule 137 (NUMERICA_AUX -> cteInt nt_pushInt .)
    ge              reduce using rule 137 (NUMERICA_AUX -> cteInt nt_pushInt .)
    le              reduce using rule 137 (NUMERICA_AUX -> cteInt nt_pushInt .)
    et              reduce using rule 137 (NUMERICA_AUX -> cteInt nt_pushInt .)


state 215

    (114) TERMINO -> FACTOR nt_checar_multis . TERMINO_AUX
    (116) TERMINO_AUX -> . multiply nt_pushPOper TERMINO
    (117) TERMINO_AUX -> . divide nt_pushPOper TERMINO
    (118) TERMINO_AUX -> . empty
    (151) empty -> .

    multiply        shift and go to state 255
    divide          shift and go to state 254
    plus            reduce using rule 151 (empty -> .)
    minus           reduce using rule 151 (empty -> .)
    right_sb        reduce using rule 151 (empty -> .)
    lt              reduce using rule 151 (empty -> .)
    gt              reduce using rule 151 (empty -> .)
    ne              reduce using rule 151 (empty -> .)
    ge              reduce using rule 151 (empty -> .)
    le              reduce using rule 151 (empty -> .)
    et              reduce using rule 151 (empty -> .)
    and             reduce using rule 151 (empty -> .)
    or              reduce using rule 151 (empty -> .)
    right_par       reduce using rule 151 (empty -> .)
    comma           reduce using rule 151 (empty -> .)
    semicolon       reduce using rule 151 (empty -> .)

    TERMINO_AUX                    shift and go to state 253
    empty                          shift and go to state 256

state 216

    (115) nt_checar_multis -> empty .

    multiply        reduce using rule 115 (nt_checar_multis -> empty .)
    divide          reduce using rule 115 (nt_checar_multis -> empty .)
    plus            reduce using rule 115 (nt_checar_multis -> empty .)
    minus           reduce using rule 115 (nt_checar_multis -> empty .)
    right_sb        reduce using rule 115 (nt_checar_multis -> empty .)
    lt              reduce using rule 115 (nt_checar_multis -> empty .)
    gt              reduce using rule 115 (nt_checar_multis -> empty .)
    ne              reduce using rule 115 (nt_checar_multis -> empty .)
    ge              reduce using rule 115 (nt_checar_multis -> empty .)
    le              reduce using rule 115 (nt_checar_multis -> empty .)
    et              reduce using rule 115 (nt_checar_multis -> empty .)
    and             reduce using rule 115 (nt_checar_multis -> empty .)
    or              reduce using rule 115 (nt_checar_multis -> empty .)
    right_par       reduce using rule 115 (nt_checar_multis -> empty .)
    comma           reduce using rule 115 (nt_checar_multis -> empty .)
    semicolon       reduce using rule 115 (nt_checar_multis -> empty .)


state 217

    (136) nt_sigMenos -> empty .

    cteInt          reduce using rule 136 (nt_sigMenos -> empty .)
    cteFloat        reduce using rule 136 (nt_sigMenos -> empty .)


state 218

    (134) NUMERICA -> minus nt_sigMenos . NUMERICA_AUX
    (137) NUMERICA_AUX -> . cteInt nt_pushInt
    (138) NUMERICA_AUX -> . cteFloat nt_pushFloat

    cteInt          shift and go to state 171
    cteFloat        shift and go to state 160

    NUMERICA_AUX                   shift and go to state 257

state 219

    (88) ESCRITURA -> cwrite left_par EXPRESION nt_escribir . right_par semicolon

    right_par       shift and go to state 258


state 220

    (89) nt_escribir -> empty .

    right_par       reduce using rule 89 (nt_escribir -> empty .)


state 221

    (144) ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION . nt_checaEquals semicolon
    (145) nt_checaEquals -> . empty
    (151) empty -> .

    semicolon       reduce using rule 151 (empty -> .)

    nt_checaEquals                 shift and go to state 259
    empty                          shift and go to state 260

state 222

    (93) EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot . EXPRESION_B
    (97) EXPRESION_B -> . and nt_pushPOper EXPRESION
    (98) EXPRESION_B -> . or nt_pushPOper EXPRESION
    (99) EXPRESION_B -> . empty
    (151) empty -> .

    and             shift and go to state 261
    or              shift and go to state 263
    right_par       reduce using rule 151 (empty -> .)
    comma           reduce using rule 151 (empty -> .)
    semicolon       reduce using rule 151 (empty -> .)

    EXPRESION_B                    shift and go to state 262
    empty                          shift and go to state 264

state 223

    (94) nt_checaAndOrNot -> empty .

    and             reduce using rule 94 (nt_checaAndOrNot -> empty .)
    or              reduce using rule 94 (nt_checaAndOrNot -> empty .)
    right_par       reduce using rule 94 (nt_checaAndOrNot -> empty .)
    comma           reduce using rule 94 (nt_checaAndOrNot -> empty .)
    semicolon       reduce using rule 94 (nt_checaAndOrNot -> empty .)


state 224

    (104) EXPRESIONLOGICA_AUX -> ge . nt_pushPOper EXP nt_checarRelop
    (149) nt_pushPOper -> . empty
    (151) empty -> .

    left_par        reduce using rule 151 (empty -> .)
    id              reduce using rule 151 (empty -> .)
    plus            reduce using rule 151 (empty -> .)
    minus           reduce using rule 151 (empty -> .)
    true            reduce using rule 151 (empty -> .)
    false           reduce using rule 151 (empty -> .)
    cteString       reduce using rule 151 (empty -> .)
    cteInt          reduce using rule 151 (empty -> .)
    cteFloat        reduce using rule 151 (empty -> .)

    empty                          shift and go to state 178
    nt_pushPOper                   shift and go to state 265

state 225

    (102) EXPRESIONLOGICA_AUX -> gt . nt_pushPOper EXP nt_checarRelop
    (149) nt_pushPOper -> . empty
    (151) empty -> .

    left_par        reduce using rule 151 (empty -> .)
    id              reduce using rule 151 (empty -> .)
    plus            reduce using rule 151 (empty -> .)
    minus           reduce using rule 151 (empty -> .)
    true            reduce using rule 151 (empty -> .)
    false           reduce using rule 151 (empty -> .)
    cteString       reduce using rule 151 (empty -> .)
    cteInt          reduce using rule 151 (empty -> .)
    cteFloat        reduce using rule 151 (empty -> .)

    empty                          shift and go to state 178
    nt_pushPOper                   shift and go to state 266

state 226

    (100) EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .

    and             reduce using rule 100 (EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .)
    or              reduce using rule 100 (EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .)
    right_par       reduce using rule 100 (EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .)
    comma           reduce using rule 100 (EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .)
    semicolon       reduce using rule 100 (EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .)


state 227

    (103) EXPRESIONLOGICA_AUX -> ne . nt_pushPOper EXP nt_checarRelop
    (149) nt_pushPOper -> . empty
    (151) empty -> .

    left_par        reduce using rule 151 (empty -> .)
    id              reduce using rule 151 (empty -> .)
    plus            reduce using rule 151 (empty -> .)
    minus           reduce using rule 151 (empty -> .)
    true            reduce using rule 151 (empty -> .)
    false           reduce using rule 151 (empty -> .)
    cteString       reduce using rule 151 (empty -> .)
    cteInt          reduce using rule 151 (empty -> .)
    cteFloat        reduce using rule 151 (empty -> .)

    empty                          shift and go to state 178
    nt_pushPOper                   shift and go to state 267

state 228

    (101) EXPRESIONLOGICA_AUX -> lt . nt_pushPOper EXP nt_checarRelop
    (149) nt_pushPOper -> . empty
    (151) empty -> .

    left_par        reduce using rule 151 (empty -> .)
    id              reduce using rule 151 (empty -> .)
    plus            reduce using rule 151 (empty -> .)
    minus           reduce using rule 151 (empty -> .)
    true            reduce using rule 151 (empty -> .)
    false           reduce using rule 151 (empty -> .)
    cteString       reduce using rule 151 (empty -> .)
    cteInt          reduce using rule 151 (empty -> .)
    cteFloat        reduce using rule 151 (empty -> .)

    empty                          shift and go to state 178
    nt_pushPOper                   shift and go to state 268

state 229

    (105) EXPRESIONLOGICA_AUX -> le . nt_pushPOper EXP nt_checarRelop
    (149) nt_pushPOper -> . empty
    (151) empty -> .

    left_par        reduce using rule 151 (empty -> .)
    id              reduce using rule 151 (empty -> .)
    plus            reduce using rule 151 (empty -> .)
    minus           reduce using rule 151 (empty -> .)
    true            reduce using rule 151 (empty -> .)
    false           reduce using rule 151 (empty -> .)
    cteString       reduce using rule 151 (empty -> .)
    cteInt          reduce using rule 151 (empty -> .)
    cteFloat        reduce using rule 151 (empty -> .)

    empty                          shift and go to state 178
    nt_pushPOper                   shift and go to state 269

state 230

    (106) EXPRESIONLOGICA_AUX -> et . nt_pushPOper EXP nt_checarRelop
    (149) nt_pushPOper -> . empty
    (151) empty -> .

    left_par        reduce using rule 151 (empty -> .)
    id              reduce using rule 151 (empty -> .)
    plus            reduce using rule 151 (empty -> .)
    minus           reduce using rule 151 (empty -> .)
    true            reduce using rule 151 (empty -> .)
    false           reduce using rule 151 (empty -> .)
    cteString       reduce using rule 151 (empty -> .)
    cteInt          reduce using rule 151 (empty -> .)
    cteFloat        reduce using rule 151 (empty -> .)

    empty                          shift and go to state 178
    nt_pushPOper                   shift and go to state 270

state 231

    (107) EXPRESIONLOGICA_AUX -> empty .

    and             reduce using rule 107 (EXPRESIONLOGICA_AUX -> empty .)
    or              reduce using rule 107 (EXPRESIONLOGICA_AUX -> empty .)
    right_par       reduce using rule 107 (EXPRESIONLOGICA_AUX -> empty .)
    comma           reduce using rule 107 (EXPRESIONLOGICA_AUX -> empty .)
    semicolon       reduce using rule 107 (EXPRESIONLOGICA_AUX -> empty .)


state 232

    (92) LLAMADA_EXPRESION -> LLAMADA_EXPRESION comma EXPRESION .

    right_par       reduce using rule 92 (LLAMADA_EXPRESION -> LLAMADA_EXPRESION comma EXPRESION .)
    comma           reduce using rule 92 (LLAMADA_EXPRESION -> LLAMADA_EXPRESION comma EXPRESION .)


state 233

    (90) LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .

    list            reduce using rule 90 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    var             reduce using rule 90 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    if              reduce using rule 90 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    while           reduce using rule 90 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    cread           reduce using rule 90 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    cwrite          reduce using rule 90 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    left_par        reduce using rule 90 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    id              reduce using rule 90 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    return          reduce using rule 90 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    right_cb        reduce using rule 90 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)


state 234

    (83) CICLO -> while nt_saltoLoop left_par EXPRESION . nt_checarBool right_par CUERPO nt_pushLoop
    (80) nt_checarBool -> . empty
    (151) empty -> .

    right_par       reduce using rule 151 (empty -> .)

    nt_checarBool                  shift and go to state 271
    empty                          shift and go to state 201

state 235

    (63) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .

    int             reduce using rule 63 (VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)
    float           reduce using rule 63 (VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)
    bool            reduce using rule 63 (VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)
    string          reduce using rule 63 (VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)
    void            reduce using rule 63 (VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)
    main            reduce using rule 63 (VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)


state 236

    (66) VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO id nt_agregarParametro .

    right_par       reduce using rule 66 (VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO id nt_agregarParametro .)
    comma           reduce using rule 66 (VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO id nt_agregarParametro .)


state 237

    (19) VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar .

    semicolon       reduce using rule 19 (VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar .)
    comma           reduce using rule 19 (VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar .)


state 238

    (49) CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .

    right_cb        reduce using rule 49 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    list            reduce using rule 49 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    var             reduce using rule 49 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    return          reduce using rule 49 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    if              reduce using rule 49 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    while           reduce using rule 49 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    cread           reduce using rule 49 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    cwrite          reduce using rule 49 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    left_par        reduce using rule 49 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    id              reduce using rule 49 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)


state 239

    (41) CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio . CUERPOFUNC_ESTATUTO
    (45) CUERPOFUNC_ESTATUTO -> . ESTATUTO
    (46) CUERPOFUNC_ESTATUTO -> . empty
    (67) ESTATUTO -> . ASIGNACION
    (68) ESTATUTO -> . CONDICION
    (69) ESTATUTO -> . CICLO
    (70) ESTATUTO -> . LECTURA
    (71) ESTATUTO -> . ESCRITURA
    (72) ESTATUTO -> . LLAMADA
    (151) empty -> .
    (144) ASIGNACION -> . ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon
    (73) CONDICION -> . if CONDICION_AUX
    (83) CICLO -> . while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop
    (86) LECTURA -> . cread left_par id nt_leer right_par semicolon
    (88) ESCRITURA -> . cwrite left_par EXPRESION nt_escribir right_par semicolon
    (90) LLAMADA -> . left_par LLAMADA_EXPRESION right_par semicolon
    (146) ASIGNACION_AUX -> . id nt_pushPilaO
    (147) ASIGNACION_AUX -> . LISTA
    (128) LISTA -> . id left_sb EXP right_sb

  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for cread resolved as shift
  ! shift/reduce conflict for cwrite resolved as shift
  ! shift/reduce conflict for left_par resolved as shift
  ! shift/reduce conflict for id resolved as shift
    list            reduce using rule 151 (empty -> .)
    var             reduce using rule 151 (empty -> .)
    return          reduce using rule 151 (empty -> .)
    right_cb        reduce using rule 151 (empty -> .)
    if              shift and go to state 100
    while           shift and go to state 112
    cread           shift and go to state 98
    cwrite          shift and go to state 104
    left_par        shift and go to state 110
    id              shift and go to state 103

  ! if              [ reduce using rule 151 (empty -> .) ]
  ! while           [ reduce using rule 151 (empty -> .) ]
  ! cread           [ reduce using rule 151 (empty -> .) ]
  ! cwrite          [ reduce using rule 151 (empty -> .) ]
  ! left_par        [ reduce using rule 151 (empty -> .) ]
  ! id              [ reduce using rule 151 (empty -> .) ]

    CICLO                          shift and go to state 97
    LECTURA                        shift and go to state 99
    ESCRITURA                      shift and go to state 106
    CUERPOFUNC_ESTATUTO            shift and go to state 272
    ASIGNACION                     shift and go to state 101
    ESTATUTO                       shift and go to state 242
    ASIGNACION_AUX                 shift and go to state 105
    empty                          shift and go to state 243
    LLAMADA                        shift and go to state 108
    CONDICION                      shift and go to state 109
    LISTA                          shift and go to state 113

state 240

    (52) RETORNO -> return EXP . semicolon

    semicolon       shift and go to state 273


state 241

    (40) CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .

    list            reduce using rule 40 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    var             reduce using rule 40 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    if              reduce using rule 40 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    while           reduce using rule 40 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    cread           reduce using rule 40 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    cwrite          reduce using rule 40 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    left_par        reduce using rule 40 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    id              reduce using rule 40 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    right_cb        reduce using rule 40 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    return          reduce using rule 40 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)


state 242

    (45) CUERPOFUNC_ESTATUTO -> ESTATUTO .

    list            reduce using rule 45 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    var             reduce using rule 45 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    if              reduce using rule 45 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    while           reduce using rule 45 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    cread           reduce using rule 45 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    cwrite          reduce using rule 45 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    left_par        reduce using rule 45 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    id              reduce using rule 45 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    return          reduce using rule 45 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    right_cb        reduce using rule 45 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)


state 243

    (46) CUERPOFUNC_ESTATUTO -> empty .

    list            reduce using rule 46 (CUERPOFUNC_ESTATUTO -> empty .)
    var             reduce using rule 46 (CUERPOFUNC_ESTATUTO -> empty .)
    if              reduce using rule 46 (CUERPOFUNC_ESTATUTO -> empty .)
    while           reduce using rule 46 (CUERPOFUNC_ESTATUTO -> empty .)
    cread           reduce using rule 46 (CUERPOFUNC_ESTATUTO -> empty .)
    cwrite          reduce using rule 46 (CUERPOFUNC_ESTATUTO -> empty .)
    left_par        reduce using rule 46 (CUERPOFUNC_ESTATUTO -> empty .)
    id              reduce using rule 46 (CUERPOFUNC_ESTATUTO -> empty .)
    return          reduce using rule 46 (CUERPOFUNC_ESTATUTO -> empty .)
    right_cb        reduce using rule 46 (CUERPOFUNC_ESTATUTO -> empty .)


state 244

    (86) LECTURA -> cread left_par id nt_leer right_par . semicolon

    semicolon       shift and go to state 274


state 245

    (74) CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par . CUERPO ELSE_ELIF nt_pushSalto
    (32) CUERPO -> . left_cb CUERPO_AUX right_cb

    left_cb         shift and go to state 76

    CUERPO                         shift and go to state 275

state 246

    (125) LLAMADA_F -> left_par EXPRESION . LLAMADAF_AUX right_par
    (126) LLAMADAF_AUX -> . comma EXPRESION LLAMADAF_AUX
    (127) LLAMADAF_AUX -> . empty
    (151) empty -> .

    comma           shift and go to state 277
    right_par       reduce using rule 151 (empty -> .)

    LLAMADAF_AUX                   shift and go to state 276
    empty                          shift and go to state 278

state 247

    (133) NUMERICA -> plus nt_sigMas NUMERICA_AUX .

    multiply        reduce using rule 133 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    divide          reduce using rule 133 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    plus            reduce using rule 133 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    minus           reduce using rule 133 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    and             reduce using rule 133 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    or              reduce using rule 133 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    right_par       reduce using rule 133 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    comma           reduce using rule 133 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    semicolon       reduce using rule 133 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    right_sb        reduce using rule 133 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    lt              reduce using rule 133 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    gt              reduce using rule 133 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    ne              reduce using rule 133 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    ge              reduce using rule 133 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    le              reduce using rule 133 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    et              reduce using rule 133 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)


state 248

    (112) EXP_AUX -> minus . nt_pushPOper EXP
    (149) nt_pushPOper -> . empty
    (151) empty -> .

    left_par        reduce using rule 151 (empty -> .)
    id              reduce using rule 151 (empty -> .)
    plus            reduce using rule 151 (empty -> .)
    minus           reduce using rule 151 (empty -> .)
    true            reduce using rule 151 (empty -> .)
    false           reduce using rule 151 (empty -> .)
    cteString       reduce using rule 151 (empty -> .)
    cteInt          reduce using rule 151 (empty -> .)
    cteFloat        reduce using rule 151 (empty -> .)

    empty                          shift and go to state 178
    nt_pushPOper                   shift and go to state 279

state 249

    (113) EXP_AUX -> empty .

    right_sb        reduce using rule 113 (EXP_AUX -> empty .)
    lt              reduce using rule 113 (EXP_AUX -> empty .)
    gt              reduce using rule 113 (EXP_AUX -> empty .)
    ne              reduce using rule 113 (EXP_AUX -> empty .)
    ge              reduce using rule 113 (EXP_AUX -> empty .)
    le              reduce using rule 113 (EXP_AUX -> empty .)
    et              reduce using rule 113 (EXP_AUX -> empty .)
    and             reduce using rule 113 (EXP_AUX -> empty .)
    or              reduce using rule 113 (EXP_AUX -> empty .)
    right_par       reduce using rule 113 (EXP_AUX -> empty .)
    comma           reduce using rule 113 (EXP_AUX -> empty .)
    semicolon       reduce using rule 113 (EXP_AUX -> empty .)


state 250

    (111) EXP_AUX -> plus . nt_pushPOper EXP
    (149) nt_pushPOper -> . empty
    (151) empty -> .

    left_par        reduce using rule 151 (empty -> .)
    id              reduce using rule 151 (empty -> .)
    plus            reduce using rule 151 (empty -> .)
    minus           reduce using rule 151 (empty -> .)
    true            reduce using rule 151 (empty -> .)
    false           reduce using rule 151 (empty -> .)
    cteString       reduce using rule 151 (empty -> .)
    cteInt          reduce using rule 151 (empty -> .)
    cteFloat        reduce using rule 151 (empty -> .)

    empty                          shift and go to state 178
    nt_pushPOper                   shift and go to state 280

state 251

    (109) EXP -> TERMINO nt_checar_sumas EXP_AUX .

    right_sb        reduce using rule 109 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    lt              reduce using rule 109 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    gt              reduce using rule 109 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    ne              reduce using rule 109 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    ge              reduce using rule 109 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    le              reduce using rule 109 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    et              reduce using rule 109 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    and             reduce using rule 109 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    or              reduce using rule 109 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    right_par       reduce using rule 109 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    comma           reduce using rule 109 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    semicolon       reduce using rule 109 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)


state 252

    (119) FACTOR -> left_par nt_pushPOper EXPRESION . right_par nt_popPOper

    right_par       shift and go to state 281


state 253

    (114) TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .

    plus            reduce using rule 114 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    minus           reduce using rule 114 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    right_sb        reduce using rule 114 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    lt              reduce using rule 114 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    gt              reduce using rule 114 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    ne              reduce using rule 114 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    ge              reduce using rule 114 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    le              reduce using rule 114 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    et              reduce using rule 114 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    and             reduce using rule 114 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    or              reduce using rule 114 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    right_par       reduce using rule 114 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    comma           reduce using rule 114 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    semicolon       reduce using rule 114 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)


state 254

    (117) TERMINO_AUX -> divide . nt_pushPOper TERMINO
    (149) nt_pushPOper -> . empty
    (151) empty -> .

    left_par        reduce using rule 151 (empty -> .)
    id              reduce using rule 151 (empty -> .)
    plus            reduce using rule 151 (empty -> .)
    minus           reduce using rule 151 (empty -> .)
    true            reduce using rule 151 (empty -> .)
    false           reduce using rule 151 (empty -> .)
    cteString       reduce using rule 151 (empty -> .)
    cteInt          reduce using rule 151 (empty -> .)
    cteFloat        reduce using rule 151 (empty -> .)

    empty                          shift and go to state 178
    nt_pushPOper                   shift and go to state 282

state 255

    (116) TERMINO_AUX -> multiply . nt_pushPOper TERMINO
    (149) nt_pushPOper -> . empty
    (151) empty -> .

    left_par        reduce using rule 151 (empty -> .)
    id              reduce using rule 151 (empty -> .)
    plus            reduce using rule 151 (empty -> .)
    minus           reduce using rule 151 (empty -> .)
    true            reduce using rule 151 (empty -> .)
    false           reduce using rule 151 (empty -> .)
    cteString       reduce using rule 151 (empty -> .)
    cteInt          reduce using rule 151 (empty -> .)
    cteFloat        reduce using rule 151 (empty -> .)

    empty                          shift and go to state 178
    nt_pushPOper                   shift and go to state 283

state 256

    (118) TERMINO_AUX -> empty .

    plus            reduce using rule 118 (TERMINO_AUX -> empty .)
    minus           reduce using rule 118 (TERMINO_AUX -> empty .)
    right_sb        reduce using rule 118 (TERMINO_AUX -> empty .)
    lt              reduce using rule 118 (TERMINO_AUX -> empty .)
    gt              reduce using rule 118 (TERMINO_AUX -> empty .)
    ne              reduce using rule 118 (TERMINO_AUX -> empty .)
    ge              reduce using rule 118 (TERMINO_AUX -> empty .)
    le              reduce using rule 118 (TERMINO_AUX -> empty .)
    et              reduce using rule 118 (TERMINO_AUX -> empty .)
    and             reduce using rule 118 (TERMINO_AUX -> empty .)
    or              reduce using rule 118 (TERMINO_AUX -> empty .)
    right_par       reduce using rule 118 (TERMINO_AUX -> empty .)
    comma           reduce using rule 118 (TERMINO_AUX -> empty .)
    semicolon       reduce using rule 118 (TERMINO_AUX -> empty .)


state 257

    (134) NUMERICA -> minus nt_sigMenos NUMERICA_AUX .

    multiply        reduce using rule 134 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    divide          reduce using rule 134 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    plus            reduce using rule 134 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    minus           reduce using rule 134 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    and             reduce using rule 134 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    or              reduce using rule 134 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    right_par       reduce using rule 134 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    comma           reduce using rule 134 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    semicolon       reduce using rule 134 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    right_sb        reduce using rule 134 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    lt              reduce using rule 134 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    gt              reduce using rule 134 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    ne              reduce using rule 134 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    ge              reduce using rule 134 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    le              reduce using rule 134 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    et              reduce using rule 134 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)


state 258

    (88) ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par . semicolon

    semicolon       shift and go to state 284


state 259

    (144) ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals . semicolon

    semicolon       shift and go to state 285


state 260

    (145) nt_checaEquals -> empty .

    semicolon       reduce using rule 145 (nt_checaEquals -> empty .)


state 261

    (97) EXPRESION_B -> and . nt_pushPOper EXPRESION
    (149) nt_pushPOper -> . empty
    (151) empty -> .

    not             reduce using rule 151 (empty -> .)
    left_par        reduce using rule 151 (empty -> .)
    id              reduce using rule 151 (empty -> .)
    plus            reduce using rule 151 (empty -> .)
    minus           reduce using rule 151 (empty -> .)
    true            reduce using rule 151 (empty -> .)
    false           reduce using rule 151 (empty -> .)
    cteString       reduce using rule 151 (empty -> .)
    cteInt          reduce using rule 151 (empty -> .)
    cteFloat        reduce using rule 151 (empty -> .)

    empty                          shift and go to state 178
    nt_pushPOper                   shift and go to state 286

state 262

    (93) EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B .

    right_par       reduce using rule 93 (EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B .)
    comma           reduce using rule 93 (EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B .)
    semicolon       reduce using rule 93 (EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B .)


state 263

    (98) EXPRESION_B -> or . nt_pushPOper EXPRESION
    (149) nt_pushPOper -> . empty
    (151) empty -> .

    not             reduce using rule 151 (empty -> .)
    left_par        reduce using rule 151 (empty -> .)
    id              reduce using rule 151 (empty -> .)
    plus            reduce using rule 151 (empty -> .)
    minus           reduce using rule 151 (empty -> .)
    true            reduce using rule 151 (empty -> .)
    false           reduce using rule 151 (empty -> .)
    cteString       reduce using rule 151 (empty -> .)
    cteInt          reduce using rule 151 (empty -> .)
    cteFloat        reduce using rule 151 (empty -> .)

    empty                          shift and go to state 178
    nt_pushPOper                   shift and go to state 287

state 264

    (99) EXPRESION_B -> empty .

    right_par       reduce using rule 99 (EXPRESION_B -> empty .)
    comma           reduce using rule 99 (EXPRESION_B -> empty .)
    semicolon       reduce using rule 99 (EXPRESION_B -> empty .)


state 265

    (104) EXPRESIONLOGICA_AUX -> ge nt_pushPOper . EXP nt_checarRelop
    (109) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (114) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (119) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (120) FACTOR -> . CONSTANTE
    (121) FACTOR -> . LISTA
    (122) FACTOR -> . FACTOR_AUX
    (129) CONSTANTE -> . NUMERICA
    (130) CONSTANTE -> . BOOLEANA
    (131) CONSTANTE -> . STRINGS
    (128) LISTA -> . id left_sb EXP right_sb
    (123) FACTOR_AUX -> . id nt_pushPilaO
    (124) FACTOR_AUX -> . id LLAMADA_F
    (132) NUMERICA -> . NUMERICA_AUX
    (133) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (134) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (141) BOOLEANA -> . true
    (142) BOOLEANA -> . false
    (143) STRINGS -> . cteString
    (137) NUMERICA_AUX -> . cteInt nt_pushInt
    (138) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 167
    id              shift and go to state 162
    plus            shift and go to state 163
    minus           shift and go to state 176
    true            shift and go to state 168
    false           shift and go to state 158
    cteString       shift and go to state 166
    cteInt          shift and go to state 171
    cteFloat        shift and go to state 160

    BOOLEANA                       shift and go to state 161
    EXP                            shift and go to state 288
    FACTOR_AUX                     shift and go to state 164
    NUMERICA_AUX                   shift and go to state 172
    TERMINO                        shift and go to state 165
    STRINGS                        shift and go to state 169
    CONSTANTE                      shift and go to state 170
    NUMERICA                       shift and go to state 173
    FACTOR                         shift and go to state 174
    LISTA                          shift and go to state 175

state 266

    (102) EXPRESIONLOGICA_AUX -> gt nt_pushPOper . EXP nt_checarRelop
    (109) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (114) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (119) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (120) FACTOR -> . CONSTANTE
    (121) FACTOR -> . LISTA
    (122) FACTOR -> . FACTOR_AUX
    (129) CONSTANTE -> . NUMERICA
    (130) CONSTANTE -> . BOOLEANA
    (131) CONSTANTE -> . STRINGS
    (128) LISTA -> . id left_sb EXP right_sb
    (123) FACTOR_AUX -> . id nt_pushPilaO
    (124) FACTOR_AUX -> . id LLAMADA_F
    (132) NUMERICA -> . NUMERICA_AUX
    (133) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (134) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (141) BOOLEANA -> . true
    (142) BOOLEANA -> . false
    (143) STRINGS -> . cteString
    (137) NUMERICA_AUX -> . cteInt nt_pushInt
    (138) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 167
    id              shift and go to state 162
    plus            shift and go to state 163
    minus           shift and go to state 176
    true            shift and go to state 168
    false           shift and go to state 158
    cteString       shift and go to state 166
    cteInt          shift and go to state 171
    cteFloat        shift and go to state 160

    BOOLEANA                       shift and go to state 161
    EXP                            shift and go to state 289
    FACTOR_AUX                     shift and go to state 164
    NUMERICA_AUX                   shift and go to state 172
    TERMINO                        shift and go to state 165
    STRINGS                        shift and go to state 169
    CONSTANTE                      shift and go to state 170
    NUMERICA                       shift and go to state 173
    FACTOR                         shift and go to state 174
    LISTA                          shift and go to state 175

state 267

    (103) EXPRESIONLOGICA_AUX -> ne nt_pushPOper . EXP nt_checarRelop
    (109) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (114) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (119) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (120) FACTOR -> . CONSTANTE
    (121) FACTOR -> . LISTA
    (122) FACTOR -> . FACTOR_AUX
    (129) CONSTANTE -> . NUMERICA
    (130) CONSTANTE -> . BOOLEANA
    (131) CONSTANTE -> . STRINGS
    (128) LISTA -> . id left_sb EXP right_sb
    (123) FACTOR_AUX -> . id nt_pushPilaO
    (124) FACTOR_AUX -> . id LLAMADA_F
    (132) NUMERICA -> . NUMERICA_AUX
    (133) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (134) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (141) BOOLEANA -> . true
    (142) BOOLEANA -> . false
    (143) STRINGS -> . cteString
    (137) NUMERICA_AUX -> . cteInt nt_pushInt
    (138) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 167
    id              shift and go to state 162
    plus            shift and go to state 163
    minus           shift and go to state 176
    true            shift and go to state 168
    false           shift and go to state 158
    cteString       shift and go to state 166
    cteInt          shift and go to state 171
    cteFloat        shift and go to state 160

    BOOLEANA                       shift and go to state 161
    EXP                            shift and go to state 290
    FACTOR_AUX                     shift and go to state 164
    NUMERICA_AUX                   shift and go to state 172
    TERMINO                        shift and go to state 165
    STRINGS                        shift and go to state 169
    CONSTANTE                      shift and go to state 170
    NUMERICA                       shift and go to state 173
    FACTOR                         shift and go to state 174
    LISTA                          shift and go to state 175

state 268

    (101) EXPRESIONLOGICA_AUX -> lt nt_pushPOper . EXP nt_checarRelop
    (109) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (114) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (119) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (120) FACTOR -> . CONSTANTE
    (121) FACTOR -> . LISTA
    (122) FACTOR -> . FACTOR_AUX
    (129) CONSTANTE -> . NUMERICA
    (130) CONSTANTE -> . BOOLEANA
    (131) CONSTANTE -> . STRINGS
    (128) LISTA -> . id left_sb EXP right_sb
    (123) FACTOR_AUX -> . id nt_pushPilaO
    (124) FACTOR_AUX -> . id LLAMADA_F
    (132) NUMERICA -> . NUMERICA_AUX
    (133) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (134) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (141) BOOLEANA -> . true
    (142) BOOLEANA -> . false
    (143) STRINGS -> . cteString
    (137) NUMERICA_AUX -> . cteInt nt_pushInt
    (138) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 167
    id              shift and go to state 162
    plus            shift and go to state 163
    minus           shift and go to state 176
    true            shift and go to state 168
    false           shift and go to state 158
    cteString       shift and go to state 166
    cteInt          shift and go to state 171
    cteFloat        shift and go to state 160

    BOOLEANA                       shift and go to state 161
    EXP                            shift and go to state 291
    FACTOR_AUX                     shift and go to state 164
    NUMERICA_AUX                   shift and go to state 172
    TERMINO                        shift and go to state 165
    STRINGS                        shift and go to state 169
    CONSTANTE                      shift and go to state 170
    NUMERICA                       shift and go to state 173
    FACTOR                         shift and go to state 174
    LISTA                          shift and go to state 175

state 269

    (105) EXPRESIONLOGICA_AUX -> le nt_pushPOper . EXP nt_checarRelop
    (109) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (114) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (119) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (120) FACTOR -> . CONSTANTE
    (121) FACTOR -> . LISTA
    (122) FACTOR -> . FACTOR_AUX
    (129) CONSTANTE -> . NUMERICA
    (130) CONSTANTE -> . BOOLEANA
    (131) CONSTANTE -> . STRINGS
    (128) LISTA -> . id left_sb EXP right_sb
    (123) FACTOR_AUX -> . id nt_pushPilaO
    (124) FACTOR_AUX -> . id LLAMADA_F
    (132) NUMERICA -> . NUMERICA_AUX
    (133) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (134) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (141) BOOLEANA -> . true
    (142) BOOLEANA -> . false
    (143) STRINGS -> . cteString
    (137) NUMERICA_AUX -> . cteInt nt_pushInt
    (138) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 167
    id              shift and go to state 162
    plus            shift and go to state 163
    minus           shift and go to state 176
    true            shift and go to state 168
    false           shift and go to state 158
    cteString       shift and go to state 166
    cteInt          shift and go to state 171
    cteFloat        shift and go to state 160

    BOOLEANA                       shift and go to state 161
    EXP                            shift and go to state 292
    FACTOR_AUX                     shift and go to state 164
    NUMERICA_AUX                   shift and go to state 172
    TERMINO                        shift and go to state 165
    STRINGS                        shift and go to state 169
    CONSTANTE                      shift and go to state 170
    NUMERICA                       shift and go to state 173
    FACTOR                         shift and go to state 174
    LISTA                          shift and go to state 175

state 270

    (106) EXPRESIONLOGICA_AUX -> et nt_pushPOper . EXP nt_checarRelop
    (109) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (114) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (119) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (120) FACTOR -> . CONSTANTE
    (121) FACTOR -> . LISTA
    (122) FACTOR -> . FACTOR_AUX
    (129) CONSTANTE -> . NUMERICA
    (130) CONSTANTE -> . BOOLEANA
    (131) CONSTANTE -> . STRINGS
    (128) LISTA -> . id left_sb EXP right_sb
    (123) FACTOR_AUX -> . id nt_pushPilaO
    (124) FACTOR_AUX -> . id LLAMADA_F
    (132) NUMERICA -> . NUMERICA_AUX
    (133) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (134) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (141) BOOLEANA -> . true
    (142) BOOLEANA -> . false
    (143) STRINGS -> . cteString
    (137) NUMERICA_AUX -> . cteInt nt_pushInt
    (138) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 167
    id              shift and go to state 162
    plus            shift and go to state 163
    minus           shift and go to state 176
    true            shift and go to state 168
    false           shift and go to state 158
    cteString       shift and go to state 166
    cteInt          shift and go to state 171
    cteFloat        shift and go to state 160

    BOOLEANA                       shift and go to state 161
    EXP                            shift and go to state 293
    FACTOR_AUX                     shift and go to state 164
    NUMERICA_AUX                   shift and go to state 172
    TERMINO                        shift and go to state 165
    STRINGS                        shift and go to state 169
    CONSTANTE                      shift and go to state 170
    NUMERICA                       shift and go to state 173
    FACTOR                         shift and go to state 174
    LISTA                          shift and go to state 175

state 271

    (83) CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool . right_par CUERPO nt_pushLoop

    right_par       shift and go to state 294


state 272

    (41) CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .

    list            reduce using rule 41 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    var             reduce using rule 41 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    if              reduce using rule 41 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    while           reduce using rule 41 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    cread           reduce using rule 41 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    cwrite          reduce using rule 41 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    left_par        reduce using rule 41 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    id              reduce using rule 41 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    right_cb        reduce using rule 41 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    return          reduce using rule 41 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)


state 273

    (52) RETORNO -> return EXP semicolon .

    right_cb        reduce using rule 52 (RETORNO -> return EXP semicolon .)
    list            reduce using rule 52 (RETORNO -> return EXP semicolon .)
    var             reduce using rule 52 (RETORNO -> return EXP semicolon .)
    return          reduce using rule 52 (RETORNO -> return EXP semicolon .)
    if              reduce using rule 52 (RETORNO -> return EXP semicolon .)
    while           reduce using rule 52 (RETORNO -> return EXP semicolon .)
    cread           reduce using rule 52 (RETORNO -> return EXP semicolon .)
    cwrite          reduce using rule 52 (RETORNO -> return EXP semicolon .)
    left_par        reduce using rule 52 (RETORNO -> return EXP semicolon .)
    id              reduce using rule 52 (RETORNO -> return EXP semicolon .)


state 274

    (86) LECTURA -> cread left_par id nt_leer right_par semicolon .

    list            reduce using rule 86 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    var             reduce using rule 86 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    if              reduce using rule 86 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    while           reduce using rule 86 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    cread           reduce using rule 86 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    cwrite          reduce using rule 86 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    left_par        reduce using rule 86 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    id              reduce using rule 86 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    return          reduce using rule 86 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    right_cb        reduce using rule 86 (LECTURA -> cread left_par id nt_leer right_par semicolon .)


state 275

    (74) CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO . ELSE_ELIF nt_pushSalto
    (75) ELSE_ELIF -> . ELSE
    (76) ELSE_ELIF -> . ELIF
    (77) ELSE_ELIF -> . empty
    (78) ELSE -> . else nt_pushElse CUERPO
    (79) ELIF -> . elseif nt_pushElse CONDICION_AUX
    (151) empty -> .

    else            shift and go to state 299
    elseif          shift and go to state 298
    right_cb        reduce using rule 151 (empty -> .)
    list            reduce using rule 151 (empty -> .)
    var             reduce using rule 151 (empty -> .)
    if              reduce using rule 151 (empty -> .)
    while           reduce using rule 151 (empty -> .)
    cread           reduce using rule 151 (empty -> .)
    cwrite          reduce using rule 151 (empty -> .)
    left_par        reduce using rule 151 (empty -> .)
    id              reduce using rule 151 (empty -> .)
    return          reduce using rule 151 (empty -> .)

    ELIF                           shift and go to state 296
    ELSE_ELIF                      shift and go to state 295
    ELSE                           shift and go to state 297
    empty                          shift and go to state 300

state 276

    (125) LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX . right_par

    right_par       shift and go to state 301


state 277

    (126) LLAMADAF_AUX -> comma . EXPRESION LLAMADAF_AUX
    (93) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (95) EXPRESION_NOT -> . not nt_pushPOper
    (96) EXPRESION_NOT -> . empty
    (151) empty -> .

    not             shift and go to state 137
    left_par        reduce using rule 151 (empty -> .)
    id              reduce using rule 151 (empty -> .)
    plus            reduce using rule 151 (empty -> .)
    minus           reduce using rule 151 (empty -> .)
    true            reduce using rule 151 (empty -> .)
    false           reduce using rule 151 (empty -> .)
    cteString       reduce using rule 151 (empty -> .)
    cteInt          reduce using rule 151 (empty -> .)
    cteFloat        reduce using rule 151 (empty -> .)

    EXPRESION                      shift and go to state 302
    EXPRESION_NOT                  shift and go to state 135
    empty                          shift and go to state 138

state 278

    (127) LLAMADAF_AUX -> empty .

    right_par       reduce using rule 127 (LLAMADAF_AUX -> empty .)


state 279

    (112) EXP_AUX -> minus nt_pushPOper . EXP
    (109) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (114) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (119) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (120) FACTOR -> . CONSTANTE
    (121) FACTOR -> . LISTA
    (122) FACTOR -> . FACTOR_AUX
    (129) CONSTANTE -> . NUMERICA
    (130) CONSTANTE -> . BOOLEANA
    (131) CONSTANTE -> . STRINGS
    (128) LISTA -> . id left_sb EXP right_sb
    (123) FACTOR_AUX -> . id nt_pushPilaO
    (124) FACTOR_AUX -> . id LLAMADA_F
    (132) NUMERICA -> . NUMERICA_AUX
    (133) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (134) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (141) BOOLEANA -> . true
    (142) BOOLEANA -> . false
    (143) STRINGS -> . cteString
    (137) NUMERICA_AUX -> . cteInt nt_pushInt
    (138) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 167
    id              shift and go to state 162
    plus            shift and go to state 163
    minus           shift and go to state 176
    true            shift and go to state 168
    false           shift and go to state 158
    cteString       shift and go to state 166
    cteInt          shift and go to state 171
    cteFloat        shift and go to state 160

    BOOLEANA                       shift and go to state 161
    EXP                            shift and go to state 303
    FACTOR_AUX                     shift and go to state 164
    NUMERICA_AUX                   shift and go to state 172
    TERMINO                        shift and go to state 165
    STRINGS                        shift and go to state 169
    CONSTANTE                      shift and go to state 170
    NUMERICA                       shift and go to state 173
    FACTOR                         shift and go to state 174
    LISTA                          shift and go to state 175

state 280

    (111) EXP_AUX -> plus nt_pushPOper . EXP
    (109) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (114) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (119) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (120) FACTOR -> . CONSTANTE
    (121) FACTOR -> . LISTA
    (122) FACTOR -> . FACTOR_AUX
    (129) CONSTANTE -> . NUMERICA
    (130) CONSTANTE -> . BOOLEANA
    (131) CONSTANTE -> . STRINGS
    (128) LISTA -> . id left_sb EXP right_sb
    (123) FACTOR_AUX -> . id nt_pushPilaO
    (124) FACTOR_AUX -> . id LLAMADA_F
    (132) NUMERICA -> . NUMERICA_AUX
    (133) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (134) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (141) BOOLEANA -> . true
    (142) BOOLEANA -> . false
    (143) STRINGS -> . cteString
    (137) NUMERICA_AUX -> . cteInt nt_pushInt
    (138) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 167
    id              shift and go to state 162
    plus            shift and go to state 163
    minus           shift and go to state 176
    true            shift and go to state 168
    false           shift and go to state 158
    cteString       shift and go to state 166
    cteInt          shift and go to state 171
    cteFloat        shift and go to state 160

    BOOLEANA                       shift and go to state 161
    EXP                            shift and go to state 304
    FACTOR_AUX                     shift and go to state 164
    NUMERICA_AUX                   shift and go to state 172
    TERMINO                        shift and go to state 165
    STRINGS                        shift and go to state 169
    CONSTANTE                      shift and go to state 170
    NUMERICA                       shift and go to state 173
    FACTOR                         shift and go to state 174
    LISTA                          shift and go to state 175

state 281

    (119) FACTOR -> left_par nt_pushPOper EXPRESION right_par . nt_popPOper
    (150) nt_popPOper -> . empty
    (151) empty -> .

    multiply        reduce using rule 151 (empty -> .)
    divide          reduce using rule 151 (empty -> .)
    plus            reduce using rule 151 (empty -> .)
    minus           reduce using rule 151 (empty -> .)
    right_sb        reduce using rule 151 (empty -> .)
    lt              reduce using rule 151 (empty -> .)
    gt              reduce using rule 151 (empty -> .)
    ne              reduce using rule 151 (empty -> .)
    ge              reduce using rule 151 (empty -> .)
    le              reduce using rule 151 (empty -> .)
    et              reduce using rule 151 (empty -> .)
    and             reduce using rule 151 (empty -> .)
    or              reduce using rule 151 (empty -> .)
    right_par       reduce using rule 151 (empty -> .)
    comma           reduce using rule 151 (empty -> .)
    semicolon       reduce using rule 151 (empty -> .)

    nt_popPOper                    shift and go to state 305
    empty                          shift and go to state 306

state 282

    (117) TERMINO_AUX -> divide nt_pushPOper . TERMINO
    (114) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (119) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (120) FACTOR -> . CONSTANTE
    (121) FACTOR -> . LISTA
    (122) FACTOR -> . FACTOR_AUX
    (129) CONSTANTE -> . NUMERICA
    (130) CONSTANTE -> . BOOLEANA
    (131) CONSTANTE -> . STRINGS
    (128) LISTA -> . id left_sb EXP right_sb
    (123) FACTOR_AUX -> . id nt_pushPilaO
    (124) FACTOR_AUX -> . id LLAMADA_F
    (132) NUMERICA -> . NUMERICA_AUX
    (133) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (134) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (141) BOOLEANA -> . true
    (142) BOOLEANA -> . false
    (143) STRINGS -> . cteString
    (137) NUMERICA_AUX -> . cteInt nt_pushInt
    (138) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 167
    id              shift and go to state 162
    plus            shift and go to state 163
    minus           shift and go to state 176
    true            shift and go to state 168
    false           shift and go to state 158
    cteString       shift and go to state 166
    cteInt          shift and go to state 171
    cteFloat        shift and go to state 160

    CONSTANTE                      shift and go to state 170
    FACTOR_AUX                     shift and go to state 164
    NUMERICA                       shift and go to state 173
    NUMERICA_AUX                   shift and go to state 172
    BOOLEANA                       shift and go to state 161
    TERMINO                        shift and go to state 307
    FACTOR                         shift and go to state 174
    LISTA                          shift and go to state 175
    STRINGS                        shift and go to state 169

state 283

    (116) TERMINO_AUX -> multiply nt_pushPOper . TERMINO
    (114) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (119) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (120) FACTOR -> . CONSTANTE
    (121) FACTOR -> . LISTA
    (122) FACTOR -> . FACTOR_AUX
    (129) CONSTANTE -> . NUMERICA
    (130) CONSTANTE -> . BOOLEANA
    (131) CONSTANTE -> . STRINGS
    (128) LISTA -> . id left_sb EXP right_sb
    (123) FACTOR_AUX -> . id nt_pushPilaO
    (124) FACTOR_AUX -> . id LLAMADA_F
    (132) NUMERICA -> . NUMERICA_AUX
    (133) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (134) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (141) BOOLEANA -> . true
    (142) BOOLEANA -> . false
    (143) STRINGS -> . cteString
    (137) NUMERICA_AUX -> . cteInt nt_pushInt
    (138) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 167
    id              shift and go to state 162
    plus            shift and go to state 163
    minus           shift and go to state 176
    true            shift and go to state 168
    false           shift and go to state 158
    cteString       shift and go to state 166
    cteInt          shift and go to state 171
    cteFloat        shift and go to state 160

    CONSTANTE                      shift and go to state 170
    FACTOR_AUX                     shift and go to state 164
    NUMERICA                       shift and go to state 173
    NUMERICA_AUX                   shift and go to state 172
    BOOLEANA                       shift and go to state 161
    TERMINO                        shift and go to state 308
    FACTOR                         shift and go to state 174
    LISTA                          shift and go to state 175
    STRINGS                        shift and go to state 169

state 284

    (88) ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .

    list            reduce using rule 88 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    var             reduce using rule 88 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    if              reduce using rule 88 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    while           reduce using rule 88 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    cread           reduce using rule 88 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    cwrite          reduce using rule 88 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    left_par        reduce using rule 88 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    id              reduce using rule 88 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    return          reduce using rule 88 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    right_cb        reduce using rule 88 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)


state 285

    (144) ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .

    right_cb        reduce using rule 144 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    list            reduce using rule 144 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    var             reduce using rule 144 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    if              reduce using rule 144 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    while           reduce using rule 144 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    cread           reduce using rule 144 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    cwrite          reduce using rule 144 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    left_par        reduce using rule 144 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    id              reduce using rule 144 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    return          reduce using rule 144 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)


state 286

    (97) EXPRESION_B -> and nt_pushPOper . EXPRESION
    (93) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (95) EXPRESION_NOT -> . not nt_pushPOper
    (96) EXPRESION_NOT -> . empty
    (151) empty -> .

    not             shift and go to state 137
    left_par        reduce using rule 151 (empty -> .)
    id              reduce using rule 151 (empty -> .)
    plus            reduce using rule 151 (empty -> .)
    minus           reduce using rule 151 (empty -> .)
    true            reduce using rule 151 (empty -> .)
    false           reduce using rule 151 (empty -> .)
    cteString       reduce using rule 151 (empty -> .)
    cteInt          reduce using rule 151 (empty -> .)
    cteFloat        reduce using rule 151 (empty -> .)

    EXPRESION                      shift and go to state 309
    EXPRESION_NOT                  shift and go to state 135
    empty                          shift and go to state 138

state 287

    (98) EXPRESION_B -> or nt_pushPOper . EXPRESION
    (93) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (95) EXPRESION_NOT -> . not nt_pushPOper
    (96) EXPRESION_NOT -> . empty
    (151) empty -> .

    not             shift and go to state 137
    left_par        reduce using rule 151 (empty -> .)
    id              reduce using rule 151 (empty -> .)
    plus            reduce using rule 151 (empty -> .)
    minus           reduce using rule 151 (empty -> .)
    true            reduce using rule 151 (empty -> .)
    false           reduce using rule 151 (empty -> .)
    cteString       reduce using rule 151 (empty -> .)
    cteInt          reduce using rule 151 (empty -> .)
    cteFloat        reduce using rule 151 (empty -> .)

    EXPRESION                      shift and go to state 310
    EXPRESION_NOT                  shift and go to state 135
    empty                          shift and go to state 138

state 288

    (104) EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP . nt_checarRelop
    (108) nt_checarRelop -> . empty
    (151) empty -> .

    and             reduce using rule 151 (empty -> .)
    or              reduce using rule 151 (empty -> .)
    right_par       reduce using rule 151 (empty -> .)
    comma           reduce using rule 151 (empty -> .)
    semicolon       reduce using rule 151 (empty -> .)

    nt_checarRelop                 shift and go to state 311
    empty                          shift and go to state 312

state 289

    (102) EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP . nt_checarRelop
    (108) nt_checarRelop -> . empty
    (151) empty -> .

    and             reduce using rule 151 (empty -> .)
    or              reduce using rule 151 (empty -> .)
    right_par       reduce using rule 151 (empty -> .)
    comma           reduce using rule 151 (empty -> .)
    semicolon       reduce using rule 151 (empty -> .)

    nt_checarRelop                 shift and go to state 313
    empty                          shift and go to state 312

state 290

    (103) EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP . nt_checarRelop
    (108) nt_checarRelop -> . empty
    (151) empty -> .

    and             reduce using rule 151 (empty -> .)
    or              reduce using rule 151 (empty -> .)
    right_par       reduce using rule 151 (empty -> .)
    comma           reduce using rule 151 (empty -> .)
    semicolon       reduce using rule 151 (empty -> .)

    nt_checarRelop                 shift and go to state 314
    empty                          shift and go to state 312

state 291

    (101) EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP . nt_checarRelop
    (108) nt_checarRelop -> . empty
    (151) empty -> .

    and             reduce using rule 151 (empty -> .)
    or              reduce using rule 151 (empty -> .)
    right_par       reduce using rule 151 (empty -> .)
    comma           reduce using rule 151 (empty -> .)
    semicolon       reduce using rule 151 (empty -> .)

    nt_checarRelop                 shift and go to state 315
    empty                          shift and go to state 312

state 292

    (105) EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP . nt_checarRelop
    (108) nt_checarRelop -> . empty
    (151) empty -> .

    and             reduce using rule 151 (empty -> .)
    or              reduce using rule 151 (empty -> .)
    right_par       reduce using rule 151 (empty -> .)
    comma           reduce using rule 151 (empty -> .)
    semicolon       reduce using rule 151 (empty -> .)

    nt_checarRelop                 shift and go to state 316
    empty                          shift and go to state 312

state 293

    (106) EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP . nt_checarRelop
    (108) nt_checarRelop -> . empty
    (151) empty -> .

    and             reduce using rule 151 (empty -> .)
    or              reduce using rule 151 (empty -> .)
    right_par       reduce using rule 151 (empty -> .)
    comma           reduce using rule 151 (empty -> .)
    semicolon       reduce using rule 151 (empty -> .)

    nt_checarRelop                 shift and go to state 317
    empty                          shift and go to state 312

state 294

    (83) CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par . CUERPO nt_pushLoop
    (32) CUERPO -> . left_cb CUERPO_AUX right_cb

    left_cb         shift and go to state 76

    CUERPO                         shift and go to state 318

state 295

    (74) CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF . nt_pushSalto
    (81) nt_pushSalto -> . empty
    (151) empty -> .

    right_cb        reduce using rule 151 (empty -> .)
    list            reduce using rule 151 (empty -> .)
    var             reduce using rule 151 (empty -> .)
    if              reduce using rule 151 (empty -> .)
    while           reduce using rule 151 (empty -> .)
    cread           reduce using rule 151 (empty -> .)
    cwrite          reduce using rule 151 (empty -> .)
    left_par        reduce using rule 151 (empty -> .)
    id              reduce using rule 151 (empty -> .)
    return          reduce using rule 151 (empty -> .)

    nt_pushSalto                   shift and go to state 319
    empty                          shift and go to state 320

state 296

    (76) ELSE_ELIF -> ELIF .

    right_cb        reduce using rule 76 (ELSE_ELIF -> ELIF .)
    list            reduce using rule 76 (ELSE_ELIF -> ELIF .)
    var             reduce using rule 76 (ELSE_ELIF -> ELIF .)
    if              reduce using rule 76 (ELSE_ELIF -> ELIF .)
    while           reduce using rule 76 (ELSE_ELIF -> ELIF .)
    cread           reduce using rule 76 (ELSE_ELIF -> ELIF .)
    cwrite          reduce using rule 76 (ELSE_ELIF -> ELIF .)
    left_par        reduce using rule 76 (ELSE_ELIF -> ELIF .)
    id              reduce using rule 76 (ELSE_ELIF -> ELIF .)
    return          reduce using rule 76 (ELSE_ELIF -> ELIF .)


state 297

    (75) ELSE_ELIF -> ELSE .

    right_cb        reduce using rule 75 (ELSE_ELIF -> ELSE .)
    list            reduce using rule 75 (ELSE_ELIF -> ELSE .)
    var             reduce using rule 75 (ELSE_ELIF -> ELSE .)
    if              reduce using rule 75 (ELSE_ELIF -> ELSE .)
    while           reduce using rule 75 (ELSE_ELIF -> ELSE .)
    cread           reduce using rule 75 (ELSE_ELIF -> ELSE .)
    cwrite          reduce using rule 75 (ELSE_ELIF -> ELSE .)
    left_par        reduce using rule 75 (ELSE_ELIF -> ELSE .)
    id              reduce using rule 75 (ELSE_ELIF -> ELSE .)
    return          reduce using rule 75 (ELSE_ELIF -> ELSE .)


state 298

    (79) ELIF -> elseif . nt_pushElse CONDICION_AUX
    (82) nt_pushElse -> . empty
    (151) empty -> .

    left_par        reduce using rule 151 (empty -> .)

    nt_pushElse                    shift and go to state 321
    empty                          shift and go to state 322

state 299

    (78) ELSE -> else . nt_pushElse CUERPO
    (82) nt_pushElse -> . empty
    (151) empty -> .

    left_cb         reduce using rule 151 (empty -> .)

    nt_pushElse                    shift and go to state 323
    empty                          shift and go to state 322

state 300

    (77) ELSE_ELIF -> empty .

    right_cb        reduce using rule 77 (ELSE_ELIF -> empty .)
    list            reduce using rule 77 (ELSE_ELIF -> empty .)
    var             reduce using rule 77 (ELSE_ELIF -> empty .)
    if              reduce using rule 77 (ELSE_ELIF -> empty .)
    while           reduce using rule 77 (ELSE_ELIF -> empty .)
    cread           reduce using rule 77 (ELSE_ELIF -> empty .)
    cwrite          reduce using rule 77 (ELSE_ELIF -> empty .)
    left_par        reduce using rule 77 (ELSE_ELIF -> empty .)
    id              reduce using rule 77 (ELSE_ELIF -> empty .)
    return          reduce using rule 77 (ELSE_ELIF -> empty .)


state 301

    (125) LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .

    multiply        reduce using rule 125 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    divide          reduce using rule 125 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    plus            reduce using rule 125 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    minus           reduce using rule 125 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    right_sb        reduce using rule 125 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    lt              reduce using rule 125 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    gt              reduce using rule 125 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    ne              reduce using rule 125 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    ge              reduce using rule 125 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    le              reduce using rule 125 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    et              reduce using rule 125 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    and             reduce using rule 125 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    or              reduce using rule 125 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    right_par       reduce using rule 125 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    comma           reduce using rule 125 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    semicolon       reduce using rule 125 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)


state 302

    (126) LLAMADAF_AUX -> comma EXPRESION . LLAMADAF_AUX
    (126) LLAMADAF_AUX -> . comma EXPRESION LLAMADAF_AUX
    (127) LLAMADAF_AUX -> . empty
    (151) empty -> .

    comma           shift and go to state 277
    right_par       reduce using rule 151 (empty -> .)

    LLAMADAF_AUX                   shift and go to state 324
    empty                          shift and go to state 278

state 303

    (112) EXP_AUX -> minus nt_pushPOper EXP .

    right_sb        reduce using rule 112 (EXP_AUX -> minus nt_pushPOper EXP .)
    lt              reduce using rule 112 (EXP_AUX -> minus nt_pushPOper EXP .)
    gt              reduce using rule 112 (EXP_AUX -> minus nt_pushPOper EXP .)
    ne              reduce using rule 112 (EXP_AUX -> minus nt_pushPOper EXP .)
    ge              reduce using rule 112 (EXP_AUX -> minus nt_pushPOper EXP .)
    le              reduce using rule 112 (EXP_AUX -> minus nt_pushPOper EXP .)
    et              reduce using rule 112 (EXP_AUX -> minus nt_pushPOper EXP .)
    and             reduce using rule 112 (EXP_AUX -> minus nt_pushPOper EXP .)
    or              reduce using rule 112 (EXP_AUX -> minus nt_pushPOper EXP .)
    right_par       reduce using rule 112 (EXP_AUX -> minus nt_pushPOper EXP .)
    comma           reduce using rule 112 (EXP_AUX -> minus nt_pushPOper EXP .)
    semicolon       reduce using rule 112 (EXP_AUX -> minus nt_pushPOper EXP .)


state 304

    (111) EXP_AUX -> plus nt_pushPOper EXP .

    right_sb        reduce using rule 111 (EXP_AUX -> plus nt_pushPOper EXP .)
    lt              reduce using rule 111 (EXP_AUX -> plus nt_pushPOper EXP .)
    gt              reduce using rule 111 (EXP_AUX -> plus nt_pushPOper EXP .)
    ne              reduce using rule 111 (EXP_AUX -> plus nt_pushPOper EXP .)
    ge              reduce using rule 111 (EXP_AUX -> plus nt_pushPOper EXP .)
    le              reduce using rule 111 (EXP_AUX -> plus nt_pushPOper EXP .)
    et              reduce using rule 111 (EXP_AUX -> plus nt_pushPOper EXP .)
    and             reduce using rule 111 (EXP_AUX -> plus nt_pushPOper EXP .)
    or              reduce using rule 111 (EXP_AUX -> plus nt_pushPOper EXP .)
    right_par       reduce using rule 111 (EXP_AUX -> plus nt_pushPOper EXP .)
    comma           reduce using rule 111 (EXP_AUX -> plus nt_pushPOper EXP .)
    semicolon       reduce using rule 111 (EXP_AUX -> plus nt_pushPOper EXP .)


state 305

    (119) FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .

    multiply        reduce using rule 119 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    divide          reduce using rule 119 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    plus            reduce using rule 119 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    minus           reduce using rule 119 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    lt              reduce using rule 119 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    gt              reduce using rule 119 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    ne              reduce using rule 119 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    ge              reduce using rule 119 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    le              reduce using rule 119 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    et              reduce using rule 119 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    and             reduce using rule 119 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    or              reduce using rule 119 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    right_par       reduce using rule 119 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    comma           reduce using rule 119 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    semicolon       reduce using rule 119 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    right_sb        reduce using rule 119 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)


state 306

    (150) nt_popPOper -> empty .

    multiply        reduce using rule 150 (nt_popPOper -> empty .)
    divide          reduce using rule 150 (nt_popPOper -> empty .)
    plus            reduce using rule 150 (nt_popPOper -> empty .)
    minus           reduce using rule 150 (nt_popPOper -> empty .)
    right_sb        reduce using rule 150 (nt_popPOper -> empty .)
    lt              reduce using rule 150 (nt_popPOper -> empty .)
    gt              reduce using rule 150 (nt_popPOper -> empty .)
    ne              reduce using rule 150 (nt_popPOper -> empty .)
    ge              reduce using rule 150 (nt_popPOper -> empty .)
    le              reduce using rule 150 (nt_popPOper -> empty .)
    et              reduce using rule 150 (nt_popPOper -> empty .)
    and             reduce using rule 150 (nt_popPOper -> empty .)
    or              reduce using rule 150 (nt_popPOper -> empty .)
    right_par       reduce using rule 150 (nt_popPOper -> empty .)
    comma           reduce using rule 150 (nt_popPOper -> empty .)
    semicolon       reduce using rule 150 (nt_popPOper -> empty .)


state 307

    (117) TERMINO_AUX -> divide nt_pushPOper TERMINO .

    plus            reduce using rule 117 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    minus           reduce using rule 117 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    right_sb        reduce using rule 117 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    lt              reduce using rule 117 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    gt              reduce using rule 117 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    ne              reduce using rule 117 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    ge              reduce using rule 117 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    le              reduce using rule 117 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    et              reduce using rule 117 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    and             reduce using rule 117 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    or              reduce using rule 117 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    right_par       reduce using rule 117 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    comma           reduce using rule 117 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    semicolon       reduce using rule 117 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)


state 308

    (116) TERMINO_AUX -> multiply nt_pushPOper TERMINO .

    plus            reduce using rule 116 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    minus           reduce using rule 116 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    right_sb        reduce using rule 116 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    lt              reduce using rule 116 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    gt              reduce using rule 116 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    ne              reduce using rule 116 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    ge              reduce using rule 116 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    le              reduce using rule 116 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    et              reduce using rule 116 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    and             reduce using rule 116 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    or              reduce using rule 116 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    right_par       reduce using rule 116 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    comma           reduce using rule 116 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    semicolon       reduce using rule 116 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)


state 309

    (97) EXPRESION_B -> and nt_pushPOper EXPRESION .

    right_par       reduce using rule 97 (EXPRESION_B -> and nt_pushPOper EXPRESION .)
    comma           reduce using rule 97 (EXPRESION_B -> and nt_pushPOper EXPRESION .)
    semicolon       reduce using rule 97 (EXPRESION_B -> and nt_pushPOper EXPRESION .)


state 310

    (98) EXPRESION_B -> or nt_pushPOper EXPRESION .

    right_par       reduce using rule 98 (EXPRESION_B -> or nt_pushPOper EXPRESION .)
    comma           reduce using rule 98 (EXPRESION_B -> or nt_pushPOper EXPRESION .)
    semicolon       reduce using rule 98 (EXPRESION_B -> or nt_pushPOper EXPRESION .)


state 311

    (104) EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop .

    and             reduce using rule 104 (EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop .)
    or              reduce using rule 104 (EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop .)
    right_par       reduce using rule 104 (EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop .)
    comma           reduce using rule 104 (EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop .)
    semicolon       reduce using rule 104 (EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop .)


state 312

    (108) nt_checarRelop -> empty .

    and             reduce using rule 108 (nt_checarRelop -> empty .)
    or              reduce using rule 108 (nt_checarRelop -> empty .)
    right_par       reduce using rule 108 (nt_checarRelop -> empty .)
    comma           reduce using rule 108 (nt_checarRelop -> empty .)
    semicolon       reduce using rule 108 (nt_checarRelop -> empty .)


state 313

    (102) EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop .

    and             reduce using rule 102 (EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop .)
    or              reduce using rule 102 (EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop .)
    right_par       reduce using rule 102 (EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop .)
    comma           reduce using rule 102 (EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop .)
    semicolon       reduce using rule 102 (EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop .)


state 314

    (103) EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop .

    and             reduce using rule 103 (EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop .)
    or              reduce using rule 103 (EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop .)
    right_par       reduce using rule 103 (EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop .)
    comma           reduce using rule 103 (EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop .)
    semicolon       reduce using rule 103 (EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop .)


state 315

    (101) EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop .

    and             reduce using rule 101 (EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop .)
    or              reduce using rule 101 (EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop .)
    right_par       reduce using rule 101 (EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop .)
    comma           reduce using rule 101 (EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop .)
    semicolon       reduce using rule 101 (EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop .)


state 316

    (105) EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop .

    and             reduce using rule 105 (EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop .)
    or              reduce using rule 105 (EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop .)
    right_par       reduce using rule 105 (EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop .)
    comma           reduce using rule 105 (EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop .)
    semicolon       reduce using rule 105 (EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop .)


state 317

    (106) EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop .

    and             reduce using rule 106 (EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop .)
    or              reduce using rule 106 (EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop .)
    right_par       reduce using rule 106 (EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop .)
    comma           reduce using rule 106 (EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop .)
    semicolon       reduce using rule 106 (EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop .)


state 318

    (83) CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO . nt_pushLoop
    (85) nt_pushLoop -> . empty
    (151) empty -> .

    right_cb        reduce using rule 151 (empty -> .)
    list            reduce using rule 151 (empty -> .)
    var             reduce using rule 151 (empty -> .)
    if              reduce using rule 151 (empty -> .)
    while           reduce using rule 151 (empty -> .)
    cread           reduce using rule 151 (empty -> .)
    cwrite          reduce using rule 151 (empty -> .)
    left_par        reduce using rule 151 (empty -> .)
    id              reduce using rule 151 (empty -> .)
    return          reduce using rule 151 (empty -> .)

    nt_pushLoop                    shift and go to state 325
    empty                          shift and go to state 326

state 319

    (74) CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .

    right_cb        reduce using rule 74 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    list            reduce using rule 74 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    var             reduce using rule 74 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    if              reduce using rule 74 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    while           reduce using rule 74 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    cread           reduce using rule 74 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    cwrite          reduce using rule 74 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    left_par        reduce using rule 74 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    id              reduce using rule 74 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    return          reduce using rule 74 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)


state 320

    (81) nt_pushSalto -> empty .

    right_cb        reduce using rule 81 (nt_pushSalto -> empty .)
    list            reduce using rule 81 (nt_pushSalto -> empty .)
    var             reduce using rule 81 (nt_pushSalto -> empty .)
    if              reduce using rule 81 (nt_pushSalto -> empty .)
    while           reduce using rule 81 (nt_pushSalto -> empty .)
    cread           reduce using rule 81 (nt_pushSalto -> empty .)
    cwrite          reduce using rule 81 (nt_pushSalto -> empty .)
    left_par        reduce using rule 81 (nt_pushSalto -> empty .)
    id              reduce using rule 81 (nt_pushSalto -> empty .)
    return          reduce using rule 81 (nt_pushSalto -> empty .)


state 321

    (79) ELIF -> elseif nt_pushElse . CONDICION_AUX
    (74) CONDICION_AUX -> . left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto

    left_par        shift and go to state 127

    CONDICION_AUX                  shift and go to state 327

state 322

    (82) nt_pushElse -> empty .

    left_par        reduce using rule 82 (nt_pushElse -> empty .)
    left_cb         reduce using rule 82 (nt_pushElse -> empty .)


state 323

    (78) ELSE -> else nt_pushElse . CUERPO
    (32) CUERPO -> . left_cb CUERPO_AUX right_cb

    left_cb         shift and go to state 76

    CUERPO                         shift and go to state 328

state 324

    (126) LLAMADAF_AUX -> comma EXPRESION LLAMADAF_AUX .

    right_par       reduce using rule 126 (LLAMADAF_AUX -> comma EXPRESION LLAMADAF_AUX .)


state 325

    (83) CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .

    right_cb        reduce using rule 83 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    list            reduce using rule 83 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    var             reduce using rule 83 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    if              reduce using rule 83 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    while           reduce using rule 83 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    cread           reduce using rule 83 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    cwrite          reduce using rule 83 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    left_par        reduce using rule 83 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    id              reduce using rule 83 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    return          reduce using rule 83 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)


state 326

    (85) nt_pushLoop -> empty .

    right_cb        reduce using rule 85 (nt_pushLoop -> empty .)
    list            reduce using rule 85 (nt_pushLoop -> empty .)
    var             reduce using rule 85 (nt_pushLoop -> empty .)
    if              reduce using rule 85 (nt_pushLoop -> empty .)
    while           reduce using rule 85 (nt_pushLoop -> empty .)
    cread           reduce using rule 85 (nt_pushLoop -> empty .)
    cwrite          reduce using rule 85 (nt_pushLoop -> empty .)
    left_par        reduce using rule 85 (nt_pushLoop -> empty .)
    id              reduce using rule 85 (nt_pushLoop -> empty .)
    return          reduce using rule 85 (nt_pushLoop -> empty .)


state 327

    (79) ELIF -> elseif nt_pushElse CONDICION_AUX .

    right_cb        reduce using rule 79 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    list            reduce using rule 79 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    var             reduce using rule 79 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    if              reduce using rule 79 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    while           reduce using rule 79 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    cread           reduce using rule 79 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    cwrite          reduce using rule 79 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    left_par        reduce using rule 79 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    id              reduce using rule 79 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    return          reduce using rule 79 (ELIF -> elseif nt_pushElse CONDICION_AUX .)


state 328

    (78) ELSE -> else nt_pushElse CUERPO .

    right_cb        reduce using rule 78 (ELSE -> else nt_pushElse CUERPO .)
    list            reduce using rule 78 (ELSE -> else nt_pushElse CUERPO .)
    var             reduce using rule 78 (ELSE -> else nt_pushElse CUERPO .)
    if              reduce using rule 78 (ELSE -> else nt_pushElse CUERPO .)
    while           reduce using rule 78 (ELSE -> else nt_pushElse CUERPO .)
    cread           reduce using rule 78 (ELSE -> else nt_pushElse CUERPO .)
    cwrite          reduce using rule 78 (ELSE -> else nt_pushElse CUERPO .)
    left_par        reduce using rule 78 (ELSE -> else nt_pushElse CUERPO .)
    id              reduce using rule 78 (ELSE -> else nt_pushElse CUERPO .)
    return          reduce using rule 78 (ELSE -> else nt_pushElse CUERPO .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for list in state 15 resolved as shift
WARNING: shift/reduce conflict for var in state 15 resolved as shift
WARNING: shift/reduce conflict for int in state 16 resolved as shift
WARNING: shift/reduce conflict for float in state 16 resolved as shift
WARNING: shift/reduce conflict for bool in state 16 resolved as shift
WARNING: shift/reduce conflict for string in state 16 resolved as shift
WARNING: shift/reduce conflict for void in state 16 resolved as shift
WARNING: shift/reduce conflict for int in state 26 resolved as shift
WARNING: shift/reduce conflict for float in state 26 resolved as shift
WARNING: shift/reduce conflict for bool in state 26 resolved as shift
WARNING: shift/reduce conflict for string in state 26 resolved as shift
WARNING: shift/reduce conflict for void in state 26 resolved as shift
WARNING: shift/reduce conflict for list in state 76 resolved as shift
WARNING: shift/reduce conflict for var in state 76 resolved as shift
WARNING: shift/reduce conflict for if in state 84 resolved as shift
WARNING: shift/reduce conflict for while in state 84 resolved as shift
WARNING: shift/reduce conflict for cread in state 84 resolved as shift
WARNING: shift/reduce conflict for cwrite in state 84 resolved as shift
WARNING: shift/reduce conflict for left_par in state 84 resolved as shift
WARNING: shift/reduce conflict for id in state 84 resolved as shift
WARNING: shift/reduce conflict for right_cb in state 87 resolved as shift
WARNING: shift/reduce conflict for list in state 87 resolved as shift
WARNING: shift/reduce conflict for var in state 87 resolved as shift
WARNING: shift/reduce conflict for if in state 114 resolved as shift
WARNING: shift/reduce conflict for while in state 114 resolved as shift
WARNING: shift/reduce conflict for cread in state 114 resolved as shift
WARNING: shift/reduce conflict for cwrite in state 114 resolved as shift
WARNING: shift/reduce conflict for left_par in state 114 resolved as shift
WARNING: shift/reduce conflict for id in state 114 resolved as shift
WARNING: shift/reduce conflict for list in state 124 resolved as shift
WARNING: shift/reduce conflict for var in state 124 resolved as shift
WARNING: shift/reduce conflict for list in state 142 resolved as shift
WARNING: shift/reduce conflict for var in state 142 resolved as shift
WARNING: shift/reduce conflict for list in state 149 resolved as shift
WARNING: shift/reduce conflict for var in state 149 resolved as shift
WARNING: shift/reduce conflict for list in state 150 resolved as shift
WARNING: shift/reduce conflict for var in state 150 resolved as shift
WARNING: shift/reduce conflict for if in state 196 resolved as shift
WARNING: shift/reduce conflict for while in state 196 resolved as shift
WARNING: shift/reduce conflict for cread in state 196 resolved as shift
WARNING: shift/reduce conflict for cwrite in state 196 resolved as shift
WARNING: shift/reduce conflict for left_par in state 196 resolved as shift
WARNING: shift/reduce conflict for id in state 196 resolved as shift
WARNING: shift/reduce conflict for if in state 239 resolved as shift
WARNING: shift/reduce conflict for while in state 239 resolved as shift
WARNING: shift/reduce conflict for cread in state 239 resolved as shift
WARNING: shift/reduce conflict for cwrite in state 239 resolved as shift
WARNING: shift/reduce conflict for left_par in state 239 resolved as shift
WARNING: shift/reduce conflict for id in state 239 resolved as shift
WARNING: reduce/reduce conflict in state 42 resolved using rule (nt_cambiarScope -> empty)
WARNING: rejected rule (PROGRAMA_FUNC_AUX -> empty) in state 42
WARNING: reduce/reduce conflict in state 150 resolved using rule (CUERPOFUNC -> CUERPOFUNC_AUX)
WARNING: rejected rule (empty -> <empty>) in state 150
WARNING: reduce/reduce conflict in state 154 resolved using rule (CUERPOFUNC_VARS -> empty)
WARNING: rejected rule (CUERPORETORNO_CF_AUX -> empty) in state 154
WARNING: Rule (CUERPORETORNO_CF_AUX -> empty) is never reduced
