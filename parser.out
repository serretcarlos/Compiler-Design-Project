Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    right_dblquotes
    left_dblquotes

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> program id semicolon PROGRAMA_VARS cambiarScope PROGRAMA_FUNC main CUERPO
Rule 2     cambiarScope -> empty
Rule 3     PROGRAMA_VARS -> VARS
Rule 4     PROGRAMA_VARS -> empty
Rule 5     PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX
Rule 6     PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX
Rule 7     PROGRAMA_FUNC_AUX -> FUNC
Rule 8     PROGRAMA_FUNC_AUX -> empty
Rule 9     VARS -> VARS_AUX
Rule 10    VARS_AUX -> VARS_LIST_VAR
Rule 11    VARS_AUX -> VARS_AUX VARS_LIST_VAR
Rule 12    VARS_LIST_VAR -> VARS_LIST
Rule 13    VARS_LIST_VAR -> VARS_VAR
Rule 14    VARS_LIST -> list hacerLista TIPO VARS_LIST_AUX semicolon
Rule 15    hacerLista -> empty
Rule 16    VARS_LIST_AUX -> id agregarId left_sb cteInt agregarCteLista right_sb agregarDicVar
Rule 17    VARS_LIST_AUX -> VARS_LIST_AUX comma id agregarId left_sb cteInt agregarCteLista right_sb agregarDicVar
Rule 18    agregarId -> empty
Rule 19    agregarCteLista -> empty
Rule 20    agregarDicVar -> empty
Rule 21    VARS_VAR -> var hacerVar TIPO VARS_VAR_AUX semicolon
Rule 22    hacerVar -> empty
Rule 23    VARS_VAR_AUX -> id agregarId agregarDicVar
Rule 24    VARS_VAR_AUX -> VARS_VAR_AUX comma id agregarId agregarDicVar
Rule 25    TIPO -> int cambioTipoActual
Rule 26    TIPO -> float cambioTipoActual
Rule 27    TIPO -> bool cambioTipoActual
Rule 28    TIPO -> string cambioTipoActual
Rule 29    cambioTipoActual -> empty
Rule 30    CUERPO -> left_cb CUERPO_AUX right_cb
Rule 31    CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO
Rule 32    CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO
Rule 33    CUERPO_VARS -> VARS
Rule 34    CUERPO_VARS -> empty
Rule 35    CUERPO_ESTATUTO -> ESTATUTO
Rule 36    CUERPO_ESTATUTO -> empty
Rule 37    CUERPOFUNC -> CUERPOFUNC_AUX
Rule 38    CUERPOFUNC_AUX -> CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO
Rule 39    CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO
Rule 40    CUERPOFUNC_VARS -> VARS
Rule 41    CUERPOFUNC_VARS -> empty
Rule 42    CUERPOFUNC_ESTATUTO -> ESTATUTO
Rule 43    CUERPOFUNC_ESTATUTO -> empty
Rule 44    CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb
Rule 45    CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO
Rule 46    CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO
Rule 47    CUERPORETORNO_CF_AUX -> CUERPOFUNC
Rule 48    CUERPORETORNO_CF_AUX -> empty
Rule 49    RETORNO -> return EXP semicolon
Rule 50    FUNC -> TIPO cambioFuncActual id agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO cambiarScope
Rule 51    FUNC -> VOIDFUNC cambiarScope
Rule 52    cambioFuncActual -> empty
Rule 53    agregarIdFunc -> empty
Rule 54    FUNC_PARA -> TIPO id agregarParametro
Rule 55    FUNC_PARA -> FUNC_PARA comma TIPO id agregarParametro
Rule 56    agregarParametro -> empty
Rule 57    VOIDFUNC -> void hacerVoid id agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb
Rule 58    hacerVoid -> empty
Rule 59    VOIDFUNC_PARA -> TIPO id agregarParametro
Rule 60    VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO id agregarParametro
Rule 61    ESTATUTO -> ASIGNACION
Rule 62    ESTATUTO -> CONDICION
Rule 63    ESTATUTO -> CICLO
Rule 64    ESTATUTO -> LECTURA
Rule 65    ESTATUTO -> ESCRITURA
Rule 66    ESTATUTO -> LLAMADA
Rule 67    CONDICION -> if CONDICION_ELSEIF CONDICION_ELSE
Rule 68    CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO
Rule 69    CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO
Rule 70    CONDICION_ELSE -> else CUERPO
Rule 71    CONDICION_ELSE -> empty
Rule 72    CICLO -> while left_par EXPRESION right_par CUERPO
Rule 73    LECTURA -> cread left_par id right_par semicolon
Rule 74    ESCRITURA -> cwrite left_par EXPRESION right_par semicolon
Rule 75    LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon
Rule 76    LLAMADA_EXPRESION -> EXPRESION
Rule 77    LLAMADA_EXPRESION -> LLAMADA_EXPRESION comma EXPRESION
Rule 78    EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA EXPRESION_B
Rule 79    EXPRESION_NOT -> not
Rule 80    EXPRESION_NOT -> empty
Rule 81    EXPRESION_B -> and EXPRESION_NOT EXPRESIONLOGICA
Rule 82    EXPRESION_B -> or EXPRESION_NOT EXPRESIONLOGICA
Rule 83    EXPRESION_B -> empty
Rule 84    EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX
Rule 85    EXPRESIONLOGICA_AUX -> lt EXP
Rule 86    EXPRESIONLOGICA_AUX -> gt EXP
Rule 87    EXPRESIONLOGICA_AUX -> ne EXP
Rule 88    EXPRESIONLOGICA_AUX -> ge EXP
Rule 89    EXPRESIONLOGICA_AUX -> le EXP
Rule 90    EXPRESIONLOGICA_AUX -> et EXP
Rule 91    EXPRESIONLOGICA_AUX -> empty
Rule 92    EXP -> TERMINO EXP_AUX
Rule 93    EXP_AUX -> plus EXP
Rule 94    EXP_AUX -> minus EXP
Rule 95    EXP_AUX -> empty
Rule 96    TERMINO -> FACTOR TERMINO_AUX
Rule 97    TERMINO_AUX -> multiply TERMINO
Rule 98    TERMINO_AUX -> divide TERMINO
Rule 99    TERMINO_AUX -> empty
Rule 100   FACTOR -> left_par EXPRESION right_par
Rule 101   FACTOR -> CONSTANTE
Rule 102   FACTOR -> LISTA
Rule 103   FACTOR -> FACTOR_AUX
Rule 104   FACTOR_AUX -> id
Rule 105   FACTOR_AUX -> id LLAMADA_F
Rule 106   LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par
Rule 107   LLAMADAF_AUX -> comma EXPRESION LLAMADAF_AUX
Rule 108   LLAMADAF_AUX -> empty
Rule 109   LISTA -> id left_sb EXP right_sb
Rule 110   CONSTANTE -> NUMERICA
Rule 111   CONSTANTE -> BOOLEANA
Rule 112   CONSTANTE -> STRINGS
Rule 113   NUMERICA -> NUMERICA_AUX
Rule 114   NUMERICA -> plus NUMERICA_AUX
Rule 115   NUMERICA -> minus NUMERICA_AUX
Rule 116   NUMERICA_AUX -> cteInt
Rule 117   NUMERICA_AUX -> cteFloat
Rule 118   BOOLEANA -> true
Rule 119   BOOLEANA -> false
Rule 120   STRINGS -> cteString
Rule 121   ASIGNACION -> ASIGNACION_AUX equals EXPRESION semicolon
Rule 122   ASIGNACION_AUX -> id
Rule 123   ASIGNACION_AUX -> LISTA
Rule 124   empty -> <empty>

Terminals, with rules where they appear

and                  : 81
bool                 : 27
comma                : 17 24 55 60 77 107
cread                : 73
cteFloat             : 117
cteInt               : 16 17 116
cteString            : 120
cwrite               : 74
divide               : 98
else                 : 70
elseif               : 69
equals               : 121
error                : 
et                   : 90
false                : 119
float                : 26
ge                   : 88
gt                   : 86
id                   : 1 16 17 23 24 50 54 55 57 59 60 73 104 105 109 122
if                   : 67
int                  : 25
le                   : 89
left_cb              : 30 44 57
left_dblquotes       : 
left_par             : 50 57 68 69 72 73 74 75 100 106
left_sb              : 16 17 109
list                 : 14
lt                   : 85
main                 : 1
minus                : 94 115
multiply             : 97
ne                   : 87
not                  : 79
or                   : 82
plus                 : 93 114
program              : 1
return               : 49
right_cb             : 30 44 57
right_dblquotes      : 
right_par            : 50 57 68 69 72 73 74 75 100 106
right_sb             : 16 17 109
semicolon            : 1 14 21 49 73 74 75 121
string               : 28
true                 : 118
var                  : 21
void                 : 57
while                : 72

Nonterminals, with rules where they appear

ASIGNACION           : 61
ASIGNACION_AUX       : 121
BOOLEANA             : 111
CICLO                : 63
CONDICION            : 62
CONDICION_ELSE       : 67
CONDICION_ELSEIF     : 67 69
CONSTANTE            : 101
CUERPO               : 1 68 69 70 72
CUERPOFUNC           : 47 57
CUERPOFUNC_AUX       : 37 39
CUERPOFUNC_ESTATUTO  : 38 39
CUERPOFUNC_VARS      : 38 39
CUERPORETORNO        : 50
CUERPORETORNO_AUX    : 44 46
CUERPORETORNO_CF_AUX : 45 46
CUERPO_AUX           : 30 32
CUERPO_ESTATUTO      : 31 32
CUERPO_VARS          : 31 32
ESCRITURA            : 65
ESTATUTO             : 35 42
EXP                  : 49 84 85 86 87 88 89 90 93 94 109
EXPRESION            : 68 69 72 74 76 77 100 106 107 121
EXPRESIONLOGICA      : 78 81 82
EXPRESIONLOGICA_AUX  : 84
EXPRESION_B          : 78
EXPRESION_NOT        : 78 81 82
EXP_AUX              : 92
FACTOR               : 96
FACTOR_AUX           : 103
FUNC                 : 7
FUNC_PARA            : 50 55
LECTURA              : 64
LISTA                : 102 123
LLAMADA              : 66
LLAMADAF_AUX         : 106 107
LLAMADA_EXPRESION    : 75 77
LLAMADA_F            : 105
NUMERICA             : 110
NUMERICA_AUX         : 113 114 115
PROGRAMA             : 0
PROGRAMA_FUNC        : 1 6
PROGRAMA_FUNC_AUX    : 5 6
PROGRAMA_VARS        : 1
RETORNO              : 45 46
STRINGS              : 112
TERMINO              : 92 97 98
TERMINO_AUX          : 96
TIPO                 : 14 21 50 54 55 59 60
VARS                 : 3 33 40
VARS_AUX             : 9 11
VARS_LIST            : 12
VARS_LIST_AUX        : 14 17
VARS_LIST_VAR        : 10 11
VARS_VAR             : 13
VARS_VAR_AUX         : 21 24
VOIDFUNC             : 51
VOIDFUNC_PARA        : 57 60
agregarCteLista      : 16 17
agregarDicVar        : 16 17 23 24
agregarId            : 16 17 23 24
agregarIdFunc        : 50 57
agregarParametro     : 54 55 59 60
cambiarScope         : 1 50 51
cambioFuncActual     : 50
cambioTipoActual     : 25 26 27 28
empty                : 2 4 8 15 18 19 20 22 29 34 36 41 43 48 52 53 56 58 71 80 83 91 95 99 108
hacerLista           : 14
hacerVar             : 21
hacerVoid            : 57

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . program id semicolon PROGRAMA_VARS cambiarScope PROGRAMA_FUNC main CUERPO

    program         shift and go to state 1

    PROGRAMA                       shift and go to state 2

state 1

    (1) PROGRAMA -> program . id semicolon PROGRAMA_VARS cambiarScope PROGRAMA_FUNC main CUERPO

    id              shift and go to state 3


state 2

    (0) S' -> PROGRAMA .



state 3

    (1) PROGRAMA -> program id . semicolon PROGRAMA_VARS cambiarScope PROGRAMA_FUNC main CUERPO

    semicolon       shift and go to state 4


state 4

    (1) PROGRAMA -> program id semicolon . PROGRAMA_VARS cambiarScope PROGRAMA_FUNC main CUERPO
    (3) PROGRAMA_VARS -> . VARS
    (4) PROGRAMA_VARS -> . empty
    (9) VARS -> . VARS_AUX
    (124) empty -> .
    (10) VARS_AUX -> . VARS_LIST_VAR
    (11) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (12) VARS_LIST_VAR -> . VARS_LIST
    (13) VARS_LIST_VAR -> . VARS_VAR
    (14) VARS_LIST -> . list hacerLista TIPO VARS_LIST_AUX semicolon
    (21) VARS_VAR -> . var hacerVar TIPO VARS_VAR_AUX semicolon

    int             reduce using rule 124 (empty -> .)
    float           reduce using rule 124 (empty -> .)
    bool            reduce using rule 124 (empty -> .)
    string          reduce using rule 124 (empty -> .)
    void            reduce using rule 124 (empty -> .)
    main            reduce using rule 124 (empty -> .)
    list            shift and go to state 10
    var             shift and go to state 5

    VARS                           shift and go to state 6
    VARS_LIST                      shift and go to state 7
    VARS_LIST_VAR                  shift and go to state 8
    PROGRAMA_VARS                  shift and go to state 9
    VARS_AUX                       shift and go to state 11
    VARS_VAR                       shift and go to state 12
    empty                          shift and go to state 13

state 5

    (21) VARS_VAR -> var . hacerVar TIPO VARS_VAR_AUX semicolon
    (22) hacerVar -> . empty
    (124) empty -> .

    int             reduce using rule 124 (empty -> .)
    float           reduce using rule 124 (empty -> .)
    bool            reduce using rule 124 (empty -> .)
    string          reduce using rule 124 (empty -> .)

    hacerVar                       shift and go to state 14
    empty                          shift and go to state 15

state 6

    (3) PROGRAMA_VARS -> VARS .

    int             reduce using rule 3 (PROGRAMA_VARS -> VARS .)
    float           reduce using rule 3 (PROGRAMA_VARS -> VARS .)
    bool            reduce using rule 3 (PROGRAMA_VARS -> VARS .)
    string          reduce using rule 3 (PROGRAMA_VARS -> VARS .)
    void            reduce using rule 3 (PROGRAMA_VARS -> VARS .)
    main            reduce using rule 3 (PROGRAMA_VARS -> VARS .)


state 7

    (12) VARS_LIST_VAR -> VARS_LIST .

    list            reduce using rule 12 (VARS_LIST_VAR -> VARS_LIST .)
    var             reduce using rule 12 (VARS_LIST_VAR -> VARS_LIST .)
    int             reduce using rule 12 (VARS_LIST_VAR -> VARS_LIST .)
    float           reduce using rule 12 (VARS_LIST_VAR -> VARS_LIST .)
    bool            reduce using rule 12 (VARS_LIST_VAR -> VARS_LIST .)
    string          reduce using rule 12 (VARS_LIST_VAR -> VARS_LIST .)
    void            reduce using rule 12 (VARS_LIST_VAR -> VARS_LIST .)
    main            reduce using rule 12 (VARS_LIST_VAR -> VARS_LIST .)
    if              reduce using rule 12 (VARS_LIST_VAR -> VARS_LIST .)
    while           reduce using rule 12 (VARS_LIST_VAR -> VARS_LIST .)
    cread           reduce using rule 12 (VARS_LIST_VAR -> VARS_LIST .)
    cwrite          reduce using rule 12 (VARS_LIST_VAR -> VARS_LIST .)
    left_par        reduce using rule 12 (VARS_LIST_VAR -> VARS_LIST .)
    id              reduce using rule 12 (VARS_LIST_VAR -> VARS_LIST .)
    right_cb        reduce using rule 12 (VARS_LIST_VAR -> VARS_LIST .)
    return          reduce using rule 12 (VARS_LIST_VAR -> VARS_LIST .)


state 8

    (10) VARS_AUX -> VARS_LIST_VAR .

    list            reduce using rule 10 (VARS_AUX -> VARS_LIST_VAR .)
    var             reduce using rule 10 (VARS_AUX -> VARS_LIST_VAR .)
    if              reduce using rule 10 (VARS_AUX -> VARS_LIST_VAR .)
    while           reduce using rule 10 (VARS_AUX -> VARS_LIST_VAR .)
    cread           reduce using rule 10 (VARS_AUX -> VARS_LIST_VAR .)
    cwrite          reduce using rule 10 (VARS_AUX -> VARS_LIST_VAR .)
    left_par        reduce using rule 10 (VARS_AUX -> VARS_LIST_VAR .)
    id              reduce using rule 10 (VARS_AUX -> VARS_LIST_VAR .)
    right_cb        reduce using rule 10 (VARS_AUX -> VARS_LIST_VAR .)
    return          reduce using rule 10 (VARS_AUX -> VARS_LIST_VAR .)
    int             reduce using rule 10 (VARS_AUX -> VARS_LIST_VAR .)
    float           reduce using rule 10 (VARS_AUX -> VARS_LIST_VAR .)
    bool            reduce using rule 10 (VARS_AUX -> VARS_LIST_VAR .)
    string          reduce using rule 10 (VARS_AUX -> VARS_LIST_VAR .)
    void            reduce using rule 10 (VARS_AUX -> VARS_LIST_VAR .)
    main            reduce using rule 10 (VARS_AUX -> VARS_LIST_VAR .)


state 9

    (1) PROGRAMA -> program id semicolon PROGRAMA_VARS . cambiarScope PROGRAMA_FUNC main CUERPO
    (2) cambiarScope -> . empty
    (124) empty -> .

    int             reduce using rule 124 (empty -> .)
    float           reduce using rule 124 (empty -> .)
    bool            reduce using rule 124 (empty -> .)
    string          reduce using rule 124 (empty -> .)
    void            reduce using rule 124 (empty -> .)
    main            reduce using rule 124 (empty -> .)

    cambiarScope                   shift and go to state 16
    empty                          shift and go to state 17

state 10

    (14) VARS_LIST -> list . hacerLista TIPO VARS_LIST_AUX semicolon
    (15) hacerLista -> . empty
    (124) empty -> .

    int             reduce using rule 124 (empty -> .)
    float           reduce using rule 124 (empty -> .)
    bool            reduce using rule 124 (empty -> .)
    string          reduce using rule 124 (empty -> .)

    hacerLista                     shift and go to state 18
    empty                          shift and go to state 19

state 11

    (9) VARS -> VARS_AUX .
    (11) VARS_AUX -> VARS_AUX . VARS_LIST_VAR
    (12) VARS_LIST_VAR -> . VARS_LIST
    (13) VARS_LIST_VAR -> . VARS_VAR
    (14) VARS_LIST -> . list hacerLista TIPO VARS_LIST_AUX semicolon
    (21) VARS_VAR -> . var hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    if              reduce using rule 9 (VARS -> VARS_AUX .)
    while           reduce using rule 9 (VARS -> VARS_AUX .)
    cread           reduce using rule 9 (VARS -> VARS_AUX .)
    cwrite          reduce using rule 9 (VARS -> VARS_AUX .)
    left_par        reduce using rule 9 (VARS -> VARS_AUX .)
    id              reduce using rule 9 (VARS -> VARS_AUX .)
    return          reduce using rule 9 (VARS -> VARS_AUX .)
    right_cb        reduce using rule 9 (VARS -> VARS_AUX .)
    int             reduce using rule 9 (VARS -> VARS_AUX .)
    float           reduce using rule 9 (VARS -> VARS_AUX .)
    bool            reduce using rule 9 (VARS -> VARS_AUX .)
    string          reduce using rule 9 (VARS -> VARS_AUX .)
    void            reduce using rule 9 (VARS -> VARS_AUX .)
    main            reduce using rule 9 (VARS -> VARS_AUX .)
    list            shift and go to state 10
    var             shift and go to state 5

  ! list            [ reduce using rule 9 (VARS -> VARS_AUX .) ]
  ! var             [ reduce using rule 9 (VARS -> VARS_AUX .) ]

    VARS_LIST                      shift and go to state 7
    VARS_LIST_VAR                  shift and go to state 20
    VARS_VAR                       shift and go to state 12

state 12

    (13) VARS_LIST_VAR -> VARS_VAR .

    list            reduce using rule 13 (VARS_LIST_VAR -> VARS_VAR .)
    var             reduce using rule 13 (VARS_LIST_VAR -> VARS_VAR .)
    int             reduce using rule 13 (VARS_LIST_VAR -> VARS_VAR .)
    float           reduce using rule 13 (VARS_LIST_VAR -> VARS_VAR .)
    bool            reduce using rule 13 (VARS_LIST_VAR -> VARS_VAR .)
    string          reduce using rule 13 (VARS_LIST_VAR -> VARS_VAR .)
    void            reduce using rule 13 (VARS_LIST_VAR -> VARS_VAR .)
    main            reduce using rule 13 (VARS_LIST_VAR -> VARS_VAR .)
    if              reduce using rule 13 (VARS_LIST_VAR -> VARS_VAR .)
    while           reduce using rule 13 (VARS_LIST_VAR -> VARS_VAR .)
    cread           reduce using rule 13 (VARS_LIST_VAR -> VARS_VAR .)
    cwrite          reduce using rule 13 (VARS_LIST_VAR -> VARS_VAR .)
    left_par        reduce using rule 13 (VARS_LIST_VAR -> VARS_VAR .)
    id              reduce using rule 13 (VARS_LIST_VAR -> VARS_VAR .)
    right_cb        reduce using rule 13 (VARS_LIST_VAR -> VARS_VAR .)
    return          reduce using rule 13 (VARS_LIST_VAR -> VARS_VAR .)


state 13

    (4) PROGRAMA_VARS -> empty .

    int             reduce using rule 4 (PROGRAMA_VARS -> empty .)
    float           reduce using rule 4 (PROGRAMA_VARS -> empty .)
    bool            reduce using rule 4 (PROGRAMA_VARS -> empty .)
    string          reduce using rule 4 (PROGRAMA_VARS -> empty .)
    void            reduce using rule 4 (PROGRAMA_VARS -> empty .)
    main            reduce using rule 4 (PROGRAMA_VARS -> empty .)


state 14

    (21) VARS_VAR -> var hacerVar . TIPO VARS_VAR_AUX semicolon
    (25) TIPO -> . int cambioTipoActual
    (26) TIPO -> . float cambioTipoActual
    (27) TIPO -> . bool cambioTipoActual
    (28) TIPO -> . string cambioTipoActual

    int             shift and go to state 22
    float           shift and go to state 23
    bool            shift and go to state 24
    string          shift and go to state 25

    TIPO                           shift and go to state 21

state 15

    (22) hacerVar -> empty .

    int             reduce using rule 22 (hacerVar -> empty .)
    float           reduce using rule 22 (hacerVar -> empty .)
    bool            reduce using rule 22 (hacerVar -> empty .)
    string          reduce using rule 22 (hacerVar -> empty .)


state 16

    (1) PROGRAMA -> program id semicolon PROGRAMA_VARS cambiarScope . PROGRAMA_FUNC main CUERPO
    (5) PROGRAMA_FUNC -> . PROGRAMA_FUNC_AUX
    (6) PROGRAMA_FUNC -> . PROGRAMA_FUNC PROGRAMA_FUNC_AUX
    (7) PROGRAMA_FUNC_AUX -> . FUNC
    (8) PROGRAMA_FUNC_AUX -> . empty
    (50) FUNC -> . TIPO cambioFuncActual id agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO cambiarScope
    (51) FUNC -> . VOIDFUNC cambiarScope
    (124) empty -> .
    (25) TIPO -> . int cambioTipoActual
    (26) TIPO -> . float cambioTipoActual
    (27) TIPO -> . bool cambioTipoActual
    (28) TIPO -> . string cambioTipoActual
    (57) VOIDFUNC -> . void hacerVoid id agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb

  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for bool resolved as shift
  ! shift/reduce conflict for string resolved as shift
  ! shift/reduce conflict for void resolved as shift
    main            reduce using rule 124 (empty -> .)
    int             shift and go to state 22
    float           shift and go to state 23
    bool            shift and go to state 24
    string          shift and go to state 25
    void            shift and go to state 31

  ! int             [ reduce using rule 124 (empty -> .) ]
  ! float           [ reduce using rule 124 (empty -> .) ]
  ! bool            [ reduce using rule 124 (empty -> .) ]
  ! string          [ reduce using rule 124 (empty -> .) ]
  ! void            [ reduce using rule 124 (empty -> .) ]

    PROGRAMA_FUNC_AUX              shift and go to state 28
    TIPO                           shift and go to state 27
    PROGRAMA_FUNC                  shift and go to state 26
    VOIDFUNC                       shift and go to state 29
    FUNC                           shift and go to state 32
    empty                          shift and go to state 30

state 17

    (2) cambiarScope -> empty .

    main            reduce using rule 2 (cambiarScope -> empty .)
    int             reduce using rule 2 (cambiarScope -> empty .)
    float           reduce using rule 2 (cambiarScope -> empty .)
    bool            reduce using rule 2 (cambiarScope -> empty .)
    string          reduce using rule 2 (cambiarScope -> empty .)
    void            reduce using rule 2 (cambiarScope -> empty .)


state 18

    (14) VARS_LIST -> list hacerLista . TIPO VARS_LIST_AUX semicolon
    (25) TIPO -> . int cambioTipoActual
    (26) TIPO -> . float cambioTipoActual
    (27) TIPO -> . bool cambioTipoActual
    (28) TIPO -> . string cambioTipoActual

    int             shift and go to state 22
    float           shift and go to state 23
    bool            shift and go to state 24
    string          shift and go to state 25

    TIPO                           shift and go to state 33

state 19

    (15) hacerLista -> empty .

    int             reduce using rule 15 (hacerLista -> empty .)
    float           reduce using rule 15 (hacerLista -> empty .)
    bool            reduce using rule 15 (hacerLista -> empty .)
    string          reduce using rule 15 (hacerLista -> empty .)


state 20

    (11) VARS_AUX -> VARS_AUX VARS_LIST_VAR .

    list            reduce using rule 11 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    var             reduce using rule 11 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    if              reduce using rule 11 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    while           reduce using rule 11 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    cread           reduce using rule 11 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    cwrite          reduce using rule 11 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    left_par        reduce using rule 11 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    id              reduce using rule 11 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    right_cb        reduce using rule 11 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    return          reduce using rule 11 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    int             reduce using rule 11 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    float           reduce using rule 11 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    bool            reduce using rule 11 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    string          reduce using rule 11 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    void            reduce using rule 11 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    main            reduce using rule 11 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)


state 21

    (21) VARS_VAR -> var hacerVar TIPO . VARS_VAR_AUX semicolon
    (23) VARS_VAR_AUX -> . id agregarId agregarDicVar
    (24) VARS_VAR_AUX -> . VARS_VAR_AUX comma id agregarId agregarDicVar

    id              shift and go to state 35

    VARS_VAR_AUX                   shift and go to state 34

state 22

    (25) TIPO -> int . cambioTipoActual
    (29) cambioTipoActual -> . empty
    (124) empty -> .

    id              reduce using rule 124 (empty -> .)

    cambioTipoActual               shift and go to state 36
    empty                          shift and go to state 37

state 23

    (26) TIPO -> float . cambioTipoActual
    (29) cambioTipoActual -> . empty
    (124) empty -> .

    id              reduce using rule 124 (empty -> .)

    cambioTipoActual               shift and go to state 38
    empty                          shift and go to state 37

state 24

    (27) TIPO -> bool . cambioTipoActual
    (29) cambioTipoActual -> . empty
    (124) empty -> .

    id              reduce using rule 124 (empty -> .)

    cambioTipoActual               shift and go to state 39
    empty                          shift and go to state 37

state 25

    (28) TIPO -> string . cambioTipoActual
    (29) cambioTipoActual -> . empty
    (124) empty -> .

    id              reduce using rule 124 (empty -> .)

    cambioTipoActual               shift and go to state 40
    empty                          shift and go to state 37

state 26

    (1) PROGRAMA -> program id semicolon PROGRAMA_VARS cambiarScope PROGRAMA_FUNC . main CUERPO
    (6) PROGRAMA_FUNC -> PROGRAMA_FUNC . PROGRAMA_FUNC_AUX
    (7) PROGRAMA_FUNC_AUX -> . FUNC
    (8) PROGRAMA_FUNC_AUX -> . empty
    (50) FUNC -> . TIPO cambioFuncActual id agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO cambiarScope
    (51) FUNC -> . VOIDFUNC cambiarScope
    (124) empty -> .
    (25) TIPO -> . int cambioTipoActual
    (26) TIPO -> . float cambioTipoActual
    (27) TIPO -> . bool cambioTipoActual
    (28) TIPO -> . string cambioTipoActual
    (57) VOIDFUNC -> . void hacerVoid id agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb

  ! shift/reduce conflict for main resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for bool resolved as shift
  ! shift/reduce conflict for string resolved as shift
  ! shift/reduce conflict for void resolved as shift
    main            shift and go to state 42
    int             shift and go to state 22
    float           shift and go to state 23
    bool            shift and go to state 24
    string          shift and go to state 25
    void            shift and go to state 31

  ! main            [ reduce using rule 124 (empty -> .) ]
  ! int             [ reduce using rule 124 (empty -> .) ]
  ! float           [ reduce using rule 124 (empty -> .) ]
  ! bool            [ reduce using rule 124 (empty -> .) ]
  ! string          [ reduce using rule 124 (empty -> .) ]
  ! void            [ reduce using rule 124 (empty -> .) ]

    PROGRAMA_FUNC_AUX              shift and go to state 41
    TIPO                           shift and go to state 27
    VOIDFUNC                       shift and go to state 29
    FUNC                           shift and go to state 32
    empty                          shift and go to state 30

state 27

    (50) FUNC -> TIPO . cambioFuncActual id agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO cambiarScope
    (52) cambioFuncActual -> . empty
    (124) empty -> .

    id              reduce using rule 124 (empty -> .)

    cambioFuncActual               shift and go to state 43
    empty                          shift and go to state 44

state 28

    (5) PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .

    main            reduce using rule 5 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)
    int             reduce using rule 5 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)
    float           reduce using rule 5 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)
    bool            reduce using rule 5 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)
    string          reduce using rule 5 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)
    void            reduce using rule 5 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)


state 29

    (51) FUNC -> VOIDFUNC . cambiarScope
    (2) cambiarScope -> . empty
    (124) empty -> .

    main            reduce using rule 124 (empty -> .)
    int             reduce using rule 124 (empty -> .)
    float           reduce using rule 124 (empty -> .)
    bool            reduce using rule 124 (empty -> .)
    string          reduce using rule 124 (empty -> .)
    void            reduce using rule 124 (empty -> .)

    cambiarScope                   shift and go to state 45
    empty                          shift and go to state 17

state 30

    (8) PROGRAMA_FUNC_AUX -> empty .

    main            reduce using rule 8 (PROGRAMA_FUNC_AUX -> empty .)
    int             reduce using rule 8 (PROGRAMA_FUNC_AUX -> empty .)
    float           reduce using rule 8 (PROGRAMA_FUNC_AUX -> empty .)
    bool            reduce using rule 8 (PROGRAMA_FUNC_AUX -> empty .)
    string          reduce using rule 8 (PROGRAMA_FUNC_AUX -> empty .)
    void            reduce using rule 8 (PROGRAMA_FUNC_AUX -> empty .)


state 31

    (57) VOIDFUNC -> void . hacerVoid id agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb
    (58) hacerVoid -> . empty
    (124) empty -> .

    id              reduce using rule 124 (empty -> .)

    hacerVoid                      shift and go to state 46
    empty                          shift and go to state 47

state 32

    (7) PROGRAMA_FUNC_AUX -> FUNC .

    main            reduce using rule 7 (PROGRAMA_FUNC_AUX -> FUNC .)
    int             reduce using rule 7 (PROGRAMA_FUNC_AUX -> FUNC .)
    float           reduce using rule 7 (PROGRAMA_FUNC_AUX -> FUNC .)
    bool            reduce using rule 7 (PROGRAMA_FUNC_AUX -> FUNC .)
    string          reduce using rule 7 (PROGRAMA_FUNC_AUX -> FUNC .)
    void            reduce using rule 7 (PROGRAMA_FUNC_AUX -> FUNC .)


state 33

    (14) VARS_LIST -> list hacerLista TIPO . VARS_LIST_AUX semicolon
    (16) VARS_LIST_AUX -> . id agregarId left_sb cteInt agregarCteLista right_sb agregarDicVar
    (17) VARS_LIST_AUX -> . VARS_LIST_AUX comma id agregarId left_sb cteInt agregarCteLista right_sb agregarDicVar

    id              shift and go to state 49

    VARS_LIST_AUX                  shift and go to state 48

state 34

    (21) VARS_VAR -> var hacerVar TIPO VARS_VAR_AUX . semicolon
    (24) VARS_VAR_AUX -> VARS_VAR_AUX . comma id agregarId agregarDicVar

    semicolon       shift and go to state 50
    comma           shift and go to state 51


state 35

    (23) VARS_VAR_AUX -> id . agregarId agregarDicVar
    (18) agregarId -> . empty
    (124) empty -> .

    semicolon       reduce using rule 124 (empty -> .)
    comma           reduce using rule 124 (empty -> .)

    agregarId                      shift and go to state 52
    empty                          shift and go to state 53

state 36

    (25) TIPO -> int cambioTipoActual .

    id              reduce using rule 25 (TIPO -> int cambioTipoActual .)


state 37

    (29) cambioTipoActual -> empty .

    id              reduce using rule 29 (cambioTipoActual -> empty .)


state 38

    (26) TIPO -> float cambioTipoActual .

    id              reduce using rule 26 (TIPO -> float cambioTipoActual .)


state 39

    (27) TIPO -> bool cambioTipoActual .

    id              reduce using rule 27 (TIPO -> bool cambioTipoActual .)


state 40

    (28) TIPO -> string cambioTipoActual .

    id              reduce using rule 28 (TIPO -> string cambioTipoActual .)


state 41

    (6) PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .

    main            reduce using rule 6 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)
    int             reduce using rule 6 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)
    float           reduce using rule 6 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)
    bool            reduce using rule 6 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)
    string          reduce using rule 6 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)
    void            reduce using rule 6 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)


state 42

    (1) PROGRAMA -> program id semicolon PROGRAMA_VARS cambiarScope PROGRAMA_FUNC main . CUERPO
    (30) CUERPO -> . left_cb CUERPO_AUX right_cb

    left_cb         shift and go to state 55

    CUERPO                         shift and go to state 54

state 43

    (50) FUNC -> TIPO cambioFuncActual . id agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO cambiarScope

    id              shift and go to state 56


state 44

    (52) cambioFuncActual -> empty .

    id              reduce using rule 52 (cambioFuncActual -> empty .)


state 45

    (51) FUNC -> VOIDFUNC cambiarScope .

    main            reduce using rule 51 (FUNC -> VOIDFUNC cambiarScope .)
    int             reduce using rule 51 (FUNC -> VOIDFUNC cambiarScope .)
    float           reduce using rule 51 (FUNC -> VOIDFUNC cambiarScope .)
    bool            reduce using rule 51 (FUNC -> VOIDFUNC cambiarScope .)
    string          reduce using rule 51 (FUNC -> VOIDFUNC cambiarScope .)
    void            reduce using rule 51 (FUNC -> VOIDFUNC cambiarScope .)


state 46

    (57) VOIDFUNC -> void hacerVoid . id agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb

    id              shift and go to state 57


state 47

    (58) hacerVoid -> empty .

    id              reduce using rule 58 (hacerVoid -> empty .)


state 48

    (14) VARS_LIST -> list hacerLista TIPO VARS_LIST_AUX . semicolon
    (17) VARS_LIST_AUX -> VARS_LIST_AUX . comma id agregarId left_sb cteInt agregarCteLista right_sb agregarDicVar

    semicolon       shift and go to state 58
    comma           shift and go to state 59


state 49

    (16) VARS_LIST_AUX -> id . agregarId left_sb cteInt agregarCteLista right_sb agregarDicVar
    (18) agregarId -> . empty
    (124) empty -> .

    left_sb         reduce using rule 124 (empty -> .)

    agregarId                      shift and go to state 60
    empty                          shift and go to state 53

state 50

    (21) VARS_VAR -> var hacerVar TIPO VARS_VAR_AUX semicolon .

    list            reduce using rule 21 (VARS_VAR -> var hacerVar TIPO VARS_VAR_AUX semicolon .)
    var             reduce using rule 21 (VARS_VAR -> var hacerVar TIPO VARS_VAR_AUX semicolon .)
    int             reduce using rule 21 (VARS_VAR -> var hacerVar TIPO VARS_VAR_AUX semicolon .)
    float           reduce using rule 21 (VARS_VAR -> var hacerVar TIPO VARS_VAR_AUX semicolon .)
    bool            reduce using rule 21 (VARS_VAR -> var hacerVar TIPO VARS_VAR_AUX semicolon .)
    string          reduce using rule 21 (VARS_VAR -> var hacerVar TIPO VARS_VAR_AUX semicolon .)
    void            reduce using rule 21 (VARS_VAR -> var hacerVar TIPO VARS_VAR_AUX semicolon .)
    main            reduce using rule 21 (VARS_VAR -> var hacerVar TIPO VARS_VAR_AUX semicolon .)
    if              reduce using rule 21 (VARS_VAR -> var hacerVar TIPO VARS_VAR_AUX semicolon .)
    while           reduce using rule 21 (VARS_VAR -> var hacerVar TIPO VARS_VAR_AUX semicolon .)
    cread           reduce using rule 21 (VARS_VAR -> var hacerVar TIPO VARS_VAR_AUX semicolon .)
    cwrite          reduce using rule 21 (VARS_VAR -> var hacerVar TIPO VARS_VAR_AUX semicolon .)
    left_par        reduce using rule 21 (VARS_VAR -> var hacerVar TIPO VARS_VAR_AUX semicolon .)
    id              reduce using rule 21 (VARS_VAR -> var hacerVar TIPO VARS_VAR_AUX semicolon .)
    right_cb        reduce using rule 21 (VARS_VAR -> var hacerVar TIPO VARS_VAR_AUX semicolon .)
    return          reduce using rule 21 (VARS_VAR -> var hacerVar TIPO VARS_VAR_AUX semicolon .)


state 51

    (24) VARS_VAR_AUX -> VARS_VAR_AUX comma . id agregarId agregarDicVar

    id              shift and go to state 61


state 52

    (23) VARS_VAR_AUX -> id agregarId . agregarDicVar
    (20) agregarDicVar -> . empty
    (124) empty -> .

    semicolon       reduce using rule 124 (empty -> .)
    comma           reduce using rule 124 (empty -> .)

    empty                          shift and go to state 62
    agregarDicVar                  shift and go to state 63

state 53

    (18) agregarId -> empty .

    semicolon       reduce using rule 18 (agregarId -> empty .)
    comma           reduce using rule 18 (agregarId -> empty .)
    left_sb         reduce using rule 18 (agregarId -> empty .)


state 54

    (1) PROGRAMA -> program id semicolon PROGRAMA_VARS cambiarScope PROGRAMA_FUNC main CUERPO .

    $end            reduce using rule 1 (PROGRAMA -> program id semicolon PROGRAMA_VARS cambiarScope PROGRAMA_FUNC main CUERPO .)


state 55

    (30) CUERPO -> left_cb . CUERPO_AUX right_cb
    (31) CUERPO_AUX -> . CUERPO_VARS CUERPO_ESTATUTO
    (32) CUERPO_AUX -> . CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO
    (33) CUERPO_VARS -> . VARS
    (34) CUERPO_VARS -> . empty
    (9) VARS -> . VARS_AUX
    (124) empty -> .
    (10) VARS_AUX -> . VARS_LIST_VAR
    (11) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (12) VARS_LIST_VAR -> . VARS_LIST
    (13) VARS_LIST_VAR -> . VARS_VAR
    (14) VARS_LIST -> . list hacerLista TIPO VARS_LIST_AUX semicolon
    (21) VARS_VAR -> . var hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    if              reduce using rule 124 (empty -> .)
    while           reduce using rule 124 (empty -> .)
    cread           reduce using rule 124 (empty -> .)
    cwrite          reduce using rule 124 (empty -> .)
    left_par        reduce using rule 124 (empty -> .)
    id              reduce using rule 124 (empty -> .)
    right_cb        reduce using rule 124 (empty -> .)
    list            shift and go to state 10
    var             shift and go to state 5

  ! list            [ reduce using rule 124 (empty -> .) ]
  ! var             [ reduce using rule 124 (empty -> .) ]

    CUERPO_VARS                    shift and go to state 64
    VARS                           shift and go to state 65
    VARS_LIST                      shift and go to state 7
    VARS_LIST_VAR                  shift and go to state 8
    VARS_AUX                       shift and go to state 11
    CUERPO_AUX                     shift and go to state 67
    VARS_VAR                       shift and go to state 12
    empty                          shift and go to state 66

state 56

    (50) FUNC -> TIPO cambioFuncActual id . agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO cambiarScope
    (53) agregarIdFunc -> . empty
    (124) empty -> .

    left_par        reduce using rule 124 (empty -> .)

    empty                          shift and go to state 69
    agregarIdFunc                  shift and go to state 68

state 57

    (57) VOIDFUNC -> void hacerVoid id . agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb
    (53) agregarIdFunc -> . empty
    (124) empty -> .

    left_par        reduce using rule 124 (empty -> .)

    empty                          shift and go to state 69
    agregarIdFunc                  shift and go to state 70

state 58

    (14) VARS_LIST -> list hacerLista TIPO VARS_LIST_AUX semicolon .

    list            reduce using rule 14 (VARS_LIST -> list hacerLista TIPO VARS_LIST_AUX semicolon .)
    var             reduce using rule 14 (VARS_LIST -> list hacerLista TIPO VARS_LIST_AUX semicolon .)
    if              reduce using rule 14 (VARS_LIST -> list hacerLista TIPO VARS_LIST_AUX semicolon .)
    while           reduce using rule 14 (VARS_LIST -> list hacerLista TIPO VARS_LIST_AUX semicolon .)
    cread           reduce using rule 14 (VARS_LIST -> list hacerLista TIPO VARS_LIST_AUX semicolon .)
    cwrite          reduce using rule 14 (VARS_LIST -> list hacerLista TIPO VARS_LIST_AUX semicolon .)
    left_par        reduce using rule 14 (VARS_LIST -> list hacerLista TIPO VARS_LIST_AUX semicolon .)
    id              reduce using rule 14 (VARS_LIST -> list hacerLista TIPO VARS_LIST_AUX semicolon .)
    return          reduce using rule 14 (VARS_LIST -> list hacerLista TIPO VARS_LIST_AUX semicolon .)
    int             reduce using rule 14 (VARS_LIST -> list hacerLista TIPO VARS_LIST_AUX semicolon .)
    float           reduce using rule 14 (VARS_LIST -> list hacerLista TIPO VARS_LIST_AUX semicolon .)
    bool            reduce using rule 14 (VARS_LIST -> list hacerLista TIPO VARS_LIST_AUX semicolon .)
    string          reduce using rule 14 (VARS_LIST -> list hacerLista TIPO VARS_LIST_AUX semicolon .)
    void            reduce using rule 14 (VARS_LIST -> list hacerLista TIPO VARS_LIST_AUX semicolon .)
    main            reduce using rule 14 (VARS_LIST -> list hacerLista TIPO VARS_LIST_AUX semicolon .)
    right_cb        reduce using rule 14 (VARS_LIST -> list hacerLista TIPO VARS_LIST_AUX semicolon .)


state 59

    (17) VARS_LIST_AUX -> VARS_LIST_AUX comma . id agregarId left_sb cteInt agregarCteLista right_sb agregarDicVar

    id              shift and go to state 71


state 60

    (16) VARS_LIST_AUX -> id agregarId . left_sb cteInt agregarCteLista right_sb agregarDicVar

    left_sb         shift and go to state 72


state 61

    (24) VARS_VAR_AUX -> VARS_VAR_AUX comma id . agregarId agregarDicVar
    (18) agregarId -> . empty
    (124) empty -> .

    semicolon       reduce using rule 124 (empty -> .)
    comma           reduce using rule 124 (empty -> .)

    agregarId                      shift and go to state 73
    empty                          shift and go to state 53

state 62

    (20) agregarDicVar -> empty .

    semicolon       reduce using rule 20 (agregarDicVar -> empty .)
    comma           reduce using rule 20 (agregarDicVar -> empty .)


state 63

    (23) VARS_VAR_AUX -> id agregarId agregarDicVar .

    semicolon       reduce using rule 23 (VARS_VAR_AUX -> id agregarId agregarDicVar .)
    comma           reduce using rule 23 (VARS_VAR_AUX -> id agregarId agregarDicVar .)


state 64

    (31) CUERPO_AUX -> CUERPO_VARS . CUERPO_ESTATUTO
    (35) CUERPO_ESTATUTO -> . ESTATUTO
    (36) CUERPO_ESTATUTO -> . empty
    (61) ESTATUTO -> . ASIGNACION
    (62) ESTATUTO -> . CONDICION
    (63) ESTATUTO -> . CICLO
    (64) ESTATUTO -> . LECTURA
    (65) ESTATUTO -> . ESCRITURA
    (66) ESTATUTO -> . LLAMADA
    (124) empty -> .
    (121) ASIGNACION -> . ASIGNACION_AUX equals EXPRESION semicolon
    (67) CONDICION -> . if CONDICION_ELSEIF CONDICION_ELSE
    (72) CICLO -> . while left_par EXPRESION right_par CUERPO
    (73) LECTURA -> . cread left_par id right_par semicolon
    (74) ESCRITURA -> . cwrite left_par EXPRESION right_par semicolon
    (75) LLAMADA -> . left_par LLAMADA_EXPRESION right_par semicolon
    (122) ASIGNACION_AUX -> . id
    (123) ASIGNACION_AUX -> . LISTA
    (109) LISTA -> . id left_sb EXP right_sb

  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for cread resolved as shift
  ! shift/reduce conflict for cwrite resolved as shift
  ! shift/reduce conflict for left_par resolved as shift
  ! shift/reduce conflict for id resolved as shift
    right_cb        reduce using rule 124 (empty -> .)
    list            reduce using rule 124 (empty -> .)
    var             reduce using rule 124 (empty -> .)
    if              shift and go to state 77
    while           shift and go to state 89
    cread           shift and go to state 75
    cwrite          shift and go to state 81
    left_par        shift and go to state 87
    id              shift and go to state 80

  ! if              [ reduce using rule 124 (empty -> .) ]
  ! while           [ reduce using rule 124 (empty -> .) ]
  ! cread           [ reduce using rule 124 (empty -> .) ]
  ! cwrite          [ reduce using rule 124 (empty -> .) ]
  ! left_par        [ reduce using rule 124 (empty -> .) ]
  ! id              [ reduce using rule 124 (empty -> .) ]

    CICLO                          shift and go to state 74
    ASIGNACION                     shift and go to state 78
    ESTATUTO                       shift and go to state 79
    LECTURA                        shift and go to state 76
    LLAMADA                        shift and go to state 85
    CONDICION                      shift and go to state 86
    ASIGNACION_AUX                 shift and go to state 82
    LISTA                          shift and go to state 90
    CUERPO_ESTATUTO                shift and go to state 88
    empty                          shift and go to state 84
    ESCRITURA                      shift and go to state 83

state 65

    (33) CUERPO_VARS -> VARS .

    if              reduce using rule 33 (CUERPO_VARS -> VARS .)
    while           reduce using rule 33 (CUERPO_VARS -> VARS .)
    cread           reduce using rule 33 (CUERPO_VARS -> VARS .)
    cwrite          reduce using rule 33 (CUERPO_VARS -> VARS .)
    left_par        reduce using rule 33 (CUERPO_VARS -> VARS .)
    id              reduce using rule 33 (CUERPO_VARS -> VARS .)
    right_cb        reduce using rule 33 (CUERPO_VARS -> VARS .)
    list            reduce using rule 33 (CUERPO_VARS -> VARS .)
    var             reduce using rule 33 (CUERPO_VARS -> VARS .)


state 66

    (34) CUERPO_VARS -> empty .

    if              reduce using rule 34 (CUERPO_VARS -> empty .)
    while           reduce using rule 34 (CUERPO_VARS -> empty .)
    cread           reduce using rule 34 (CUERPO_VARS -> empty .)
    cwrite          reduce using rule 34 (CUERPO_VARS -> empty .)
    left_par        reduce using rule 34 (CUERPO_VARS -> empty .)
    id              reduce using rule 34 (CUERPO_VARS -> empty .)
    right_cb        reduce using rule 34 (CUERPO_VARS -> empty .)
    list            reduce using rule 34 (CUERPO_VARS -> empty .)
    var             reduce using rule 34 (CUERPO_VARS -> empty .)


state 67

    (30) CUERPO -> left_cb CUERPO_AUX . right_cb
    (32) CUERPO_AUX -> CUERPO_AUX . CUERPO_VARS CUERPO_ESTATUTO
    (33) CUERPO_VARS -> . VARS
    (34) CUERPO_VARS -> . empty
    (9) VARS -> . VARS_AUX
    (124) empty -> .
    (10) VARS_AUX -> . VARS_LIST_VAR
    (11) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (12) VARS_LIST_VAR -> . VARS_LIST
    (13) VARS_LIST_VAR -> . VARS_VAR
    (14) VARS_LIST -> . list hacerLista TIPO VARS_LIST_AUX semicolon
    (21) VARS_VAR -> . var hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for right_cb resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    right_cb        shift and go to state 92
    if              reduce using rule 124 (empty -> .)
    while           reduce using rule 124 (empty -> .)
    cread           reduce using rule 124 (empty -> .)
    cwrite          reduce using rule 124 (empty -> .)
    left_par        reduce using rule 124 (empty -> .)
    id              reduce using rule 124 (empty -> .)
    list            shift and go to state 10
    var             shift and go to state 5

  ! right_cb        [ reduce using rule 124 (empty -> .) ]
  ! list            [ reduce using rule 124 (empty -> .) ]
  ! var             [ reduce using rule 124 (empty -> .) ]

    CUERPO_VARS                    shift and go to state 91
    VARS                           shift and go to state 65
    VARS_LIST                      shift and go to state 7
    VARS_LIST_VAR                  shift and go to state 8
    VARS_AUX                       shift and go to state 11
    VARS_VAR                       shift and go to state 12
    empty                          shift and go to state 66

state 68

    (50) FUNC -> TIPO cambioFuncActual id agregarIdFunc . left_par FUNC_PARA right_par CUERPORETORNO cambiarScope

    left_par        shift and go to state 93


state 69

    (53) agregarIdFunc -> empty .

    left_par        reduce using rule 53 (agregarIdFunc -> empty .)


state 70

    (57) VOIDFUNC -> void hacerVoid id agregarIdFunc . left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb

    left_par        shift and go to state 94


state 71

    (17) VARS_LIST_AUX -> VARS_LIST_AUX comma id . agregarId left_sb cteInt agregarCteLista right_sb agregarDicVar
    (18) agregarId -> . empty
    (124) empty -> .

    left_sb         reduce using rule 124 (empty -> .)

    agregarId                      shift and go to state 95
    empty                          shift and go to state 53

state 72

    (16) VARS_LIST_AUX -> id agregarId left_sb . cteInt agregarCteLista right_sb agregarDicVar

    cteInt          shift and go to state 96


state 73

    (24) VARS_VAR_AUX -> VARS_VAR_AUX comma id agregarId . agregarDicVar
    (20) agregarDicVar -> . empty
    (124) empty -> .

    semicolon       reduce using rule 124 (empty -> .)
    comma           reduce using rule 124 (empty -> .)

    agregarDicVar                  shift and go to state 97
    empty                          shift and go to state 62

state 74

    (63) ESTATUTO -> CICLO .

    right_cb        reduce using rule 63 (ESTATUTO -> CICLO .)
    list            reduce using rule 63 (ESTATUTO -> CICLO .)
    var             reduce using rule 63 (ESTATUTO -> CICLO .)
    if              reduce using rule 63 (ESTATUTO -> CICLO .)
    while           reduce using rule 63 (ESTATUTO -> CICLO .)
    cread           reduce using rule 63 (ESTATUTO -> CICLO .)
    cwrite          reduce using rule 63 (ESTATUTO -> CICLO .)
    left_par        reduce using rule 63 (ESTATUTO -> CICLO .)
    id              reduce using rule 63 (ESTATUTO -> CICLO .)
    return          reduce using rule 63 (ESTATUTO -> CICLO .)


state 75

    (73) LECTURA -> cread . left_par id right_par semicolon

    left_par        shift and go to state 98


state 76

    (64) ESTATUTO -> LECTURA .

    right_cb        reduce using rule 64 (ESTATUTO -> LECTURA .)
    list            reduce using rule 64 (ESTATUTO -> LECTURA .)
    var             reduce using rule 64 (ESTATUTO -> LECTURA .)
    if              reduce using rule 64 (ESTATUTO -> LECTURA .)
    while           reduce using rule 64 (ESTATUTO -> LECTURA .)
    cread           reduce using rule 64 (ESTATUTO -> LECTURA .)
    cwrite          reduce using rule 64 (ESTATUTO -> LECTURA .)
    left_par        reduce using rule 64 (ESTATUTO -> LECTURA .)
    id              reduce using rule 64 (ESTATUTO -> LECTURA .)
    return          reduce using rule 64 (ESTATUTO -> LECTURA .)


state 77

    (67) CONDICION -> if . CONDICION_ELSEIF CONDICION_ELSE
    (68) CONDICION_ELSEIF -> . left_par EXPRESION right_par CUERPO
    (69) CONDICION_ELSEIF -> . CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO

    left_par        shift and go to state 99

    CONDICION_ELSEIF               shift and go to state 100

state 78

    (61) ESTATUTO -> ASIGNACION .

    right_cb        reduce using rule 61 (ESTATUTO -> ASIGNACION .)
    list            reduce using rule 61 (ESTATUTO -> ASIGNACION .)
    var             reduce using rule 61 (ESTATUTO -> ASIGNACION .)
    if              reduce using rule 61 (ESTATUTO -> ASIGNACION .)
    while           reduce using rule 61 (ESTATUTO -> ASIGNACION .)
    cread           reduce using rule 61 (ESTATUTO -> ASIGNACION .)
    cwrite          reduce using rule 61 (ESTATUTO -> ASIGNACION .)
    left_par        reduce using rule 61 (ESTATUTO -> ASIGNACION .)
    id              reduce using rule 61 (ESTATUTO -> ASIGNACION .)
    return          reduce using rule 61 (ESTATUTO -> ASIGNACION .)


state 79

    (35) CUERPO_ESTATUTO -> ESTATUTO .

    right_cb        reduce using rule 35 (CUERPO_ESTATUTO -> ESTATUTO .)
    list            reduce using rule 35 (CUERPO_ESTATUTO -> ESTATUTO .)
    var             reduce using rule 35 (CUERPO_ESTATUTO -> ESTATUTO .)
    if              reduce using rule 35 (CUERPO_ESTATUTO -> ESTATUTO .)
    while           reduce using rule 35 (CUERPO_ESTATUTO -> ESTATUTO .)
    cread           reduce using rule 35 (CUERPO_ESTATUTO -> ESTATUTO .)
    cwrite          reduce using rule 35 (CUERPO_ESTATUTO -> ESTATUTO .)
    left_par        reduce using rule 35 (CUERPO_ESTATUTO -> ESTATUTO .)
    id              reduce using rule 35 (CUERPO_ESTATUTO -> ESTATUTO .)


state 80

    (122) ASIGNACION_AUX -> id .
    (109) LISTA -> id . left_sb EXP right_sb

    equals          reduce using rule 122 (ASIGNACION_AUX -> id .)
    left_sb         shift and go to state 101


state 81

    (74) ESCRITURA -> cwrite . left_par EXPRESION right_par semicolon

    left_par        shift and go to state 102


state 82

    (121) ASIGNACION -> ASIGNACION_AUX . equals EXPRESION semicolon

    equals          shift and go to state 103


state 83

    (65) ESTATUTO -> ESCRITURA .

    right_cb        reduce using rule 65 (ESTATUTO -> ESCRITURA .)
    list            reduce using rule 65 (ESTATUTO -> ESCRITURA .)
    var             reduce using rule 65 (ESTATUTO -> ESCRITURA .)
    if              reduce using rule 65 (ESTATUTO -> ESCRITURA .)
    while           reduce using rule 65 (ESTATUTO -> ESCRITURA .)
    cread           reduce using rule 65 (ESTATUTO -> ESCRITURA .)
    cwrite          reduce using rule 65 (ESTATUTO -> ESCRITURA .)
    left_par        reduce using rule 65 (ESTATUTO -> ESCRITURA .)
    id              reduce using rule 65 (ESTATUTO -> ESCRITURA .)
    return          reduce using rule 65 (ESTATUTO -> ESCRITURA .)


state 84

    (36) CUERPO_ESTATUTO -> empty .

    right_cb        reduce using rule 36 (CUERPO_ESTATUTO -> empty .)
    list            reduce using rule 36 (CUERPO_ESTATUTO -> empty .)
    var             reduce using rule 36 (CUERPO_ESTATUTO -> empty .)
    if              reduce using rule 36 (CUERPO_ESTATUTO -> empty .)
    while           reduce using rule 36 (CUERPO_ESTATUTO -> empty .)
    cread           reduce using rule 36 (CUERPO_ESTATUTO -> empty .)
    cwrite          reduce using rule 36 (CUERPO_ESTATUTO -> empty .)
    left_par        reduce using rule 36 (CUERPO_ESTATUTO -> empty .)
    id              reduce using rule 36 (CUERPO_ESTATUTO -> empty .)


state 85

    (66) ESTATUTO -> LLAMADA .

    right_cb        reduce using rule 66 (ESTATUTO -> LLAMADA .)
    list            reduce using rule 66 (ESTATUTO -> LLAMADA .)
    var             reduce using rule 66 (ESTATUTO -> LLAMADA .)
    if              reduce using rule 66 (ESTATUTO -> LLAMADA .)
    while           reduce using rule 66 (ESTATUTO -> LLAMADA .)
    cread           reduce using rule 66 (ESTATUTO -> LLAMADA .)
    cwrite          reduce using rule 66 (ESTATUTO -> LLAMADA .)
    left_par        reduce using rule 66 (ESTATUTO -> LLAMADA .)
    id              reduce using rule 66 (ESTATUTO -> LLAMADA .)
    return          reduce using rule 66 (ESTATUTO -> LLAMADA .)


state 86

    (62) ESTATUTO -> CONDICION .

    right_cb        reduce using rule 62 (ESTATUTO -> CONDICION .)
    list            reduce using rule 62 (ESTATUTO -> CONDICION .)
    var             reduce using rule 62 (ESTATUTO -> CONDICION .)
    if              reduce using rule 62 (ESTATUTO -> CONDICION .)
    while           reduce using rule 62 (ESTATUTO -> CONDICION .)
    cread           reduce using rule 62 (ESTATUTO -> CONDICION .)
    cwrite          reduce using rule 62 (ESTATUTO -> CONDICION .)
    left_par        reduce using rule 62 (ESTATUTO -> CONDICION .)
    id              reduce using rule 62 (ESTATUTO -> CONDICION .)
    return          reduce using rule 62 (ESTATUTO -> CONDICION .)


state 87

    (75) LLAMADA -> left_par . LLAMADA_EXPRESION right_par semicolon
    (76) LLAMADA_EXPRESION -> . EXPRESION
    (77) LLAMADA_EXPRESION -> . LLAMADA_EXPRESION comma EXPRESION
    (78) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA EXPRESION_B
    (79) EXPRESION_NOT -> . not
    (80) EXPRESION_NOT -> . empty
    (124) empty -> .

    not             shift and go to state 107
    left_par        reduce using rule 124 (empty -> .)
    id              reduce using rule 124 (empty -> .)
    plus            reduce using rule 124 (empty -> .)
    minus           reduce using rule 124 (empty -> .)
    true            reduce using rule 124 (empty -> .)
    false           reduce using rule 124 (empty -> .)
    cteString       reduce using rule 124 (empty -> .)
    cteInt          reduce using rule 124 (empty -> .)
    cteFloat        reduce using rule 124 (empty -> .)

    EXPRESION                      shift and go to state 104
    EXPRESION_NOT                  shift and go to state 105
    LLAMADA_EXPRESION              shift and go to state 106
    empty                          shift and go to state 108

state 88

    (31) CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .

    right_cb        reduce using rule 31 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    list            reduce using rule 31 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    var             reduce using rule 31 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    if              reduce using rule 31 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    while           reduce using rule 31 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    cread           reduce using rule 31 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    cwrite          reduce using rule 31 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    left_par        reduce using rule 31 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    id              reduce using rule 31 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)


state 89

    (72) CICLO -> while . left_par EXPRESION right_par CUERPO

    left_par        shift and go to state 109


state 90

    (123) ASIGNACION_AUX -> LISTA .

    equals          reduce using rule 123 (ASIGNACION_AUX -> LISTA .)


state 91

    (32) CUERPO_AUX -> CUERPO_AUX CUERPO_VARS . CUERPO_ESTATUTO
    (35) CUERPO_ESTATUTO -> . ESTATUTO
    (36) CUERPO_ESTATUTO -> . empty
    (61) ESTATUTO -> . ASIGNACION
    (62) ESTATUTO -> . CONDICION
    (63) ESTATUTO -> . CICLO
    (64) ESTATUTO -> . LECTURA
    (65) ESTATUTO -> . ESCRITURA
    (66) ESTATUTO -> . LLAMADA
    (124) empty -> .
    (121) ASIGNACION -> . ASIGNACION_AUX equals EXPRESION semicolon
    (67) CONDICION -> . if CONDICION_ELSEIF CONDICION_ELSE
    (72) CICLO -> . while left_par EXPRESION right_par CUERPO
    (73) LECTURA -> . cread left_par id right_par semicolon
    (74) ESCRITURA -> . cwrite left_par EXPRESION right_par semicolon
    (75) LLAMADA -> . left_par LLAMADA_EXPRESION right_par semicolon
    (122) ASIGNACION_AUX -> . id
    (123) ASIGNACION_AUX -> . LISTA
    (109) LISTA -> . id left_sb EXP right_sb

  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for cread resolved as shift
  ! shift/reduce conflict for cwrite resolved as shift
  ! shift/reduce conflict for left_par resolved as shift
  ! shift/reduce conflict for id resolved as shift
    right_cb        reduce using rule 124 (empty -> .)
    list            reduce using rule 124 (empty -> .)
    var             reduce using rule 124 (empty -> .)
    if              shift and go to state 77
    while           shift and go to state 89
    cread           shift and go to state 75
    cwrite          shift and go to state 81
    left_par        shift and go to state 87
    id              shift and go to state 80

  ! if              [ reduce using rule 124 (empty -> .) ]
  ! while           [ reduce using rule 124 (empty -> .) ]
  ! cread           [ reduce using rule 124 (empty -> .) ]
  ! cwrite          [ reduce using rule 124 (empty -> .) ]
  ! left_par        [ reduce using rule 124 (empty -> .) ]
  ! id              [ reduce using rule 124 (empty -> .) ]

    CICLO                          shift and go to state 74
    ASIGNACION                     shift and go to state 78
    ESTATUTO                       shift and go to state 79
    LECTURA                        shift and go to state 76
    LLAMADA                        shift and go to state 85
    CONDICION                      shift and go to state 86
    ASIGNACION_AUX                 shift and go to state 82
    LISTA                          shift and go to state 90
    CUERPO_ESTATUTO                shift and go to state 110
    empty                          shift and go to state 84
    ESCRITURA                      shift and go to state 83

state 92

    (30) CUERPO -> left_cb CUERPO_AUX right_cb .

    right_cb        reduce using rule 30 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    list            reduce using rule 30 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    var             reduce using rule 30 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    if              reduce using rule 30 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    while           reduce using rule 30 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    cread           reduce using rule 30 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    cwrite          reduce using rule 30 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    left_par        reduce using rule 30 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    id              reduce using rule 30 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    return          reduce using rule 30 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    elseif          reduce using rule 30 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    else            reduce using rule 30 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    $end            reduce using rule 30 (CUERPO -> left_cb CUERPO_AUX right_cb .)


state 93

    (50) FUNC -> TIPO cambioFuncActual id agregarIdFunc left_par . FUNC_PARA right_par CUERPORETORNO cambiarScope
    (54) FUNC_PARA -> . TIPO id agregarParametro
    (55) FUNC_PARA -> . FUNC_PARA comma TIPO id agregarParametro
    (25) TIPO -> . int cambioTipoActual
    (26) TIPO -> . float cambioTipoActual
    (27) TIPO -> . bool cambioTipoActual
    (28) TIPO -> . string cambioTipoActual

    int             shift and go to state 22
    float           shift and go to state 23
    bool            shift and go to state 24
    string          shift and go to state 25

    TIPO                           shift and go to state 111
    FUNC_PARA                      shift and go to state 112

state 94

    (57) VOIDFUNC -> void hacerVoid id agregarIdFunc left_par . VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb
    (59) VOIDFUNC_PARA -> . TIPO id agregarParametro
    (60) VOIDFUNC_PARA -> . VOIDFUNC_PARA comma TIPO id agregarParametro
    (25) TIPO -> . int cambioTipoActual
    (26) TIPO -> . float cambioTipoActual
    (27) TIPO -> . bool cambioTipoActual
    (28) TIPO -> . string cambioTipoActual

    int             shift and go to state 22
    float           shift and go to state 23
    bool            shift and go to state 24
    string          shift and go to state 25

    TIPO                           shift and go to state 114
    VOIDFUNC_PARA                  shift and go to state 113

state 95

    (17) VARS_LIST_AUX -> VARS_LIST_AUX comma id agregarId . left_sb cteInt agregarCteLista right_sb agregarDicVar

    left_sb         shift and go to state 115


state 96

    (16) VARS_LIST_AUX -> id agregarId left_sb cteInt . agregarCteLista right_sb agregarDicVar
    (19) agregarCteLista -> . empty
    (124) empty -> .

    right_sb        reduce using rule 124 (empty -> .)

    empty                          shift and go to state 117
    agregarCteLista                shift and go to state 116

state 97

    (24) VARS_VAR_AUX -> VARS_VAR_AUX comma id agregarId agregarDicVar .

    semicolon       reduce using rule 24 (VARS_VAR_AUX -> VARS_VAR_AUX comma id agregarId agregarDicVar .)
    comma           reduce using rule 24 (VARS_VAR_AUX -> VARS_VAR_AUX comma id agregarId agregarDicVar .)


state 98

    (73) LECTURA -> cread left_par . id right_par semicolon

    id              shift and go to state 118


state 99

    (68) CONDICION_ELSEIF -> left_par . EXPRESION right_par CUERPO
    (78) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA EXPRESION_B
    (79) EXPRESION_NOT -> . not
    (80) EXPRESION_NOT -> . empty
    (124) empty -> .

    not             shift and go to state 107
    left_par        reduce using rule 124 (empty -> .)
    id              reduce using rule 124 (empty -> .)
    plus            reduce using rule 124 (empty -> .)
    minus           reduce using rule 124 (empty -> .)
    true            reduce using rule 124 (empty -> .)
    false           reduce using rule 124 (empty -> .)
    cteString       reduce using rule 124 (empty -> .)
    cteInt          reduce using rule 124 (empty -> .)
    cteFloat        reduce using rule 124 (empty -> .)

    EXPRESION                      shift and go to state 119
    EXPRESION_NOT                  shift and go to state 105
    empty                          shift and go to state 108

state 100

    (67) CONDICION -> if CONDICION_ELSEIF . CONDICION_ELSE
    (69) CONDICION_ELSEIF -> CONDICION_ELSEIF . elseif left_par EXPRESION right_par CUERPO
    (70) CONDICION_ELSE -> . else CUERPO
    (71) CONDICION_ELSE -> . empty
    (124) empty -> .

    elseif          shift and go to state 122
    else            shift and go to state 121
    right_cb        reduce using rule 124 (empty -> .)
    list            reduce using rule 124 (empty -> .)
    var             reduce using rule 124 (empty -> .)
    if              reduce using rule 124 (empty -> .)
    while           reduce using rule 124 (empty -> .)
    cread           reduce using rule 124 (empty -> .)
    cwrite          reduce using rule 124 (empty -> .)
    left_par        reduce using rule 124 (empty -> .)
    id              reduce using rule 124 (empty -> .)
    return          reduce using rule 124 (empty -> .)

    CONDICION_ELSE                 shift and go to state 120
    empty                          shift and go to state 123

state 101

    (109) LISTA -> id left_sb . EXP right_sb
    (92) EXP -> . TERMINO EXP_AUX
    (96) TERMINO -> . FACTOR TERMINO_AUX
    (100) FACTOR -> . left_par EXPRESION right_par
    (101) FACTOR -> . CONSTANTE
    (102) FACTOR -> . LISTA
    (103) FACTOR -> . FACTOR_AUX
    (110) CONSTANTE -> . NUMERICA
    (111) CONSTANTE -> . BOOLEANA
    (112) CONSTANTE -> . STRINGS
    (109) LISTA -> . id left_sb EXP right_sb
    (104) FACTOR_AUX -> . id
    (105) FACTOR_AUX -> . id LLAMADA_F
    (113) NUMERICA -> . NUMERICA_AUX
    (114) NUMERICA -> . plus NUMERICA_AUX
    (115) NUMERICA -> . minus NUMERICA_AUX
    (118) BOOLEANA -> . true
    (119) BOOLEANA -> . false
    (120) STRINGS -> . cteString
    (116) NUMERICA_AUX -> . cteInt
    (117) NUMERICA_AUX -> . cteFloat

    left_par        shift and go to state 133
    id              shift and go to state 128
    plus            shift and go to state 139
    minus           shift and go to state 142
    true            shift and go to state 134
    false           shift and go to state 124
    cteString       shift and go to state 132
    cteInt          shift and go to state 137
    cteFloat        shift and go to state 126

    NUMERICA_AUX                   shift and go to state 131
    CONSTANTE                      shift and go to state 136
    FACTOR_AUX                     shift and go to state 130
    STRINGS                        shift and go to state 135
    NUMERICA                       shift and go to state 138
    TERMINO                        shift and go to state 129
    EXP                            shift and go to state 125
    FACTOR                         shift and go to state 140
    LISTA                          shift and go to state 141
    BOOLEANA                       shift and go to state 127

state 102

    (74) ESCRITURA -> cwrite left_par . EXPRESION right_par semicolon
    (78) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA EXPRESION_B
    (79) EXPRESION_NOT -> . not
    (80) EXPRESION_NOT -> . empty
    (124) empty -> .

    not             shift and go to state 107
    left_par        reduce using rule 124 (empty -> .)
    id              reduce using rule 124 (empty -> .)
    plus            reduce using rule 124 (empty -> .)
    minus           reduce using rule 124 (empty -> .)
    true            reduce using rule 124 (empty -> .)
    false           reduce using rule 124 (empty -> .)
    cteString       reduce using rule 124 (empty -> .)
    cteInt          reduce using rule 124 (empty -> .)
    cteFloat        reduce using rule 124 (empty -> .)

    EXPRESION                      shift and go to state 143
    EXPRESION_NOT                  shift and go to state 105
    empty                          shift and go to state 108

state 103

    (121) ASIGNACION -> ASIGNACION_AUX equals . EXPRESION semicolon
    (78) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA EXPRESION_B
    (79) EXPRESION_NOT -> . not
    (80) EXPRESION_NOT -> . empty
    (124) empty -> .

    not             shift and go to state 107
    left_par        reduce using rule 124 (empty -> .)
    id              reduce using rule 124 (empty -> .)
    plus            reduce using rule 124 (empty -> .)
    minus           reduce using rule 124 (empty -> .)
    true            reduce using rule 124 (empty -> .)
    false           reduce using rule 124 (empty -> .)
    cteString       reduce using rule 124 (empty -> .)
    cteInt          reduce using rule 124 (empty -> .)
    cteFloat        reduce using rule 124 (empty -> .)

    EXPRESION                      shift and go to state 144
    EXPRESION_NOT                  shift and go to state 105
    empty                          shift and go to state 108

state 104

    (76) LLAMADA_EXPRESION -> EXPRESION .

    right_par       reduce using rule 76 (LLAMADA_EXPRESION -> EXPRESION .)
    comma           reduce using rule 76 (LLAMADA_EXPRESION -> EXPRESION .)


state 105

    (78) EXPRESION -> EXPRESION_NOT . EXPRESIONLOGICA EXPRESION_B
    (84) EXPRESIONLOGICA -> . EXP EXPRESIONLOGICA_AUX
    (92) EXP -> . TERMINO EXP_AUX
    (96) TERMINO -> . FACTOR TERMINO_AUX
    (100) FACTOR -> . left_par EXPRESION right_par
    (101) FACTOR -> . CONSTANTE
    (102) FACTOR -> . LISTA
    (103) FACTOR -> . FACTOR_AUX
    (110) CONSTANTE -> . NUMERICA
    (111) CONSTANTE -> . BOOLEANA
    (112) CONSTANTE -> . STRINGS
    (109) LISTA -> . id left_sb EXP right_sb
    (104) FACTOR_AUX -> . id
    (105) FACTOR_AUX -> . id LLAMADA_F
    (113) NUMERICA -> . NUMERICA_AUX
    (114) NUMERICA -> . plus NUMERICA_AUX
    (115) NUMERICA -> . minus NUMERICA_AUX
    (118) BOOLEANA -> . true
    (119) BOOLEANA -> . false
    (120) STRINGS -> . cteString
    (116) NUMERICA_AUX -> . cteInt
    (117) NUMERICA_AUX -> . cteFloat

    left_par        shift and go to state 133
    id              shift and go to state 128
    plus            shift and go to state 139
    minus           shift and go to state 142
    true            shift and go to state 134
    false           shift and go to state 124
    cteString       shift and go to state 132
    cteInt          shift and go to state 137
    cteFloat        shift and go to state 126

    EXPRESIONLOGICA                shift and go to state 145
    CONSTANTE                      shift and go to state 136
    FACTOR_AUX                     shift and go to state 130
    STRINGS                        shift and go to state 135
    NUMERICA                       shift and go to state 138
    TERMINO                        shift and go to state 129
    EXP                            shift and go to state 146
    FACTOR                         shift and go to state 140
    LISTA                          shift and go to state 141
    NUMERICA_AUX                   shift and go to state 131
    BOOLEANA                       shift and go to state 127

state 106

    (75) LLAMADA -> left_par LLAMADA_EXPRESION . right_par semicolon
    (77) LLAMADA_EXPRESION -> LLAMADA_EXPRESION . comma EXPRESION

    right_par       shift and go to state 148
    comma           shift and go to state 147


state 107

    (79) EXPRESION_NOT -> not .

    left_par        reduce using rule 79 (EXPRESION_NOT -> not .)
    id              reduce using rule 79 (EXPRESION_NOT -> not .)
    plus            reduce using rule 79 (EXPRESION_NOT -> not .)
    minus           reduce using rule 79 (EXPRESION_NOT -> not .)
    true            reduce using rule 79 (EXPRESION_NOT -> not .)
    false           reduce using rule 79 (EXPRESION_NOT -> not .)
    cteString       reduce using rule 79 (EXPRESION_NOT -> not .)
    cteInt          reduce using rule 79 (EXPRESION_NOT -> not .)
    cteFloat        reduce using rule 79 (EXPRESION_NOT -> not .)


state 108

    (80) EXPRESION_NOT -> empty .

    left_par        reduce using rule 80 (EXPRESION_NOT -> empty .)
    id              reduce using rule 80 (EXPRESION_NOT -> empty .)
    plus            reduce using rule 80 (EXPRESION_NOT -> empty .)
    minus           reduce using rule 80 (EXPRESION_NOT -> empty .)
    true            reduce using rule 80 (EXPRESION_NOT -> empty .)
    false           reduce using rule 80 (EXPRESION_NOT -> empty .)
    cteString       reduce using rule 80 (EXPRESION_NOT -> empty .)
    cteInt          reduce using rule 80 (EXPRESION_NOT -> empty .)
    cteFloat        reduce using rule 80 (EXPRESION_NOT -> empty .)


state 109

    (72) CICLO -> while left_par . EXPRESION right_par CUERPO
    (78) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA EXPRESION_B
    (79) EXPRESION_NOT -> . not
    (80) EXPRESION_NOT -> . empty
    (124) empty -> .

    not             shift and go to state 107
    left_par        reduce using rule 124 (empty -> .)
    id              reduce using rule 124 (empty -> .)
    plus            reduce using rule 124 (empty -> .)
    minus           reduce using rule 124 (empty -> .)
    true            reduce using rule 124 (empty -> .)
    false           reduce using rule 124 (empty -> .)
    cteString       reduce using rule 124 (empty -> .)
    cteInt          reduce using rule 124 (empty -> .)
    cteFloat        reduce using rule 124 (empty -> .)

    EXPRESION                      shift and go to state 149
    EXPRESION_NOT                  shift and go to state 105
    empty                          shift and go to state 108

state 110

    (32) CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .

    right_cb        reduce using rule 32 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    list            reduce using rule 32 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    var             reduce using rule 32 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    if              reduce using rule 32 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    while           reduce using rule 32 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    cread           reduce using rule 32 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    cwrite          reduce using rule 32 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    left_par        reduce using rule 32 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    id              reduce using rule 32 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)


state 111

    (54) FUNC_PARA -> TIPO . id agregarParametro

    id              shift and go to state 150


state 112

    (50) FUNC -> TIPO cambioFuncActual id agregarIdFunc left_par FUNC_PARA . right_par CUERPORETORNO cambiarScope
    (55) FUNC_PARA -> FUNC_PARA . comma TIPO id agregarParametro

    right_par       shift and go to state 151
    comma           shift and go to state 152


state 113

    (57) VOIDFUNC -> void hacerVoid id agregarIdFunc left_par VOIDFUNC_PARA . right_par left_cb CUERPOFUNC right_cb
    (60) VOIDFUNC_PARA -> VOIDFUNC_PARA . comma TIPO id agregarParametro

    right_par       shift and go to state 153
    comma           shift and go to state 154


state 114

    (59) VOIDFUNC_PARA -> TIPO . id agregarParametro

    id              shift and go to state 155


state 115

    (17) VARS_LIST_AUX -> VARS_LIST_AUX comma id agregarId left_sb . cteInt agregarCteLista right_sb agregarDicVar

    cteInt          shift and go to state 156


state 116

    (16) VARS_LIST_AUX -> id agregarId left_sb cteInt agregarCteLista . right_sb agregarDicVar

    right_sb        shift and go to state 157


state 117

    (19) agregarCteLista -> empty .

    right_sb        reduce using rule 19 (agregarCteLista -> empty .)


state 118

    (73) LECTURA -> cread left_par id . right_par semicolon

    right_par       shift and go to state 158


state 119

    (68) CONDICION_ELSEIF -> left_par EXPRESION . right_par CUERPO

    right_par       shift and go to state 159


state 120

    (67) CONDICION -> if CONDICION_ELSEIF CONDICION_ELSE .

    right_cb        reduce using rule 67 (CONDICION -> if CONDICION_ELSEIF CONDICION_ELSE .)
    list            reduce using rule 67 (CONDICION -> if CONDICION_ELSEIF CONDICION_ELSE .)
    var             reduce using rule 67 (CONDICION -> if CONDICION_ELSEIF CONDICION_ELSE .)
    if              reduce using rule 67 (CONDICION -> if CONDICION_ELSEIF CONDICION_ELSE .)
    while           reduce using rule 67 (CONDICION -> if CONDICION_ELSEIF CONDICION_ELSE .)
    cread           reduce using rule 67 (CONDICION -> if CONDICION_ELSEIF CONDICION_ELSE .)
    cwrite          reduce using rule 67 (CONDICION -> if CONDICION_ELSEIF CONDICION_ELSE .)
    left_par        reduce using rule 67 (CONDICION -> if CONDICION_ELSEIF CONDICION_ELSE .)
    id              reduce using rule 67 (CONDICION -> if CONDICION_ELSEIF CONDICION_ELSE .)
    return          reduce using rule 67 (CONDICION -> if CONDICION_ELSEIF CONDICION_ELSE .)


state 121

    (70) CONDICION_ELSE -> else . CUERPO
    (30) CUERPO -> . left_cb CUERPO_AUX right_cb

    left_cb         shift and go to state 55

    CUERPO                         shift and go to state 160

state 122

    (69) CONDICION_ELSEIF -> CONDICION_ELSEIF elseif . left_par EXPRESION right_par CUERPO

    left_par        shift and go to state 161


state 123

    (71) CONDICION_ELSE -> empty .

    right_cb        reduce using rule 71 (CONDICION_ELSE -> empty .)
    list            reduce using rule 71 (CONDICION_ELSE -> empty .)
    var             reduce using rule 71 (CONDICION_ELSE -> empty .)
    if              reduce using rule 71 (CONDICION_ELSE -> empty .)
    while           reduce using rule 71 (CONDICION_ELSE -> empty .)
    cread           reduce using rule 71 (CONDICION_ELSE -> empty .)
    cwrite          reduce using rule 71 (CONDICION_ELSE -> empty .)
    left_par        reduce using rule 71 (CONDICION_ELSE -> empty .)
    id              reduce using rule 71 (CONDICION_ELSE -> empty .)
    return          reduce using rule 71 (CONDICION_ELSE -> empty .)


state 124

    (119) BOOLEANA -> false .

    multiply        reduce using rule 119 (BOOLEANA -> false .)
    divide          reduce using rule 119 (BOOLEANA -> false .)
    plus            reduce using rule 119 (BOOLEANA -> false .)
    minus           reduce using rule 119 (BOOLEANA -> false .)
    right_sb        reduce using rule 119 (BOOLEANA -> false .)
    lt              reduce using rule 119 (BOOLEANA -> false .)
    gt              reduce using rule 119 (BOOLEANA -> false .)
    ne              reduce using rule 119 (BOOLEANA -> false .)
    ge              reduce using rule 119 (BOOLEANA -> false .)
    le              reduce using rule 119 (BOOLEANA -> false .)
    et              reduce using rule 119 (BOOLEANA -> false .)
    and             reduce using rule 119 (BOOLEANA -> false .)
    or              reduce using rule 119 (BOOLEANA -> false .)
    right_par       reduce using rule 119 (BOOLEANA -> false .)
    comma           reduce using rule 119 (BOOLEANA -> false .)
    semicolon       reduce using rule 119 (BOOLEANA -> false .)


state 125

    (109) LISTA -> id left_sb EXP . right_sb

    right_sb        shift and go to state 162


state 126

    (117) NUMERICA_AUX -> cteFloat .

    multiply        reduce using rule 117 (NUMERICA_AUX -> cteFloat .)
    divide          reduce using rule 117 (NUMERICA_AUX -> cteFloat .)
    plus            reduce using rule 117 (NUMERICA_AUX -> cteFloat .)
    minus           reduce using rule 117 (NUMERICA_AUX -> cteFloat .)
    right_sb        reduce using rule 117 (NUMERICA_AUX -> cteFloat .)
    lt              reduce using rule 117 (NUMERICA_AUX -> cteFloat .)
    gt              reduce using rule 117 (NUMERICA_AUX -> cteFloat .)
    ne              reduce using rule 117 (NUMERICA_AUX -> cteFloat .)
    ge              reduce using rule 117 (NUMERICA_AUX -> cteFloat .)
    le              reduce using rule 117 (NUMERICA_AUX -> cteFloat .)
    et              reduce using rule 117 (NUMERICA_AUX -> cteFloat .)
    and             reduce using rule 117 (NUMERICA_AUX -> cteFloat .)
    or              reduce using rule 117 (NUMERICA_AUX -> cteFloat .)
    right_par       reduce using rule 117 (NUMERICA_AUX -> cteFloat .)
    comma           reduce using rule 117 (NUMERICA_AUX -> cteFloat .)
    semicolon       reduce using rule 117 (NUMERICA_AUX -> cteFloat .)


state 127

    (111) CONSTANTE -> BOOLEANA .

    multiply        reduce using rule 111 (CONSTANTE -> BOOLEANA .)
    divide          reduce using rule 111 (CONSTANTE -> BOOLEANA .)
    plus            reduce using rule 111 (CONSTANTE -> BOOLEANA .)
    minus           reduce using rule 111 (CONSTANTE -> BOOLEANA .)
    and             reduce using rule 111 (CONSTANTE -> BOOLEANA .)
    or              reduce using rule 111 (CONSTANTE -> BOOLEANA .)
    right_par       reduce using rule 111 (CONSTANTE -> BOOLEANA .)
    comma           reduce using rule 111 (CONSTANTE -> BOOLEANA .)
    semicolon       reduce using rule 111 (CONSTANTE -> BOOLEANA .)
    lt              reduce using rule 111 (CONSTANTE -> BOOLEANA .)
    gt              reduce using rule 111 (CONSTANTE -> BOOLEANA .)
    ne              reduce using rule 111 (CONSTANTE -> BOOLEANA .)
    ge              reduce using rule 111 (CONSTANTE -> BOOLEANA .)
    le              reduce using rule 111 (CONSTANTE -> BOOLEANA .)
    et              reduce using rule 111 (CONSTANTE -> BOOLEANA .)
    right_sb        reduce using rule 111 (CONSTANTE -> BOOLEANA .)


state 128

    (109) LISTA -> id . left_sb EXP right_sb
    (104) FACTOR_AUX -> id .
    (105) FACTOR_AUX -> id . LLAMADA_F
    (106) LLAMADA_F -> . left_par EXPRESION LLAMADAF_AUX right_par

    left_sb         shift and go to state 101
    multiply        reduce using rule 104 (FACTOR_AUX -> id .)
    divide          reduce using rule 104 (FACTOR_AUX -> id .)
    plus            reduce using rule 104 (FACTOR_AUX -> id .)
    minus           reduce using rule 104 (FACTOR_AUX -> id .)
    right_sb        reduce using rule 104 (FACTOR_AUX -> id .)
    lt              reduce using rule 104 (FACTOR_AUX -> id .)
    gt              reduce using rule 104 (FACTOR_AUX -> id .)
    ne              reduce using rule 104 (FACTOR_AUX -> id .)
    ge              reduce using rule 104 (FACTOR_AUX -> id .)
    le              reduce using rule 104 (FACTOR_AUX -> id .)
    et              reduce using rule 104 (FACTOR_AUX -> id .)
    and             reduce using rule 104 (FACTOR_AUX -> id .)
    or              reduce using rule 104 (FACTOR_AUX -> id .)
    right_par       reduce using rule 104 (FACTOR_AUX -> id .)
    comma           reduce using rule 104 (FACTOR_AUX -> id .)
    semicolon       reduce using rule 104 (FACTOR_AUX -> id .)
    left_par        shift and go to state 163

    LLAMADA_F                      shift and go to state 164

state 129

    (92) EXP -> TERMINO . EXP_AUX
    (93) EXP_AUX -> . plus EXP
    (94) EXP_AUX -> . minus EXP
    (95) EXP_AUX -> . empty
    (124) empty -> .

    plus            shift and go to state 166
    minus           shift and go to state 167
    right_sb        reduce using rule 124 (empty -> .)
    lt              reduce using rule 124 (empty -> .)
    gt              reduce using rule 124 (empty -> .)
    ne              reduce using rule 124 (empty -> .)
    ge              reduce using rule 124 (empty -> .)
    le              reduce using rule 124 (empty -> .)
    et              reduce using rule 124 (empty -> .)
    and             reduce using rule 124 (empty -> .)
    or              reduce using rule 124 (empty -> .)
    right_par       reduce using rule 124 (empty -> .)
    comma           reduce using rule 124 (empty -> .)
    semicolon       reduce using rule 124 (empty -> .)

    empty                          shift and go to state 168
    EXP_AUX                        shift and go to state 165

state 130

    (103) FACTOR -> FACTOR_AUX .

    multiply        reduce using rule 103 (FACTOR -> FACTOR_AUX .)
    divide          reduce using rule 103 (FACTOR -> FACTOR_AUX .)
    plus            reduce using rule 103 (FACTOR -> FACTOR_AUX .)
    minus           reduce using rule 103 (FACTOR -> FACTOR_AUX .)
    lt              reduce using rule 103 (FACTOR -> FACTOR_AUX .)
    gt              reduce using rule 103 (FACTOR -> FACTOR_AUX .)
    ne              reduce using rule 103 (FACTOR -> FACTOR_AUX .)
    ge              reduce using rule 103 (FACTOR -> FACTOR_AUX .)
    le              reduce using rule 103 (FACTOR -> FACTOR_AUX .)
    et              reduce using rule 103 (FACTOR -> FACTOR_AUX .)
    right_par       reduce using rule 103 (FACTOR -> FACTOR_AUX .)
    comma           reduce using rule 103 (FACTOR -> FACTOR_AUX .)
    semicolon       reduce using rule 103 (FACTOR -> FACTOR_AUX .)
    and             reduce using rule 103 (FACTOR -> FACTOR_AUX .)
    or              reduce using rule 103 (FACTOR -> FACTOR_AUX .)
    right_sb        reduce using rule 103 (FACTOR -> FACTOR_AUX .)


state 131

    (113) NUMERICA -> NUMERICA_AUX .

    multiply        reduce using rule 113 (NUMERICA -> NUMERICA_AUX .)
    divide          reduce using rule 113 (NUMERICA -> NUMERICA_AUX .)
    plus            reduce using rule 113 (NUMERICA -> NUMERICA_AUX .)
    minus           reduce using rule 113 (NUMERICA -> NUMERICA_AUX .)
    and             reduce using rule 113 (NUMERICA -> NUMERICA_AUX .)
    or              reduce using rule 113 (NUMERICA -> NUMERICA_AUX .)
    right_par       reduce using rule 113 (NUMERICA -> NUMERICA_AUX .)
    comma           reduce using rule 113 (NUMERICA -> NUMERICA_AUX .)
    semicolon       reduce using rule 113 (NUMERICA -> NUMERICA_AUX .)
    lt              reduce using rule 113 (NUMERICA -> NUMERICA_AUX .)
    gt              reduce using rule 113 (NUMERICA -> NUMERICA_AUX .)
    ne              reduce using rule 113 (NUMERICA -> NUMERICA_AUX .)
    ge              reduce using rule 113 (NUMERICA -> NUMERICA_AUX .)
    le              reduce using rule 113 (NUMERICA -> NUMERICA_AUX .)
    et              reduce using rule 113 (NUMERICA -> NUMERICA_AUX .)
    right_sb        reduce using rule 113 (NUMERICA -> NUMERICA_AUX .)


state 132

    (120) STRINGS -> cteString .

    multiply        reduce using rule 120 (STRINGS -> cteString .)
    divide          reduce using rule 120 (STRINGS -> cteString .)
    plus            reduce using rule 120 (STRINGS -> cteString .)
    minus           reduce using rule 120 (STRINGS -> cteString .)
    and             reduce using rule 120 (STRINGS -> cteString .)
    or              reduce using rule 120 (STRINGS -> cteString .)
    right_par       reduce using rule 120 (STRINGS -> cteString .)
    comma           reduce using rule 120 (STRINGS -> cteString .)
    semicolon       reduce using rule 120 (STRINGS -> cteString .)
    lt              reduce using rule 120 (STRINGS -> cteString .)
    gt              reduce using rule 120 (STRINGS -> cteString .)
    ne              reduce using rule 120 (STRINGS -> cteString .)
    ge              reduce using rule 120 (STRINGS -> cteString .)
    le              reduce using rule 120 (STRINGS -> cteString .)
    et              reduce using rule 120 (STRINGS -> cteString .)
    right_sb        reduce using rule 120 (STRINGS -> cteString .)


state 133

    (100) FACTOR -> left_par . EXPRESION right_par
    (78) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA EXPRESION_B
    (79) EXPRESION_NOT -> . not
    (80) EXPRESION_NOT -> . empty
    (124) empty -> .

    not             shift and go to state 107
    left_par        reduce using rule 124 (empty -> .)
    id              reduce using rule 124 (empty -> .)
    plus            reduce using rule 124 (empty -> .)
    minus           reduce using rule 124 (empty -> .)
    true            reduce using rule 124 (empty -> .)
    false           reduce using rule 124 (empty -> .)
    cteString       reduce using rule 124 (empty -> .)
    cteInt          reduce using rule 124 (empty -> .)
    cteFloat        reduce using rule 124 (empty -> .)

    EXPRESION                      shift and go to state 169
    EXPRESION_NOT                  shift and go to state 105
    empty                          shift and go to state 108

state 134

    (118) BOOLEANA -> true .

    multiply        reduce using rule 118 (BOOLEANA -> true .)
    divide          reduce using rule 118 (BOOLEANA -> true .)
    plus            reduce using rule 118 (BOOLEANA -> true .)
    minus           reduce using rule 118 (BOOLEANA -> true .)
    right_sb        reduce using rule 118 (BOOLEANA -> true .)
    lt              reduce using rule 118 (BOOLEANA -> true .)
    gt              reduce using rule 118 (BOOLEANA -> true .)
    ne              reduce using rule 118 (BOOLEANA -> true .)
    ge              reduce using rule 118 (BOOLEANA -> true .)
    le              reduce using rule 118 (BOOLEANA -> true .)
    et              reduce using rule 118 (BOOLEANA -> true .)
    and             reduce using rule 118 (BOOLEANA -> true .)
    or              reduce using rule 118 (BOOLEANA -> true .)
    right_par       reduce using rule 118 (BOOLEANA -> true .)
    comma           reduce using rule 118 (BOOLEANA -> true .)
    semicolon       reduce using rule 118 (BOOLEANA -> true .)


state 135

    (112) CONSTANTE -> STRINGS .

    multiply        reduce using rule 112 (CONSTANTE -> STRINGS .)
    divide          reduce using rule 112 (CONSTANTE -> STRINGS .)
    plus            reduce using rule 112 (CONSTANTE -> STRINGS .)
    minus           reduce using rule 112 (CONSTANTE -> STRINGS .)
    and             reduce using rule 112 (CONSTANTE -> STRINGS .)
    or              reduce using rule 112 (CONSTANTE -> STRINGS .)
    right_par       reduce using rule 112 (CONSTANTE -> STRINGS .)
    comma           reduce using rule 112 (CONSTANTE -> STRINGS .)
    semicolon       reduce using rule 112 (CONSTANTE -> STRINGS .)
    lt              reduce using rule 112 (CONSTANTE -> STRINGS .)
    gt              reduce using rule 112 (CONSTANTE -> STRINGS .)
    ne              reduce using rule 112 (CONSTANTE -> STRINGS .)
    ge              reduce using rule 112 (CONSTANTE -> STRINGS .)
    le              reduce using rule 112 (CONSTANTE -> STRINGS .)
    et              reduce using rule 112 (CONSTANTE -> STRINGS .)
    right_sb        reduce using rule 112 (CONSTANTE -> STRINGS .)


state 136

    (101) FACTOR -> CONSTANTE .

    multiply        reduce using rule 101 (FACTOR -> CONSTANTE .)
    divide          reduce using rule 101 (FACTOR -> CONSTANTE .)
    plus            reduce using rule 101 (FACTOR -> CONSTANTE .)
    minus           reduce using rule 101 (FACTOR -> CONSTANTE .)
    lt              reduce using rule 101 (FACTOR -> CONSTANTE .)
    gt              reduce using rule 101 (FACTOR -> CONSTANTE .)
    ne              reduce using rule 101 (FACTOR -> CONSTANTE .)
    ge              reduce using rule 101 (FACTOR -> CONSTANTE .)
    le              reduce using rule 101 (FACTOR -> CONSTANTE .)
    et              reduce using rule 101 (FACTOR -> CONSTANTE .)
    right_par       reduce using rule 101 (FACTOR -> CONSTANTE .)
    comma           reduce using rule 101 (FACTOR -> CONSTANTE .)
    semicolon       reduce using rule 101 (FACTOR -> CONSTANTE .)
    and             reduce using rule 101 (FACTOR -> CONSTANTE .)
    or              reduce using rule 101 (FACTOR -> CONSTANTE .)
    right_sb        reduce using rule 101 (FACTOR -> CONSTANTE .)


state 137

    (116) NUMERICA_AUX -> cteInt .

    multiply        reduce using rule 116 (NUMERICA_AUX -> cteInt .)
    divide          reduce using rule 116 (NUMERICA_AUX -> cteInt .)
    plus            reduce using rule 116 (NUMERICA_AUX -> cteInt .)
    minus           reduce using rule 116 (NUMERICA_AUX -> cteInt .)
    right_sb        reduce using rule 116 (NUMERICA_AUX -> cteInt .)
    lt              reduce using rule 116 (NUMERICA_AUX -> cteInt .)
    gt              reduce using rule 116 (NUMERICA_AUX -> cteInt .)
    ne              reduce using rule 116 (NUMERICA_AUX -> cteInt .)
    ge              reduce using rule 116 (NUMERICA_AUX -> cteInt .)
    le              reduce using rule 116 (NUMERICA_AUX -> cteInt .)
    et              reduce using rule 116 (NUMERICA_AUX -> cteInt .)
    and             reduce using rule 116 (NUMERICA_AUX -> cteInt .)
    or              reduce using rule 116 (NUMERICA_AUX -> cteInt .)
    right_par       reduce using rule 116 (NUMERICA_AUX -> cteInt .)
    comma           reduce using rule 116 (NUMERICA_AUX -> cteInt .)
    semicolon       reduce using rule 116 (NUMERICA_AUX -> cteInt .)


state 138

    (110) CONSTANTE -> NUMERICA .

    multiply        reduce using rule 110 (CONSTANTE -> NUMERICA .)
    divide          reduce using rule 110 (CONSTANTE -> NUMERICA .)
    plus            reduce using rule 110 (CONSTANTE -> NUMERICA .)
    minus           reduce using rule 110 (CONSTANTE -> NUMERICA .)
    and             reduce using rule 110 (CONSTANTE -> NUMERICA .)
    or              reduce using rule 110 (CONSTANTE -> NUMERICA .)
    right_par       reduce using rule 110 (CONSTANTE -> NUMERICA .)
    comma           reduce using rule 110 (CONSTANTE -> NUMERICA .)
    semicolon       reduce using rule 110 (CONSTANTE -> NUMERICA .)
    lt              reduce using rule 110 (CONSTANTE -> NUMERICA .)
    gt              reduce using rule 110 (CONSTANTE -> NUMERICA .)
    ne              reduce using rule 110 (CONSTANTE -> NUMERICA .)
    ge              reduce using rule 110 (CONSTANTE -> NUMERICA .)
    le              reduce using rule 110 (CONSTANTE -> NUMERICA .)
    et              reduce using rule 110 (CONSTANTE -> NUMERICA .)
    right_sb        reduce using rule 110 (CONSTANTE -> NUMERICA .)


state 139

    (114) NUMERICA -> plus . NUMERICA_AUX
    (116) NUMERICA_AUX -> . cteInt
    (117) NUMERICA_AUX -> . cteFloat

    cteInt          shift and go to state 137
    cteFloat        shift and go to state 126

    NUMERICA_AUX                   shift and go to state 170

state 140

    (96) TERMINO -> FACTOR . TERMINO_AUX
    (97) TERMINO_AUX -> . multiply TERMINO
    (98) TERMINO_AUX -> . divide TERMINO
    (99) TERMINO_AUX -> . empty
    (124) empty -> .

    multiply        shift and go to state 173
    divide          shift and go to state 172
    plus            reduce using rule 124 (empty -> .)
    minus           reduce using rule 124 (empty -> .)
    right_sb        reduce using rule 124 (empty -> .)
    lt              reduce using rule 124 (empty -> .)
    gt              reduce using rule 124 (empty -> .)
    ne              reduce using rule 124 (empty -> .)
    ge              reduce using rule 124 (empty -> .)
    le              reduce using rule 124 (empty -> .)
    et              reduce using rule 124 (empty -> .)
    and             reduce using rule 124 (empty -> .)
    or              reduce using rule 124 (empty -> .)
    right_par       reduce using rule 124 (empty -> .)
    comma           reduce using rule 124 (empty -> .)
    semicolon       reduce using rule 124 (empty -> .)

    TERMINO_AUX                    shift and go to state 171
    empty                          shift and go to state 174

state 141

    (102) FACTOR -> LISTA .

    multiply        reduce using rule 102 (FACTOR -> LISTA .)
    divide          reduce using rule 102 (FACTOR -> LISTA .)
    plus            reduce using rule 102 (FACTOR -> LISTA .)
    minus           reduce using rule 102 (FACTOR -> LISTA .)
    lt              reduce using rule 102 (FACTOR -> LISTA .)
    gt              reduce using rule 102 (FACTOR -> LISTA .)
    ne              reduce using rule 102 (FACTOR -> LISTA .)
    ge              reduce using rule 102 (FACTOR -> LISTA .)
    le              reduce using rule 102 (FACTOR -> LISTA .)
    et              reduce using rule 102 (FACTOR -> LISTA .)
    right_par       reduce using rule 102 (FACTOR -> LISTA .)
    comma           reduce using rule 102 (FACTOR -> LISTA .)
    semicolon       reduce using rule 102 (FACTOR -> LISTA .)
    and             reduce using rule 102 (FACTOR -> LISTA .)
    or              reduce using rule 102 (FACTOR -> LISTA .)
    right_sb        reduce using rule 102 (FACTOR -> LISTA .)


state 142

    (115) NUMERICA -> minus . NUMERICA_AUX
    (116) NUMERICA_AUX -> . cteInt
    (117) NUMERICA_AUX -> . cteFloat

    cteInt          shift and go to state 137
    cteFloat        shift and go to state 126

    NUMERICA_AUX                   shift and go to state 175

state 143

    (74) ESCRITURA -> cwrite left_par EXPRESION . right_par semicolon

    right_par       shift and go to state 176


state 144

    (121) ASIGNACION -> ASIGNACION_AUX equals EXPRESION . semicolon

    semicolon       shift and go to state 177


state 145

    (78) EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA . EXPRESION_B
    (81) EXPRESION_B -> . and EXPRESION_NOT EXPRESIONLOGICA
    (82) EXPRESION_B -> . or EXPRESION_NOT EXPRESIONLOGICA
    (83) EXPRESION_B -> . empty
    (124) empty -> .

    and             shift and go to state 178
    or              shift and go to state 180
    right_par       reduce using rule 124 (empty -> .)
    comma           reduce using rule 124 (empty -> .)
    semicolon       reduce using rule 124 (empty -> .)

    EXPRESION_B                    shift and go to state 179
    empty                          shift and go to state 181

state 146

    (84) EXPRESIONLOGICA -> EXP . EXPRESIONLOGICA_AUX
    (85) EXPRESIONLOGICA_AUX -> . lt EXP
    (86) EXPRESIONLOGICA_AUX -> . gt EXP
    (87) EXPRESIONLOGICA_AUX -> . ne EXP
    (88) EXPRESIONLOGICA_AUX -> . ge EXP
    (89) EXPRESIONLOGICA_AUX -> . le EXP
    (90) EXPRESIONLOGICA_AUX -> . et EXP
    (91) EXPRESIONLOGICA_AUX -> . empty
    (124) empty -> .

    lt              shift and go to state 184
    gt              shift and go to state 182
    ne              shift and go to state 185
    ge              shift and go to state 186
    le              shift and go to state 187
    et              shift and go to state 188
    and             reduce using rule 124 (empty -> .)
    or              reduce using rule 124 (empty -> .)
    right_par       reduce using rule 124 (empty -> .)
    comma           reduce using rule 124 (empty -> .)
    semicolon       reduce using rule 124 (empty -> .)

    empty                          shift and go to state 189
    EXPRESIONLOGICA_AUX            shift and go to state 183

state 147

    (77) LLAMADA_EXPRESION -> LLAMADA_EXPRESION comma . EXPRESION
    (78) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA EXPRESION_B
    (79) EXPRESION_NOT -> . not
    (80) EXPRESION_NOT -> . empty
    (124) empty -> .

    not             shift and go to state 107
    left_par        reduce using rule 124 (empty -> .)
    id              reduce using rule 124 (empty -> .)
    plus            reduce using rule 124 (empty -> .)
    minus           reduce using rule 124 (empty -> .)
    true            reduce using rule 124 (empty -> .)
    false           reduce using rule 124 (empty -> .)
    cteString       reduce using rule 124 (empty -> .)
    cteInt          reduce using rule 124 (empty -> .)
    cteFloat        reduce using rule 124 (empty -> .)

    EXPRESION                      shift and go to state 190
    EXPRESION_NOT                  shift and go to state 105
    empty                          shift and go to state 108

state 148

    (75) LLAMADA -> left_par LLAMADA_EXPRESION right_par . semicolon

    semicolon       shift and go to state 191


state 149

    (72) CICLO -> while left_par EXPRESION . right_par CUERPO

    right_par       shift and go to state 192


state 150

    (54) FUNC_PARA -> TIPO id . agregarParametro
    (56) agregarParametro -> . empty
    (124) empty -> .

    right_par       reduce using rule 124 (empty -> .)
    comma           reduce using rule 124 (empty -> .)

    agregarParametro               shift and go to state 194
    empty                          shift and go to state 193

state 151

    (50) FUNC -> TIPO cambioFuncActual id agregarIdFunc left_par FUNC_PARA right_par . CUERPORETORNO cambiarScope
    (44) CUERPORETORNO -> . left_cb CUERPORETORNO_AUX right_cb

    left_cb         shift and go to state 196

    CUERPORETORNO                  shift and go to state 195

state 152

    (55) FUNC_PARA -> FUNC_PARA comma . TIPO id agregarParametro
    (25) TIPO -> . int cambioTipoActual
    (26) TIPO -> . float cambioTipoActual
    (27) TIPO -> . bool cambioTipoActual
    (28) TIPO -> . string cambioTipoActual

    int             shift and go to state 22
    float           shift and go to state 23
    bool            shift and go to state 24
    string          shift and go to state 25

    TIPO                           shift and go to state 197

state 153

    (57) VOIDFUNC -> void hacerVoid id agregarIdFunc left_par VOIDFUNC_PARA right_par . left_cb CUERPOFUNC right_cb

    left_cb         shift and go to state 198


state 154

    (60) VOIDFUNC_PARA -> VOIDFUNC_PARA comma . TIPO id agregarParametro
    (25) TIPO -> . int cambioTipoActual
    (26) TIPO -> . float cambioTipoActual
    (27) TIPO -> . bool cambioTipoActual
    (28) TIPO -> . string cambioTipoActual

    int             shift and go to state 22
    float           shift and go to state 23
    bool            shift and go to state 24
    string          shift and go to state 25

    TIPO                           shift and go to state 199

state 155

    (59) VOIDFUNC_PARA -> TIPO id . agregarParametro
    (56) agregarParametro -> . empty
    (124) empty -> .

    right_par       reduce using rule 124 (empty -> .)
    comma           reduce using rule 124 (empty -> .)

    agregarParametro               shift and go to state 200
    empty                          shift and go to state 193

state 156

    (17) VARS_LIST_AUX -> VARS_LIST_AUX comma id agregarId left_sb cteInt . agregarCteLista right_sb agregarDicVar
    (19) agregarCteLista -> . empty
    (124) empty -> .

    right_sb        reduce using rule 124 (empty -> .)

    empty                          shift and go to state 117
    agregarCteLista                shift and go to state 201

state 157

    (16) VARS_LIST_AUX -> id agregarId left_sb cteInt agregarCteLista right_sb . agregarDicVar
    (20) agregarDicVar -> . empty
    (124) empty -> .

    semicolon       reduce using rule 124 (empty -> .)
    comma           reduce using rule 124 (empty -> .)

    agregarDicVar                  shift and go to state 202
    empty                          shift and go to state 62

state 158

    (73) LECTURA -> cread left_par id right_par . semicolon

    semicolon       shift and go to state 203


state 159

    (68) CONDICION_ELSEIF -> left_par EXPRESION right_par . CUERPO
    (30) CUERPO -> . left_cb CUERPO_AUX right_cb

    left_cb         shift and go to state 55

    CUERPO                         shift and go to state 204

state 160

    (70) CONDICION_ELSE -> else CUERPO .

    right_cb        reduce using rule 70 (CONDICION_ELSE -> else CUERPO .)
    list            reduce using rule 70 (CONDICION_ELSE -> else CUERPO .)
    var             reduce using rule 70 (CONDICION_ELSE -> else CUERPO .)
    if              reduce using rule 70 (CONDICION_ELSE -> else CUERPO .)
    while           reduce using rule 70 (CONDICION_ELSE -> else CUERPO .)
    cread           reduce using rule 70 (CONDICION_ELSE -> else CUERPO .)
    cwrite          reduce using rule 70 (CONDICION_ELSE -> else CUERPO .)
    left_par        reduce using rule 70 (CONDICION_ELSE -> else CUERPO .)
    id              reduce using rule 70 (CONDICION_ELSE -> else CUERPO .)
    return          reduce using rule 70 (CONDICION_ELSE -> else CUERPO .)


state 161

    (69) CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par . EXPRESION right_par CUERPO
    (78) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA EXPRESION_B
    (79) EXPRESION_NOT -> . not
    (80) EXPRESION_NOT -> . empty
    (124) empty -> .

    not             shift and go to state 107
    left_par        reduce using rule 124 (empty -> .)
    id              reduce using rule 124 (empty -> .)
    plus            reduce using rule 124 (empty -> .)
    minus           reduce using rule 124 (empty -> .)
    true            reduce using rule 124 (empty -> .)
    false           reduce using rule 124 (empty -> .)
    cteString       reduce using rule 124 (empty -> .)
    cteInt          reduce using rule 124 (empty -> .)
    cteFloat        reduce using rule 124 (empty -> .)

    EXPRESION                      shift and go to state 205
    EXPRESION_NOT                  shift and go to state 105
    empty                          shift and go to state 108

state 162

    (109) LISTA -> id left_sb EXP right_sb .

    multiply        reduce using rule 109 (LISTA -> id left_sb EXP right_sb .)
    divide          reduce using rule 109 (LISTA -> id left_sb EXP right_sb .)
    plus            reduce using rule 109 (LISTA -> id left_sb EXP right_sb .)
    minus           reduce using rule 109 (LISTA -> id left_sb EXP right_sb .)
    and             reduce using rule 109 (LISTA -> id left_sb EXP right_sb .)
    or              reduce using rule 109 (LISTA -> id left_sb EXP right_sb .)
    right_par       reduce using rule 109 (LISTA -> id left_sb EXP right_sb .)
    comma           reduce using rule 109 (LISTA -> id left_sb EXP right_sb .)
    semicolon       reduce using rule 109 (LISTA -> id left_sb EXP right_sb .)
    equals          reduce using rule 109 (LISTA -> id left_sb EXP right_sb .)
    right_sb        reduce using rule 109 (LISTA -> id left_sb EXP right_sb .)
    lt              reduce using rule 109 (LISTA -> id left_sb EXP right_sb .)
    gt              reduce using rule 109 (LISTA -> id left_sb EXP right_sb .)
    ne              reduce using rule 109 (LISTA -> id left_sb EXP right_sb .)
    ge              reduce using rule 109 (LISTA -> id left_sb EXP right_sb .)
    le              reduce using rule 109 (LISTA -> id left_sb EXP right_sb .)
    et              reduce using rule 109 (LISTA -> id left_sb EXP right_sb .)


state 163

    (106) LLAMADA_F -> left_par . EXPRESION LLAMADAF_AUX right_par
    (78) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA EXPRESION_B
    (79) EXPRESION_NOT -> . not
    (80) EXPRESION_NOT -> . empty
    (124) empty -> .

    not             shift and go to state 107
    left_par        reduce using rule 124 (empty -> .)
    id              reduce using rule 124 (empty -> .)
    plus            reduce using rule 124 (empty -> .)
    minus           reduce using rule 124 (empty -> .)
    true            reduce using rule 124 (empty -> .)
    false           reduce using rule 124 (empty -> .)
    cteString       reduce using rule 124 (empty -> .)
    cteInt          reduce using rule 124 (empty -> .)
    cteFloat        reduce using rule 124 (empty -> .)

    EXPRESION                      shift and go to state 206
    EXPRESION_NOT                  shift and go to state 105
    empty                          shift and go to state 108

state 164

    (105) FACTOR_AUX -> id LLAMADA_F .

    multiply        reduce using rule 105 (FACTOR_AUX -> id LLAMADA_F .)
    divide          reduce using rule 105 (FACTOR_AUX -> id LLAMADA_F .)
    plus            reduce using rule 105 (FACTOR_AUX -> id LLAMADA_F .)
    minus           reduce using rule 105 (FACTOR_AUX -> id LLAMADA_F .)
    right_sb        reduce using rule 105 (FACTOR_AUX -> id LLAMADA_F .)
    lt              reduce using rule 105 (FACTOR_AUX -> id LLAMADA_F .)
    gt              reduce using rule 105 (FACTOR_AUX -> id LLAMADA_F .)
    ne              reduce using rule 105 (FACTOR_AUX -> id LLAMADA_F .)
    ge              reduce using rule 105 (FACTOR_AUX -> id LLAMADA_F .)
    le              reduce using rule 105 (FACTOR_AUX -> id LLAMADA_F .)
    et              reduce using rule 105 (FACTOR_AUX -> id LLAMADA_F .)
    and             reduce using rule 105 (FACTOR_AUX -> id LLAMADA_F .)
    or              reduce using rule 105 (FACTOR_AUX -> id LLAMADA_F .)
    right_par       reduce using rule 105 (FACTOR_AUX -> id LLAMADA_F .)
    comma           reduce using rule 105 (FACTOR_AUX -> id LLAMADA_F .)
    semicolon       reduce using rule 105 (FACTOR_AUX -> id LLAMADA_F .)


state 165

    (92) EXP -> TERMINO EXP_AUX .

    right_sb        reduce using rule 92 (EXP -> TERMINO EXP_AUX .)
    lt              reduce using rule 92 (EXP -> TERMINO EXP_AUX .)
    gt              reduce using rule 92 (EXP -> TERMINO EXP_AUX .)
    ne              reduce using rule 92 (EXP -> TERMINO EXP_AUX .)
    ge              reduce using rule 92 (EXP -> TERMINO EXP_AUX .)
    le              reduce using rule 92 (EXP -> TERMINO EXP_AUX .)
    et              reduce using rule 92 (EXP -> TERMINO EXP_AUX .)
    and             reduce using rule 92 (EXP -> TERMINO EXP_AUX .)
    or              reduce using rule 92 (EXP -> TERMINO EXP_AUX .)
    right_par       reduce using rule 92 (EXP -> TERMINO EXP_AUX .)
    comma           reduce using rule 92 (EXP -> TERMINO EXP_AUX .)
    semicolon       reduce using rule 92 (EXP -> TERMINO EXP_AUX .)


state 166

    (93) EXP_AUX -> plus . EXP
    (92) EXP -> . TERMINO EXP_AUX
    (96) TERMINO -> . FACTOR TERMINO_AUX
    (100) FACTOR -> . left_par EXPRESION right_par
    (101) FACTOR -> . CONSTANTE
    (102) FACTOR -> . LISTA
    (103) FACTOR -> . FACTOR_AUX
    (110) CONSTANTE -> . NUMERICA
    (111) CONSTANTE -> . BOOLEANA
    (112) CONSTANTE -> . STRINGS
    (109) LISTA -> . id left_sb EXP right_sb
    (104) FACTOR_AUX -> . id
    (105) FACTOR_AUX -> . id LLAMADA_F
    (113) NUMERICA -> . NUMERICA_AUX
    (114) NUMERICA -> . plus NUMERICA_AUX
    (115) NUMERICA -> . minus NUMERICA_AUX
    (118) BOOLEANA -> . true
    (119) BOOLEANA -> . false
    (120) STRINGS -> . cteString
    (116) NUMERICA_AUX -> . cteInt
    (117) NUMERICA_AUX -> . cteFloat

    left_par        shift and go to state 133
    id              shift and go to state 128
    plus            shift and go to state 139
    minus           shift and go to state 142
    true            shift and go to state 134
    false           shift and go to state 124
    cteString       shift and go to state 132
    cteInt          shift and go to state 137
    cteFloat        shift and go to state 126

    NUMERICA_AUX                   shift and go to state 131
    CONSTANTE                      shift and go to state 136
    FACTOR_AUX                     shift and go to state 130
    STRINGS                        shift and go to state 135
    NUMERICA                       shift and go to state 138
    TERMINO                        shift and go to state 129
    EXP                            shift and go to state 207
    FACTOR                         shift and go to state 140
    LISTA                          shift and go to state 141
    BOOLEANA                       shift and go to state 127

state 167

    (94) EXP_AUX -> minus . EXP
    (92) EXP -> . TERMINO EXP_AUX
    (96) TERMINO -> . FACTOR TERMINO_AUX
    (100) FACTOR -> . left_par EXPRESION right_par
    (101) FACTOR -> . CONSTANTE
    (102) FACTOR -> . LISTA
    (103) FACTOR -> . FACTOR_AUX
    (110) CONSTANTE -> . NUMERICA
    (111) CONSTANTE -> . BOOLEANA
    (112) CONSTANTE -> . STRINGS
    (109) LISTA -> . id left_sb EXP right_sb
    (104) FACTOR_AUX -> . id
    (105) FACTOR_AUX -> . id LLAMADA_F
    (113) NUMERICA -> . NUMERICA_AUX
    (114) NUMERICA -> . plus NUMERICA_AUX
    (115) NUMERICA -> . minus NUMERICA_AUX
    (118) BOOLEANA -> . true
    (119) BOOLEANA -> . false
    (120) STRINGS -> . cteString
    (116) NUMERICA_AUX -> . cteInt
    (117) NUMERICA_AUX -> . cteFloat

    left_par        shift and go to state 133
    id              shift and go to state 128
    plus            shift and go to state 139
    minus           shift and go to state 142
    true            shift and go to state 134
    false           shift and go to state 124
    cteString       shift and go to state 132
    cteInt          shift and go to state 137
    cteFloat        shift and go to state 126

    NUMERICA_AUX                   shift and go to state 131
    CONSTANTE                      shift and go to state 136
    FACTOR_AUX                     shift and go to state 130
    STRINGS                        shift and go to state 135
    NUMERICA                       shift and go to state 138
    TERMINO                        shift and go to state 129
    EXP                            shift and go to state 208
    FACTOR                         shift and go to state 140
    LISTA                          shift and go to state 141
    BOOLEANA                       shift and go to state 127

state 168

    (95) EXP_AUX -> empty .

    right_sb        reduce using rule 95 (EXP_AUX -> empty .)
    lt              reduce using rule 95 (EXP_AUX -> empty .)
    gt              reduce using rule 95 (EXP_AUX -> empty .)
    ne              reduce using rule 95 (EXP_AUX -> empty .)
    ge              reduce using rule 95 (EXP_AUX -> empty .)
    le              reduce using rule 95 (EXP_AUX -> empty .)
    et              reduce using rule 95 (EXP_AUX -> empty .)
    and             reduce using rule 95 (EXP_AUX -> empty .)
    or              reduce using rule 95 (EXP_AUX -> empty .)
    right_par       reduce using rule 95 (EXP_AUX -> empty .)
    comma           reduce using rule 95 (EXP_AUX -> empty .)
    semicolon       reduce using rule 95 (EXP_AUX -> empty .)


state 169

    (100) FACTOR -> left_par EXPRESION . right_par

    right_par       shift and go to state 209


state 170

    (114) NUMERICA -> plus NUMERICA_AUX .

    multiply        reduce using rule 114 (NUMERICA -> plus NUMERICA_AUX .)
    divide          reduce using rule 114 (NUMERICA -> plus NUMERICA_AUX .)
    plus            reduce using rule 114 (NUMERICA -> plus NUMERICA_AUX .)
    minus           reduce using rule 114 (NUMERICA -> plus NUMERICA_AUX .)
    and             reduce using rule 114 (NUMERICA -> plus NUMERICA_AUX .)
    or              reduce using rule 114 (NUMERICA -> plus NUMERICA_AUX .)
    right_par       reduce using rule 114 (NUMERICA -> plus NUMERICA_AUX .)
    comma           reduce using rule 114 (NUMERICA -> plus NUMERICA_AUX .)
    semicolon       reduce using rule 114 (NUMERICA -> plus NUMERICA_AUX .)
    lt              reduce using rule 114 (NUMERICA -> plus NUMERICA_AUX .)
    gt              reduce using rule 114 (NUMERICA -> plus NUMERICA_AUX .)
    ne              reduce using rule 114 (NUMERICA -> plus NUMERICA_AUX .)
    ge              reduce using rule 114 (NUMERICA -> plus NUMERICA_AUX .)
    le              reduce using rule 114 (NUMERICA -> plus NUMERICA_AUX .)
    et              reduce using rule 114 (NUMERICA -> plus NUMERICA_AUX .)
    right_sb        reduce using rule 114 (NUMERICA -> plus NUMERICA_AUX .)


state 171

    (96) TERMINO -> FACTOR TERMINO_AUX .

    plus            reduce using rule 96 (TERMINO -> FACTOR TERMINO_AUX .)
    minus           reduce using rule 96 (TERMINO -> FACTOR TERMINO_AUX .)
    right_sb        reduce using rule 96 (TERMINO -> FACTOR TERMINO_AUX .)
    and             reduce using rule 96 (TERMINO -> FACTOR TERMINO_AUX .)
    or              reduce using rule 96 (TERMINO -> FACTOR TERMINO_AUX .)
    right_par       reduce using rule 96 (TERMINO -> FACTOR TERMINO_AUX .)
    comma           reduce using rule 96 (TERMINO -> FACTOR TERMINO_AUX .)
    semicolon       reduce using rule 96 (TERMINO -> FACTOR TERMINO_AUX .)
    lt              reduce using rule 96 (TERMINO -> FACTOR TERMINO_AUX .)
    gt              reduce using rule 96 (TERMINO -> FACTOR TERMINO_AUX .)
    ne              reduce using rule 96 (TERMINO -> FACTOR TERMINO_AUX .)
    ge              reduce using rule 96 (TERMINO -> FACTOR TERMINO_AUX .)
    le              reduce using rule 96 (TERMINO -> FACTOR TERMINO_AUX .)
    et              reduce using rule 96 (TERMINO -> FACTOR TERMINO_AUX .)


state 172

    (98) TERMINO_AUX -> divide . TERMINO
    (96) TERMINO -> . FACTOR TERMINO_AUX
    (100) FACTOR -> . left_par EXPRESION right_par
    (101) FACTOR -> . CONSTANTE
    (102) FACTOR -> . LISTA
    (103) FACTOR -> . FACTOR_AUX
    (110) CONSTANTE -> . NUMERICA
    (111) CONSTANTE -> . BOOLEANA
    (112) CONSTANTE -> . STRINGS
    (109) LISTA -> . id left_sb EXP right_sb
    (104) FACTOR_AUX -> . id
    (105) FACTOR_AUX -> . id LLAMADA_F
    (113) NUMERICA -> . NUMERICA_AUX
    (114) NUMERICA -> . plus NUMERICA_AUX
    (115) NUMERICA -> . minus NUMERICA_AUX
    (118) BOOLEANA -> . true
    (119) BOOLEANA -> . false
    (120) STRINGS -> . cteString
    (116) NUMERICA_AUX -> . cteInt
    (117) NUMERICA_AUX -> . cteFloat

    left_par        shift and go to state 133
    id              shift and go to state 128
    plus            shift and go to state 139
    minus           shift and go to state 142
    true            shift and go to state 134
    false           shift and go to state 124
    cteString       shift and go to state 132
    cteInt          shift and go to state 137
    cteFloat        shift and go to state 126

    CONSTANTE                      shift and go to state 136
    FACTOR_AUX                     shift and go to state 130
    NUMERICA_AUX                   shift and go to state 131
    NUMERICA                       shift and go to state 138
    TERMINO                        shift and go to state 210
    FACTOR                         shift and go to state 140
    LISTA                          shift and go to state 141
    STRINGS                        shift and go to state 135
    BOOLEANA                       shift and go to state 127

state 173

    (97) TERMINO_AUX -> multiply . TERMINO
    (96) TERMINO -> . FACTOR TERMINO_AUX
    (100) FACTOR -> . left_par EXPRESION right_par
    (101) FACTOR -> . CONSTANTE
    (102) FACTOR -> . LISTA
    (103) FACTOR -> . FACTOR_AUX
    (110) CONSTANTE -> . NUMERICA
    (111) CONSTANTE -> . BOOLEANA
    (112) CONSTANTE -> . STRINGS
    (109) LISTA -> . id left_sb EXP right_sb
    (104) FACTOR_AUX -> . id
    (105) FACTOR_AUX -> . id LLAMADA_F
    (113) NUMERICA -> . NUMERICA_AUX
    (114) NUMERICA -> . plus NUMERICA_AUX
    (115) NUMERICA -> . minus NUMERICA_AUX
    (118) BOOLEANA -> . true
    (119) BOOLEANA -> . false
    (120) STRINGS -> . cteString
    (116) NUMERICA_AUX -> . cteInt
    (117) NUMERICA_AUX -> . cteFloat

    left_par        shift and go to state 133
    id              shift and go to state 128
    plus            shift and go to state 139
    minus           shift and go to state 142
    true            shift and go to state 134
    false           shift and go to state 124
    cteString       shift and go to state 132
    cteInt          shift and go to state 137
    cteFloat        shift and go to state 126

    CONSTANTE                      shift and go to state 136
    FACTOR_AUX                     shift and go to state 130
    NUMERICA_AUX                   shift and go to state 131
    NUMERICA                       shift and go to state 138
    TERMINO                        shift and go to state 211
    FACTOR                         shift and go to state 140
    LISTA                          shift and go to state 141
    STRINGS                        shift and go to state 135
    BOOLEANA                       shift and go to state 127

state 174

    (99) TERMINO_AUX -> empty .

    plus            reduce using rule 99 (TERMINO_AUX -> empty .)
    minus           reduce using rule 99 (TERMINO_AUX -> empty .)
    right_sb        reduce using rule 99 (TERMINO_AUX -> empty .)
    lt              reduce using rule 99 (TERMINO_AUX -> empty .)
    gt              reduce using rule 99 (TERMINO_AUX -> empty .)
    ne              reduce using rule 99 (TERMINO_AUX -> empty .)
    ge              reduce using rule 99 (TERMINO_AUX -> empty .)
    le              reduce using rule 99 (TERMINO_AUX -> empty .)
    et              reduce using rule 99 (TERMINO_AUX -> empty .)
    and             reduce using rule 99 (TERMINO_AUX -> empty .)
    or              reduce using rule 99 (TERMINO_AUX -> empty .)
    right_par       reduce using rule 99 (TERMINO_AUX -> empty .)
    comma           reduce using rule 99 (TERMINO_AUX -> empty .)
    semicolon       reduce using rule 99 (TERMINO_AUX -> empty .)


state 175

    (115) NUMERICA -> minus NUMERICA_AUX .

    multiply        reduce using rule 115 (NUMERICA -> minus NUMERICA_AUX .)
    divide          reduce using rule 115 (NUMERICA -> minus NUMERICA_AUX .)
    plus            reduce using rule 115 (NUMERICA -> minus NUMERICA_AUX .)
    minus           reduce using rule 115 (NUMERICA -> minus NUMERICA_AUX .)
    and             reduce using rule 115 (NUMERICA -> minus NUMERICA_AUX .)
    or              reduce using rule 115 (NUMERICA -> minus NUMERICA_AUX .)
    right_par       reduce using rule 115 (NUMERICA -> minus NUMERICA_AUX .)
    comma           reduce using rule 115 (NUMERICA -> minus NUMERICA_AUX .)
    semicolon       reduce using rule 115 (NUMERICA -> minus NUMERICA_AUX .)
    lt              reduce using rule 115 (NUMERICA -> minus NUMERICA_AUX .)
    gt              reduce using rule 115 (NUMERICA -> minus NUMERICA_AUX .)
    ne              reduce using rule 115 (NUMERICA -> minus NUMERICA_AUX .)
    ge              reduce using rule 115 (NUMERICA -> minus NUMERICA_AUX .)
    le              reduce using rule 115 (NUMERICA -> minus NUMERICA_AUX .)
    et              reduce using rule 115 (NUMERICA -> minus NUMERICA_AUX .)
    right_sb        reduce using rule 115 (NUMERICA -> minus NUMERICA_AUX .)


state 176

    (74) ESCRITURA -> cwrite left_par EXPRESION right_par . semicolon

    semicolon       shift and go to state 212


state 177

    (121) ASIGNACION -> ASIGNACION_AUX equals EXPRESION semicolon .

    list            reduce using rule 121 (ASIGNACION -> ASIGNACION_AUX equals EXPRESION semicolon .)
    var             reduce using rule 121 (ASIGNACION -> ASIGNACION_AUX equals EXPRESION semicolon .)
    if              reduce using rule 121 (ASIGNACION -> ASIGNACION_AUX equals EXPRESION semicolon .)
    while           reduce using rule 121 (ASIGNACION -> ASIGNACION_AUX equals EXPRESION semicolon .)
    cread           reduce using rule 121 (ASIGNACION -> ASIGNACION_AUX equals EXPRESION semicolon .)
    cwrite          reduce using rule 121 (ASIGNACION -> ASIGNACION_AUX equals EXPRESION semicolon .)
    left_par        reduce using rule 121 (ASIGNACION -> ASIGNACION_AUX equals EXPRESION semicolon .)
    id              reduce using rule 121 (ASIGNACION -> ASIGNACION_AUX equals EXPRESION semicolon .)
    return          reduce using rule 121 (ASIGNACION -> ASIGNACION_AUX equals EXPRESION semicolon .)
    right_cb        reduce using rule 121 (ASIGNACION -> ASIGNACION_AUX equals EXPRESION semicolon .)


state 178

    (81) EXPRESION_B -> and . EXPRESION_NOT EXPRESIONLOGICA
    (79) EXPRESION_NOT -> . not
    (80) EXPRESION_NOT -> . empty
    (124) empty -> .

    not             shift and go to state 107
    left_par        reduce using rule 124 (empty -> .)
    id              reduce using rule 124 (empty -> .)
    plus            reduce using rule 124 (empty -> .)
    minus           reduce using rule 124 (empty -> .)
    true            reduce using rule 124 (empty -> .)
    false           reduce using rule 124 (empty -> .)
    cteString       reduce using rule 124 (empty -> .)
    cteInt          reduce using rule 124 (empty -> .)
    cteFloat        reduce using rule 124 (empty -> .)

    EXPRESION_NOT                  shift and go to state 213
    empty                          shift and go to state 108

state 179

    (78) EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA EXPRESION_B .

    right_par       reduce using rule 78 (EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA EXPRESION_B .)
    comma           reduce using rule 78 (EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA EXPRESION_B .)
    semicolon       reduce using rule 78 (EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA EXPRESION_B .)


state 180

    (82) EXPRESION_B -> or . EXPRESION_NOT EXPRESIONLOGICA
    (79) EXPRESION_NOT -> . not
    (80) EXPRESION_NOT -> . empty
    (124) empty -> .

    not             shift and go to state 107
    left_par        reduce using rule 124 (empty -> .)
    id              reduce using rule 124 (empty -> .)
    plus            reduce using rule 124 (empty -> .)
    minus           reduce using rule 124 (empty -> .)
    true            reduce using rule 124 (empty -> .)
    false           reduce using rule 124 (empty -> .)
    cteString       reduce using rule 124 (empty -> .)
    cteInt          reduce using rule 124 (empty -> .)
    cteFloat        reduce using rule 124 (empty -> .)

    EXPRESION_NOT                  shift and go to state 214
    empty                          shift and go to state 108

state 181

    (83) EXPRESION_B -> empty .

    right_par       reduce using rule 83 (EXPRESION_B -> empty .)
    comma           reduce using rule 83 (EXPRESION_B -> empty .)
    semicolon       reduce using rule 83 (EXPRESION_B -> empty .)


state 182

    (86) EXPRESIONLOGICA_AUX -> gt . EXP
    (92) EXP -> . TERMINO EXP_AUX
    (96) TERMINO -> . FACTOR TERMINO_AUX
    (100) FACTOR -> . left_par EXPRESION right_par
    (101) FACTOR -> . CONSTANTE
    (102) FACTOR -> . LISTA
    (103) FACTOR -> . FACTOR_AUX
    (110) CONSTANTE -> . NUMERICA
    (111) CONSTANTE -> . BOOLEANA
    (112) CONSTANTE -> . STRINGS
    (109) LISTA -> . id left_sb EXP right_sb
    (104) FACTOR_AUX -> . id
    (105) FACTOR_AUX -> . id LLAMADA_F
    (113) NUMERICA -> . NUMERICA_AUX
    (114) NUMERICA -> . plus NUMERICA_AUX
    (115) NUMERICA -> . minus NUMERICA_AUX
    (118) BOOLEANA -> . true
    (119) BOOLEANA -> . false
    (120) STRINGS -> . cteString
    (116) NUMERICA_AUX -> . cteInt
    (117) NUMERICA_AUX -> . cteFloat

    left_par        shift and go to state 133
    id              shift and go to state 128
    plus            shift and go to state 139
    minus           shift and go to state 142
    true            shift and go to state 134
    false           shift and go to state 124
    cteString       shift and go to state 132
    cteInt          shift and go to state 137
    cteFloat        shift and go to state 126

    NUMERICA_AUX                   shift and go to state 131
    CONSTANTE                      shift and go to state 136
    FACTOR_AUX                     shift and go to state 130
    STRINGS                        shift and go to state 135
    NUMERICA                       shift and go to state 138
    TERMINO                        shift and go to state 129
    EXP                            shift and go to state 215
    FACTOR                         shift and go to state 140
    LISTA                          shift and go to state 141
    BOOLEANA                       shift and go to state 127

state 183

    (84) EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .

    and             reduce using rule 84 (EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .)
    or              reduce using rule 84 (EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .)
    right_par       reduce using rule 84 (EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .)
    comma           reduce using rule 84 (EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .)
    semicolon       reduce using rule 84 (EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .)


state 184

    (85) EXPRESIONLOGICA_AUX -> lt . EXP
    (92) EXP -> . TERMINO EXP_AUX
    (96) TERMINO -> . FACTOR TERMINO_AUX
    (100) FACTOR -> . left_par EXPRESION right_par
    (101) FACTOR -> . CONSTANTE
    (102) FACTOR -> . LISTA
    (103) FACTOR -> . FACTOR_AUX
    (110) CONSTANTE -> . NUMERICA
    (111) CONSTANTE -> . BOOLEANA
    (112) CONSTANTE -> . STRINGS
    (109) LISTA -> . id left_sb EXP right_sb
    (104) FACTOR_AUX -> . id
    (105) FACTOR_AUX -> . id LLAMADA_F
    (113) NUMERICA -> . NUMERICA_AUX
    (114) NUMERICA -> . plus NUMERICA_AUX
    (115) NUMERICA -> . minus NUMERICA_AUX
    (118) BOOLEANA -> . true
    (119) BOOLEANA -> . false
    (120) STRINGS -> . cteString
    (116) NUMERICA_AUX -> . cteInt
    (117) NUMERICA_AUX -> . cteFloat

    left_par        shift and go to state 133
    id              shift and go to state 128
    plus            shift and go to state 139
    minus           shift and go to state 142
    true            shift and go to state 134
    false           shift and go to state 124
    cteString       shift and go to state 132
    cteInt          shift and go to state 137
    cteFloat        shift and go to state 126

    NUMERICA_AUX                   shift and go to state 131
    CONSTANTE                      shift and go to state 136
    FACTOR_AUX                     shift and go to state 130
    STRINGS                        shift and go to state 135
    NUMERICA                       shift and go to state 138
    TERMINO                        shift and go to state 129
    EXP                            shift and go to state 216
    FACTOR                         shift and go to state 140
    LISTA                          shift and go to state 141
    BOOLEANA                       shift and go to state 127

state 185

    (87) EXPRESIONLOGICA_AUX -> ne . EXP
    (92) EXP -> . TERMINO EXP_AUX
    (96) TERMINO -> . FACTOR TERMINO_AUX
    (100) FACTOR -> . left_par EXPRESION right_par
    (101) FACTOR -> . CONSTANTE
    (102) FACTOR -> . LISTA
    (103) FACTOR -> . FACTOR_AUX
    (110) CONSTANTE -> . NUMERICA
    (111) CONSTANTE -> . BOOLEANA
    (112) CONSTANTE -> . STRINGS
    (109) LISTA -> . id left_sb EXP right_sb
    (104) FACTOR_AUX -> . id
    (105) FACTOR_AUX -> . id LLAMADA_F
    (113) NUMERICA -> . NUMERICA_AUX
    (114) NUMERICA -> . plus NUMERICA_AUX
    (115) NUMERICA -> . minus NUMERICA_AUX
    (118) BOOLEANA -> . true
    (119) BOOLEANA -> . false
    (120) STRINGS -> . cteString
    (116) NUMERICA_AUX -> . cteInt
    (117) NUMERICA_AUX -> . cteFloat

    left_par        shift and go to state 133
    id              shift and go to state 128
    plus            shift and go to state 139
    minus           shift and go to state 142
    true            shift and go to state 134
    false           shift and go to state 124
    cteString       shift and go to state 132
    cteInt          shift and go to state 137
    cteFloat        shift and go to state 126

    NUMERICA_AUX                   shift and go to state 131
    CONSTANTE                      shift and go to state 136
    FACTOR_AUX                     shift and go to state 130
    STRINGS                        shift and go to state 135
    NUMERICA                       shift and go to state 138
    TERMINO                        shift and go to state 129
    EXP                            shift and go to state 217
    FACTOR                         shift and go to state 140
    LISTA                          shift and go to state 141
    BOOLEANA                       shift and go to state 127

state 186

    (88) EXPRESIONLOGICA_AUX -> ge . EXP
    (92) EXP -> . TERMINO EXP_AUX
    (96) TERMINO -> . FACTOR TERMINO_AUX
    (100) FACTOR -> . left_par EXPRESION right_par
    (101) FACTOR -> . CONSTANTE
    (102) FACTOR -> . LISTA
    (103) FACTOR -> . FACTOR_AUX
    (110) CONSTANTE -> . NUMERICA
    (111) CONSTANTE -> . BOOLEANA
    (112) CONSTANTE -> . STRINGS
    (109) LISTA -> . id left_sb EXP right_sb
    (104) FACTOR_AUX -> . id
    (105) FACTOR_AUX -> . id LLAMADA_F
    (113) NUMERICA -> . NUMERICA_AUX
    (114) NUMERICA -> . plus NUMERICA_AUX
    (115) NUMERICA -> . minus NUMERICA_AUX
    (118) BOOLEANA -> . true
    (119) BOOLEANA -> . false
    (120) STRINGS -> . cteString
    (116) NUMERICA_AUX -> . cteInt
    (117) NUMERICA_AUX -> . cteFloat

    left_par        shift and go to state 133
    id              shift and go to state 128
    plus            shift and go to state 139
    minus           shift and go to state 142
    true            shift and go to state 134
    false           shift and go to state 124
    cteString       shift and go to state 132
    cteInt          shift and go to state 137
    cteFloat        shift and go to state 126

    NUMERICA_AUX                   shift and go to state 131
    CONSTANTE                      shift and go to state 136
    FACTOR_AUX                     shift and go to state 130
    STRINGS                        shift and go to state 135
    NUMERICA                       shift and go to state 138
    TERMINO                        shift and go to state 129
    EXP                            shift and go to state 218
    FACTOR                         shift and go to state 140
    LISTA                          shift and go to state 141
    BOOLEANA                       shift and go to state 127

state 187

    (89) EXPRESIONLOGICA_AUX -> le . EXP
    (92) EXP -> . TERMINO EXP_AUX
    (96) TERMINO -> . FACTOR TERMINO_AUX
    (100) FACTOR -> . left_par EXPRESION right_par
    (101) FACTOR -> . CONSTANTE
    (102) FACTOR -> . LISTA
    (103) FACTOR -> . FACTOR_AUX
    (110) CONSTANTE -> . NUMERICA
    (111) CONSTANTE -> . BOOLEANA
    (112) CONSTANTE -> . STRINGS
    (109) LISTA -> . id left_sb EXP right_sb
    (104) FACTOR_AUX -> . id
    (105) FACTOR_AUX -> . id LLAMADA_F
    (113) NUMERICA -> . NUMERICA_AUX
    (114) NUMERICA -> . plus NUMERICA_AUX
    (115) NUMERICA -> . minus NUMERICA_AUX
    (118) BOOLEANA -> . true
    (119) BOOLEANA -> . false
    (120) STRINGS -> . cteString
    (116) NUMERICA_AUX -> . cteInt
    (117) NUMERICA_AUX -> . cteFloat

    left_par        shift and go to state 133
    id              shift and go to state 128
    plus            shift and go to state 139
    minus           shift and go to state 142
    true            shift and go to state 134
    false           shift and go to state 124
    cteString       shift and go to state 132
    cteInt          shift and go to state 137
    cteFloat        shift and go to state 126

    NUMERICA_AUX                   shift and go to state 131
    CONSTANTE                      shift and go to state 136
    FACTOR_AUX                     shift and go to state 130
    STRINGS                        shift and go to state 135
    NUMERICA                       shift and go to state 138
    TERMINO                        shift and go to state 129
    EXP                            shift and go to state 219
    FACTOR                         shift and go to state 140
    LISTA                          shift and go to state 141
    BOOLEANA                       shift and go to state 127

state 188

    (90) EXPRESIONLOGICA_AUX -> et . EXP
    (92) EXP -> . TERMINO EXP_AUX
    (96) TERMINO -> . FACTOR TERMINO_AUX
    (100) FACTOR -> . left_par EXPRESION right_par
    (101) FACTOR -> . CONSTANTE
    (102) FACTOR -> . LISTA
    (103) FACTOR -> . FACTOR_AUX
    (110) CONSTANTE -> . NUMERICA
    (111) CONSTANTE -> . BOOLEANA
    (112) CONSTANTE -> . STRINGS
    (109) LISTA -> . id left_sb EXP right_sb
    (104) FACTOR_AUX -> . id
    (105) FACTOR_AUX -> . id LLAMADA_F
    (113) NUMERICA -> . NUMERICA_AUX
    (114) NUMERICA -> . plus NUMERICA_AUX
    (115) NUMERICA -> . minus NUMERICA_AUX
    (118) BOOLEANA -> . true
    (119) BOOLEANA -> . false
    (120) STRINGS -> . cteString
    (116) NUMERICA_AUX -> . cteInt
    (117) NUMERICA_AUX -> . cteFloat

    left_par        shift and go to state 133
    id              shift and go to state 128
    plus            shift and go to state 139
    minus           shift and go to state 142
    true            shift and go to state 134
    false           shift and go to state 124
    cteString       shift and go to state 132
    cteInt          shift and go to state 137
    cteFloat        shift and go to state 126

    NUMERICA_AUX                   shift and go to state 131
    CONSTANTE                      shift and go to state 136
    FACTOR_AUX                     shift and go to state 130
    STRINGS                        shift and go to state 135
    NUMERICA                       shift and go to state 138
    TERMINO                        shift and go to state 129
    EXP                            shift and go to state 220
    FACTOR                         shift and go to state 140
    LISTA                          shift and go to state 141
    BOOLEANA                       shift and go to state 127

state 189

    (91) EXPRESIONLOGICA_AUX -> empty .

    and             reduce using rule 91 (EXPRESIONLOGICA_AUX -> empty .)
    or              reduce using rule 91 (EXPRESIONLOGICA_AUX -> empty .)
    right_par       reduce using rule 91 (EXPRESIONLOGICA_AUX -> empty .)
    comma           reduce using rule 91 (EXPRESIONLOGICA_AUX -> empty .)
    semicolon       reduce using rule 91 (EXPRESIONLOGICA_AUX -> empty .)


state 190

    (77) LLAMADA_EXPRESION -> LLAMADA_EXPRESION comma EXPRESION .

    right_par       reduce using rule 77 (LLAMADA_EXPRESION -> LLAMADA_EXPRESION comma EXPRESION .)
    comma           reduce using rule 77 (LLAMADA_EXPRESION -> LLAMADA_EXPRESION comma EXPRESION .)


state 191

    (75) LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .

    right_cb        reduce using rule 75 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    list            reduce using rule 75 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    var             reduce using rule 75 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    if              reduce using rule 75 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    while           reduce using rule 75 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    cread           reduce using rule 75 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    cwrite          reduce using rule 75 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    left_par        reduce using rule 75 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    id              reduce using rule 75 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    return          reduce using rule 75 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)


state 192

    (72) CICLO -> while left_par EXPRESION right_par . CUERPO
    (30) CUERPO -> . left_cb CUERPO_AUX right_cb

    left_cb         shift and go to state 55

    CUERPO                         shift and go to state 221

state 193

    (56) agregarParametro -> empty .

    right_par       reduce using rule 56 (agregarParametro -> empty .)
    comma           reduce using rule 56 (agregarParametro -> empty .)


state 194

    (54) FUNC_PARA -> TIPO id agregarParametro .

    right_par       reduce using rule 54 (FUNC_PARA -> TIPO id agregarParametro .)
    comma           reduce using rule 54 (FUNC_PARA -> TIPO id agregarParametro .)


state 195

    (50) FUNC -> TIPO cambioFuncActual id agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO . cambiarScope
    (2) cambiarScope -> . empty
    (124) empty -> .

    main            reduce using rule 124 (empty -> .)
    int             reduce using rule 124 (empty -> .)
    float           reduce using rule 124 (empty -> .)
    bool            reduce using rule 124 (empty -> .)
    string          reduce using rule 124 (empty -> .)
    void            reduce using rule 124 (empty -> .)

    cambiarScope                   shift and go to state 222
    empty                          shift and go to state 17

state 196

    (44) CUERPORETORNO -> left_cb . CUERPORETORNO_AUX right_cb
    (45) CUERPORETORNO_AUX -> . CUERPORETORNO_CF_AUX RETORNO
    (46) CUERPORETORNO_AUX -> . CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO
    (47) CUERPORETORNO_CF_AUX -> . CUERPOFUNC
    (48) CUERPORETORNO_CF_AUX -> . empty
    (37) CUERPOFUNC -> . CUERPOFUNC_AUX
    (124) empty -> .
    (38) CUERPOFUNC_AUX -> . CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO
    (39) CUERPOFUNC_AUX -> . CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO
    (40) CUERPOFUNC_VARS -> . VARS
    (41) CUERPOFUNC_VARS -> . empty
    (9) VARS -> . VARS_AUX
    (10) VARS_AUX -> . VARS_LIST_VAR
    (11) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (12) VARS_LIST_VAR -> . VARS_LIST
    (13) VARS_LIST_VAR -> . VARS_VAR
    (14) VARS_LIST -> . list hacerLista TIPO VARS_LIST_AUX semicolon
    (21) VARS_VAR -> . var hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    return          reduce using rule 124 (empty -> .)
    if              reduce using rule 124 (empty -> .)
    while           reduce using rule 124 (empty -> .)
    cread           reduce using rule 124 (empty -> .)
    cwrite          reduce using rule 124 (empty -> .)
    left_par        reduce using rule 124 (empty -> .)
    id              reduce using rule 124 (empty -> .)
    list            shift and go to state 10
    var             shift and go to state 5

  ! list            [ reduce using rule 124 (empty -> .) ]
  ! var             [ reduce using rule 124 (empty -> .) ]

    CUERPORETORNO_CF_AUX           shift and go to state 225
    VARS                           shift and go to state 229
    CUERPOFUNC                     shift and go to state 226
    VARS_LIST                      shift and go to state 7
    VARS_LIST_VAR                  shift and go to state 8
    VARS_VAR                       shift and go to state 12
    VARS_AUX                       shift and go to state 11
    CUERPORETORNO_AUX              shift and go to state 223
    CUERPOFUNC_VARS                shift and go to state 227
    CUERPOFUNC_AUX                 shift and go to state 224
    empty                          shift and go to state 228

state 197

    (55) FUNC_PARA -> FUNC_PARA comma TIPO . id agregarParametro

    id              shift and go to state 230


state 198

    (57) VOIDFUNC -> void hacerVoid id agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb . CUERPOFUNC right_cb
    (37) CUERPOFUNC -> . CUERPOFUNC_AUX
    (38) CUERPOFUNC_AUX -> . CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO
    (39) CUERPOFUNC_AUX -> . CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO
    (40) CUERPOFUNC_VARS -> . VARS
    (41) CUERPOFUNC_VARS -> . empty
    (9) VARS -> . VARS_AUX
    (124) empty -> .
    (10) VARS_AUX -> . VARS_LIST_VAR
    (11) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (12) VARS_LIST_VAR -> . VARS_LIST
    (13) VARS_LIST_VAR -> . VARS_VAR
    (14) VARS_LIST -> . list hacerLista TIPO VARS_LIST_AUX semicolon
    (21) VARS_VAR -> . var hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    if              reduce using rule 124 (empty -> .)
    while           reduce using rule 124 (empty -> .)
    cread           reduce using rule 124 (empty -> .)
    cwrite          reduce using rule 124 (empty -> .)
    left_par        reduce using rule 124 (empty -> .)
    id              reduce using rule 124 (empty -> .)
    right_cb        reduce using rule 124 (empty -> .)
    list            shift and go to state 10
    var             shift and go to state 5

  ! list            [ reduce using rule 124 (empty -> .) ]
  ! var             [ reduce using rule 124 (empty -> .) ]

    VARS                           shift and go to state 229
    CUERPOFUNC                     shift and go to state 231
    VARS_LIST_VAR                  shift and go to state 8
    VARS_LIST                      shift and go to state 7
    VARS_AUX                       shift and go to state 11
    CUERPOFUNC_VARS                shift and go to state 227
    VARS_VAR                       shift and go to state 12
    CUERPOFUNC_AUX                 shift and go to state 224
    empty                          shift and go to state 232

state 199

    (60) VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO . id agregarParametro

    id              shift and go to state 233


state 200

    (59) VOIDFUNC_PARA -> TIPO id agregarParametro .

    right_par       reduce using rule 59 (VOIDFUNC_PARA -> TIPO id agregarParametro .)
    comma           reduce using rule 59 (VOIDFUNC_PARA -> TIPO id agregarParametro .)


state 201

    (17) VARS_LIST_AUX -> VARS_LIST_AUX comma id agregarId left_sb cteInt agregarCteLista . right_sb agregarDicVar

    right_sb        shift and go to state 234


state 202

    (16) VARS_LIST_AUX -> id agregarId left_sb cteInt agregarCteLista right_sb agregarDicVar .

    semicolon       reduce using rule 16 (VARS_LIST_AUX -> id agregarId left_sb cteInt agregarCteLista right_sb agregarDicVar .)
    comma           reduce using rule 16 (VARS_LIST_AUX -> id agregarId left_sb cteInt agregarCteLista right_sb agregarDicVar .)


state 203

    (73) LECTURA -> cread left_par id right_par semicolon .

    right_cb        reduce using rule 73 (LECTURA -> cread left_par id right_par semicolon .)
    list            reduce using rule 73 (LECTURA -> cread left_par id right_par semicolon .)
    var             reduce using rule 73 (LECTURA -> cread left_par id right_par semicolon .)
    if              reduce using rule 73 (LECTURA -> cread left_par id right_par semicolon .)
    while           reduce using rule 73 (LECTURA -> cread left_par id right_par semicolon .)
    cread           reduce using rule 73 (LECTURA -> cread left_par id right_par semicolon .)
    cwrite          reduce using rule 73 (LECTURA -> cread left_par id right_par semicolon .)
    left_par        reduce using rule 73 (LECTURA -> cread left_par id right_par semicolon .)
    id              reduce using rule 73 (LECTURA -> cread left_par id right_par semicolon .)
    return          reduce using rule 73 (LECTURA -> cread left_par id right_par semicolon .)


state 204

    (68) CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO .

    elseif          reduce using rule 68 (CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO .)
    else            reduce using rule 68 (CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO .)
    right_cb        reduce using rule 68 (CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO .)
    list            reduce using rule 68 (CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO .)
    var             reduce using rule 68 (CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO .)
    if              reduce using rule 68 (CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO .)
    while           reduce using rule 68 (CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO .)
    cread           reduce using rule 68 (CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO .)
    cwrite          reduce using rule 68 (CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO .)
    left_par        reduce using rule 68 (CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO .)
    id              reduce using rule 68 (CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO .)
    return          reduce using rule 68 (CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO .)


state 205

    (69) CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION . right_par CUERPO

    right_par       shift and go to state 235


state 206

    (106) LLAMADA_F -> left_par EXPRESION . LLAMADAF_AUX right_par
    (107) LLAMADAF_AUX -> . comma EXPRESION LLAMADAF_AUX
    (108) LLAMADAF_AUX -> . empty
    (124) empty -> .

    comma           shift and go to state 237
    right_par       reduce using rule 124 (empty -> .)

    LLAMADAF_AUX                   shift and go to state 236
    empty                          shift and go to state 238

state 207

    (93) EXP_AUX -> plus EXP .

    right_sb        reduce using rule 93 (EXP_AUX -> plus EXP .)
    lt              reduce using rule 93 (EXP_AUX -> plus EXP .)
    gt              reduce using rule 93 (EXP_AUX -> plus EXP .)
    ne              reduce using rule 93 (EXP_AUX -> plus EXP .)
    ge              reduce using rule 93 (EXP_AUX -> plus EXP .)
    le              reduce using rule 93 (EXP_AUX -> plus EXP .)
    et              reduce using rule 93 (EXP_AUX -> plus EXP .)
    and             reduce using rule 93 (EXP_AUX -> plus EXP .)
    or              reduce using rule 93 (EXP_AUX -> plus EXP .)
    right_par       reduce using rule 93 (EXP_AUX -> plus EXP .)
    comma           reduce using rule 93 (EXP_AUX -> plus EXP .)
    semicolon       reduce using rule 93 (EXP_AUX -> plus EXP .)


state 208

    (94) EXP_AUX -> minus EXP .

    right_sb        reduce using rule 94 (EXP_AUX -> minus EXP .)
    lt              reduce using rule 94 (EXP_AUX -> minus EXP .)
    gt              reduce using rule 94 (EXP_AUX -> minus EXP .)
    ne              reduce using rule 94 (EXP_AUX -> minus EXP .)
    ge              reduce using rule 94 (EXP_AUX -> minus EXP .)
    le              reduce using rule 94 (EXP_AUX -> minus EXP .)
    et              reduce using rule 94 (EXP_AUX -> minus EXP .)
    and             reduce using rule 94 (EXP_AUX -> minus EXP .)
    or              reduce using rule 94 (EXP_AUX -> minus EXP .)
    right_par       reduce using rule 94 (EXP_AUX -> minus EXP .)
    comma           reduce using rule 94 (EXP_AUX -> minus EXP .)
    semicolon       reduce using rule 94 (EXP_AUX -> minus EXP .)


state 209

    (100) FACTOR -> left_par EXPRESION right_par .

    multiply        reduce using rule 100 (FACTOR -> left_par EXPRESION right_par .)
    divide          reduce using rule 100 (FACTOR -> left_par EXPRESION right_par .)
    plus            reduce using rule 100 (FACTOR -> left_par EXPRESION right_par .)
    minus           reduce using rule 100 (FACTOR -> left_par EXPRESION right_par .)
    lt              reduce using rule 100 (FACTOR -> left_par EXPRESION right_par .)
    gt              reduce using rule 100 (FACTOR -> left_par EXPRESION right_par .)
    ne              reduce using rule 100 (FACTOR -> left_par EXPRESION right_par .)
    ge              reduce using rule 100 (FACTOR -> left_par EXPRESION right_par .)
    le              reduce using rule 100 (FACTOR -> left_par EXPRESION right_par .)
    et              reduce using rule 100 (FACTOR -> left_par EXPRESION right_par .)
    right_par       reduce using rule 100 (FACTOR -> left_par EXPRESION right_par .)
    comma           reduce using rule 100 (FACTOR -> left_par EXPRESION right_par .)
    semicolon       reduce using rule 100 (FACTOR -> left_par EXPRESION right_par .)
    and             reduce using rule 100 (FACTOR -> left_par EXPRESION right_par .)
    or              reduce using rule 100 (FACTOR -> left_par EXPRESION right_par .)
    right_sb        reduce using rule 100 (FACTOR -> left_par EXPRESION right_par .)


state 210

    (98) TERMINO_AUX -> divide TERMINO .

    plus            reduce using rule 98 (TERMINO_AUX -> divide TERMINO .)
    minus           reduce using rule 98 (TERMINO_AUX -> divide TERMINO .)
    right_sb        reduce using rule 98 (TERMINO_AUX -> divide TERMINO .)
    lt              reduce using rule 98 (TERMINO_AUX -> divide TERMINO .)
    gt              reduce using rule 98 (TERMINO_AUX -> divide TERMINO .)
    ne              reduce using rule 98 (TERMINO_AUX -> divide TERMINO .)
    ge              reduce using rule 98 (TERMINO_AUX -> divide TERMINO .)
    le              reduce using rule 98 (TERMINO_AUX -> divide TERMINO .)
    et              reduce using rule 98 (TERMINO_AUX -> divide TERMINO .)
    and             reduce using rule 98 (TERMINO_AUX -> divide TERMINO .)
    or              reduce using rule 98 (TERMINO_AUX -> divide TERMINO .)
    right_par       reduce using rule 98 (TERMINO_AUX -> divide TERMINO .)
    comma           reduce using rule 98 (TERMINO_AUX -> divide TERMINO .)
    semicolon       reduce using rule 98 (TERMINO_AUX -> divide TERMINO .)


state 211

    (97) TERMINO_AUX -> multiply TERMINO .

    plus            reduce using rule 97 (TERMINO_AUX -> multiply TERMINO .)
    minus           reduce using rule 97 (TERMINO_AUX -> multiply TERMINO .)
    right_sb        reduce using rule 97 (TERMINO_AUX -> multiply TERMINO .)
    lt              reduce using rule 97 (TERMINO_AUX -> multiply TERMINO .)
    gt              reduce using rule 97 (TERMINO_AUX -> multiply TERMINO .)
    ne              reduce using rule 97 (TERMINO_AUX -> multiply TERMINO .)
    ge              reduce using rule 97 (TERMINO_AUX -> multiply TERMINO .)
    le              reduce using rule 97 (TERMINO_AUX -> multiply TERMINO .)
    et              reduce using rule 97 (TERMINO_AUX -> multiply TERMINO .)
    and             reduce using rule 97 (TERMINO_AUX -> multiply TERMINO .)
    or              reduce using rule 97 (TERMINO_AUX -> multiply TERMINO .)
    right_par       reduce using rule 97 (TERMINO_AUX -> multiply TERMINO .)
    comma           reduce using rule 97 (TERMINO_AUX -> multiply TERMINO .)
    semicolon       reduce using rule 97 (TERMINO_AUX -> multiply TERMINO .)


state 212

    (74) ESCRITURA -> cwrite left_par EXPRESION right_par semicolon .

    list            reduce using rule 74 (ESCRITURA -> cwrite left_par EXPRESION right_par semicolon .)
    var             reduce using rule 74 (ESCRITURA -> cwrite left_par EXPRESION right_par semicolon .)
    if              reduce using rule 74 (ESCRITURA -> cwrite left_par EXPRESION right_par semicolon .)
    while           reduce using rule 74 (ESCRITURA -> cwrite left_par EXPRESION right_par semicolon .)
    cread           reduce using rule 74 (ESCRITURA -> cwrite left_par EXPRESION right_par semicolon .)
    cwrite          reduce using rule 74 (ESCRITURA -> cwrite left_par EXPRESION right_par semicolon .)
    left_par        reduce using rule 74 (ESCRITURA -> cwrite left_par EXPRESION right_par semicolon .)
    id              reduce using rule 74 (ESCRITURA -> cwrite left_par EXPRESION right_par semicolon .)
    return          reduce using rule 74 (ESCRITURA -> cwrite left_par EXPRESION right_par semicolon .)
    right_cb        reduce using rule 74 (ESCRITURA -> cwrite left_par EXPRESION right_par semicolon .)


state 213

    (81) EXPRESION_B -> and EXPRESION_NOT . EXPRESIONLOGICA
    (84) EXPRESIONLOGICA -> . EXP EXPRESIONLOGICA_AUX
    (92) EXP -> . TERMINO EXP_AUX
    (96) TERMINO -> . FACTOR TERMINO_AUX
    (100) FACTOR -> . left_par EXPRESION right_par
    (101) FACTOR -> . CONSTANTE
    (102) FACTOR -> . LISTA
    (103) FACTOR -> . FACTOR_AUX
    (110) CONSTANTE -> . NUMERICA
    (111) CONSTANTE -> . BOOLEANA
    (112) CONSTANTE -> . STRINGS
    (109) LISTA -> . id left_sb EXP right_sb
    (104) FACTOR_AUX -> . id
    (105) FACTOR_AUX -> . id LLAMADA_F
    (113) NUMERICA -> . NUMERICA_AUX
    (114) NUMERICA -> . plus NUMERICA_AUX
    (115) NUMERICA -> . minus NUMERICA_AUX
    (118) BOOLEANA -> . true
    (119) BOOLEANA -> . false
    (120) STRINGS -> . cteString
    (116) NUMERICA_AUX -> . cteInt
    (117) NUMERICA_AUX -> . cteFloat

    left_par        shift and go to state 133
    id              shift and go to state 128
    plus            shift and go to state 139
    minus           shift and go to state 142
    true            shift and go to state 134
    false           shift and go to state 124
    cteString       shift and go to state 132
    cteInt          shift and go to state 137
    cteFloat        shift and go to state 126

    EXPRESIONLOGICA                shift and go to state 239
    CONSTANTE                      shift and go to state 136
    FACTOR_AUX                     shift and go to state 130
    STRINGS                        shift and go to state 135
    NUMERICA                       shift and go to state 138
    TERMINO                        shift and go to state 129
    EXP                            shift and go to state 146
    FACTOR                         shift and go to state 140
    LISTA                          shift and go to state 141
    NUMERICA_AUX                   shift and go to state 131
    BOOLEANA                       shift and go to state 127

state 214

    (82) EXPRESION_B -> or EXPRESION_NOT . EXPRESIONLOGICA
    (84) EXPRESIONLOGICA -> . EXP EXPRESIONLOGICA_AUX
    (92) EXP -> . TERMINO EXP_AUX
    (96) TERMINO -> . FACTOR TERMINO_AUX
    (100) FACTOR -> . left_par EXPRESION right_par
    (101) FACTOR -> . CONSTANTE
    (102) FACTOR -> . LISTA
    (103) FACTOR -> . FACTOR_AUX
    (110) CONSTANTE -> . NUMERICA
    (111) CONSTANTE -> . BOOLEANA
    (112) CONSTANTE -> . STRINGS
    (109) LISTA -> . id left_sb EXP right_sb
    (104) FACTOR_AUX -> . id
    (105) FACTOR_AUX -> . id LLAMADA_F
    (113) NUMERICA -> . NUMERICA_AUX
    (114) NUMERICA -> . plus NUMERICA_AUX
    (115) NUMERICA -> . minus NUMERICA_AUX
    (118) BOOLEANA -> . true
    (119) BOOLEANA -> . false
    (120) STRINGS -> . cteString
    (116) NUMERICA_AUX -> . cteInt
    (117) NUMERICA_AUX -> . cteFloat

    left_par        shift and go to state 133
    id              shift and go to state 128
    plus            shift and go to state 139
    minus           shift and go to state 142
    true            shift and go to state 134
    false           shift and go to state 124
    cteString       shift and go to state 132
    cteInt          shift and go to state 137
    cteFloat        shift and go to state 126

    EXPRESIONLOGICA                shift and go to state 240
    CONSTANTE                      shift and go to state 136
    FACTOR_AUX                     shift and go to state 130
    STRINGS                        shift and go to state 135
    NUMERICA                       shift and go to state 138
    TERMINO                        shift and go to state 129
    EXP                            shift and go to state 146
    FACTOR                         shift and go to state 140
    LISTA                          shift and go to state 141
    NUMERICA_AUX                   shift and go to state 131
    BOOLEANA                       shift and go to state 127

state 215

    (86) EXPRESIONLOGICA_AUX -> gt EXP .

    and             reduce using rule 86 (EXPRESIONLOGICA_AUX -> gt EXP .)
    or              reduce using rule 86 (EXPRESIONLOGICA_AUX -> gt EXP .)
    right_par       reduce using rule 86 (EXPRESIONLOGICA_AUX -> gt EXP .)
    comma           reduce using rule 86 (EXPRESIONLOGICA_AUX -> gt EXP .)
    semicolon       reduce using rule 86 (EXPRESIONLOGICA_AUX -> gt EXP .)


state 216

    (85) EXPRESIONLOGICA_AUX -> lt EXP .

    and             reduce using rule 85 (EXPRESIONLOGICA_AUX -> lt EXP .)
    or              reduce using rule 85 (EXPRESIONLOGICA_AUX -> lt EXP .)
    right_par       reduce using rule 85 (EXPRESIONLOGICA_AUX -> lt EXP .)
    comma           reduce using rule 85 (EXPRESIONLOGICA_AUX -> lt EXP .)
    semicolon       reduce using rule 85 (EXPRESIONLOGICA_AUX -> lt EXP .)


state 217

    (87) EXPRESIONLOGICA_AUX -> ne EXP .

    and             reduce using rule 87 (EXPRESIONLOGICA_AUX -> ne EXP .)
    or              reduce using rule 87 (EXPRESIONLOGICA_AUX -> ne EXP .)
    right_par       reduce using rule 87 (EXPRESIONLOGICA_AUX -> ne EXP .)
    comma           reduce using rule 87 (EXPRESIONLOGICA_AUX -> ne EXP .)
    semicolon       reduce using rule 87 (EXPRESIONLOGICA_AUX -> ne EXP .)


state 218

    (88) EXPRESIONLOGICA_AUX -> ge EXP .

    and             reduce using rule 88 (EXPRESIONLOGICA_AUX -> ge EXP .)
    or              reduce using rule 88 (EXPRESIONLOGICA_AUX -> ge EXP .)
    right_par       reduce using rule 88 (EXPRESIONLOGICA_AUX -> ge EXP .)
    comma           reduce using rule 88 (EXPRESIONLOGICA_AUX -> ge EXP .)
    semicolon       reduce using rule 88 (EXPRESIONLOGICA_AUX -> ge EXP .)


state 219

    (89) EXPRESIONLOGICA_AUX -> le EXP .

    and             reduce using rule 89 (EXPRESIONLOGICA_AUX -> le EXP .)
    or              reduce using rule 89 (EXPRESIONLOGICA_AUX -> le EXP .)
    right_par       reduce using rule 89 (EXPRESIONLOGICA_AUX -> le EXP .)
    comma           reduce using rule 89 (EXPRESIONLOGICA_AUX -> le EXP .)
    semicolon       reduce using rule 89 (EXPRESIONLOGICA_AUX -> le EXP .)


state 220

    (90) EXPRESIONLOGICA_AUX -> et EXP .

    and             reduce using rule 90 (EXPRESIONLOGICA_AUX -> et EXP .)
    or              reduce using rule 90 (EXPRESIONLOGICA_AUX -> et EXP .)
    right_par       reduce using rule 90 (EXPRESIONLOGICA_AUX -> et EXP .)
    comma           reduce using rule 90 (EXPRESIONLOGICA_AUX -> et EXP .)
    semicolon       reduce using rule 90 (EXPRESIONLOGICA_AUX -> et EXP .)


state 221

    (72) CICLO -> while left_par EXPRESION right_par CUERPO .

    list            reduce using rule 72 (CICLO -> while left_par EXPRESION right_par CUERPO .)
    var             reduce using rule 72 (CICLO -> while left_par EXPRESION right_par CUERPO .)
    if              reduce using rule 72 (CICLO -> while left_par EXPRESION right_par CUERPO .)
    while           reduce using rule 72 (CICLO -> while left_par EXPRESION right_par CUERPO .)
    cread           reduce using rule 72 (CICLO -> while left_par EXPRESION right_par CUERPO .)
    cwrite          reduce using rule 72 (CICLO -> while left_par EXPRESION right_par CUERPO .)
    left_par        reduce using rule 72 (CICLO -> while left_par EXPRESION right_par CUERPO .)
    id              reduce using rule 72 (CICLO -> while left_par EXPRESION right_par CUERPO .)
    return          reduce using rule 72 (CICLO -> while left_par EXPRESION right_par CUERPO .)
    right_cb        reduce using rule 72 (CICLO -> while left_par EXPRESION right_par CUERPO .)


state 222

    (50) FUNC -> TIPO cambioFuncActual id agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO cambiarScope .

    main            reduce using rule 50 (FUNC -> TIPO cambioFuncActual id agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO cambiarScope .)
    int             reduce using rule 50 (FUNC -> TIPO cambioFuncActual id agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO cambiarScope .)
    float           reduce using rule 50 (FUNC -> TIPO cambioFuncActual id agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO cambiarScope .)
    bool            reduce using rule 50 (FUNC -> TIPO cambioFuncActual id agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO cambiarScope .)
    string          reduce using rule 50 (FUNC -> TIPO cambioFuncActual id agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO cambiarScope .)
    void            reduce using rule 50 (FUNC -> TIPO cambioFuncActual id agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO cambiarScope .)


state 223

    (44) CUERPORETORNO -> left_cb CUERPORETORNO_AUX . right_cb
    (46) CUERPORETORNO_AUX -> CUERPORETORNO_AUX . CUERPORETORNO_CF_AUX RETORNO
    (47) CUERPORETORNO_CF_AUX -> . CUERPOFUNC
    (48) CUERPORETORNO_CF_AUX -> . empty
    (37) CUERPOFUNC -> . CUERPOFUNC_AUX
    (124) empty -> .
    (38) CUERPOFUNC_AUX -> . CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO
    (39) CUERPOFUNC_AUX -> . CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO
    (40) CUERPOFUNC_VARS -> . VARS
    (41) CUERPOFUNC_VARS -> . empty
    (9) VARS -> . VARS_AUX
    (10) VARS_AUX -> . VARS_LIST_VAR
    (11) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (12) VARS_LIST_VAR -> . VARS_LIST
    (13) VARS_LIST_VAR -> . VARS_VAR
    (14) VARS_LIST -> . list hacerLista TIPO VARS_LIST_AUX semicolon
    (21) VARS_VAR -> . var hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    right_cb        shift and go to state 242
    return          reduce using rule 124 (empty -> .)
    if              reduce using rule 124 (empty -> .)
    while           reduce using rule 124 (empty -> .)
    cread           reduce using rule 124 (empty -> .)
    cwrite          reduce using rule 124 (empty -> .)
    left_par        reduce using rule 124 (empty -> .)
    id              reduce using rule 124 (empty -> .)
    list            shift and go to state 10
    var             shift and go to state 5

  ! list            [ reduce using rule 124 (empty -> .) ]
  ! var             [ reduce using rule 124 (empty -> .) ]

    CUERPORETORNO_CF_AUX           shift and go to state 241
    VARS                           shift and go to state 229
    CUERPOFUNC                     shift and go to state 226
    VARS_LIST                      shift and go to state 7
    VARS_LIST_VAR                  shift and go to state 8
    VARS_VAR                       shift and go to state 12
    VARS_AUX                       shift and go to state 11
    CUERPOFUNC_VARS                shift and go to state 227
    CUERPOFUNC_AUX                 shift and go to state 224
    empty                          shift and go to state 228

state 224

    (37) CUERPOFUNC -> CUERPOFUNC_AUX .
    (39) CUERPOFUNC_AUX -> CUERPOFUNC_AUX . CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO
    (40) CUERPOFUNC_VARS -> . VARS
    (41) CUERPOFUNC_VARS -> . empty
    (9) VARS -> . VARS_AUX
    (124) empty -> .
    (10) VARS_AUX -> . VARS_LIST_VAR
    (11) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (12) VARS_LIST_VAR -> . VARS_LIST
    (13) VARS_LIST_VAR -> . VARS_VAR
    (14) VARS_LIST -> . list hacerLista TIPO VARS_LIST_AUX semicolon
    (21) VARS_VAR -> . var hacerVar TIPO VARS_VAR_AUX semicolon

  ! reduce/reduce conflict for return resolved using rule 37 (CUERPOFUNC -> CUERPOFUNC_AUX .)
  ! reduce/reduce conflict for right_cb resolved using rule 37 (CUERPOFUNC -> CUERPOFUNC_AUX .)
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    right_cb        reduce using rule 37 (CUERPOFUNC -> CUERPOFUNC_AUX .)
    return          reduce using rule 37 (CUERPOFUNC -> CUERPOFUNC_AUX .)
    if              reduce using rule 124 (empty -> .)
    while           reduce using rule 124 (empty -> .)
    cread           reduce using rule 124 (empty -> .)
    cwrite          reduce using rule 124 (empty -> .)
    left_par        reduce using rule 124 (empty -> .)
    id              reduce using rule 124 (empty -> .)
    list            shift and go to state 10
    var             shift and go to state 5

  ! list            [ reduce using rule 124 (empty -> .) ]
  ! var             [ reduce using rule 124 (empty -> .) ]
  ! return          [ reduce using rule 124 (empty -> .) ]
  ! right_cb        [ reduce using rule 124 (empty -> .) ]

    VARS                           shift and go to state 229
    VARS_LIST                      shift and go to state 7
    VARS_LIST_VAR                  shift and go to state 8
    VARS_AUX                       shift and go to state 11
    CUERPOFUNC_VARS                shift and go to state 243
    VARS_VAR                       shift and go to state 12
    empty                          shift and go to state 232

state 225

    (45) CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX . RETORNO
    (49) RETORNO -> . return EXP semicolon

    return          shift and go to state 245

    RETORNO                        shift and go to state 244

state 226

    (47) CUERPORETORNO_CF_AUX -> CUERPOFUNC .

    return          reduce using rule 47 (CUERPORETORNO_CF_AUX -> CUERPOFUNC .)


state 227

    (38) CUERPOFUNC_AUX -> CUERPOFUNC_VARS . CUERPOFUNC_ESTATUTO
    (42) CUERPOFUNC_ESTATUTO -> . ESTATUTO
    (43) CUERPOFUNC_ESTATUTO -> . empty
    (61) ESTATUTO -> . ASIGNACION
    (62) ESTATUTO -> . CONDICION
    (63) ESTATUTO -> . CICLO
    (64) ESTATUTO -> . LECTURA
    (65) ESTATUTO -> . ESCRITURA
    (66) ESTATUTO -> . LLAMADA
    (124) empty -> .
    (121) ASIGNACION -> . ASIGNACION_AUX equals EXPRESION semicolon
    (67) CONDICION -> . if CONDICION_ELSEIF CONDICION_ELSE
    (72) CICLO -> . while left_par EXPRESION right_par CUERPO
    (73) LECTURA -> . cread left_par id right_par semicolon
    (74) ESCRITURA -> . cwrite left_par EXPRESION right_par semicolon
    (75) LLAMADA -> . left_par LLAMADA_EXPRESION right_par semicolon
    (122) ASIGNACION_AUX -> . id
    (123) ASIGNACION_AUX -> . LISTA
    (109) LISTA -> . id left_sb EXP right_sb

  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for cread resolved as shift
  ! shift/reduce conflict for cwrite resolved as shift
  ! shift/reduce conflict for left_par resolved as shift
  ! shift/reduce conflict for id resolved as shift
    list            reduce using rule 124 (empty -> .)
    var             reduce using rule 124 (empty -> .)
    return          reduce using rule 124 (empty -> .)
    right_cb        reduce using rule 124 (empty -> .)
    if              shift and go to state 77
    while           shift and go to state 89
    cread           shift and go to state 75
    cwrite          shift and go to state 81
    left_par        shift and go to state 87
    id              shift and go to state 80

  ! if              [ reduce using rule 124 (empty -> .) ]
  ! while           [ reduce using rule 124 (empty -> .) ]
  ! cread           [ reduce using rule 124 (empty -> .) ]
  ! cwrite          [ reduce using rule 124 (empty -> .) ]
  ! left_par        [ reduce using rule 124 (empty -> .) ]
  ! id              [ reduce using rule 124 (empty -> .) ]

    CUERPOFUNC_ESTATUTO            shift and go to state 246
    CICLO                          shift and go to state 74
    ASIGNACION                     shift and go to state 78
    LISTA                          shift and go to state 90
    ESTATUTO                       shift and go to state 247
    LLAMADA                        shift and go to state 85
    CONDICION                      shift and go to state 86
    ASIGNACION_AUX                 shift and go to state 82
    LECTURA                        shift and go to state 76
    empty                          shift and go to state 248
    ESCRITURA                      shift and go to state 83

state 228

    (48) CUERPORETORNO_CF_AUX -> empty .
    (41) CUERPOFUNC_VARS -> empty .

  ! reduce/reduce conflict for return resolved using rule 41 (CUERPOFUNC_VARS -> empty .)
    if              reduce using rule 41 (CUERPOFUNC_VARS -> empty .)
    while           reduce using rule 41 (CUERPOFUNC_VARS -> empty .)
    cread           reduce using rule 41 (CUERPOFUNC_VARS -> empty .)
    cwrite          reduce using rule 41 (CUERPOFUNC_VARS -> empty .)
    left_par        reduce using rule 41 (CUERPOFUNC_VARS -> empty .)
    id              reduce using rule 41 (CUERPOFUNC_VARS -> empty .)
    list            reduce using rule 41 (CUERPOFUNC_VARS -> empty .)
    var             reduce using rule 41 (CUERPOFUNC_VARS -> empty .)
    return          reduce using rule 41 (CUERPOFUNC_VARS -> empty .)

  ! return          [ reduce using rule 48 (CUERPORETORNO_CF_AUX -> empty .) ]


state 229

    (40) CUERPOFUNC_VARS -> VARS .

    if              reduce using rule 40 (CUERPOFUNC_VARS -> VARS .)
    while           reduce using rule 40 (CUERPOFUNC_VARS -> VARS .)
    cread           reduce using rule 40 (CUERPOFUNC_VARS -> VARS .)
    cwrite          reduce using rule 40 (CUERPOFUNC_VARS -> VARS .)
    left_par        reduce using rule 40 (CUERPOFUNC_VARS -> VARS .)
    id              reduce using rule 40 (CUERPOFUNC_VARS -> VARS .)
    list            reduce using rule 40 (CUERPOFUNC_VARS -> VARS .)
    var             reduce using rule 40 (CUERPOFUNC_VARS -> VARS .)
    return          reduce using rule 40 (CUERPOFUNC_VARS -> VARS .)
    right_cb        reduce using rule 40 (CUERPOFUNC_VARS -> VARS .)


state 230

    (55) FUNC_PARA -> FUNC_PARA comma TIPO id . agregarParametro
    (56) agregarParametro -> . empty
    (124) empty -> .

    right_par       reduce using rule 124 (empty -> .)
    comma           reduce using rule 124 (empty -> .)

    empty                          shift and go to state 193
    agregarParametro               shift and go to state 249

state 231

    (57) VOIDFUNC -> void hacerVoid id agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC . right_cb

    right_cb        shift and go to state 250


state 232

    (41) CUERPOFUNC_VARS -> empty .

    if              reduce using rule 41 (CUERPOFUNC_VARS -> empty .)
    while           reduce using rule 41 (CUERPOFUNC_VARS -> empty .)
    cread           reduce using rule 41 (CUERPOFUNC_VARS -> empty .)
    cwrite          reduce using rule 41 (CUERPOFUNC_VARS -> empty .)
    left_par        reduce using rule 41 (CUERPOFUNC_VARS -> empty .)
    id              reduce using rule 41 (CUERPOFUNC_VARS -> empty .)
    list            reduce using rule 41 (CUERPOFUNC_VARS -> empty .)
    var             reduce using rule 41 (CUERPOFUNC_VARS -> empty .)
    return          reduce using rule 41 (CUERPOFUNC_VARS -> empty .)
    right_cb        reduce using rule 41 (CUERPOFUNC_VARS -> empty .)


state 233

    (60) VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO id . agregarParametro
    (56) agregarParametro -> . empty
    (124) empty -> .

    right_par       reduce using rule 124 (empty -> .)
    comma           reduce using rule 124 (empty -> .)

    agregarParametro               shift and go to state 251
    empty                          shift and go to state 193

state 234

    (17) VARS_LIST_AUX -> VARS_LIST_AUX comma id agregarId left_sb cteInt agregarCteLista right_sb . agregarDicVar
    (20) agregarDicVar -> . empty
    (124) empty -> .

    semicolon       reduce using rule 124 (empty -> .)
    comma           reduce using rule 124 (empty -> .)

    agregarDicVar                  shift and go to state 252
    empty                          shift and go to state 62

state 235

    (69) CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par . CUERPO
    (30) CUERPO -> . left_cb CUERPO_AUX right_cb

    left_cb         shift and go to state 55

    CUERPO                         shift and go to state 253

state 236

    (106) LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX . right_par

    right_par       shift and go to state 254


state 237

    (107) LLAMADAF_AUX -> comma . EXPRESION LLAMADAF_AUX
    (78) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA EXPRESION_B
    (79) EXPRESION_NOT -> . not
    (80) EXPRESION_NOT -> . empty
    (124) empty -> .

    not             shift and go to state 107
    left_par        reduce using rule 124 (empty -> .)
    id              reduce using rule 124 (empty -> .)
    plus            reduce using rule 124 (empty -> .)
    minus           reduce using rule 124 (empty -> .)
    true            reduce using rule 124 (empty -> .)
    false           reduce using rule 124 (empty -> .)
    cteString       reduce using rule 124 (empty -> .)
    cteInt          reduce using rule 124 (empty -> .)
    cteFloat        reduce using rule 124 (empty -> .)

    EXPRESION                      shift and go to state 255
    EXPRESION_NOT                  shift and go to state 105
    empty                          shift and go to state 108

state 238

    (108) LLAMADAF_AUX -> empty .

    right_par       reduce using rule 108 (LLAMADAF_AUX -> empty .)


state 239

    (81) EXPRESION_B -> and EXPRESION_NOT EXPRESIONLOGICA .

    right_par       reduce using rule 81 (EXPRESION_B -> and EXPRESION_NOT EXPRESIONLOGICA .)
    comma           reduce using rule 81 (EXPRESION_B -> and EXPRESION_NOT EXPRESIONLOGICA .)
    semicolon       reduce using rule 81 (EXPRESION_B -> and EXPRESION_NOT EXPRESIONLOGICA .)


state 240

    (82) EXPRESION_B -> or EXPRESION_NOT EXPRESIONLOGICA .

    right_par       reduce using rule 82 (EXPRESION_B -> or EXPRESION_NOT EXPRESIONLOGICA .)
    comma           reduce using rule 82 (EXPRESION_B -> or EXPRESION_NOT EXPRESIONLOGICA .)
    semicolon       reduce using rule 82 (EXPRESION_B -> or EXPRESION_NOT EXPRESIONLOGICA .)


state 241

    (46) CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX . RETORNO
    (49) RETORNO -> . return EXP semicolon

    return          shift and go to state 245

    RETORNO                        shift and go to state 256

state 242

    (44) CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .

    main            reduce using rule 44 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)
    int             reduce using rule 44 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)
    float           reduce using rule 44 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)
    bool            reduce using rule 44 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)
    string          reduce using rule 44 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)
    void            reduce using rule 44 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)


state 243

    (39) CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS . CUERPOFUNC_ESTATUTO
    (42) CUERPOFUNC_ESTATUTO -> . ESTATUTO
    (43) CUERPOFUNC_ESTATUTO -> . empty
    (61) ESTATUTO -> . ASIGNACION
    (62) ESTATUTO -> . CONDICION
    (63) ESTATUTO -> . CICLO
    (64) ESTATUTO -> . LECTURA
    (65) ESTATUTO -> . ESCRITURA
    (66) ESTATUTO -> . LLAMADA
    (124) empty -> .
    (121) ASIGNACION -> . ASIGNACION_AUX equals EXPRESION semicolon
    (67) CONDICION -> . if CONDICION_ELSEIF CONDICION_ELSE
    (72) CICLO -> . while left_par EXPRESION right_par CUERPO
    (73) LECTURA -> . cread left_par id right_par semicolon
    (74) ESCRITURA -> . cwrite left_par EXPRESION right_par semicolon
    (75) LLAMADA -> . left_par LLAMADA_EXPRESION right_par semicolon
    (122) ASIGNACION_AUX -> . id
    (123) ASIGNACION_AUX -> . LISTA
    (109) LISTA -> . id left_sb EXP right_sb

  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for cread resolved as shift
  ! shift/reduce conflict for cwrite resolved as shift
  ! shift/reduce conflict for left_par resolved as shift
  ! shift/reduce conflict for id resolved as shift
    list            reduce using rule 124 (empty -> .)
    var             reduce using rule 124 (empty -> .)
    return          reduce using rule 124 (empty -> .)
    right_cb        reduce using rule 124 (empty -> .)
    if              shift and go to state 77
    while           shift and go to state 89
    cread           shift and go to state 75
    cwrite          shift and go to state 81
    left_par        shift and go to state 87
    id              shift and go to state 80

  ! if              [ reduce using rule 124 (empty -> .) ]
  ! while           [ reduce using rule 124 (empty -> .) ]
  ! cread           [ reduce using rule 124 (empty -> .) ]
  ! cwrite          [ reduce using rule 124 (empty -> .) ]
  ! left_par        [ reduce using rule 124 (empty -> .) ]
  ! id              [ reduce using rule 124 (empty -> .) ]

    CUERPOFUNC_ESTATUTO            shift and go to state 257
    CICLO                          shift and go to state 74
    ASIGNACION                     shift and go to state 78
    LISTA                          shift and go to state 90
    ESTATUTO                       shift and go to state 247
    LLAMADA                        shift and go to state 85
    CONDICION                      shift and go to state 86
    ASIGNACION_AUX                 shift and go to state 82
    LECTURA                        shift and go to state 76
    empty                          shift and go to state 248
    ESCRITURA                      shift and go to state 83

state 244

    (45) CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .

    right_cb        reduce using rule 45 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    list            reduce using rule 45 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    var             reduce using rule 45 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    return          reduce using rule 45 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    if              reduce using rule 45 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    while           reduce using rule 45 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    cread           reduce using rule 45 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    cwrite          reduce using rule 45 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    left_par        reduce using rule 45 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    id              reduce using rule 45 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)


state 245

    (49) RETORNO -> return . EXP semicolon
    (92) EXP -> . TERMINO EXP_AUX
    (96) TERMINO -> . FACTOR TERMINO_AUX
    (100) FACTOR -> . left_par EXPRESION right_par
    (101) FACTOR -> . CONSTANTE
    (102) FACTOR -> . LISTA
    (103) FACTOR -> . FACTOR_AUX
    (110) CONSTANTE -> . NUMERICA
    (111) CONSTANTE -> . BOOLEANA
    (112) CONSTANTE -> . STRINGS
    (109) LISTA -> . id left_sb EXP right_sb
    (104) FACTOR_AUX -> . id
    (105) FACTOR_AUX -> . id LLAMADA_F
    (113) NUMERICA -> . NUMERICA_AUX
    (114) NUMERICA -> . plus NUMERICA_AUX
    (115) NUMERICA -> . minus NUMERICA_AUX
    (118) BOOLEANA -> . true
    (119) BOOLEANA -> . false
    (120) STRINGS -> . cteString
    (116) NUMERICA_AUX -> . cteInt
    (117) NUMERICA_AUX -> . cteFloat

    left_par        shift and go to state 133
    id              shift and go to state 128
    plus            shift and go to state 139
    minus           shift and go to state 142
    true            shift and go to state 134
    false           shift and go to state 124
    cteString       shift and go to state 132
    cteInt          shift and go to state 137
    cteFloat        shift and go to state 126

    NUMERICA_AUX                   shift and go to state 131
    CONSTANTE                      shift and go to state 136
    FACTOR_AUX                     shift and go to state 130
    STRINGS                        shift and go to state 135
    NUMERICA                       shift and go to state 138
    TERMINO                        shift and go to state 129
    EXP                            shift and go to state 258
    FACTOR                         shift and go to state 140
    LISTA                          shift and go to state 141
    BOOLEANA                       shift and go to state 127

state 246

    (38) CUERPOFUNC_AUX -> CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .

    list            reduce using rule 38 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    var             reduce using rule 38 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    if              reduce using rule 38 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    while           reduce using rule 38 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    cread           reduce using rule 38 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    cwrite          reduce using rule 38 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    left_par        reduce using rule 38 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    id              reduce using rule 38 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    right_cb        reduce using rule 38 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    return          reduce using rule 38 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)


state 247

    (42) CUERPOFUNC_ESTATUTO -> ESTATUTO .

    list            reduce using rule 42 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    var             reduce using rule 42 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    if              reduce using rule 42 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    while           reduce using rule 42 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    cread           reduce using rule 42 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    cwrite          reduce using rule 42 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    left_par        reduce using rule 42 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    id              reduce using rule 42 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    return          reduce using rule 42 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    right_cb        reduce using rule 42 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)


state 248

    (43) CUERPOFUNC_ESTATUTO -> empty .

    list            reduce using rule 43 (CUERPOFUNC_ESTATUTO -> empty .)
    var             reduce using rule 43 (CUERPOFUNC_ESTATUTO -> empty .)
    if              reduce using rule 43 (CUERPOFUNC_ESTATUTO -> empty .)
    while           reduce using rule 43 (CUERPOFUNC_ESTATUTO -> empty .)
    cread           reduce using rule 43 (CUERPOFUNC_ESTATUTO -> empty .)
    cwrite          reduce using rule 43 (CUERPOFUNC_ESTATUTO -> empty .)
    left_par        reduce using rule 43 (CUERPOFUNC_ESTATUTO -> empty .)
    id              reduce using rule 43 (CUERPOFUNC_ESTATUTO -> empty .)
    return          reduce using rule 43 (CUERPOFUNC_ESTATUTO -> empty .)
    right_cb        reduce using rule 43 (CUERPOFUNC_ESTATUTO -> empty .)


state 249

    (55) FUNC_PARA -> FUNC_PARA comma TIPO id agregarParametro .

    right_par       reduce using rule 55 (FUNC_PARA -> FUNC_PARA comma TIPO id agregarParametro .)
    comma           reduce using rule 55 (FUNC_PARA -> FUNC_PARA comma TIPO id agregarParametro .)


state 250

    (57) VOIDFUNC -> void hacerVoid id agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .

    main            reduce using rule 57 (VOIDFUNC -> void hacerVoid id agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)
    int             reduce using rule 57 (VOIDFUNC -> void hacerVoid id agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)
    float           reduce using rule 57 (VOIDFUNC -> void hacerVoid id agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)
    bool            reduce using rule 57 (VOIDFUNC -> void hacerVoid id agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)
    string          reduce using rule 57 (VOIDFUNC -> void hacerVoid id agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)
    void            reduce using rule 57 (VOIDFUNC -> void hacerVoid id agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)


state 251

    (60) VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO id agregarParametro .

    right_par       reduce using rule 60 (VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO id agregarParametro .)
    comma           reduce using rule 60 (VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO id agregarParametro .)


state 252

    (17) VARS_LIST_AUX -> VARS_LIST_AUX comma id agregarId left_sb cteInt agregarCteLista right_sb agregarDicVar .

    semicolon       reduce using rule 17 (VARS_LIST_AUX -> VARS_LIST_AUX comma id agregarId left_sb cteInt agregarCteLista right_sb agregarDicVar .)
    comma           reduce using rule 17 (VARS_LIST_AUX -> VARS_LIST_AUX comma id agregarId left_sb cteInt agregarCteLista right_sb agregarDicVar .)


state 253

    (69) CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO .

    elseif          reduce using rule 69 (CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO .)
    else            reduce using rule 69 (CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO .)
    right_cb        reduce using rule 69 (CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO .)
    list            reduce using rule 69 (CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO .)
    var             reduce using rule 69 (CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO .)
    if              reduce using rule 69 (CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO .)
    while           reduce using rule 69 (CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO .)
    cread           reduce using rule 69 (CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO .)
    cwrite          reduce using rule 69 (CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO .)
    left_par        reduce using rule 69 (CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO .)
    id              reduce using rule 69 (CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO .)
    return          reduce using rule 69 (CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO .)


state 254

    (106) LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .

    multiply        reduce using rule 106 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    divide          reduce using rule 106 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    plus            reduce using rule 106 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    minus           reduce using rule 106 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    right_sb        reduce using rule 106 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    lt              reduce using rule 106 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    gt              reduce using rule 106 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    ne              reduce using rule 106 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    ge              reduce using rule 106 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    le              reduce using rule 106 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    et              reduce using rule 106 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    and             reduce using rule 106 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    or              reduce using rule 106 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    right_par       reduce using rule 106 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    comma           reduce using rule 106 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    semicolon       reduce using rule 106 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)


state 255

    (107) LLAMADAF_AUX -> comma EXPRESION . LLAMADAF_AUX
    (107) LLAMADAF_AUX -> . comma EXPRESION LLAMADAF_AUX
    (108) LLAMADAF_AUX -> . empty
    (124) empty -> .

    comma           shift and go to state 237
    right_par       reduce using rule 124 (empty -> .)

    LLAMADAF_AUX                   shift and go to state 259
    empty                          shift and go to state 238

state 256

    (46) CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .

    right_cb        reduce using rule 46 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    list            reduce using rule 46 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    var             reduce using rule 46 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    return          reduce using rule 46 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    if              reduce using rule 46 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    while           reduce using rule 46 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    cread           reduce using rule 46 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    cwrite          reduce using rule 46 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    left_par        reduce using rule 46 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    id              reduce using rule 46 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)


state 257

    (39) CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .

    list            reduce using rule 39 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    var             reduce using rule 39 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    if              reduce using rule 39 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    while           reduce using rule 39 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    cread           reduce using rule 39 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    cwrite          reduce using rule 39 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    left_par        reduce using rule 39 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    id              reduce using rule 39 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    right_cb        reduce using rule 39 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    return          reduce using rule 39 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)


state 258

    (49) RETORNO -> return EXP . semicolon

    semicolon       shift and go to state 260


state 259

    (107) LLAMADAF_AUX -> comma EXPRESION LLAMADAF_AUX .

    right_par       reduce using rule 107 (LLAMADAF_AUX -> comma EXPRESION LLAMADAF_AUX .)


state 260

    (49) RETORNO -> return EXP semicolon .

    right_cb        reduce using rule 49 (RETORNO -> return EXP semicolon .)
    list            reduce using rule 49 (RETORNO -> return EXP semicolon .)
    var             reduce using rule 49 (RETORNO -> return EXP semicolon .)
    return          reduce using rule 49 (RETORNO -> return EXP semicolon .)
    if              reduce using rule 49 (RETORNO -> return EXP semicolon .)
    while           reduce using rule 49 (RETORNO -> return EXP semicolon .)
    cread           reduce using rule 49 (RETORNO -> return EXP semicolon .)
    cwrite          reduce using rule 49 (RETORNO -> return EXP semicolon .)
    left_par        reduce using rule 49 (RETORNO -> return EXP semicolon .)
    id              reduce using rule 49 (RETORNO -> return EXP semicolon .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for list in state 11 resolved as shift
WARNING: shift/reduce conflict for var in state 11 resolved as shift
WARNING: shift/reduce conflict for int in state 16 resolved as shift
WARNING: shift/reduce conflict for float in state 16 resolved as shift
WARNING: shift/reduce conflict for bool in state 16 resolved as shift
WARNING: shift/reduce conflict for string in state 16 resolved as shift
WARNING: shift/reduce conflict for void in state 16 resolved as shift
WARNING: shift/reduce conflict for main in state 26 resolved as shift
WARNING: shift/reduce conflict for int in state 26 resolved as shift
WARNING: shift/reduce conflict for float in state 26 resolved as shift
WARNING: shift/reduce conflict for bool in state 26 resolved as shift
WARNING: shift/reduce conflict for string in state 26 resolved as shift
WARNING: shift/reduce conflict for void in state 26 resolved as shift
WARNING: shift/reduce conflict for list in state 55 resolved as shift
WARNING: shift/reduce conflict for var in state 55 resolved as shift
WARNING: shift/reduce conflict for if in state 64 resolved as shift
WARNING: shift/reduce conflict for while in state 64 resolved as shift
WARNING: shift/reduce conflict for cread in state 64 resolved as shift
WARNING: shift/reduce conflict for cwrite in state 64 resolved as shift
WARNING: shift/reduce conflict for left_par in state 64 resolved as shift
WARNING: shift/reduce conflict for id in state 64 resolved as shift
WARNING: shift/reduce conflict for right_cb in state 67 resolved as shift
WARNING: shift/reduce conflict for list in state 67 resolved as shift
WARNING: shift/reduce conflict for var in state 67 resolved as shift
WARNING: shift/reduce conflict for if in state 91 resolved as shift
WARNING: shift/reduce conflict for while in state 91 resolved as shift
WARNING: shift/reduce conflict for cread in state 91 resolved as shift
WARNING: shift/reduce conflict for cwrite in state 91 resolved as shift
WARNING: shift/reduce conflict for left_par in state 91 resolved as shift
WARNING: shift/reduce conflict for id in state 91 resolved as shift
WARNING: shift/reduce conflict for list in state 196 resolved as shift
WARNING: shift/reduce conflict for var in state 196 resolved as shift
WARNING: shift/reduce conflict for list in state 198 resolved as shift
WARNING: shift/reduce conflict for var in state 198 resolved as shift
WARNING: shift/reduce conflict for list in state 223 resolved as shift
WARNING: shift/reduce conflict for var in state 223 resolved as shift
WARNING: shift/reduce conflict for list in state 224 resolved as shift
WARNING: shift/reduce conflict for var in state 224 resolved as shift
WARNING: shift/reduce conflict for if in state 227 resolved as shift
WARNING: shift/reduce conflict for while in state 227 resolved as shift
WARNING: shift/reduce conflict for cread in state 227 resolved as shift
WARNING: shift/reduce conflict for cwrite in state 227 resolved as shift
WARNING: shift/reduce conflict for left_par in state 227 resolved as shift
WARNING: shift/reduce conflict for id in state 227 resolved as shift
WARNING: shift/reduce conflict for if in state 243 resolved as shift
WARNING: shift/reduce conflict for while in state 243 resolved as shift
WARNING: shift/reduce conflict for cread in state 243 resolved as shift
WARNING: shift/reduce conflict for cwrite in state 243 resolved as shift
WARNING: shift/reduce conflict for left_par in state 243 resolved as shift
WARNING: shift/reduce conflict for id in state 243 resolved as shift
WARNING: reduce/reduce conflict in state 224 resolved using rule (CUERPOFUNC -> CUERPOFUNC_AUX)
WARNING: rejected rule (empty -> <empty>) in state 224
WARNING: reduce/reduce conflict in state 228 resolved using rule (CUERPOFUNC_VARS -> empty)
WARNING: rejected rule (CUERPORETORNO_CF_AUX -> empty) in state 228
WARNING: Rule (CUERPORETORNO_CF_AUX -> empty) is never reduced
