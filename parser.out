Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    right_dblquotes
    left_dblquotes

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> program id semicolon PROGRAMA_VARS PROGRAMA_FUNC main CUERPO
Rule 2     PROGRAMA_VARS -> VARS
Rule 3     PROGRAMA_VARS -> empty
Rule 4     PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX
Rule 5     PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX
Rule 6     PROGRAMA_FUNC_AUX -> FUNC
Rule 7     PROGRAMA_FUNC_AUX -> empty
Rule 8     VARS -> VARS_AUX
Rule 9     VARS_AUX -> VARS_LIST_VAR
Rule 10    VARS_AUX -> VARS_AUX VARS_LIST_VAR
Rule 11    VARS_LIST_VAR -> VARS_LIST
Rule 12    VARS_LIST_VAR -> VARS_VAR
Rule 13    VARS_LIST -> list TIPO VARS_LIST_AUX semicolon
Rule 14    VARS_LIST_AUX -> id left_sb cteInt right_sb
Rule 15    VARS_LIST_AUX -> VARS_LIST_AUX comma id left_sb cteInt right_sb
Rule 16    VARS_VAR -> var TIPO VARS_VAR_AUX semicolon
Rule 17    VARS_VAR_AUX -> id
Rule 18    VARS_VAR_AUX -> VARS_VAR_AUX comma id
Rule 19    TIPO -> int
Rule 20    TIPO -> float
Rule 21    TIPO -> bool
Rule 22    TIPO -> string
Rule 23    CUERPO -> left_cb CUERPO_AUX right_cb
Rule 24    CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO
Rule 25    CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO
Rule 26    CUERPO_VARS -> VARS
Rule 27    CUERPO_VARS -> empty
Rule 28    CUERPO_ESTATUTO -> ESTATUTO
Rule 29    CUERPO_ESTATUTO -> empty
Rule 30    CUERPOFUNC -> CUERPOFUNC_AUX
Rule 31    CUERPOFUNC_AUX -> CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO
Rule 32    CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO
Rule 33    CUERPOFUNC_VARS -> VARS
Rule 34    CUERPOFUNC_VARS -> empty
Rule 35    CUERPOFUNC_ESTATUTO -> ESTATUTO
Rule 36    CUERPOFUNC_ESTATUTO -> empty
Rule 37    CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb
Rule 38    CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO
Rule 39    CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO
Rule 40    CUERPORETORNO_CF_AUX -> CUERPOFUNC
Rule 41    CUERPORETORNO_CF_AUX -> empty
Rule 42    RETORNO -> return EXP
Rule 43    FUNC -> TIPO id left_par FUNC_PARA right_par CUERPORETORNO
Rule 44    FUNC -> VOIDFUNC
Rule 45    FUNC_PARA -> TIPO id
Rule 46    FUNC_PARA -> FUNC_PARA comma TIPO id
Rule 47    VOIDFUNC -> void id left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb
Rule 48    VOIDFUNC_PARA -> TIPO id
Rule 49    VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO id
Rule 50    ESTATUTO -> ASIGNACION
Rule 51    ESTATUTO -> CONDICION
Rule 52    ESTATUTO -> CICLO
Rule 53    ESTATUTO -> LECTURA
Rule 54    ESTATUTO -> ESCRITURA
Rule 55    ESTATUTO -> LLAMADA
Rule 56    CONDICION -> if CONDICION_ELSEIF CONDICION_ELSE
Rule 57    CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO
Rule 58    CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO
Rule 59    CONDICION_ELSE -> else CUERPO
Rule 60    CONDICION_ELSE -> empty
Rule 61    CICLO -> while left_par EXPRESION right_par CUERPO
Rule 62    LECTURA -> cread left_par id right_par semicolon
Rule 63    ESCRITURA -> cwrite left_par EXPRESION right_par semicolon
Rule 64    LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon
Rule 65    LLAMADA_EXPRESION -> EXPRESION
Rule 66    LLAMADA_EXPRESION -> LLAMADA_EXPRESION comma EXPRESION
Rule 67    EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA EXPRESION_B
Rule 68    EXPRESION_NOT -> not
Rule 69    EXPRESION_NOT -> empty
Rule 70    EXPRESION_B -> and EXPRESION_NOT EXPRESIONLOGICA
Rule 71    EXPRESION_B -> or EXPRESION_NOT EXPRESIONLOGICA
Rule 72    EXPRESION_B -> empty
Rule 73    EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX
Rule 74    EXPRESIONLOGICA_AUX -> lt EXP
Rule 75    EXPRESIONLOGICA_AUX -> gt EXP
Rule 76    EXPRESIONLOGICA_AUX -> ne EXP
Rule 77    EXPRESIONLOGICA_AUX -> ge EXP
Rule 78    EXPRESIONLOGICA_AUX -> le EXP
Rule 79    EXPRESIONLOGICA_AUX -> et EXP
Rule 80    EXPRESIONLOGICA_AUX -> empty
Rule 81    EXP -> TERMINO EXP_AUX
Rule 82    EXP_AUX -> plus EXP
Rule 83    EXP_AUX -> minus EXP
Rule 84    EXP_AUX -> empty
Rule 85    TERMINO -> FACTOR TERMINO_AUX
Rule 86    TERMINO_AUX -> multiply TERMINO
Rule 87    TERMINO_AUX -> divide TERMINO
Rule 88    TERMINO_AUX -> empty
Rule 89    FACTOR -> left_par EXPRESION right_par
Rule 90    FACTOR -> CONSTANTE
Rule 91    FACTOR -> LISTA
Rule 92    FACTOR -> FACTOR_AUX
Rule 93    FACTOR_AUX -> id
Rule 94    FACTOR_AUX -> id LLAMADA_F
Rule 95    LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par
Rule 96    LLAMADAF_AUX -> comma EXPRESION LLAMADAF_AUX
Rule 97    LLAMADAF_AUX -> empty
Rule 98    LISTA -> id left_sb EXP right_sb
Rule 99    CONSTANTE -> NUMERICA
Rule 100   CONSTANTE -> BOOLEANA
Rule 101   CONSTANTE -> STRINGS
Rule 102   NUMERICA -> NUMERICA_AUX
Rule 103   NUMERICA -> plus NUMERICA_AUX
Rule 104   NUMERICA -> minus NUMERICA_AUX
Rule 105   NUMERICA_AUX -> cteInt
Rule 106   NUMERICA_AUX -> cteFloat
Rule 107   BOOLEANA -> true
Rule 108   BOOLEANA -> false
Rule 109   STRINGS -> cteString
Rule 110   ASIGNACION -> ASIGNACION_AUX equals EXPRESION semicolon
Rule 111   ASIGNACION_AUX -> id
Rule 112   ASIGNACION_AUX -> LISTA
Rule 113   empty -> <empty>

Terminals, with rules where they appear

and                  : 70
bool                 : 21
comma                : 15 18 46 49 66 96
cread                : 62
cteFloat             : 106
cteInt               : 14 15 105
cteString            : 109
cwrite               : 63
divide               : 87
else                 : 59
elseif               : 58
equals               : 110
error                : 
et                   : 79
false                : 108
float                : 20
ge                   : 77
gt                   : 75
id                   : 1 14 15 17 18 43 45 46 47 48 49 62 93 94 98 111
if                   : 56
int                  : 19
le                   : 78
left_cb              : 23 37 47
left_dblquotes       : 
left_par             : 43 47 57 58 61 62 63 64 89 95
left_sb              : 14 15 98
list                 : 13
lt                   : 74
main                 : 1
minus                : 83 104
multiply             : 86
ne                   : 76
not                  : 68
or                   : 71
plus                 : 82 103
program              : 1
return               : 42
right_cb             : 23 37 47
right_dblquotes      : 
right_par            : 43 47 57 58 61 62 63 64 89 95
right_sb             : 14 15 98
semicolon            : 1 13 16 62 63 64 110
string               : 22
true                 : 107
var                  : 16
void                 : 47
while                : 61

Nonterminals, with rules where they appear

ASIGNACION           : 50
ASIGNACION_AUX       : 110
BOOLEANA             : 100
CICLO                : 52
CONDICION            : 51
CONDICION_ELSE       : 56
CONDICION_ELSEIF     : 56 58
CONSTANTE            : 90
CUERPO               : 1 57 58 59 61
CUERPOFUNC           : 40 47
CUERPOFUNC_AUX       : 30 32
CUERPOFUNC_ESTATUTO  : 31 32
CUERPOFUNC_VARS      : 31 32
CUERPORETORNO        : 43
CUERPORETORNO_AUX    : 37 39
CUERPORETORNO_CF_AUX : 38 39
CUERPO_AUX           : 23 25
CUERPO_ESTATUTO      : 24 25
CUERPO_VARS          : 24 25
ESCRITURA            : 54
ESTATUTO             : 28 35
EXP                  : 42 73 74 75 76 77 78 79 82 83 98
EXPRESION            : 57 58 61 63 65 66 89 95 96 110
EXPRESIONLOGICA      : 67 70 71
EXPRESIONLOGICA_AUX  : 73
EXPRESION_B          : 67
EXPRESION_NOT        : 67 70 71
EXP_AUX              : 81
FACTOR               : 85
FACTOR_AUX           : 92
FUNC                 : 6
FUNC_PARA            : 43 46
LECTURA              : 53
LISTA                : 91 112
LLAMADA              : 55
LLAMADAF_AUX         : 95 96
LLAMADA_EXPRESION    : 64 66
LLAMADA_F            : 94
NUMERICA             : 99
NUMERICA_AUX         : 102 103 104
PROGRAMA             : 0
PROGRAMA_FUNC        : 1 5
PROGRAMA_FUNC_AUX    : 4 5
PROGRAMA_VARS        : 1
RETORNO              : 38 39
STRINGS              : 101
TERMINO              : 81 86 87
TERMINO_AUX          : 85
TIPO                 : 13 16 43 45 46 48 49
VARS                 : 2 26 33
VARS_AUX             : 8 10
VARS_LIST            : 11
VARS_LIST_AUX        : 13 15
VARS_LIST_VAR        : 9 10
VARS_VAR             : 12
VARS_VAR_AUX         : 16 18
VOIDFUNC             : 44
VOIDFUNC_PARA        : 47 49
empty                : 3 7 27 29 34 36 41 60 69 72 80 84 88 97

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . program id semicolon PROGRAMA_VARS PROGRAMA_FUNC main CUERPO

    program         shift and go to state 1

    PROGRAMA                       shift and go to state 2

state 1

    (1) PROGRAMA -> program . id semicolon PROGRAMA_VARS PROGRAMA_FUNC main CUERPO

    id              shift and go to state 3


state 2

    (0) S' -> PROGRAMA .



state 3

    (1) PROGRAMA -> program id . semicolon PROGRAMA_VARS PROGRAMA_FUNC main CUERPO

    semicolon       shift and go to state 4


state 4

    (1) PROGRAMA -> program id semicolon . PROGRAMA_VARS PROGRAMA_FUNC main CUERPO
    (2) PROGRAMA_VARS -> . VARS
    (3) PROGRAMA_VARS -> . empty
    (8) VARS -> . VARS_AUX
    (113) empty -> .
    (9) VARS_AUX -> . VARS_LIST_VAR
    (10) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (11) VARS_LIST_VAR -> . VARS_LIST
    (12) VARS_LIST_VAR -> . VARS_VAR
    (13) VARS_LIST -> . list TIPO VARS_LIST_AUX semicolon
    (16) VARS_VAR -> . var TIPO VARS_VAR_AUX semicolon

    int             reduce using rule 113 (empty -> .)
    float           reduce using rule 113 (empty -> .)
    bool            reduce using rule 113 (empty -> .)
    string          reduce using rule 113 (empty -> .)
    void            reduce using rule 113 (empty -> .)
    main            reduce using rule 113 (empty -> .)
    list            shift and go to state 9
    var             shift and go to state 10

    VARS                           shift and go to state 5
    VARS_LIST                      shift and go to state 6
    VARS_LIST_VAR                  shift and go to state 7
    PROGRAMA_VARS                  shift and go to state 8
    VARS_AUX                       shift and go to state 11
    VARS_VAR                       shift and go to state 12
    empty                          shift and go to state 13

state 5

    (2) PROGRAMA_VARS -> VARS .

    int             reduce using rule 2 (PROGRAMA_VARS -> VARS .)
    float           reduce using rule 2 (PROGRAMA_VARS -> VARS .)
    bool            reduce using rule 2 (PROGRAMA_VARS -> VARS .)
    string          reduce using rule 2 (PROGRAMA_VARS -> VARS .)
    void            reduce using rule 2 (PROGRAMA_VARS -> VARS .)
    main            reduce using rule 2 (PROGRAMA_VARS -> VARS .)


state 6

    (11) VARS_LIST_VAR -> VARS_LIST .

    list            reduce using rule 11 (VARS_LIST_VAR -> VARS_LIST .)
    var             reduce using rule 11 (VARS_LIST_VAR -> VARS_LIST .)
    int             reduce using rule 11 (VARS_LIST_VAR -> VARS_LIST .)
    float           reduce using rule 11 (VARS_LIST_VAR -> VARS_LIST .)
    bool            reduce using rule 11 (VARS_LIST_VAR -> VARS_LIST .)
    string          reduce using rule 11 (VARS_LIST_VAR -> VARS_LIST .)
    void            reduce using rule 11 (VARS_LIST_VAR -> VARS_LIST .)
    main            reduce using rule 11 (VARS_LIST_VAR -> VARS_LIST .)
    if              reduce using rule 11 (VARS_LIST_VAR -> VARS_LIST .)
    while           reduce using rule 11 (VARS_LIST_VAR -> VARS_LIST .)
    cread           reduce using rule 11 (VARS_LIST_VAR -> VARS_LIST .)
    cwrite          reduce using rule 11 (VARS_LIST_VAR -> VARS_LIST .)
    left_par        reduce using rule 11 (VARS_LIST_VAR -> VARS_LIST .)
    id              reduce using rule 11 (VARS_LIST_VAR -> VARS_LIST .)
    return          reduce using rule 11 (VARS_LIST_VAR -> VARS_LIST .)
    right_cb        reduce using rule 11 (VARS_LIST_VAR -> VARS_LIST .)


state 7

    (9) VARS_AUX -> VARS_LIST_VAR .

    list            reduce using rule 9 (VARS_AUX -> VARS_LIST_VAR .)
    var             reduce using rule 9 (VARS_AUX -> VARS_LIST_VAR .)
    if              reduce using rule 9 (VARS_AUX -> VARS_LIST_VAR .)
    while           reduce using rule 9 (VARS_AUX -> VARS_LIST_VAR .)
    cread           reduce using rule 9 (VARS_AUX -> VARS_LIST_VAR .)
    cwrite          reduce using rule 9 (VARS_AUX -> VARS_LIST_VAR .)
    left_par        reduce using rule 9 (VARS_AUX -> VARS_LIST_VAR .)
    id              reduce using rule 9 (VARS_AUX -> VARS_LIST_VAR .)
    return          reduce using rule 9 (VARS_AUX -> VARS_LIST_VAR .)
    right_cb        reduce using rule 9 (VARS_AUX -> VARS_LIST_VAR .)
    int             reduce using rule 9 (VARS_AUX -> VARS_LIST_VAR .)
    float           reduce using rule 9 (VARS_AUX -> VARS_LIST_VAR .)
    bool            reduce using rule 9 (VARS_AUX -> VARS_LIST_VAR .)
    string          reduce using rule 9 (VARS_AUX -> VARS_LIST_VAR .)
    void            reduce using rule 9 (VARS_AUX -> VARS_LIST_VAR .)
    main            reduce using rule 9 (VARS_AUX -> VARS_LIST_VAR .)


state 8

    (1) PROGRAMA -> program id semicolon PROGRAMA_VARS . PROGRAMA_FUNC main CUERPO
    (4) PROGRAMA_FUNC -> . PROGRAMA_FUNC_AUX
    (5) PROGRAMA_FUNC -> . PROGRAMA_FUNC PROGRAMA_FUNC_AUX
    (6) PROGRAMA_FUNC_AUX -> . FUNC
    (7) PROGRAMA_FUNC_AUX -> . empty
    (43) FUNC -> . TIPO id left_par FUNC_PARA right_par CUERPORETORNO
    (44) FUNC -> . VOIDFUNC
    (113) empty -> .
    (19) TIPO -> . int
    (20) TIPO -> . float
    (21) TIPO -> . bool
    (22) TIPO -> . string
    (47) VOIDFUNC -> . void id left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb

  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for bool resolved as shift
  ! shift/reduce conflict for string resolved as shift
  ! shift/reduce conflict for void resolved as shift
    main            reduce using rule 113 (empty -> .)
    int             shift and go to state 15
    float           shift and go to state 16
    bool            shift and go to state 19
    string          shift and go to state 22
    void            shift and go to state 23

  ! int             [ reduce using rule 113 (empty -> .) ]
  ! float           [ reduce using rule 113 (empty -> .) ]
  ! bool            [ reduce using rule 113 (empty -> .) ]
  ! string          [ reduce using rule 113 (empty -> .) ]
  ! void            [ reduce using rule 113 (empty -> .) ]

    PROGRAMA_FUNC_AUX              shift and go to state 18
    TIPO                           shift and go to state 17
    PROGRAMA_FUNC                  shift and go to state 14
    VOIDFUNC                       shift and go to state 20
    FUNC                           shift and go to state 24
    empty                          shift and go to state 21

state 9

    (13) VARS_LIST -> list . TIPO VARS_LIST_AUX semicolon
    (19) TIPO -> . int
    (20) TIPO -> . float
    (21) TIPO -> . bool
    (22) TIPO -> . string

    int             shift and go to state 15
    float           shift and go to state 16
    bool            shift and go to state 19
    string          shift and go to state 22

    TIPO                           shift and go to state 25

state 10

    (16) VARS_VAR -> var . TIPO VARS_VAR_AUX semicolon
    (19) TIPO -> . int
    (20) TIPO -> . float
    (21) TIPO -> . bool
    (22) TIPO -> . string

    int             shift and go to state 15
    float           shift and go to state 16
    bool            shift and go to state 19
    string          shift and go to state 22

    TIPO                           shift and go to state 26

state 11

    (8) VARS -> VARS_AUX .
    (10) VARS_AUX -> VARS_AUX . VARS_LIST_VAR
    (11) VARS_LIST_VAR -> . VARS_LIST
    (12) VARS_LIST_VAR -> . VARS_VAR
    (13) VARS_LIST -> . list TIPO VARS_LIST_AUX semicolon
    (16) VARS_VAR -> . var TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    if              reduce using rule 8 (VARS -> VARS_AUX .)
    while           reduce using rule 8 (VARS -> VARS_AUX .)
    cread           reduce using rule 8 (VARS -> VARS_AUX .)
    cwrite          reduce using rule 8 (VARS -> VARS_AUX .)
    left_par        reduce using rule 8 (VARS -> VARS_AUX .)
    id              reduce using rule 8 (VARS -> VARS_AUX .)
    right_cb        reduce using rule 8 (VARS -> VARS_AUX .)
    return          reduce using rule 8 (VARS -> VARS_AUX .)
    int             reduce using rule 8 (VARS -> VARS_AUX .)
    float           reduce using rule 8 (VARS -> VARS_AUX .)
    bool            reduce using rule 8 (VARS -> VARS_AUX .)
    string          reduce using rule 8 (VARS -> VARS_AUX .)
    void            reduce using rule 8 (VARS -> VARS_AUX .)
    main            reduce using rule 8 (VARS -> VARS_AUX .)
    list            shift and go to state 9
    var             shift and go to state 10

  ! list            [ reduce using rule 8 (VARS -> VARS_AUX .) ]
  ! var             [ reduce using rule 8 (VARS -> VARS_AUX .) ]

    VARS_LIST                      shift and go to state 6
    VARS_LIST_VAR                  shift and go to state 27
    VARS_VAR                       shift and go to state 12

state 12

    (12) VARS_LIST_VAR -> VARS_VAR .

    list            reduce using rule 12 (VARS_LIST_VAR -> VARS_VAR .)
    var             reduce using rule 12 (VARS_LIST_VAR -> VARS_VAR .)
    int             reduce using rule 12 (VARS_LIST_VAR -> VARS_VAR .)
    float           reduce using rule 12 (VARS_LIST_VAR -> VARS_VAR .)
    bool            reduce using rule 12 (VARS_LIST_VAR -> VARS_VAR .)
    string          reduce using rule 12 (VARS_LIST_VAR -> VARS_VAR .)
    void            reduce using rule 12 (VARS_LIST_VAR -> VARS_VAR .)
    main            reduce using rule 12 (VARS_LIST_VAR -> VARS_VAR .)
    if              reduce using rule 12 (VARS_LIST_VAR -> VARS_VAR .)
    while           reduce using rule 12 (VARS_LIST_VAR -> VARS_VAR .)
    cread           reduce using rule 12 (VARS_LIST_VAR -> VARS_VAR .)
    cwrite          reduce using rule 12 (VARS_LIST_VAR -> VARS_VAR .)
    left_par        reduce using rule 12 (VARS_LIST_VAR -> VARS_VAR .)
    id              reduce using rule 12 (VARS_LIST_VAR -> VARS_VAR .)
    return          reduce using rule 12 (VARS_LIST_VAR -> VARS_VAR .)
    right_cb        reduce using rule 12 (VARS_LIST_VAR -> VARS_VAR .)


state 13

    (3) PROGRAMA_VARS -> empty .

    int             reduce using rule 3 (PROGRAMA_VARS -> empty .)
    float           reduce using rule 3 (PROGRAMA_VARS -> empty .)
    bool            reduce using rule 3 (PROGRAMA_VARS -> empty .)
    string          reduce using rule 3 (PROGRAMA_VARS -> empty .)
    void            reduce using rule 3 (PROGRAMA_VARS -> empty .)
    main            reduce using rule 3 (PROGRAMA_VARS -> empty .)


state 14

    (1) PROGRAMA -> program id semicolon PROGRAMA_VARS PROGRAMA_FUNC . main CUERPO
    (5) PROGRAMA_FUNC -> PROGRAMA_FUNC . PROGRAMA_FUNC_AUX
    (6) PROGRAMA_FUNC_AUX -> . FUNC
    (7) PROGRAMA_FUNC_AUX -> . empty
    (43) FUNC -> . TIPO id left_par FUNC_PARA right_par CUERPORETORNO
    (44) FUNC -> . VOIDFUNC
    (113) empty -> .
    (19) TIPO -> . int
    (20) TIPO -> . float
    (21) TIPO -> . bool
    (22) TIPO -> . string
    (47) VOIDFUNC -> . void id left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb

  ! shift/reduce conflict for main resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for bool resolved as shift
  ! shift/reduce conflict for string resolved as shift
  ! shift/reduce conflict for void resolved as shift
    main            shift and go to state 29
    int             shift and go to state 15
    float           shift and go to state 16
    bool            shift and go to state 19
    string          shift and go to state 22
    void            shift and go to state 23

  ! main            [ reduce using rule 113 (empty -> .) ]
  ! int             [ reduce using rule 113 (empty -> .) ]
  ! float           [ reduce using rule 113 (empty -> .) ]
  ! bool            [ reduce using rule 113 (empty -> .) ]
  ! string          [ reduce using rule 113 (empty -> .) ]
  ! void            [ reduce using rule 113 (empty -> .) ]

    PROGRAMA_FUNC_AUX              shift and go to state 28
    TIPO                           shift and go to state 17
    VOIDFUNC                       shift and go to state 20
    FUNC                           shift and go to state 24
    empty                          shift and go to state 21

state 15

    (19) TIPO -> int .

    id              reduce using rule 19 (TIPO -> int .)


state 16

    (20) TIPO -> float .

    id              reduce using rule 20 (TIPO -> float .)


state 17

    (43) FUNC -> TIPO . id left_par FUNC_PARA right_par CUERPORETORNO

    id              shift and go to state 30


state 18

    (4) PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .

    main            reduce using rule 4 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)
    int             reduce using rule 4 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)
    float           reduce using rule 4 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)
    bool            reduce using rule 4 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)
    string          reduce using rule 4 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)
    void            reduce using rule 4 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)


state 19

    (21) TIPO -> bool .

    id              reduce using rule 21 (TIPO -> bool .)


state 20

    (44) FUNC -> VOIDFUNC .

    main            reduce using rule 44 (FUNC -> VOIDFUNC .)
    int             reduce using rule 44 (FUNC -> VOIDFUNC .)
    float           reduce using rule 44 (FUNC -> VOIDFUNC .)
    bool            reduce using rule 44 (FUNC -> VOIDFUNC .)
    string          reduce using rule 44 (FUNC -> VOIDFUNC .)
    void            reduce using rule 44 (FUNC -> VOIDFUNC .)


state 21

    (7) PROGRAMA_FUNC_AUX -> empty .

    main            reduce using rule 7 (PROGRAMA_FUNC_AUX -> empty .)
    int             reduce using rule 7 (PROGRAMA_FUNC_AUX -> empty .)
    float           reduce using rule 7 (PROGRAMA_FUNC_AUX -> empty .)
    bool            reduce using rule 7 (PROGRAMA_FUNC_AUX -> empty .)
    string          reduce using rule 7 (PROGRAMA_FUNC_AUX -> empty .)
    void            reduce using rule 7 (PROGRAMA_FUNC_AUX -> empty .)


state 22

    (22) TIPO -> string .

    id              reduce using rule 22 (TIPO -> string .)


state 23

    (47) VOIDFUNC -> void . id left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb

    id              shift and go to state 31


state 24

    (6) PROGRAMA_FUNC_AUX -> FUNC .

    main            reduce using rule 6 (PROGRAMA_FUNC_AUX -> FUNC .)
    int             reduce using rule 6 (PROGRAMA_FUNC_AUX -> FUNC .)
    float           reduce using rule 6 (PROGRAMA_FUNC_AUX -> FUNC .)
    bool            reduce using rule 6 (PROGRAMA_FUNC_AUX -> FUNC .)
    string          reduce using rule 6 (PROGRAMA_FUNC_AUX -> FUNC .)
    void            reduce using rule 6 (PROGRAMA_FUNC_AUX -> FUNC .)


state 25

    (13) VARS_LIST -> list TIPO . VARS_LIST_AUX semicolon
    (14) VARS_LIST_AUX -> . id left_sb cteInt right_sb
    (15) VARS_LIST_AUX -> . VARS_LIST_AUX comma id left_sb cteInt right_sb

    id              shift and go to state 33

    VARS_LIST_AUX                  shift and go to state 32

state 26

    (16) VARS_VAR -> var TIPO . VARS_VAR_AUX semicolon
    (17) VARS_VAR_AUX -> . id
    (18) VARS_VAR_AUX -> . VARS_VAR_AUX comma id

    id              shift and go to state 35

    VARS_VAR_AUX                   shift and go to state 34

state 27

    (10) VARS_AUX -> VARS_AUX VARS_LIST_VAR .

    list            reduce using rule 10 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    var             reduce using rule 10 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    if              reduce using rule 10 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    while           reduce using rule 10 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    cread           reduce using rule 10 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    cwrite          reduce using rule 10 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    left_par        reduce using rule 10 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    id              reduce using rule 10 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    return          reduce using rule 10 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    right_cb        reduce using rule 10 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    int             reduce using rule 10 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    float           reduce using rule 10 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    bool            reduce using rule 10 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    string          reduce using rule 10 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    void            reduce using rule 10 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    main            reduce using rule 10 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)


state 28

    (5) PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .

    main            reduce using rule 5 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)
    int             reduce using rule 5 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)
    float           reduce using rule 5 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)
    bool            reduce using rule 5 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)
    string          reduce using rule 5 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)
    void            reduce using rule 5 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)


state 29

    (1) PROGRAMA -> program id semicolon PROGRAMA_VARS PROGRAMA_FUNC main . CUERPO
    (23) CUERPO -> . left_cb CUERPO_AUX right_cb

    left_cb         shift and go to state 37

    CUERPO                         shift and go to state 36

state 30

    (43) FUNC -> TIPO id . left_par FUNC_PARA right_par CUERPORETORNO

    left_par        shift and go to state 38


state 31

    (47) VOIDFUNC -> void id . left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb

    left_par        shift and go to state 39


state 32

    (13) VARS_LIST -> list TIPO VARS_LIST_AUX . semicolon
    (15) VARS_LIST_AUX -> VARS_LIST_AUX . comma id left_sb cteInt right_sb

    semicolon       shift and go to state 40
    comma           shift and go to state 41


state 33

    (14) VARS_LIST_AUX -> id . left_sb cteInt right_sb

    left_sb         shift and go to state 42


state 34

    (16) VARS_VAR -> var TIPO VARS_VAR_AUX . semicolon
    (18) VARS_VAR_AUX -> VARS_VAR_AUX . comma id

    semicolon       shift and go to state 43
    comma           shift and go to state 44


state 35

    (17) VARS_VAR_AUX -> id .

    semicolon       reduce using rule 17 (VARS_VAR_AUX -> id .)
    comma           reduce using rule 17 (VARS_VAR_AUX -> id .)


state 36

    (1) PROGRAMA -> program id semicolon PROGRAMA_VARS PROGRAMA_FUNC main CUERPO .

    $end            reduce using rule 1 (PROGRAMA -> program id semicolon PROGRAMA_VARS PROGRAMA_FUNC main CUERPO .)


state 37

    (23) CUERPO -> left_cb . CUERPO_AUX right_cb
    (24) CUERPO_AUX -> . CUERPO_VARS CUERPO_ESTATUTO
    (25) CUERPO_AUX -> . CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO
    (26) CUERPO_VARS -> . VARS
    (27) CUERPO_VARS -> . empty
    (8) VARS -> . VARS_AUX
    (113) empty -> .
    (9) VARS_AUX -> . VARS_LIST_VAR
    (10) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (11) VARS_LIST_VAR -> . VARS_LIST
    (12) VARS_LIST_VAR -> . VARS_VAR
    (13) VARS_LIST -> . list TIPO VARS_LIST_AUX semicolon
    (16) VARS_VAR -> . var TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    if              reduce using rule 113 (empty -> .)
    while           reduce using rule 113 (empty -> .)
    cread           reduce using rule 113 (empty -> .)
    cwrite          reduce using rule 113 (empty -> .)
    left_par        reduce using rule 113 (empty -> .)
    id              reduce using rule 113 (empty -> .)
    right_cb        reduce using rule 113 (empty -> .)
    list            shift and go to state 9
    var             shift and go to state 10

  ! list            [ reduce using rule 113 (empty -> .) ]
  ! var             [ reduce using rule 113 (empty -> .) ]

    CUERPO_VARS                    shift and go to state 45
    VARS                           shift and go to state 46
    VARS_LIST                      shift and go to state 6
    VARS_LIST_VAR                  shift and go to state 7
    VARS_AUX                       shift and go to state 11
    CUERPO_AUX                     shift and go to state 48
    VARS_VAR                       shift and go to state 12
    empty                          shift and go to state 47

state 38

    (43) FUNC -> TIPO id left_par . FUNC_PARA right_par CUERPORETORNO
    (45) FUNC_PARA -> . TIPO id
    (46) FUNC_PARA -> . FUNC_PARA comma TIPO id
    (19) TIPO -> . int
    (20) TIPO -> . float
    (21) TIPO -> . bool
    (22) TIPO -> . string

    int             shift and go to state 15
    float           shift and go to state 16
    bool            shift and go to state 19
    string          shift and go to state 22

    FUNC_PARA                      shift and go to state 50
    TIPO                           shift and go to state 49

state 39

    (47) VOIDFUNC -> void id left_par . VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb
    (48) VOIDFUNC_PARA -> . TIPO id
    (49) VOIDFUNC_PARA -> . VOIDFUNC_PARA comma TIPO id
    (19) TIPO -> . int
    (20) TIPO -> . float
    (21) TIPO -> . bool
    (22) TIPO -> . string

    int             shift and go to state 15
    float           shift and go to state 16
    bool            shift and go to state 19
    string          shift and go to state 22

    VOIDFUNC_PARA                  shift and go to state 51
    TIPO                           shift and go to state 52

state 40

    (13) VARS_LIST -> list TIPO VARS_LIST_AUX semicolon .

    list            reduce using rule 13 (VARS_LIST -> list TIPO VARS_LIST_AUX semicolon .)
    var             reduce using rule 13 (VARS_LIST -> list TIPO VARS_LIST_AUX semicolon .)
    if              reduce using rule 13 (VARS_LIST -> list TIPO VARS_LIST_AUX semicolon .)
    while           reduce using rule 13 (VARS_LIST -> list TIPO VARS_LIST_AUX semicolon .)
    cread           reduce using rule 13 (VARS_LIST -> list TIPO VARS_LIST_AUX semicolon .)
    cwrite          reduce using rule 13 (VARS_LIST -> list TIPO VARS_LIST_AUX semicolon .)
    left_par        reduce using rule 13 (VARS_LIST -> list TIPO VARS_LIST_AUX semicolon .)
    id              reduce using rule 13 (VARS_LIST -> list TIPO VARS_LIST_AUX semicolon .)
    right_cb        reduce using rule 13 (VARS_LIST -> list TIPO VARS_LIST_AUX semicolon .)
    return          reduce using rule 13 (VARS_LIST -> list TIPO VARS_LIST_AUX semicolon .)
    int             reduce using rule 13 (VARS_LIST -> list TIPO VARS_LIST_AUX semicolon .)
    float           reduce using rule 13 (VARS_LIST -> list TIPO VARS_LIST_AUX semicolon .)
    bool            reduce using rule 13 (VARS_LIST -> list TIPO VARS_LIST_AUX semicolon .)
    string          reduce using rule 13 (VARS_LIST -> list TIPO VARS_LIST_AUX semicolon .)
    void            reduce using rule 13 (VARS_LIST -> list TIPO VARS_LIST_AUX semicolon .)
    main            reduce using rule 13 (VARS_LIST -> list TIPO VARS_LIST_AUX semicolon .)


state 41

    (15) VARS_LIST_AUX -> VARS_LIST_AUX comma . id left_sb cteInt right_sb

    id              shift and go to state 53


state 42

    (14) VARS_LIST_AUX -> id left_sb . cteInt right_sb

    cteInt          shift and go to state 54


state 43

    (16) VARS_VAR -> var TIPO VARS_VAR_AUX semicolon .

    list            reduce using rule 16 (VARS_VAR -> var TIPO VARS_VAR_AUX semicolon .)
    var             reduce using rule 16 (VARS_VAR -> var TIPO VARS_VAR_AUX semicolon .)
    if              reduce using rule 16 (VARS_VAR -> var TIPO VARS_VAR_AUX semicolon .)
    while           reduce using rule 16 (VARS_VAR -> var TIPO VARS_VAR_AUX semicolon .)
    cread           reduce using rule 16 (VARS_VAR -> var TIPO VARS_VAR_AUX semicolon .)
    cwrite          reduce using rule 16 (VARS_VAR -> var TIPO VARS_VAR_AUX semicolon .)
    left_par        reduce using rule 16 (VARS_VAR -> var TIPO VARS_VAR_AUX semicolon .)
    id              reduce using rule 16 (VARS_VAR -> var TIPO VARS_VAR_AUX semicolon .)
    return          reduce using rule 16 (VARS_VAR -> var TIPO VARS_VAR_AUX semicolon .)
    right_cb        reduce using rule 16 (VARS_VAR -> var TIPO VARS_VAR_AUX semicolon .)
    int             reduce using rule 16 (VARS_VAR -> var TIPO VARS_VAR_AUX semicolon .)
    float           reduce using rule 16 (VARS_VAR -> var TIPO VARS_VAR_AUX semicolon .)
    bool            reduce using rule 16 (VARS_VAR -> var TIPO VARS_VAR_AUX semicolon .)
    string          reduce using rule 16 (VARS_VAR -> var TIPO VARS_VAR_AUX semicolon .)
    void            reduce using rule 16 (VARS_VAR -> var TIPO VARS_VAR_AUX semicolon .)
    main            reduce using rule 16 (VARS_VAR -> var TIPO VARS_VAR_AUX semicolon .)


state 44

    (18) VARS_VAR_AUX -> VARS_VAR_AUX comma . id

    id              shift and go to state 55


state 45

    (24) CUERPO_AUX -> CUERPO_VARS . CUERPO_ESTATUTO
    (28) CUERPO_ESTATUTO -> . ESTATUTO
    (29) CUERPO_ESTATUTO -> . empty
    (50) ESTATUTO -> . ASIGNACION
    (51) ESTATUTO -> . CONDICION
    (52) ESTATUTO -> . CICLO
    (53) ESTATUTO -> . LECTURA
    (54) ESTATUTO -> . ESCRITURA
    (55) ESTATUTO -> . LLAMADA
    (113) empty -> .
    (110) ASIGNACION -> . ASIGNACION_AUX equals EXPRESION semicolon
    (56) CONDICION -> . if CONDICION_ELSEIF CONDICION_ELSE
    (61) CICLO -> . while left_par EXPRESION right_par CUERPO
    (62) LECTURA -> . cread left_par id right_par semicolon
    (63) ESCRITURA -> . cwrite left_par EXPRESION right_par semicolon
    (64) LLAMADA -> . left_par LLAMADA_EXPRESION right_par semicolon
    (111) ASIGNACION_AUX -> . id
    (112) ASIGNACION_AUX -> . LISTA
    (98) LISTA -> . id left_sb EXP right_sb

  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for cread resolved as shift
  ! shift/reduce conflict for cwrite resolved as shift
  ! shift/reduce conflict for left_par resolved as shift
  ! shift/reduce conflict for id resolved as shift
    right_cb        reduce using rule 113 (empty -> .)
    list            reduce using rule 113 (empty -> .)
    var             reduce using rule 113 (empty -> .)
    if              shift and go to state 59
    while           shift and go to state 71
    cread           shift and go to state 57
    cwrite          shift and go to state 63
    left_par        shift and go to state 69
    id              shift and go to state 62

  ! if              [ reduce using rule 113 (empty -> .) ]
  ! while           [ reduce using rule 113 (empty -> .) ]
  ! cread           [ reduce using rule 113 (empty -> .) ]
  ! cwrite          [ reduce using rule 113 (empty -> .) ]
  ! left_par        [ reduce using rule 113 (empty -> .) ]
  ! id              [ reduce using rule 113 (empty -> .) ]

    CICLO                          shift and go to state 56
    ASIGNACION                     shift and go to state 60
    ESTATUTO                       shift and go to state 61
    LECTURA                        shift and go to state 58
    LLAMADA                        shift and go to state 67
    CONDICION                      shift and go to state 68
    ASIGNACION_AUX                 shift and go to state 64
    LISTA                          shift and go to state 72
    CUERPO_ESTATUTO                shift and go to state 70
    empty                          shift and go to state 66
    ESCRITURA                      shift and go to state 65

state 46

    (26) CUERPO_VARS -> VARS .

    if              reduce using rule 26 (CUERPO_VARS -> VARS .)
    while           reduce using rule 26 (CUERPO_VARS -> VARS .)
    cread           reduce using rule 26 (CUERPO_VARS -> VARS .)
    cwrite          reduce using rule 26 (CUERPO_VARS -> VARS .)
    left_par        reduce using rule 26 (CUERPO_VARS -> VARS .)
    id              reduce using rule 26 (CUERPO_VARS -> VARS .)
    right_cb        reduce using rule 26 (CUERPO_VARS -> VARS .)
    list            reduce using rule 26 (CUERPO_VARS -> VARS .)
    var             reduce using rule 26 (CUERPO_VARS -> VARS .)


state 47

    (27) CUERPO_VARS -> empty .

    if              reduce using rule 27 (CUERPO_VARS -> empty .)
    while           reduce using rule 27 (CUERPO_VARS -> empty .)
    cread           reduce using rule 27 (CUERPO_VARS -> empty .)
    cwrite          reduce using rule 27 (CUERPO_VARS -> empty .)
    left_par        reduce using rule 27 (CUERPO_VARS -> empty .)
    id              reduce using rule 27 (CUERPO_VARS -> empty .)
    right_cb        reduce using rule 27 (CUERPO_VARS -> empty .)
    list            reduce using rule 27 (CUERPO_VARS -> empty .)
    var             reduce using rule 27 (CUERPO_VARS -> empty .)


state 48

    (23) CUERPO -> left_cb CUERPO_AUX . right_cb
    (25) CUERPO_AUX -> CUERPO_AUX . CUERPO_VARS CUERPO_ESTATUTO
    (26) CUERPO_VARS -> . VARS
    (27) CUERPO_VARS -> . empty
    (8) VARS -> . VARS_AUX
    (113) empty -> .
    (9) VARS_AUX -> . VARS_LIST_VAR
    (10) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (11) VARS_LIST_VAR -> . VARS_LIST
    (12) VARS_LIST_VAR -> . VARS_VAR
    (13) VARS_LIST -> . list TIPO VARS_LIST_AUX semicolon
    (16) VARS_VAR -> . var TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for right_cb resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    right_cb        shift and go to state 74
    if              reduce using rule 113 (empty -> .)
    while           reduce using rule 113 (empty -> .)
    cread           reduce using rule 113 (empty -> .)
    cwrite          reduce using rule 113 (empty -> .)
    left_par        reduce using rule 113 (empty -> .)
    id              reduce using rule 113 (empty -> .)
    list            shift and go to state 9
    var             shift and go to state 10

  ! right_cb        [ reduce using rule 113 (empty -> .) ]
  ! list            [ reduce using rule 113 (empty -> .) ]
  ! var             [ reduce using rule 113 (empty -> .) ]

    CUERPO_VARS                    shift and go to state 73
    VARS                           shift and go to state 46
    VARS_LIST                      shift and go to state 6
    VARS_LIST_VAR                  shift and go to state 7
    VARS_AUX                       shift and go to state 11
    VARS_VAR                       shift and go to state 12
    empty                          shift and go to state 47

state 49

    (45) FUNC_PARA -> TIPO . id

    id              shift and go to state 75


state 50

    (43) FUNC -> TIPO id left_par FUNC_PARA . right_par CUERPORETORNO
    (46) FUNC_PARA -> FUNC_PARA . comma TIPO id

    right_par       shift and go to state 77
    comma           shift and go to state 76


state 51

    (47) VOIDFUNC -> void id left_par VOIDFUNC_PARA . right_par left_cb CUERPOFUNC right_cb
    (49) VOIDFUNC_PARA -> VOIDFUNC_PARA . comma TIPO id

    right_par       shift and go to state 79
    comma           shift and go to state 78


state 52

    (48) VOIDFUNC_PARA -> TIPO . id

    id              shift and go to state 80


state 53

    (15) VARS_LIST_AUX -> VARS_LIST_AUX comma id . left_sb cteInt right_sb

    left_sb         shift and go to state 81


state 54

    (14) VARS_LIST_AUX -> id left_sb cteInt . right_sb

    right_sb        shift and go to state 82


state 55

    (18) VARS_VAR_AUX -> VARS_VAR_AUX comma id .

    semicolon       reduce using rule 18 (VARS_VAR_AUX -> VARS_VAR_AUX comma id .)
    comma           reduce using rule 18 (VARS_VAR_AUX -> VARS_VAR_AUX comma id .)


state 56

    (52) ESTATUTO -> CICLO .

    list            reduce using rule 52 (ESTATUTO -> CICLO .)
    var             reduce using rule 52 (ESTATUTO -> CICLO .)
    if              reduce using rule 52 (ESTATUTO -> CICLO .)
    while           reduce using rule 52 (ESTATUTO -> CICLO .)
    cread           reduce using rule 52 (ESTATUTO -> CICLO .)
    cwrite          reduce using rule 52 (ESTATUTO -> CICLO .)
    left_par        reduce using rule 52 (ESTATUTO -> CICLO .)
    id              reduce using rule 52 (ESTATUTO -> CICLO .)
    return          reduce using rule 52 (ESTATUTO -> CICLO .)
    right_cb        reduce using rule 52 (ESTATUTO -> CICLO .)


state 57

    (62) LECTURA -> cread . left_par id right_par semicolon

    left_par        shift and go to state 83


state 58

    (53) ESTATUTO -> LECTURA .

    list            reduce using rule 53 (ESTATUTO -> LECTURA .)
    var             reduce using rule 53 (ESTATUTO -> LECTURA .)
    if              reduce using rule 53 (ESTATUTO -> LECTURA .)
    while           reduce using rule 53 (ESTATUTO -> LECTURA .)
    cread           reduce using rule 53 (ESTATUTO -> LECTURA .)
    cwrite          reduce using rule 53 (ESTATUTO -> LECTURA .)
    left_par        reduce using rule 53 (ESTATUTO -> LECTURA .)
    id              reduce using rule 53 (ESTATUTO -> LECTURA .)
    return          reduce using rule 53 (ESTATUTO -> LECTURA .)
    right_cb        reduce using rule 53 (ESTATUTO -> LECTURA .)


state 59

    (56) CONDICION -> if . CONDICION_ELSEIF CONDICION_ELSE
    (57) CONDICION_ELSEIF -> . left_par EXPRESION right_par CUERPO
    (58) CONDICION_ELSEIF -> . CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO

    left_par        shift and go to state 84

    CONDICION_ELSEIF               shift and go to state 85

state 60

    (50) ESTATUTO -> ASIGNACION .

    list            reduce using rule 50 (ESTATUTO -> ASIGNACION .)
    var             reduce using rule 50 (ESTATUTO -> ASIGNACION .)
    if              reduce using rule 50 (ESTATUTO -> ASIGNACION .)
    while           reduce using rule 50 (ESTATUTO -> ASIGNACION .)
    cread           reduce using rule 50 (ESTATUTO -> ASIGNACION .)
    cwrite          reduce using rule 50 (ESTATUTO -> ASIGNACION .)
    left_par        reduce using rule 50 (ESTATUTO -> ASIGNACION .)
    id              reduce using rule 50 (ESTATUTO -> ASIGNACION .)
    return          reduce using rule 50 (ESTATUTO -> ASIGNACION .)
    right_cb        reduce using rule 50 (ESTATUTO -> ASIGNACION .)


state 61

    (28) CUERPO_ESTATUTO -> ESTATUTO .

    right_cb        reduce using rule 28 (CUERPO_ESTATUTO -> ESTATUTO .)
    list            reduce using rule 28 (CUERPO_ESTATUTO -> ESTATUTO .)
    var             reduce using rule 28 (CUERPO_ESTATUTO -> ESTATUTO .)
    if              reduce using rule 28 (CUERPO_ESTATUTO -> ESTATUTO .)
    while           reduce using rule 28 (CUERPO_ESTATUTO -> ESTATUTO .)
    cread           reduce using rule 28 (CUERPO_ESTATUTO -> ESTATUTO .)
    cwrite          reduce using rule 28 (CUERPO_ESTATUTO -> ESTATUTO .)
    left_par        reduce using rule 28 (CUERPO_ESTATUTO -> ESTATUTO .)
    id              reduce using rule 28 (CUERPO_ESTATUTO -> ESTATUTO .)


state 62

    (111) ASIGNACION_AUX -> id .
    (98) LISTA -> id . left_sb EXP right_sb

    equals          reduce using rule 111 (ASIGNACION_AUX -> id .)
    left_sb         shift and go to state 86


state 63

    (63) ESCRITURA -> cwrite . left_par EXPRESION right_par semicolon

    left_par        shift and go to state 87


state 64

    (110) ASIGNACION -> ASIGNACION_AUX . equals EXPRESION semicolon

    equals          shift and go to state 88


state 65

    (54) ESTATUTO -> ESCRITURA .

    list            reduce using rule 54 (ESTATUTO -> ESCRITURA .)
    var             reduce using rule 54 (ESTATUTO -> ESCRITURA .)
    if              reduce using rule 54 (ESTATUTO -> ESCRITURA .)
    while           reduce using rule 54 (ESTATUTO -> ESCRITURA .)
    cread           reduce using rule 54 (ESTATUTO -> ESCRITURA .)
    cwrite          reduce using rule 54 (ESTATUTO -> ESCRITURA .)
    left_par        reduce using rule 54 (ESTATUTO -> ESCRITURA .)
    id              reduce using rule 54 (ESTATUTO -> ESCRITURA .)
    return          reduce using rule 54 (ESTATUTO -> ESCRITURA .)
    right_cb        reduce using rule 54 (ESTATUTO -> ESCRITURA .)


state 66

    (29) CUERPO_ESTATUTO -> empty .

    right_cb        reduce using rule 29 (CUERPO_ESTATUTO -> empty .)
    list            reduce using rule 29 (CUERPO_ESTATUTO -> empty .)
    var             reduce using rule 29 (CUERPO_ESTATUTO -> empty .)
    if              reduce using rule 29 (CUERPO_ESTATUTO -> empty .)
    while           reduce using rule 29 (CUERPO_ESTATUTO -> empty .)
    cread           reduce using rule 29 (CUERPO_ESTATUTO -> empty .)
    cwrite          reduce using rule 29 (CUERPO_ESTATUTO -> empty .)
    left_par        reduce using rule 29 (CUERPO_ESTATUTO -> empty .)
    id              reduce using rule 29 (CUERPO_ESTATUTO -> empty .)


state 67

    (55) ESTATUTO -> LLAMADA .

    list            reduce using rule 55 (ESTATUTO -> LLAMADA .)
    var             reduce using rule 55 (ESTATUTO -> LLAMADA .)
    if              reduce using rule 55 (ESTATUTO -> LLAMADA .)
    while           reduce using rule 55 (ESTATUTO -> LLAMADA .)
    cread           reduce using rule 55 (ESTATUTO -> LLAMADA .)
    cwrite          reduce using rule 55 (ESTATUTO -> LLAMADA .)
    left_par        reduce using rule 55 (ESTATUTO -> LLAMADA .)
    id              reduce using rule 55 (ESTATUTO -> LLAMADA .)
    return          reduce using rule 55 (ESTATUTO -> LLAMADA .)
    right_cb        reduce using rule 55 (ESTATUTO -> LLAMADA .)


state 68

    (51) ESTATUTO -> CONDICION .

    list            reduce using rule 51 (ESTATUTO -> CONDICION .)
    var             reduce using rule 51 (ESTATUTO -> CONDICION .)
    if              reduce using rule 51 (ESTATUTO -> CONDICION .)
    while           reduce using rule 51 (ESTATUTO -> CONDICION .)
    cread           reduce using rule 51 (ESTATUTO -> CONDICION .)
    cwrite          reduce using rule 51 (ESTATUTO -> CONDICION .)
    left_par        reduce using rule 51 (ESTATUTO -> CONDICION .)
    id              reduce using rule 51 (ESTATUTO -> CONDICION .)
    return          reduce using rule 51 (ESTATUTO -> CONDICION .)
    right_cb        reduce using rule 51 (ESTATUTO -> CONDICION .)


state 69

    (64) LLAMADA -> left_par . LLAMADA_EXPRESION right_par semicolon
    (65) LLAMADA_EXPRESION -> . EXPRESION
    (66) LLAMADA_EXPRESION -> . LLAMADA_EXPRESION comma EXPRESION
    (67) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA EXPRESION_B
    (68) EXPRESION_NOT -> . not
    (69) EXPRESION_NOT -> . empty
    (113) empty -> .

    not             shift and go to state 92
    left_par        reduce using rule 113 (empty -> .)
    id              reduce using rule 113 (empty -> .)
    plus            reduce using rule 113 (empty -> .)
    minus           reduce using rule 113 (empty -> .)
    true            reduce using rule 113 (empty -> .)
    false           reduce using rule 113 (empty -> .)
    cteString       reduce using rule 113 (empty -> .)
    cteInt          reduce using rule 113 (empty -> .)
    cteFloat        reduce using rule 113 (empty -> .)

    EXPRESION                      shift and go to state 89
    EXPRESION_NOT                  shift and go to state 90
    LLAMADA_EXPRESION              shift and go to state 91
    empty                          shift and go to state 93

state 70

    (24) CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .

    right_cb        reduce using rule 24 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    list            reduce using rule 24 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    var             reduce using rule 24 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    if              reduce using rule 24 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    while           reduce using rule 24 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    cread           reduce using rule 24 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    cwrite          reduce using rule 24 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    left_par        reduce using rule 24 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    id              reduce using rule 24 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)


state 71

    (61) CICLO -> while . left_par EXPRESION right_par CUERPO

    left_par        shift and go to state 94


state 72

    (112) ASIGNACION_AUX -> LISTA .

    equals          reduce using rule 112 (ASIGNACION_AUX -> LISTA .)


state 73

    (25) CUERPO_AUX -> CUERPO_AUX CUERPO_VARS . CUERPO_ESTATUTO
    (28) CUERPO_ESTATUTO -> . ESTATUTO
    (29) CUERPO_ESTATUTO -> . empty
    (50) ESTATUTO -> . ASIGNACION
    (51) ESTATUTO -> . CONDICION
    (52) ESTATUTO -> . CICLO
    (53) ESTATUTO -> . LECTURA
    (54) ESTATUTO -> . ESCRITURA
    (55) ESTATUTO -> . LLAMADA
    (113) empty -> .
    (110) ASIGNACION -> . ASIGNACION_AUX equals EXPRESION semicolon
    (56) CONDICION -> . if CONDICION_ELSEIF CONDICION_ELSE
    (61) CICLO -> . while left_par EXPRESION right_par CUERPO
    (62) LECTURA -> . cread left_par id right_par semicolon
    (63) ESCRITURA -> . cwrite left_par EXPRESION right_par semicolon
    (64) LLAMADA -> . left_par LLAMADA_EXPRESION right_par semicolon
    (111) ASIGNACION_AUX -> . id
    (112) ASIGNACION_AUX -> . LISTA
    (98) LISTA -> . id left_sb EXP right_sb

  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for cread resolved as shift
  ! shift/reduce conflict for cwrite resolved as shift
  ! shift/reduce conflict for left_par resolved as shift
  ! shift/reduce conflict for id resolved as shift
    right_cb        reduce using rule 113 (empty -> .)
    list            reduce using rule 113 (empty -> .)
    var             reduce using rule 113 (empty -> .)
    if              shift and go to state 59
    while           shift and go to state 71
    cread           shift and go to state 57
    cwrite          shift and go to state 63
    left_par        shift and go to state 69
    id              shift and go to state 62

  ! if              [ reduce using rule 113 (empty -> .) ]
  ! while           [ reduce using rule 113 (empty -> .) ]
  ! cread           [ reduce using rule 113 (empty -> .) ]
  ! cwrite          [ reduce using rule 113 (empty -> .) ]
  ! left_par        [ reduce using rule 113 (empty -> .) ]
  ! id              [ reduce using rule 113 (empty -> .) ]

    CICLO                          shift and go to state 56
    ASIGNACION                     shift and go to state 60
    ESTATUTO                       shift and go to state 61
    LECTURA                        shift and go to state 58
    LLAMADA                        shift and go to state 67
    CONDICION                      shift and go to state 68
    ASIGNACION_AUX                 shift and go to state 64
    LISTA                          shift and go to state 72
    CUERPO_ESTATUTO                shift and go to state 95
    empty                          shift and go to state 66
    ESCRITURA                      shift and go to state 65

state 74

    (23) CUERPO -> left_cb CUERPO_AUX right_cb .

    elseif          reduce using rule 23 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    else            reduce using rule 23 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    right_cb        reduce using rule 23 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    list            reduce using rule 23 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    var             reduce using rule 23 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    if              reduce using rule 23 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    while           reduce using rule 23 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    cread           reduce using rule 23 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    cwrite          reduce using rule 23 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    left_par        reduce using rule 23 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    id              reduce using rule 23 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    return          reduce using rule 23 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    $end            reduce using rule 23 (CUERPO -> left_cb CUERPO_AUX right_cb .)


state 75

    (45) FUNC_PARA -> TIPO id .

    right_par       reduce using rule 45 (FUNC_PARA -> TIPO id .)
    comma           reduce using rule 45 (FUNC_PARA -> TIPO id .)


state 76

    (46) FUNC_PARA -> FUNC_PARA comma . TIPO id
    (19) TIPO -> . int
    (20) TIPO -> . float
    (21) TIPO -> . bool
    (22) TIPO -> . string

    int             shift and go to state 15
    float           shift and go to state 16
    bool            shift and go to state 19
    string          shift and go to state 22

    TIPO                           shift and go to state 96

state 77

    (43) FUNC -> TIPO id left_par FUNC_PARA right_par . CUERPORETORNO
    (37) CUERPORETORNO -> . left_cb CUERPORETORNO_AUX right_cb

    left_cb         shift and go to state 98

    CUERPORETORNO                  shift and go to state 97

state 78

    (49) VOIDFUNC_PARA -> VOIDFUNC_PARA comma . TIPO id
    (19) TIPO -> . int
    (20) TIPO -> . float
    (21) TIPO -> . bool
    (22) TIPO -> . string

    int             shift and go to state 15
    float           shift and go to state 16
    bool            shift and go to state 19
    string          shift and go to state 22

    TIPO                           shift and go to state 99

state 79

    (47) VOIDFUNC -> void id left_par VOIDFUNC_PARA right_par . left_cb CUERPOFUNC right_cb

    left_cb         shift and go to state 100


state 80

    (48) VOIDFUNC_PARA -> TIPO id .

    right_par       reduce using rule 48 (VOIDFUNC_PARA -> TIPO id .)
    comma           reduce using rule 48 (VOIDFUNC_PARA -> TIPO id .)


state 81

    (15) VARS_LIST_AUX -> VARS_LIST_AUX comma id left_sb . cteInt right_sb

    cteInt          shift and go to state 101


state 82

    (14) VARS_LIST_AUX -> id left_sb cteInt right_sb .

    semicolon       reduce using rule 14 (VARS_LIST_AUX -> id left_sb cteInt right_sb .)
    comma           reduce using rule 14 (VARS_LIST_AUX -> id left_sb cteInt right_sb .)


state 83

    (62) LECTURA -> cread left_par . id right_par semicolon

    id              shift and go to state 102


state 84

    (57) CONDICION_ELSEIF -> left_par . EXPRESION right_par CUERPO
    (67) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA EXPRESION_B
    (68) EXPRESION_NOT -> . not
    (69) EXPRESION_NOT -> . empty
    (113) empty -> .

    not             shift and go to state 92
    left_par        reduce using rule 113 (empty -> .)
    id              reduce using rule 113 (empty -> .)
    plus            reduce using rule 113 (empty -> .)
    minus           reduce using rule 113 (empty -> .)
    true            reduce using rule 113 (empty -> .)
    false           reduce using rule 113 (empty -> .)
    cteString       reduce using rule 113 (empty -> .)
    cteInt          reduce using rule 113 (empty -> .)
    cteFloat        reduce using rule 113 (empty -> .)

    EXPRESION                      shift and go to state 103
    EXPRESION_NOT                  shift and go to state 90
    empty                          shift and go to state 93

state 85

    (56) CONDICION -> if CONDICION_ELSEIF . CONDICION_ELSE
    (58) CONDICION_ELSEIF -> CONDICION_ELSEIF . elseif left_par EXPRESION right_par CUERPO
    (59) CONDICION_ELSE -> . else CUERPO
    (60) CONDICION_ELSE -> . empty
    (113) empty -> .

    elseif          shift and go to state 106
    else            shift and go to state 105
    right_cb        reduce using rule 113 (empty -> .)
    list            reduce using rule 113 (empty -> .)
    var             reduce using rule 113 (empty -> .)
    if              reduce using rule 113 (empty -> .)
    while           reduce using rule 113 (empty -> .)
    cread           reduce using rule 113 (empty -> .)
    cwrite          reduce using rule 113 (empty -> .)
    left_par        reduce using rule 113 (empty -> .)
    id              reduce using rule 113 (empty -> .)
    return          reduce using rule 113 (empty -> .)

    CONDICION_ELSE                 shift and go to state 104
    empty                          shift and go to state 107

state 86

    (98) LISTA -> id left_sb . EXP right_sb
    (81) EXP -> . TERMINO EXP_AUX
    (85) TERMINO -> . FACTOR TERMINO_AUX
    (89) FACTOR -> . left_par EXPRESION right_par
    (90) FACTOR -> . CONSTANTE
    (91) FACTOR -> . LISTA
    (92) FACTOR -> . FACTOR_AUX
    (99) CONSTANTE -> . NUMERICA
    (100) CONSTANTE -> . BOOLEANA
    (101) CONSTANTE -> . STRINGS
    (98) LISTA -> . id left_sb EXP right_sb
    (93) FACTOR_AUX -> . id
    (94) FACTOR_AUX -> . id LLAMADA_F
    (102) NUMERICA -> . NUMERICA_AUX
    (103) NUMERICA -> . plus NUMERICA_AUX
    (104) NUMERICA -> . minus NUMERICA_AUX
    (107) BOOLEANA -> . true
    (108) BOOLEANA -> . false
    (109) STRINGS -> . cteString
    (105) NUMERICA_AUX -> . cteInt
    (106) NUMERICA_AUX -> . cteFloat

    left_par        shift and go to state 117
    id              shift and go to state 112
    plus            shift and go to state 123
    minus           shift and go to state 126
    true            shift and go to state 118
    false           shift and go to state 108
    cteString       shift and go to state 116
    cteInt          shift and go to state 121
    cteFloat        shift and go to state 110

    NUMERICA_AUX                   shift and go to state 115
    CONSTANTE                      shift and go to state 120
    FACTOR_AUX                     shift and go to state 114
    STRINGS                        shift and go to state 119
    NUMERICA                       shift and go to state 122
    TERMINO                        shift and go to state 113
    EXP                            shift and go to state 109
    FACTOR                         shift and go to state 124
    LISTA                          shift and go to state 125
    BOOLEANA                       shift and go to state 111

state 87

    (63) ESCRITURA -> cwrite left_par . EXPRESION right_par semicolon
    (67) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA EXPRESION_B
    (68) EXPRESION_NOT -> . not
    (69) EXPRESION_NOT -> . empty
    (113) empty -> .

    not             shift and go to state 92
    left_par        reduce using rule 113 (empty -> .)
    id              reduce using rule 113 (empty -> .)
    plus            reduce using rule 113 (empty -> .)
    minus           reduce using rule 113 (empty -> .)
    true            reduce using rule 113 (empty -> .)
    false           reduce using rule 113 (empty -> .)
    cteString       reduce using rule 113 (empty -> .)
    cteInt          reduce using rule 113 (empty -> .)
    cteFloat        reduce using rule 113 (empty -> .)

    EXPRESION                      shift and go to state 127
    EXPRESION_NOT                  shift and go to state 90
    empty                          shift and go to state 93

state 88

    (110) ASIGNACION -> ASIGNACION_AUX equals . EXPRESION semicolon
    (67) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA EXPRESION_B
    (68) EXPRESION_NOT -> . not
    (69) EXPRESION_NOT -> . empty
    (113) empty -> .

    not             shift and go to state 92
    left_par        reduce using rule 113 (empty -> .)
    id              reduce using rule 113 (empty -> .)
    plus            reduce using rule 113 (empty -> .)
    minus           reduce using rule 113 (empty -> .)
    true            reduce using rule 113 (empty -> .)
    false           reduce using rule 113 (empty -> .)
    cteString       reduce using rule 113 (empty -> .)
    cteInt          reduce using rule 113 (empty -> .)
    cteFloat        reduce using rule 113 (empty -> .)

    EXPRESION                      shift and go to state 128
    EXPRESION_NOT                  shift and go to state 90
    empty                          shift and go to state 93

state 89

    (65) LLAMADA_EXPRESION -> EXPRESION .

    right_par       reduce using rule 65 (LLAMADA_EXPRESION -> EXPRESION .)
    comma           reduce using rule 65 (LLAMADA_EXPRESION -> EXPRESION .)


state 90

    (67) EXPRESION -> EXPRESION_NOT . EXPRESIONLOGICA EXPRESION_B
    (73) EXPRESIONLOGICA -> . EXP EXPRESIONLOGICA_AUX
    (81) EXP -> . TERMINO EXP_AUX
    (85) TERMINO -> . FACTOR TERMINO_AUX
    (89) FACTOR -> . left_par EXPRESION right_par
    (90) FACTOR -> . CONSTANTE
    (91) FACTOR -> . LISTA
    (92) FACTOR -> . FACTOR_AUX
    (99) CONSTANTE -> . NUMERICA
    (100) CONSTANTE -> . BOOLEANA
    (101) CONSTANTE -> . STRINGS
    (98) LISTA -> . id left_sb EXP right_sb
    (93) FACTOR_AUX -> . id
    (94) FACTOR_AUX -> . id LLAMADA_F
    (102) NUMERICA -> . NUMERICA_AUX
    (103) NUMERICA -> . plus NUMERICA_AUX
    (104) NUMERICA -> . minus NUMERICA_AUX
    (107) BOOLEANA -> . true
    (108) BOOLEANA -> . false
    (109) STRINGS -> . cteString
    (105) NUMERICA_AUX -> . cteInt
    (106) NUMERICA_AUX -> . cteFloat

    left_par        shift and go to state 117
    id              shift and go to state 112
    plus            shift and go to state 123
    minus           shift and go to state 126
    true            shift and go to state 118
    false           shift and go to state 108
    cteString       shift and go to state 116
    cteInt          shift and go to state 121
    cteFloat        shift and go to state 110

    EXPRESIONLOGICA                shift and go to state 129
    CONSTANTE                      shift and go to state 120
    FACTOR_AUX                     shift and go to state 114
    STRINGS                        shift and go to state 119
    NUMERICA                       shift and go to state 122
    TERMINO                        shift and go to state 113
    EXP                            shift and go to state 130
    FACTOR                         shift and go to state 124
    LISTA                          shift and go to state 125
    NUMERICA_AUX                   shift and go to state 115
    BOOLEANA                       shift and go to state 111

state 91

    (64) LLAMADA -> left_par LLAMADA_EXPRESION . right_par semicolon
    (66) LLAMADA_EXPRESION -> LLAMADA_EXPRESION . comma EXPRESION

    right_par       shift and go to state 132
    comma           shift and go to state 131


state 92

    (68) EXPRESION_NOT -> not .

    left_par        reduce using rule 68 (EXPRESION_NOT -> not .)
    id              reduce using rule 68 (EXPRESION_NOT -> not .)
    plus            reduce using rule 68 (EXPRESION_NOT -> not .)
    minus           reduce using rule 68 (EXPRESION_NOT -> not .)
    true            reduce using rule 68 (EXPRESION_NOT -> not .)
    false           reduce using rule 68 (EXPRESION_NOT -> not .)
    cteString       reduce using rule 68 (EXPRESION_NOT -> not .)
    cteInt          reduce using rule 68 (EXPRESION_NOT -> not .)
    cteFloat        reduce using rule 68 (EXPRESION_NOT -> not .)


state 93

    (69) EXPRESION_NOT -> empty .

    left_par        reduce using rule 69 (EXPRESION_NOT -> empty .)
    id              reduce using rule 69 (EXPRESION_NOT -> empty .)
    plus            reduce using rule 69 (EXPRESION_NOT -> empty .)
    minus           reduce using rule 69 (EXPRESION_NOT -> empty .)
    true            reduce using rule 69 (EXPRESION_NOT -> empty .)
    false           reduce using rule 69 (EXPRESION_NOT -> empty .)
    cteString       reduce using rule 69 (EXPRESION_NOT -> empty .)
    cteInt          reduce using rule 69 (EXPRESION_NOT -> empty .)
    cteFloat        reduce using rule 69 (EXPRESION_NOT -> empty .)


state 94

    (61) CICLO -> while left_par . EXPRESION right_par CUERPO
    (67) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA EXPRESION_B
    (68) EXPRESION_NOT -> . not
    (69) EXPRESION_NOT -> . empty
    (113) empty -> .

    not             shift and go to state 92
    left_par        reduce using rule 113 (empty -> .)
    id              reduce using rule 113 (empty -> .)
    plus            reduce using rule 113 (empty -> .)
    minus           reduce using rule 113 (empty -> .)
    true            reduce using rule 113 (empty -> .)
    false           reduce using rule 113 (empty -> .)
    cteString       reduce using rule 113 (empty -> .)
    cteInt          reduce using rule 113 (empty -> .)
    cteFloat        reduce using rule 113 (empty -> .)

    EXPRESION                      shift and go to state 133
    EXPRESION_NOT                  shift and go to state 90
    empty                          shift and go to state 93

state 95

    (25) CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .

    right_cb        reduce using rule 25 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    list            reduce using rule 25 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    var             reduce using rule 25 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    if              reduce using rule 25 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    while           reduce using rule 25 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    cread           reduce using rule 25 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    cwrite          reduce using rule 25 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    left_par        reduce using rule 25 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    id              reduce using rule 25 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)


state 96

    (46) FUNC_PARA -> FUNC_PARA comma TIPO . id

    id              shift and go to state 134


state 97

    (43) FUNC -> TIPO id left_par FUNC_PARA right_par CUERPORETORNO .

    main            reduce using rule 43 (FUNC -> TIPO id left_par FUNC_PARA right_par CUERPORETORNO .)
    int             reduce using rule 43 (FUNC -> TIPO id left_par FUNC_PARA right_par CUERPORETORNO .)
    float           reduce using rule 43 (FUNC -> TIPO id left_par FUNC_PARA right_par CUERPORETORNO .)
    bool            reduce using rule 43 (FUNC -> TIPO id left_par FUNC_PARA right_par CUERPORETORNO .)
    string          reduce using rule 43 (FUNC -> TIPO id left_par FUNC_PARA right_par CUERPORETORNO .)
    void            reduce using rule 43 (FUNC -> TIPO id left_par FUNC_PARA right_par CUERPORETORNO .)


state 98

    (37) CUERPORETORNO -> left_cb . CUERPORETORNO_AUX right_cb
    (38) CUERPORETORNO_AUX -> . CUERPORETORNO_CF_AUX RETORNO
    (39) CUERPORETORNO_AUX -> . CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO
    (40) CUERPORETORNO_CF_AUX -> . CUERPOFUNC
    (41) CUERPORETORNO_CF_AUX -> . empty
    (30) CUERPOFUNC -> . CUERPOFUNC_AUX
    (113) empty -> .
    (31) CUERPOFUNC_AUX -> . CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO
    (32) CUERPOFUNC_AUX -> . CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO
    (33) CUERPOFUNC_VARS -> . VARS
    (34) CUERPOFUNC_VARS -> . empty
    (8) VARS -> . VARS_AUX
    (9) VARS_AUX -> . VARS_LIST_VAR
    (10) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (11) VARS_LIST_VAR -> . VARS_LIST
    (12) VARS_LIST_VAR -> . VARS_VAR
    (13) VARS_LIST -> . list TIPO VARS_LIST_AUX semicolon
    (16) VARS_VAR -> . var TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    return          reduce using rule 113 (empty -> .)
    if              reduce using rule 113 (empty -> .)
    while           reduce using rule 113 (empty -> .)
    cread           reduce using rule 113 (empty -> .)
    cwrite          reduce using rule 113 (empty -> .)
    left_par        reduce using rule 113 (empty -> .)
    id              reduce using rule 113 (empty -> .)
    list            shift and go to state 9
    var             shift and go to state 10

  ! list            [ reduce using rule 113 (empty -> .) ]
  ! var             [ reduce using rule 113 (empty -> .) ]

    CUERPORETORNO_CF_AUX           shift and go to state 135
    VARS                           shift and go to state 137
    CUERPOFUNC                     shift and go to state 136
    VARS_LIST                      shift and go to state 6
    VARS_LIST_VAR                  shift and go to state 7
    VARS_VAR                       shift and go to state 12
    VARS_AUX                       shift and go to state 11
    CUERPORETORNO_AUX              shift and go to state 138
    CUERPOFUNC_VARS                shift and go to state 140
    CUERPOFUNC_AUX                 shift and go to state 141
    empty                          shift and go to state 139

state 99

    (49) VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO . id

    id              shift and go to state 142


state 100

    (47) VOIDFUNC -> void id left_par VOIDFUNC_PARA right_par left_cb . CUERPOFUNC right_cb
    (30) CUERPOFUNC -> . CUERPOFUNC_AUX
    (31) CUERPOFUNC_AUX -> . CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO
    (32) CUERPOFUNC_AUX -> . CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO
    (33) CUERPOFUNC_VARS -> . VARS
    (34) CUERPOFUNC_VARS -> . empty
    (8) VARS -> . VARS_AUX
    (113) empty -> .
    (9) VARS_AUX -> . VARS_LIST_VAR
    (10) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (11) VARS_LIST_VAR -> . VARS_LIST
    (12) VARS_LIST_VAR -> . VARS_VAR
    (13) VARS_LIST -> . list TIPO VARS_LIST_AUX semicolon
    (16) VARS_VAR -> . var TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    if              reduce using rule 113 (empty -> .)
    while           reduce using rule 113 (empty -> .)
    cread           reduce using rule 113 (empty -> .)
    cwrite          reduce using rule 113 (empty -> .)
    left_par        reduce using rule 113 (empty -> .)
    id              reduce using rule 113 (empty -> .)
    right_cb        reduce using rule 113 (empty -> .)
    list            shift and go to state 9
    var             shift and go to state 10

  ! list            [ reduce using rule 113 (empty -> .) ]
  ! var             [ reduce using rule 113 (empty -> .) ]

    VARS                           shift and go to state 137
    CUERPOFUNC                     shift and go to state 143
    VARS_LIST_VAR                  shift and go to state 7
    VARS_LIST                      shift and go to state 6
    VARS_AUX                       shift and go to state 11
    CUERPOFUNC_VARS                shift and go to state 140
    VARS_VAR                       shift and go to state 12
    CUERPOFUNC_AUX                 shift and go to state 141
    empty                          shift and go to state 144

state 101

    (15) VARS_LIST_AUX -> VARS_LIST_AUX comma id left_sb cteInt . right_sb

    right_sb        shift and go to state 145


state 102

    (62) LECTURA -> cread left_par id . right_par semicolon

    right_par       shift and go to state 146


state 103

    (57) CONDICION_ELSEIF -> left_par EXPRESION . right_par CUERPO

    right_par       shift and go to state 147


state 104

    (56) CONDICION -> if CONDICION_ELSEIF CONDICION_ELSE .

    right_cb        reduce using rule 56 (CONDICION -> if CONDICION_ELSEIF CONDICION_ELSE .)
    list            reduce using rule 56 (CONDICION -> if CONDICION_ELSEIF CONDICION_ELSE .)
    var             reduce using rule 56 (CONDICION -> if CONDICION_ELSEIF CONDICION_ELSE .)
    if              reduce using rule 56 (CONDICION -> if CONDICION_ELSEIF CONDICION_ELSE .)
    while           reduce using rule 56 (CONDICION -> if CONDICION_ELSEIF CONDICION_ELSE .)
    cread           reduce using rule 56 (CONDICION -> if CONDICION_ELSEIF CONDICION_ELSE .)
    cwrite          reduce using rule 56 (CONDICION -> if CONDICION_ELSEIF CONDICION_ELSE .)
    left_par        reduce using rule 56 (CONDICION -> if CONDICION_ELSEIF CONDICION_ELSE .)
    id              reduce using rule 56 (CONDICION -> if CONDICION_ELSEIF CONDICION_ELSE .)
    return          reduce using rule 56 (CONDICION -> if CONDICION_ELSEIF CONDICION_ELSE .)


state 105

    (59) CONDICION_ELSE -> else . CUERPO
    (23) CUERPO -> . left_cb CUERPO_AUX right_cb

    left_cb         shift and go to state 37

    CUERPO                         shift and go to state 148

state 106

    (58) CONDICION_ELSEIF -> CONDICION_ELSEIF elseif . left_par EXPRESION right_par CUERPO

    left_par        shift and go to state 149


state 107

    (60) CONDICION_ELSE -> empty .

    right_cb        reduce using rule 60 (CONDICION_ELSE -> empty .)
    list            reduce using rule 60 (CONDICION_ELSE -> empty .)
    var             reduce using rule 60 (CONDICION_ELSE -> empty .)
    if              reduce using rule 60 (CONDICION_ELSE -> empty .)
    while           reduce using rule 60 (CONDICION_ELSE -> empty .)
    cread           reduce using rule 60 (CONDICION_ELSE -> empty .)
    cwrite          reduce using rule 60 (CONDICION_ELSE -> empty .)
    left_par        reduce using rule 60 (CONDICION_ELSE -> empty .)
    id              reduce using rule 60 (CONDICION_ELSE -> empty .)
    return          reduce using rule 60 (CONDICION_ELSE -> empty .)


state 108

    (108) BOOLEANA -> false .

    multiply        reduce using rule 108 (BOOLEANA -> false .)
    divide          reduce using rule 108 (BOOLEANA -> false .)
    plus            reduce using rule 108 (BOOLEANA -> false .)
    minus           reduce using rule 108 (BOOLEANA -> false .)
    and             reduce using rule 108 (BOOLEANA -> false .)
    or              reduce using rule 108 (BOOLEANA -> false .)
    right_par       reduce using rule 108 (BOOLEANA -> false .)
    comma           reduce using rule 108 (BOOLEANA -> false .)
    semicolon       reduce using rule 108 (BOOLEANA -> false .)
    right_sb        reduce using rule 108 (BOOLEANA -> false .)
    lt              reduce using rule 108 (BOOLEANA -> false .)
    gt              reduce using rule 108 (BOOLEANA -> false .)
    ne              reduce using rule 108 (BOOLEANA -> false .)
    ge              reduce using rule 108 (BOOLEANA -> false .)
    le              reduce using rule 108 (BOOLEANA -> false .)
    et              reduce using rule 108 (BOOLEANA -> false .)
    right_cb        reduce using rule 108 (BOOLEANA -> false .)
    list            reduce using rule 108 (BOOLEANA -> false .)
    var             reduce using rule 108 (BOOLEANA -> false .)
    return          reduce using rule 108 (BOOLEANA -> false .)
    if              reduce using rule 108 (BOOLEANA -> false .)
    while           reduce using rule 108 (BOOLEANA -> false .)
    cread           reduce using rule 108 (BOOLEANA -> false .)
    cwrite          reduce using rule 108 (BOOLEANA -> false .)
    left_par        reduce using rule 108 (BOOLEANA -> false .)
    id              reduce using rule 108 (BOOLEANA -> false .)


state 109

    (98) LISTA -> id left_sb EXP . right_sb

    right_sb        shift and go to state 150


state 110

    (106) NUMERICA_AUX -> cteFloat .

    multiply        reduce using rule 106 (NUMERICA_AUX -> cteFloat .)
    divide          reduce using rule 106 (NUMERICA_AUX -> cteFloat .)
    plus            reduce using rule 106 (NUMERICA_AUX -> cteFloat .)
    minus           reduce using rule 106 (NUMERICA_AUX -> cteFloat .)
    and             reduce using rule 106 (NUMERICA_AUX -> cteFloat .)
    or              reduce using rule 106 (NUMERICA_AUX -> cteFloat .)
    right_par       reduce using rule 106 (NUMERICA_AUX -> cteFloat .)
    comma           reduce using rule 106 (NUMERICA_AUX -> cteFloat .)
    semicolon       reduce using rule 106 (NUMERICA_AUX -> cteFloat .)
    right_cb        reduce using rule 106 (NUMERICA_AUX -> cteFloat .)
    list            reduce using rule 106 (NUMERICA_AUX -> cteFloat .)
    var             reduce using rule 106 (NUMERICA_AUX -> cteFloat .)
    return          reduce using rule 106 (NUMERICA_AUX -> cteFloat .)
    if              reduce using rule 106 (NUMERICA_AUX -> cteFloat .)
    while           reduce using rule 106 (NUMERICA_AUX -> cteFloat .)
    cread           reduce using rule 106 (NUMERICA_AUX -> cteFloat .)
    cwrite          reduce using rule 106 (NUMERICA_AUX -> cteFloat .)
    left_par        reduce using rule 106 (NUMERICA_AUX -> cteFloat .)
    id              reduce using rule 106 (NUMERICA_AUX -> cteFloat .)
    lt              reduce using rule 106 (NUMERICA_AUX -> cteFloat .)
    gt              reduce using rule 106 (NUMERICA_AUX -> cteFloat .)
    ne              reduce using rule 106 (NUMERICA_AUX -> cteFloat .)
    ge              reduce using rule 106 (NUMERICA_AUX -> cteFloat .)
    le              reduce using rule 106 (NUMERICA_AUX -> cteFloat .)
    et              reduce using rule 106 (NUMERICA_AUX -> cteFloat .)
    right_sb        reduce using rule 106 (NUMERICA_AUX -> cteFloat .)


state 111

    (100) CONSTANTE -> BOOLEANA .

    multiply        reduce using rule 100 (CONSTANTE -> BOOLEANA .)
    divide          reduce using rule 100 (CONSTANTE -> BOOLEANA .)
    plus            reduce using rule 100 (CONSTANTE -> BOOLEANA .)
    minus           reduce using rule 100 (CONSTANTE -> BOOLEANA .)
    and             reduce using rule 100 (CONSTANTE -> BOOLEANA .)
    or              reduce using rule 100 (CONSTANTE -> BOOLEANA .)
    right_par       reduce using rule 100 (CONSTANTE -> BOOLEANA .)
    comma           reduce using rule 100 (CONSTANTE -> BOOLEANA .)
    semicolon       reduce using rule 100 (CONSTANTE -> BOOLEANA .)
    lt              reduce using rule 100 (CONSTANTE -> BOOLEANA .)
    gt              reduce using rule 100 (CONSTANTE -> BOOLEANA .)
    ne              reduce using rule 100 (CONSTANTE -> BOOLEANA .)
    ge              reduce using rule 100 (CONSTANTE -> BOOLEANA .)
    le              reduce using rule 100 (CONSTANTE -> BOOLEANA .)
    et              reduce using rule 100 (CONSTANTE -> BOOLEANA .)
    right_sb        reduce using rule 100 (CONSTANTE -> BOOLEANA .)
    right_cb        reduce using rule 100 (CONSTANTE -> BOOLEANA .)
    list            reduce using rule 100 (CONSTANTE -> BOOLEANA .)
    var             reduce using rule 100 (CONSTANTE -> BOOLEANA .)
    return          reduce using rule 100 (CONSTANTE -> BOOLEANA .)
    if              reduce using rule 100 (CONSTANTE -> BOOLEANA .)
    while           reduce using rule 100 (CONSTANTE -> BOOLEANA .)
    cread           reduce using rule 100 (CONSTANTE -> BOOLEANA .)
    cwrite          reduce using rule 100 (CONSTANTE -> BOOLEANA .)
    left_par        reduce using rule 100 (CONSTANTE -> BOOLEANA .)
    id              reduce using rule 100 (CONSTANTE -> BOOLEANA .)


state 112

    (98) LISTA -> id . left_sb EXP right_sb
    (93) FACTOR_AUX -> id .
    (94) FACTOR_AUX -> id . LLAMADA_F
    (95) LLAMADA_F -> . left_par EXPRESION LLAMADAF_AUX right_par

  ! shift/reduce conflict for left_par resolved as shift
    left_sb         shift and go to state 86
    multiply        reduce using rule 93 (FACTOR_AUX -> id .)
    divide          reduce using rule 93 (FACTOR_AUX -> id .)
    plus            reduce using rule 93 (FACTOR_AUX -> id .)
    minus           reduce using rule 93 (FACTOR_AUX -> id .)
    lt              reduce using rule 93 (FACTOR_AUX -> id .)
    gt              reduce using rule 93 (FACTOR_AUX -> id .)
    ne              reduce using rule 93 (FACTOR_AUX -> id .)
    ge              reduce using rule 93 (FACTOR_AUX -> id .)
    le              reduce using rule 93 (FACTOR_AUX -> id .)
    et              reduce using rule 93 (FACTOR_AUX -> id .)
    and             reduce using rule 93 (FACTOR_AUX -> id .)
    or              reduce using rule 93 (FACTOR_AUX -> id .)
    right_par       reduce using rule 93 (FACTOR_AUX -> id .)
    comma           reduce using rule 93 (FACTOR_AUX -> id .)
    semicolon       reduce using rule 93 (FACTOR_AUX -> id .)
    right_sb        reduce using rule 93 (FACTOR_AUX -> id .)
    right_cb        reduce using rule 93 (FACTOR_AUX -> id .)
    list            reduce using rule 93 (FACTOR_AUX -> id .)
    var             reduce using rule 93 (FACTOR_AUX -> id .)
    return          reduce using rule 93 (FACTOR_AUX -> id .)
    if              reduce using rule 93 (FACTOR_AUX -> id .)
    while           reduce using rule 93 (FACTOR_AUX -> id .)
    cread           reduce using rule 93 (FACTOR_AUX -> id .)
    cwrite          reduce using rule 93 (FACTOR_AUX -> id .)
    id              reduce using rule 93 (FACTOR_AUX -> id .)
    left_par        shift and go to state 151

  ! left_par        [ reduce using rule 93 (FACTOR_AUX -> id .) ]

    LLAMADA_F                      shift and go to state 152

state 113

    (81) EXP -> TERMINO . EXP_AUX
    (82) EXP_AUX -> . plus EXP
    (83) EXP_AUX -> . minus EXP
    (84) EXP_AUX -> . empty
    (113) empty -> .

    plus            shift and go to state 154
    minus           shift and go to state 155
    right_sb        reduce using rule 113 (empty -> .)
    lt              reduce using rule 113 (empty -> .)
    gt              reduce using rule 113 (empty -> .)
    ne              reduce using rule 113 (empty -> .)
    ge              reduce using rule 113 (empty -> .)
    le              reduce using rule 113 (empty -> .)
    et              reduce using rule 113 (empty -> .)
    and             reduce using rule 113 (empty -> .)
    or              reduce using rule 113 (empty -> .)
    right_par       reduce using rule 113 (empty -> .)
    comma           reduce using rule 113 (empty -> .)
    semicolon       reduce using rule 113 (empty -> .)
    right_cb        reduce using rule 113 (empty -> .)
    list            reduce using rule 113 (empty -> .)
    var             reduce using rule 113 (empty -> .)
    return          reduce using rule 113 (empty -> .)
    if              reduce using rule 113 (empty -> .)
    while           reduce using rule 113 (empty -> .)
    cread           reduce using rule 113 (empty -> .)
    cwrite          reduce using rule 113 (empty -> .)
    left_par        reduce using rule 113 (empty -> .)
    id              reduce using rule 113 (empty -> .)

    empty                          shift and go to state 156
    EXP_AUX                        shift and go to state 153

state 114

    (92) FACTOR -> FACTOR_AUX .

    multiply        reduce using rule 92 (FACTOR -> FACTOR_AUX .)
    divide          reduce using rule 92 (FACTOR -> FACTOR_AUX .)
    plus            reduce using rule 92 (FACTOR -> FACTOR_AUX .)
    minus           reduce using rule 92 (FACTOR -> FACTOR_AUX .)
    right_sb        reduce using rule 92 (FACTOR -> FACTOR_AUX .)
    and             reduce using rule 92 (FACTOR -> FACTOR_AUX .)
    or              reduce using rule 92 (FACTOR -> FACTOR_AUX .)
    right_par       reduce using rule 92 (FACTOR -> FACTOR_AUX .)
    comma           reduce using rule 92 (FACTOR -> FACTOR_AUX .)
    semicolon       reduce using rule 92 (FACTOR -> FACTOR_AUX .)
    lt              reduce using rule 92 (FACTOR -> FACTOR_AUX .)
    gt              reduce using rule 92 (FACTOR -> FACTOR_AUX .)
    ne              reduce using rule 92 (FACTOR -> FACTOR_AUX .)
    ge              reduce using rule 92 (FACTOR -> FACTOR_AUX .)
    le              reduce using rule 92 (FACTOR -> FACTOR_AUX .)
    et              reduce using rule 92 (FACTOR -> FACTOR_AUX .)
    right_cb        reduce using rule 92 (FACTOR -> FACTOR_AUX .)
    list            reduce using rule 92 (FACTOR -> FACTOR_AUX .)
    var             reduce using rule 92 (FACTOR -> FACTOR_AUX .)
    return          reduce using rule 92 (FACTOR -> FACTOR_AUX .)
    if              reduce using rule 92 (FACTOR -> FACTOR_AUX .)
    while           reduce using rule 92 (FACTOR -> FACTOR_AUX .)
    cread           reduce using rule 92 (FACTOR -> FACTOR_AUX .)
    cwrite          reduce using rule 92 (FACTOR -> FACTOR_AUX .)
    left_par        reduce using rule 92 (FACTOR -> FACTOR_AUX .)
    id              reduce using rule 92 (FACTOR -> FACTOR_AUX .)


state 115

    (102) NUMERICA -> NUMERICA_AUX .

    multiply        reduce using rule 102 (NUMERICA -> NUMERICA_AUX .)
    divide          reduce using rule 102 (NUMERICA -> NUMERICA_AUX .)
    plus            reduce using rule 102 (NUMERICA -> NUMERICA_AUX .)
    minus           reduce using rule 102 (NUMERICA -> NUMERICA_AUX .)
    right_cb        reduce using rule 102 (NUMERICA -> NUMERICA_AUX .)
    list            reduce using rule 102 (NUMERICA -> NUMERICA_AUX .)
    var             reduce using rule 102 (NUMERICA -> NUMERICA_AUX .)
    return          reduce using rule 102 (NUMERICA -> NUMERICA_AUX .)
    if              reduce using rule 102 (NUMERICA -> NUMERICA_AUX .)
    while           reduce using rule 102 (NUMERICA -> NUMERICA_AUX .)
    cread           reduce using rule 102 (NUMERICA -> NUMERICA_AUX .)
    cwrite          reduce using rule 102 (NUMERICA -> NUMERICA_AUX .)
    left_par        reduce using rule 102 (NUMERICA -> NUMERICA_AUX .)
    id              reduce using rule 102 (NUMERICA -> NUMERICA_AUX .)
    right_sb        reduce using rule 102 (NUMERICA -> NUMERICA_AUX .)
    lt              reduce using rule 102 (NUMERICA -> NUMERICA_AUX .)
    gt              reduce using rule 102 (NUMERICA -> NUMERICA_AUX .)
    ne              reduce using rule 102 (NUMERICA -> NUMERICA_AUX .)
    ge              reduce using rule 102 (NUMERICA -> NUMERICA_AUX .)
    le              reduce using rule 102 (NUMERICA -> NUMERICA_AUX .)
    et              reduce using rule 102 (NUMERICA -> NUMERICA_AUX .)
    and             reduce using rule 102 (NUMERICA -> NUMERICA_AUX .)
    or              reduce using rule 102 (NUMERICA -> NUMERICA_AUX .)
    right_par       reduce using rule 102 (NUMERICA -> NUMERICA_AUX .)
    comma           reduce using rule 102 (NUMERICA -> NUMERICA_AUX .)
    semicolon       reduce using rule 102 (NUMERICA -> NUMERICA_AUX .)


state 116

    (109) STRINGS -> cteString .

    multiply        reduce using rule 109 (STRINGS -> cteString .)
    divide          reduce using rule 109 (STRINGS -> cteString .)
    plus            reduce using rule 109 (STRINGS -> cteString .)
    minus           reduce using rule 109 (STRINGS -> cteString .)
    and             reduce using rule 109 (STRINGS -> cteString .)
    or              reduce using rule 109 (STRINGS -> cteString .)
    right_par       reduce using rule 109 (STRINGS -> cteString .)
    comma           reduce using rule 109 (STRINGS -> cteString .)
    semicolon       reduce using rule 109 (STRINGS -> cteString .)
    right_cb        reduce using rule 109 (STRINGS -> cteString .)
    list            reduce using rule 109 (STRINGS -> cteString .)
    var             reduce using rule 109 (STRINGS -> cteString .)
    return          reduce using rule 109 (STRINGS -> cteString .)
    if              reduce using rule 109 (STRINGS -> cteString .)
    while           reduce using rule 109 (STRINGS -> cteString .)
    cread           reduce using rule 109 (STRINGS -> cteString .)
    cwrite          reduce using rule 109 (STRINGS -> cteString .)
    left_par        reduce using rule 109 (STRINGS -> cteString .)
    id              reduce using rule 109 (STRINGS -> cteString .)
    right_sb        reduce using rule 109 (STRINGS -> cteString .)
    lt              reduce using rule 109 (STRINGS -> cteString .)
    gt              reduce using rule 109 (STRINGS -> cteString .)
    ne              reduce using rule 109 (STRINGS -> cteString .)
    ge              reduce using rule 109 (STRINGS -> cteString .)
    le              reduce using rule 109 (STRINGS -> cteString .)
    et              reduce using rule 109 (STRINGS -> cteString .)


state 117

    (89) FACTOR -> left_par . EXPRESION right_par
    (67) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA EXPRESION_B
    (68) EXPRESION_NOT -> . not
    (69) EXPRESION_NOT -> . empty
    (113) empty -> .

    not             shift and go to state 92
    left_par        reduce using rule 113 (empty -> .)
    id              reduce using rule 113 (empty -> .)
    plus            reduce using rule 113 (empty -> .)
    minus           reduce using rule 113 (empty -> .)
    true            reduce using rule 113 (empty -> .)
    false           reduce using rule 113 (empty -> .)
    cteString       reduce using rule 113 (empty -> .)
    cteInt          reduce using rule 113 (empty -> .)
    cteFloat        reduce using rule 113 (empty -> .)

    EXPRESION                      shift and go to state 157
    EXPRESION_NOT                  shift and go to state 90
    empty                          shift and go to state 93

state 118

    (107) BOOLEANA -> true .

    multiply        reduce using rule 107 (BOOLEANA -> true .)
    divide          reduce using rule 107 (BOOLEANA -> true .)
    plus            reduce using rule 107 (BOOLEANA -> true .)
    minus           reduce using rule 107 (BOOLEANA -> true .)
    and             reduce using rule 107 (BOOLEANA -> true .)
    or              reduce using rule 107 (BOOLEANA -> true .)
    right_par       reduce using rule 107 (BOOLEANA -> true .)
    comma           reduce using rule 107 (BOOLEANA -> true .)
    semicolon       reduce using rule 107 (BOOLEANA -> true .)
    right_sb        reduce using rule 107 (BOOLEANA -> true .)
    lt              reduce using rule 107 (BOOLEANA -> true .)
    gt              reduce using rule 107 (BOOLEANA -> true .)
    ne              reduce using rule 107 (BOOLEANA -> true .)
    ge              reduce using rule 107 (BOOLEANA -> true .)
    le              reduce using rule 107 (BOOLEANA -> true .)
    et              reduce using rule 107 (BOOLEANA -> true .)
    right_cb        reduce using rule 107 (BOOLEANA -> true .)
    list            reduce using rule 107 (BOOLEANA -> true .)
    var             reduce using rule 107 (BOOLEANA -> true .)
    return          reduce using rule 107 (BOOLEANA -> true .)
    if              reduce using rule 107 (BOOLEANA -> true .)
    while           reduce using rule 107 (BOOLEANA -> true .)
    cread           reduce using rule 107 (BOOLEANA -> true .)
    cwrite          reduce using rule 107 (BOOLEANA -> true .)
    left_par        reduce using rule 107 (BOOLEANA -> true .)
    id              reduce using rule 107 (BOOLEANA -> true .)


state 119

    (101) CONSTANTE -> STRINGS .

    multiply        reduce using rule 101 (CONSTANTE -> STRINGS .)
    divide          reduce using rule 101 (CONSTANTE -> STRINGS .)
    plus            reduce using rule 101 (CONSTANTE -> STRINGS .)
    minus           reduce using rule 101 (CONSTANTE -> STRINGS .)
    and             reduce using rule 101 (CONSTANTE -> STRINGS .)
    or              reduce using rule 101 (CONSTANTE -> STRINGS .)
    right_par       reduce using rule 101 (CONSTANTE -> STRINGS .)
    comma           reduce using rule 101 (CONSTANTE -> STRINGS .)
    semicolon       reduce using rule 101 (CONSTANTE -> STRINGS .)
    lt              reduce using rule 101 (CONSTANTE -> STRINGS .)
    gt              reduce using rule 101 (CONSTANTE -> STRINGS .)
    ne              reduce using rule 101 (CONSTANTE -> STRINGS .)
    ge              reduce using rule 101 (CONSTANTE -> STRINGS .)
    le              reduce using rule 101 (CONSTANTE -> STRINGS .)
    et              reduce using rule 101 (CONSTANTE -> STRINGS .)
    right_sb        reduce using rule 101 (CONSTANTE -> STRINGS .)
    right_cb        reduce using rule 101 (CONSTANTE -> STRINGS .)
    list            reduce using rule 101 (CONSTANTE -> STRINGS .)
    var             reduce using rule 101 (CONSTANTE -> STRINGS .)
    return          reduce using rule 101 (CONSTANTE -> STRINGS .)
    if              reduce using rule 101 (CONSTANTE -> STRINGS .)
    while           reduce using rule 101 (CONSTANTE -> STRINGS .)
    cread           reduce using rule 101 (CONSTANTE -> STRINGS .)
    cwrite          reduce using rule 101 (CONSTANTE -> STRINGS .)
    left_par        reduce using rule 101 (CONSTANTE -> STRINGS .)
    id              reduce using rule 101 (CONSTANTE -> STRINGS .)


state 120

    (90) FACTOR -> CONSTANTE .

    multiply        reduce using rule 90 (FACTOR -> CONSTANTE .)
    divide          reduce using rule 90 (FACTOR -> CONSTANTE .)
    plus            reduce using rule 90 (FACTOR -> CONSTANTE .)
    minus           reduce using rule 90 (FACTOR -> CONSTANTE .)
    right_sb        reduce using rule 90 (FACTOR -> CONSTANTE .)
    and             reduce using rule 90 (FACTOR -> CONSTANTE .)
    or              reduce using rule 90 (FACTOR -> CONSTANTE .)
    right_par       reduce using rule 90 (FACTOR -> CONSTANTE .)
    comma           reduce using rule 90 (FACTOR -> CONSTANTE .)
    semicolon       reduce using rule 90 (FACTOR -> CONSTANTE .)
    lt              reduce using rule 90 (FACTOR -> CONSTANTE .)
    gt              reduce using rule 90 (FACTOR -> CONSTANTE .)
    ne              reduce using rule 90 (FACTOR -> CONSTANTE .)
    ge              reduce using rule 90 (FACTOR -> CONSTANTE .)
    le              reduce using rule 90 (FACTOR -> CONSTANTE .)
    et              reduce using rule 90 (FACTOR -> CONSTANTE .)
    right_cb        reduce using rule 90 (FACTOR -> CONSTANTE .)
    list            reduce using rule 90 (FACTOR -> CONSTANTE .)
    var             reduce using rule 90 (FACTOR -> CONSTANTE .)
    return          reduce using rule 90 (FACTOR -> CONSTANTE .)
    if              reduce using rule 90 (FACTOR -> CONSTANTE .)
    while           reduce using rule 90 (FACTOR -> CONSTANTE .)
    cread           reduce using rule 90 (FACTOR -> CONSTANTE .)
    cwrite          reduce using rule 90 (FACTOR -> CONSTANTE .)
    left_par        reduce using rule 90 (FACTOR -> CONSTANTE .)
    id              reduce using rule 90 (FACTOR -> CONSTANTE .)


state 121

    (105) NUMERICA_AUX -> cteInt .

    multiply        reduce using rule 105 (NUMERICA_AUX -> cteInt .)
    divide          reduce using rule 105 (NUMERICA_AUX -> cteInt .)
    plus            reduce using rule 105 (NUMERICA_AUX -> cteInt .)
    minus           reduce using rule 105 (NUMERICA_AUX -> cteInt .)
    and             reduce using rule 105 (NUMERICA_AUX -> cteInt .)
    or              reduce using rule 105 (NUMERICA_AUX -> cteInt .)
    right_par       reduce using rule 105 (NUMERICA_AUX -> cteInt .)
    comma           reduce using rule 105 (NUMERICA_AUX -> cteInt .)
    semicolon       reduce using rule 105 (NUMERICA_AUX -> cteInt .)
    right_cb        reduce using rule 105 (NUMERICA_AUX -> cteInt .)
    list            reduce using rule 105 (NUMERICA_AUX -> cteInt .)
    var             reduce using rule 105 (NUMERICA_AUX -> cteInt .)
    return          reduce using rule 105 (NUMERICA_AUX -> cteInt .)
    if              reduce using rule 105 (NUMERICA_AUX -> cteInt .)
    while           reduce using rule 105 (NUMERICA_AUX -> cteInt .)
    cread           reduce using rule 105 (NUMERICA_AUX -> cteInt .)
    cwrite          reduce using rule 105 (NUMERICA_AUX -> cteInt .)
    left_par        reduce using rule 105 (NUMERICA_AUX -> cteInt .)
    id              reduce using rule 105 (NUMERICA_AUX -> cteInt .)
    lt              reduce using rule 105 (NUMERICA_AUX -> cteInt .)
    gt              reduce using rule 105 (NUMERICA_AUX -> cteInt .)
    ne              reduce using rule 105 (NUMERICA_AUX -> cteInt .)
    ge              reduce using rule 105 (NUMERICA_AUX -> cteInt .)
    le              reduce using rule 105 (NUMERICA_AUX -> cteInt .)
    et              reduce using rule 105 (NUMERICA_AUX -> cteInt .)
    right_sb        reduce using rule 105 (NUMERICA_AUX -> cteInt .)


state 122

    (99) CONSTANTE -> NUMERICA .

    multiply        reduce using rule 99 (CONSTANTE -> NUMERICA .)
    divide          reduce using rule 99 (CONSTANTE -> NUMERICA .)
    plus            reduce using rule 99 (CONSTANTE -> NUMERICA .)
    minus           reduce using rule 99 (CONSTANTE -> NUMERICA .)
    and             reduce using rule 99 (CONSTANTE -> NUMERICA .)
    or              reduce using rule 99 (CONSTANTE -> NUMERICA .)
    right_par       reduce using rule 99 (CONSTANTE -> NUMERICA .)
    comma           reduce using rule 99 (CONSTANTE -> NUMERICA .)
    semicolon       reduce using rule 99 (CONSTANTE -> NUMERICA .)
    lt              reduce using rule 99 (CONSTANTE -> NUMERICA .)
    gt              reduce using rule 99 (CONSTANTE -> NUMERICA .)
    ne              reduce using rule 99 (CONSTANTE -> NUMERICA .)
    ge              reduce using rule 99 (CONSTANTE -> NUMERICA .)
    le              reduce using rule 99 (CONSTANTE -> NUMERICA .)
    et              reduce using rule 99 (CONSTANTE -> NUMERICA .)
    right_sb        reduce using rule 99 (CONSTANTE -> NUMERICA .)
    right_cb        reduce using rule 99 (CONSTANTE -> NUMERICA .)
    list            reduce using rule 99 (CONSTANTE -> NUMERICA .)
    var             reduce using rule 99 (CONSTANTE -> NUMERICA .)
    return          reduce using rule 99 (CONSTANTE -> NUMERICA .)
    if              reduce using rule 99 (CONSTANTE -> NUMERICA .)
    while           reduce using rule 99 (CONSTANTE -> NUMERICA .)
    cread           reduce using rule 99 (CONSTANTE -> NUMERICA .)
    cwrite          reduce using rule 99 (CONSTANTE -> NUMERICA .)
    left_par        reduce using rule 99 (CONSTANTE -> NUMERICA .)
    id              reduce using rule 99 (CONSTANTE -> NUMERICA .)


state 123

    (103) NUMERICA -> plus . NUMERICA_AUX
    (105) NUMERICA_AUX -> . cteInt
    (106) NUMERICA_AUX -> . cteFloat

    cteInt          shift and go to state 121
    cteFloat        shift and go to state 110

    NUMERICA_AUX                   shift and go to state 158

state 124

    (85) TERMINO -> FACTOR . TERMINO_AUX
    (86) TERMINO_AUX -> . multiply TERMINO
    (87) TERMINO_AUX -> . divide TERMINO
    (88) TERMINO_AUX -> . empty
    (113) empty -> .

    multiply        shift and go to state 161
    divide          shift and go to state 160
    plus            reduce using rule 113 (empty -> .)
    minus           reduce using rule 113 (empty -> .)
    right_sb        reduce using rule 113 (empty -> .)
    lt              reduce using rule 113 (empty -> .)
    gt              reduce using rule 113 (empty -> .)
    ne              reduce using rule 113 (empty -> .)
    ge              reduce using rule 113 (empty -> .)
    le              reduce using rule 113 (empty -> .)
    et              reduce using rule 113 (empty -> .)
    and             reduce using rule 113 (empty -> .)
    or              reduce using rule 113 (empty -> .)
    right_par       reduce using rule 113 (empty -> .)
    comma           reduce using rule 113 (empty -> .)
    semicolon       reduce using rule 113 (empty -> .)
    right_cb        reduce using rule 113 (empty -> .)
    list            reduce using rule 113 (empty -> .)
    var             reduce using rule 113 (empty -> .)
    return          reduce using rule 113 (empty -> .)
    if              reduce using rule 113 (empty -> .)
    while           reduce using rule 113 (empty -> .)
    cread           reduce using rule 113 (empty -> .)
    cwrite          reduce using rule 113 (empty -> .)
    left_par        reduce using rule 113 (empty -> .)
    id              reduce using rule 113 (empty -> .)

    TERMINO_AUX                    shift and go to state 159
    empty                          shift and go to state 162

state 125

    (91) FACTOR -> LISTA .

    multiply        reduce using rule 91 (FACTOR -> LISTA .)
    divide          reduce using rule 91 (FACTOR -> LISTA .)
    plus            reduce using rule 91 (FACTOR -> LISTA .)
    minus           reduce using rule 91 (FACTOR -> LISTA .)
    right_sb        reduce using rule 91 (FACTOR -> LISTA .)
    and             reduce using rule 91 (FACTOR -> LISTA .)
    or              reduce using rule 91 (FACTOR -> LISTA .)
    right_par       reduce using rule 91 (FACTOR -> LISTA .)
    comma           reduce using rule 91 (FACTOR -> LISTA .)
    semicolon       reduce using rule 91 (FACTOR -> LISTA .)
    lt              reduce using rule 91 (FACTOR -> LISTA .)
    gt              reduce using rule 91 (FACTOR -> LISTA .)
    ne              reduce using rule 91 (FACTOR -> LISTA .)
    ge              reduce using rule 91 (FACTOR -> LISTA .)
    le              reduce using rule 91 (FACTOR -> LISTA .)
    et              reduce using rule 91 (FACTOR -> LISTA .)
    right_cb        reduce using rule 91 (FACTOR -> LISTA .)
    list            reduce using rule 91 (FACTOR -> LISTA .)
    var             reduce using rule 91 (FACTOR -> LISTA .)
    return          reduce using rule 91 (FACTOR -> LISTA .)
    if              reduce using rule 91 (FACTOR -> LISTA .)
    while           reduce using rule 91 (FACTOR -> LISTA .)
    cread           reduce using rule 91 (FACTOR -> LISTA .)
    cwrite          reduce using rule 91 (FACTOR -> LISTA .)
    left_par        reduce using rule 91 (FACTOR -> LISTA .)
    id              reduce using rule 91 (FACTOR -> LISTA .)


state 126

    (104) NUMERICA -> minus . NUMERICA_AUX
    (105) NUMERICA_AUX -> . cteInt
    (106) NUMERICA_AUX -> . cteFloat

    cteInt          shift and go to state 121
    cteFloat        shift and go to state 110

    NUMERICA_AUX                   shift and go to state 163

state 127

    (63) ESCRITURA -> cwrite left_par EXPRESION . right_par semicolon

    right_par       shift and go to state 164


state 128

    (110) ASIGNACION -> ASIGNACION_AUX equals EXPRESION . semicolon

    semicolon       shift and go to state 165


state 129

    (67) EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA . EXPRESION_B
    (70) EXPRESION_B -> . and EXPRESION_NOT EXPRESIONLOGICA
    (71) EXPRESION_B -> . or EXPRESION_NOT EXPRESIONLOGICA
    (72) EXPRESION_B -> . empty
    (113) empty -> .

    and             shift and go to state 166
    or              shift and go to state 168
    right_par       reduce using rule 113 (empty -> .)
    comma           reduce using rule 113 (empty -> .)
    semicolon       reduce using rule 113 (empty -> .)

    EXPRESION_B                    shift and go to state 167
    empty                          shift and go to state 169

state 130

    (73) EXPRESIONLOGICA -> EXP . EXPRESIONLOGICA_AUX
    (74) EXPRESIONLOGICA_AUX -> . lt EXP
    (75) EXPRESIONLOGICA_AUX -> . gt EXP
    (76) EXPRESIONLOGICA_AUX -> . ne EXP
    (77) EXPRESIONLOGICA_AUX -> . ge EXP
    (78) EXPRESIONLOGICA_AUX -> . le EXP
    (79) EXPRESIONLOGICA_AUX -> . et EXP
    (80) EXPRESIONLOGICA_AUX -> . empty
    (113) empty -> .

    lt              shift and go to state 172
    gt              shift and go to state 170
    ne              shift and go to state 173
    ge              shift and go to state 174
    le              shift and go to state 175
    et              shift and go to state 176
    and             reduce using rule 113 (empty -> .)
    or              reduce using rule 113 (empty -> .)
    right_par       reduce using rule 113 (empty -> .)
    comma           reduce using rule 113 (empty -> .)
    semicolon       reduce using rule 113 (empty -> .)

    empty                          shift and go to state 177
    EXPRESIONLOGICA_AUX            shift and go to state 171

state 131

    (66) LLAMADA_EXPRESION -> LLAMADA_EXPRESION comma . EXPRESION
    (67) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA EXPRESION_B
    (68) EXPRESION_NOT -> . not
    (69) EXPRESION_NOT -> . empty
    (113) empty -> .

    not             shift and go to state 92
    left_par        reduce using rule 113 (empty -> .)
    id              reduce using rule 113 (empty -> .)
    plus            reduce using rule 113 (empty -> .)
    minus           reduce using rule 113 (empty -> .)
    true            reduce using rule 113 (empty -> .)
    false           reduce using rule 113 (empty -> .)
    cteString       reduce using rule 113 (empty -> .)
    cteInt          reduce using rule 113 (empty -> .)
    cteFloat        reduce using rule 113 (empty -> .)

    EXPRESION                      shift and go to state 178
    EXPRESION_NOT                  shift and go to state 90
    empty                          shift and go to state 93

state 132

    (64) LLAMADA -> left_par LLAMADA_EXPRESION right_par . semicolon

    semicolon       shift and go to state 179


state 133

    (61) CICLO -> while left_par EXPRESION . right_par CUERPO

    right_par       shift and go to state 180


state 134

    (46) FUNC_PARA -> FUNC_PARA comma TIPO id .

    right_par       reduce using rule 46 (FUNC_PARA -> FUNC_PARA comma TIPO id .)
    comma           reduce using rule 46 (FUNC_PARA -> FUNC_PARA comma TIPO id .)


state 135

    (38) CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX . RETORNO
    (42) RETORNO -> . return EXP

    return          shift and go to state 182

    RETORNO                        shift and go to state 181

state 136

    (40) CUERPORETORNO_CF_AUX -> CUERPOFUNC .

    return          reduce using rule 40 (CUERPORETORNO_CF_AUX -> CUERPOFUNC .)


state 137

    (33) CUERPOFUNC_VARS -> VARS .

    if              reduce using rule 33 (CUERPOFUNC_VARS -> VARS .)
    while           reduce using rule 33 (CUERPOFUNC_VARS -> VARS .)
    cread           reduce using rule 33 (CUERPOFUNC_VARS -> VARS .)
    cwrite          reduce using rule 33 (CUERPOFUNC_VARS -> VARS .)
    left_par        reduce using rule 33 (CUERPOFUNC_VARS -> VARS .)
    id              reduce using rule 33 (CUERPOFUNC_VARS -> VARS .)
    list            reduce using rule 33 (CUERPOFUNC_VARS -> VARS .)
    var             reduce using rule 33 (CUERPOFUNC_VARS -> VARS .)
    return          reduce using rule 33 (CUERPOFUNC_VARS -> VARS .)
    right_cb        reduce using rule 33 (CUERPOFUNC_VARS -> VARS .)


state 138

    (37) CUERPORETORNO -> left_cb CUERPORETORNO_AUX . right_cb
    (39) CUERPORETORNO_AUX -> CUERPORETORNO_AUX . CUERPORETORNO_CF_AUX RETORNO
    (40) CUERPORETORNO_CF_AUX -> . CUERPOFUNC
    (41) CUERPORETORNO_CF_AUX -> . empty
    (30) CUERPOFUNC -> . CUERPOFUNC_AUX
    (113) empty -> .
    (31) CUERPOFUNC_AUX -> . CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO
    (32) CUERPOFUNC_AUX -> . CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO
    (33) CUERPOFUNC_VARS -> . VARS
    (34) CUERPOFUNC_VARS -> . empty
    (8) VARS -> . VARS_AUX
    (9) VARS_AUX -> . VARS_LIST_VAR
    (10) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (11) VARS_LIST_VAR -> . VARS_LIST
    (12) VARS_LIST_VAR -> . VARS_VAR
    (13) VARS_LIST -> . list TIPO VARS_LIST_AUX semicolon
    (16) VARS_VAR -> . var TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    right_cb        shift and go to state 184
    return          reduce using rule 113 (empty -> .)
    if              reduce using rule 113 (empty -> .)
    while           reduce using rule 113 (empty -> .)
    cread           reduce using rule 113 (empty -> .)
    cwrite          reduce using rule 113 (empty -> .)
    left_par        reduce using rule 113 (empty -> .)
    id              reduce using rule 113 (empty -> .)
    list            shift and go to state 9
    var             shift and go to state 10

  ! list            [ reduce using rule 113 (empty -> .) ]
  ! var             [ reduce using rule 113 (empty -> .) ]

    CUERPORETORNO_CF_AUX           shift and go to state 183
    VARS                           shift and go to state 137
    CUERPOFUNC                     shift and go to state 136
    VARS_LIST                      shift and go to state 6
    VARS_LIST_VAR                  shift and go to state 7
    VARS_VAR                       shift and go to state 12
    VARS_AUX                       shift and go to state 11
    CUERPOFUNC_VARS                shift and go to state 140
    CUERPOFUNC_AUX                 shift and go to state 141
    empty                          shift and go to state 139

state 139

    (41) CUERPORETORNO_CF_AUX -> empty .
    (34) CUERPOFUNC_VARS -> empty .

  ! reduce/reduce conflict for return resolved using rule 34 (CUERPOFUNC_VARS -> empty .)
    if              reduce using rule 34 (CUERPOFUNC_VARS -> empty .)
    while           reduce using rule 34 (CUERPOFUNC_VARS -> empty .)
    cread           reduce using rule 34 (CUERPOFUNC_VARS -> empty .)
    cwrite          reduce using rule 34 (CUERPOFUNC_VARS -> empty .)
    left_par        reduce using rule 34 (CUERPOFUNC_VARS -> empty .)
    id              reduce using rule 34 (CUERPOFUNC_VARS -> empty .)
    list            reduce using rule 34 (CUERPOFUNC_VARS -> empty .)
    var             reduce using rule 34 (CUERPOFUNC_VARS -> empty .)
    return          reduce using rule 34 (CUERPOFUNC_VARS -> empty .)

  ! return          [ reduce using rule 41 (CUERPORETORNO_CF_AUX -> empty .) ]


state 140

    (31) CUERPOFUNC_AUX -> CUERPOFUNC_VARS . CUERPOFUNC_ESTATUTO
    (35) CUERPOFUNC_ESTATUTO -> . ESTATUTO
    (36) CUERPOFUNC_ESTATUTO -> . empty
    (50) ESTATUTO -> . ASIGNACION
    (51) ESTATUTO -> . CONDICION
    (52) ESTATUTO -> . CICLO
    (53) ESTATUTO -> . LECTURA
    (54) ESTATUTO -> . ESCRITURA
    (55) ESTATUTO -> . LLAMADA
    (113) empty -> .
    (110) ASIGNACION -> . ASIGNACION_AUX equals EXPRESION semicolon
    (56) CONDICION -> . if CONDICION_ELSEIF CONDICION_ELSE
    (61) CICLO -> . while left_par EXPRESION right_par CUERPO
    (62) LECTURA -> . cread left_par id right_par semicolon
    (63) ESCRITURA -> . cwrite left_par EXPRESION right_par semicolon
    (64) LLAMADA -> . left_par LLAMADA_EXPRESION right_par semicolon
    (111) ASIGNACION_AUX -> . id
    (112) ASIGNACION_AUX -> . LISTA
    (98) LISTA -> . id left_sb EXP right_sb

  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for cread resolved as shift
  ! shift/reduce conflict for cwrite resolved as shift
  ! shift/reduce conflict for left_par resolved as shift
  ! shift/reduce conflict for id resolved as shift
    list            reduce using rule 113 (empty -> .)
    var             reduce using rule 113 (empty -> .)
    return          reduce using rule 113 (empty -> .)
    right_cb        reduce using rule 113 (empty -> .)
    if              shift and go to state 59
    while           shift and go to state 71
    cread           shift and go to state 57
    cwrite          shift and go to state 63
    left_par        shift and go to state 69
    id              shift and go to state 62

  ! if              [ reduce using rule 113 (empty -> .) ]
  ! while           [ reduce using rule 113 (empty -> .) ]
  ! cread           [ reduce using rule 113 (empty -> .) ]
  ! cwrite          [ reduce using rule 113 (empty -> .) ]
  ! left_par        [ reduce using rule 113 (empty -> .) ]
  ! id              [ reduce using rule 113 (empty -> .) ]

    CUERPOFUNC_ESTATUTO            shift and go to state 185
    CICLO                          shift and go to state 56
    ASIGNACION                     shift and go to state 60
    LISTA                          shift and go to state 72
    ESTATUTO                       shift and go to state 186
    LLAMADA                        shift and go to state 67
    CONDICION                      shift and go to state 68
    ASIGNACION_AUX                 shift and go to state 64
    LECTURA                        shift and go to state 58
    empty                          shift and go to state 187
    ESCRITURA                      shift and go to state 65

state 141

    (30) CUERPOFUNC -> CUERPOFUNC_AUX .
    (32) CUERPOFUNC_AUX -> CUERPOFUNC_AUX . CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO
    (33) CUERPOFUNC_VARS -> . VARS
    (34) CUERPOFUNC_VARS -> . empty
    (8) VARS -> . VARS_AUX
    (113) empty -> .
    (9) VARS_AUX -> . VARS_LIST_VAR
    (10) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (11) VARS_LIST_VAR -> . VARS_LIST
    (12) VARS_LIST_VAR -> . VARS_VAR
    (13) VARS_LIST -> . list TIPO VARS_LIST_AUX semicolon
    (16) VARS_VAR -> . var TIPO VARS_VAR_AUX semicolon

  ! reduce/reduce conflict for return resolved using rule 30 (CUERPOFUNC -> CUERPOFUNC_AUX .)
  ! reduce/reduce conflict for right_cb resolved using rule 30 (CUERPOFUNC -> CUERPOFUNC_AUX .)
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    return          reduce using rule 30 (CUERPOFUNC -> CUERPOFUNC_AUX .)
    right_cb        reduce using rule 30 (CUERPOFUNC -> CUERPOFUNC_AUX .)
    if              reduce using rule 113 (empty -> .)
    while           reduce using rule 113 (empty -> .)
    cread           reduce using rule 113 (empty -> .)
    cwrite          reduce using rule 113 (empty -> .)
    left_par        reduce using rule 113 (empty -> .)
    id              reduce using rule 113 (empty -> .)
    list            shift and go to state 9
    var             shift and go to state 10

  ! list            [ reduce using rule 113 (empty -> .) ]
  ! var             [ reduce using rule 113 (empty -> .) ]
  ! return          [ reduce using rule 113 (empty -> .) ]
  ! right_cb        [ reduce using rule 113 (empty -> .) ]

    VARS                           shift and go to state 137
    VARS_LIST                      shift and go to state 6
    VARS_LIST_VAR                  shift and go to state 7
    VARS_AUX                       shift and go to state 11
    CUERPOFUNC_VARS                shift and go to state 188
    VARS_VAR                       shift and go to state 12
    empty                          shift and go to state 144

state 142

    (49) VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO id .

    right_par       reduce using rule 49 (VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO id .)
    comma           reduce using rule 49 (VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO id .)


state 143

    (47) VOIDFUNC -> void id left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC . right_cb

    right_cb        shift and go to state 189


state 144

    (34) CUERPOFUNC_VARS -> empty .

    if              reduce using rule 34 (CUERPOFUNC_VARS -> empty .)
    while           reduce using rule 34 (CUERPOFUNC_VARS -> empty .)
    cread           reduce using rule 34 (CUERPOFUNC_VARS -> empty .)
    cwrite          reduce using rule 34 (CUERPOFUNC_VARS -> empty .)
    left_par        reduce using rule 34 (CUERPOFUNC_VARS -> empty .)
    id              reduce using rule 34 (CUERPOFUNC_VARS -> empty .)
    list            reduce using rule 34 (CUERPOFUNC_VARS -> empty .)
    var             reduce using rule 34 (CUERPOFUNC_VARS -> empty .)
    right_cb        reduce using rule 34 (CUERPOFUNC_VARS -> empty .)
    return          reduce using rule 34 (CUERPOFUNC_VARS -> empty .)


state 145

    (15) VARS_LIST_AUX -> VARS_LIST_AUX comma id left_sb cteInt right_sb .

    semicolon       reduce using rule 15 (VARS_LIST_AUX -> VARS_LIST_AUX comma id left_sb cteInt right_sb .)
    comma           reduce using rule 15 (VARS_LIST_AUX -> VARS_LIST_AUX comma id left_sb cteInt right_sb .)


state 146

    (62) LECTURA -> cread left_par id right_par . semicolon

    semicolon       shift and go to state 190


state 147

    (57) CONDICION_ELSEIF -> left_par EXPRESION right_par . CUERPO
    (23) CUERPO -> . left_cb CUERPO_AUX right_cb

    left_cb         shift and go to state 37

    CUERPO                         shift and go to state 191

state 148

    (59) CONDICION_ELSE -> else CUERPO .

    right_cb        reduce using rule 59 (CONDICION_ELSE -> else CUERPO .)
    list            reduce using rule 59 (CONDICION_ELSE -> else CUERPO .)
    var             reduce using rule 59 (CONDICION_ELSE -> else CUERPO .)
    if              reduce using rule 59 (CONDICION_ELSE -> else CUERPO .)
    while           reduce using rule 59 (CONDICION_ELSE -> else CUERPO .)
    cread           reduce using rule 59 (CONDICION_ELSE -> else CUERPO .)
    cwrite          reduce using rule 59 (CONDICION_ELSE -> else CUERPO .)
    left_par        reduce using rule 59 (CONDICION_ELSE -> else CUERPO .)
    id              reduce using rule 59 (CONDICION_ELSE -> else CUERPO .)
    return          reduce using rule 59 (CONDICION_ELSE -> else CUERPO .)


state 149

    (58) CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par . EXPRESION right_par CUERPO
    (67) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA EXPRESION_B
    (68) EXPRESION_NOT -> . not
    (69) EXPRESION_NOT -> . empty
    (113) empty -> .

    not             shift and go to state 92
    left_par        reduce using rule 113 (empty -> .)
    id              reduce using rule 113 (empty -> .)
    plus            reduce using rule 113 (empty -> .)
    minus           reduce using rule 113 (empty -> .)
    true            reduce using rule 113 (empty -> .)
    false           reduce using rule 113 (empty -> .)
    cteString       reduce using rule 113 (empty -> .)
    cteInt          reduce using rule 113 (empty -> .)
    cteFloat        reduce using rule 113 (empty -> .)

    EXPRESION                      shift and go to state 192
    EXPRESION_NOT                  shift and go to state 90
    empty                          shift and go to state 93

state 150

    (98) LISTA -> id left_sb EXP right_sb .

    equals          reduce using rule 98 (LISTA -> id left_sb EXP right_sb .)
    multiply        reduce using rule 98 (LISTA -> id left_sb EXP right_sb .)
    divide          reduce using rule 98 (LISTA -> id left_sb EXP right_sb .)
    plus            reduce using rule 98 (LISTA -> id left_sb EXP right_sb .)
    minus           reduce using rule 98 (LISTA -> id left_sb EXP right_sb .)
    and             reduce using rule 98 (LISTA -> id left_sb EXP right_sb .)
    or              reduce using rule 98 (LISTA -> id left_sb EXP right_sb .)
    right_par       reduce using rule 98 (LISTA -> id left_sb EXP right_sb .)
    comma           reduce using rule 98 (LISTA -> id left_sb EXP right_sb .)
    semicolon       reduce using rule 98 (LISTA -> id left_sb EXP right_sb .)
    lt              reduce using rule 98 (LISTA -> id left_sb EXP right_sb .)
    gt              reduce using rule 98 (LISTA -> id left_sb EXP right_sb .)
    ne              reduce using rule 98 (LISTA -> id left_sb EXP right_sb .)
    ge              reduce using rule 98 (LISTA -> id left_sb EXP right_sb .)
    le              reduce using rule 98 (LISTA -> id left_sb EXP right_sb .)
    et              reduce using rule 98 (LISTA -> id left_sb EXP right_sb .)
    right_sb        reduce using rule 98 (LISTA -> id left_sb EXP right_sb .)
    right_cb        reduce using rule 98 (LISTA -> id left_sb EXP right_sb .)
    list            reduce using rule 98 (LISTA -> id left_sb EXP right_sb .)
    var             reduce using rule 98 (LISTA -> id left_sb EXP right_sb .)
    return          reduce using rule 98 (LISTA -> id left_sb EXP right_sb .)
    if              reduce using rule 98 (LISTA -> id left_sb EXP right_sb .)
    while           reduce using rule 98 (LISTA -> id left_sb EXP right_sb .)
    cread           reduce using rule 98 (LISTA -> id left_sb EXP right_sb .)
    cwrite          reduce using rule 98 (LISTA -> id left_sb EXP right_sb .)
    left_par        reduce using rule 98 (LISTA -> id left_sb EXP right_sb .)
    id              reduce using rule 98 (LISTA -> id left_sb EXP right_sb .)


state 151

    (95) LLAMADA_F -> left_par . EXPRESION LLAMADAF_AUX right_par
    (67) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA EXPRESION_B
    (68) EXPRESION_NOT -> . not
    (69) EXPRESION_NOT -> . empty
    (113) empty -> .

    not             shift and go to state 92
    left_par        reduce using rule 113 (empty -> .)
    id              reduce using rule 113 (empty -> .)
    plus            reduce using rule 113 (empty -> .)
    minus           reduce using rule 113 (empty -> .)
    true            reduce using rule 113 (empty -> .)
    false           reduce using rule 113 (empty -> .)
    cteString       reduce using rule 113 (empty -> .)
    cteInt          reduce using rule 113 (empty -> .)
    cteFloat        reduce using rule 113 (empty -> .)

    EXPRESION                      shift and go to state 193
    EXPRESION_NOT                  shift and go to state 90
    empty                          shift and go to state 93

state 152

    (94) FACTOR_AUX -> id LLAMADA_F .

    multiply        reduce using rule 94 (FACTOR_AUX -> id LLAMADA_F .)
    divide          reduce using rule 94 (FACTOR_AUX -> id LLAMADA_F .)
    plus            reduce using rule 94 (FACTOR_AUX -> id LLAMADA_F .)
    minus           reduce using rule 94 (FACTOR_AUX -> id LLAMADA_F .)
    lt              reduce using rule 94 (FACTOR_AUX -> id LLAMADA_F .)
    gt              reduce using rule 94 (FACTOR_AUX -> id LLAMADA_F .)
    ne              reduce using rule 94 (FACTOR_AUX -> id LLAMADA_F .)
    ge              reduce using rule 94 (FACTOR_AUX -> id LLAMADA_F .)
    le              reduce using rule 94 (FACTOR_AUX -> id LLAMADA_F .)
    et              reduce using rule 94 (FACTOR_AUX -> id LLAMADA_F .)
    and             reduce using rule 94 (FACTOR_AUX -> id LLAMADA_F .)
    or              reduce using rule 94 (FACTOR_AUX -> id LLAMADA_F .)
    right_par       reduce using rule 94 (FACTOR_AUX -> id LLAMADA_F .)
    comma           reduce using rule 94 (FACTOR_AUX -> id LLAMADA_F .)
    semicolon       reduce using rule 94 (FACTOR_AUX -> id LLAMADA_F .)
    right_sb        reduce using rule 94 (FACTOR_AUX -> id LLAMADA_F .)
    right_cb        reduce using rule 94 (FACTOR_AUX -> id LLAMADA_F .)
    list            reduce using rule 94 (FACTOR_AUX -> id LLAMADA_F .)
    var             reduce using rule 94 (FACTOR_AUX -> id LLAMADA_F .)
    return          reduce using rule 94 (FACTOR_AUX -> id LLAMADA_F .)
    if              reduce using rule 94 (FACTOR_AUX -> id LLAMADA_F .)
    while           reduce using rule 94 (FACTOR_AUX -> id LLAMADA_F .)
    cread           reduce using rule 94 (FACTOR_AUX -> id LLAMADA_F .)
    cwrite          reduce using rule 94 (FACTOR_AUX -> id LLAMADA_F .)
    left_par        reduce using rule 94 (FACTOR_AUX -> id LLAMADA_F .)
    id              reduce using rule 94 (FACTOR_AUX -> id LLAMADA_F .)


state 153

    (81) EXP -> TERMINO EXP_AUX .

    right_sb        reduce using rule 81 (EXP -> TERMINO EXP_AUX .)
    lt              reduce using rule 81 (EXP -> TERMINO EXP_AUX .)
    gt              reduce using rule 81 (EXP -> TERMINO EXP_AUX .)
    ne              reduce using rule 81 (EXP -> TERMINO EXP_AUX .)
    ge              reduce using rule 81 (EXP -> TERMINO EXP_AUX .)
    le              reduce using rule 81 (EXP -> TERMINO EXP_AUX .)
    et              reduce using rule 81 (EXP -> TERMINO EXP_AUX .)
    and             reduce using rule 81 (EXP -> TERMINO EXP_AUX .)
    or              reduce using rule 81 (EXP -> TERMINO EXP_AUX .)
    right_par       reduce using rule 81 (EXP -> TERMINO EXP_AUX .)
    comma           reduce using rule 81 (EXP -> TERMINO EXP_AUX .)
    semicolon       reduce using rule 81 (EXP -> TERMINO EXP_AUX .)
    right_cb        reduce using rule 81 (EXP -> TERMINO EXP_AUX .)
    list            reduce using rule 81 (EXP -> TERMINO EXP_AUX .)
    var             reduce using rule 81 (EXP -> TERMINO EXP_AUX .)
    return          reduce using rule 81 (EXP -> TERMINO EXP_AUX .)
    if              reduce using rule 81 (EXP -> TERMINO EXP_AUX .)
    while           reduce using rule 81 (EXP -> TERMINO EXP_AUX .)
    cread           reduce using rule 81 (EXP -> TERMINO EXP_AUX .)
    cwrite          reduce using rule 81 (EXP -> TERMINO EXP_AUX .)
    left_par        reduce using rule 81 (EXP -> TERMINO EXP_AUX .)
    id              reduce using rule 81 (EXP -> TERMINO EXP_AUX .)


state 154

    (82) EXP_AUX -> plus . EXP
    (81) EXP -> . TERMINO EXP_AUX
    (85) TERMINO -> . FACTOR TERMINO_AUX
    (89) FACTOR -> . left_par EXPRESION right_par
    (90) FACTOR -> . CONSTANTE
    (91) FACTOR -> . LISTA
    (92) FACTOR -> . FACTOR_AUX
    (99) CONSTANTE -> . NUMERICA
    (100) CONSTANTE -> . BOOLEANA
    (101) CONSTANTE -> . STRINGS
    (98) LISTA -> . id left_sb EXP right_sb
    (93) FACTOR_AUX -> . id
    (94) FACTOR_AUX -> . id LLAMADA_F
    (102) NUMERICA -> . NUMERICA_AUX
    (103) NUMERICA -> . plus NUMERICA_AUX
    (104) NUMERICA -> . minus NUMERICA_AUX
    (107) BOOLEANA -> . true
    (108) BOOLEANA -> . false
    (109) STRINGS -> . cteString
    (105) NUMERICA_AUX -> . cteInt
    (106) NUMERICA_AUX -> . cteFloat

    left_par        shift and go to state 117
    id              shift and go to state 112
    plus            shift and go to state 123
    minus           shift and go to state 126
    true            shift and go to state 118
    false           shift and go to state 108
    cteString       shift and go to state 116
    cteInt          shift and go to state 121
    cteFloat        shift and go to state 110

    NUMERICA_AUX                   shift and go to state 115
    CONSTANTE                      shift and go to state 120
    FACTOR_AUX                     shift and go to state 114
    STRINGS                        shift and go to state 119
    NUMERICA                       shift and go to state 122
    TERMINO                        shift and go to state 113
    EXP                            shift and go to state 194
    FACTOR                         shift and go to state 124
    LISTA                          shift and go to state 125
    BOOLEANA                       shift and go to state 111

state 155

    (83) EXP_AUX -> minus . EXP
    (81) EXP -> . TERMINO EXP_AUX
    (85) TERMINO -> . FACTOR TERMINO_AUX
    (89) FACTOR -> . left_par EXPRESION right_par
    (90) FACTOR -> . CONSTANTE
    (91) FACTOR -> . LISTA
    (92) FACTOR -> . FACTOR_AUX
    (99) CONSTANTE -> . NUMERICA
    (100) CONSTANTE -> . BOOLEANA
    (101) CONSTANTE -> . STRINGS
    (98) LISTA -> . id left_sb EXP right_sb
    (93) FACTOR_AUX -> . id
    (94) FACTOR_AUX -> . id LLAMADA_F
    (102) NUMERICA -> . NUMERICA_AUX
    (103) NUMERICA -> . plus NUMERICA_AUX
    (104) NUMERICA -> . minus NUMERICA_AUX
    (107) BOOLEANA -> . true
    (108) BOOLEANA -> . false
    (109) STRINGS -> . cteString
    (105) NUMERICA_AUX -> . cteInt
    (106) NUMERICA_AUX -> . cteFloat

    left_par        shift and go to state 117
    id              shift and go to state 112
    plus            shift and go to state 123
    minus           shift and go to state 126
    true            shift and go to state 118
    false           shift and go to state 108
    cteString       shift and go to state 116
    cteInt          shift and go to state 121
    cteFloat        shift and go to state 110

    NUMERICA_AUX                   shift and go to state 115
    CONSTANTE                      shift and go to state 120
    FACTOR_AUX                     shift and go to state 114
    STRINGS                        shift and go to state 119
    NUMERICA                       shift and go to state 122
    TERMINO                        shift and go to state 113
    EXP                            shift and go to state 195
    FACTOR                         shift and go to state 124
    LISTA                          shift and go to state 125
    BOOLEANA                       shift and go to state 111

state 156

    (84) EXP_AUX -> empty .

    right_sb        reduce using rule 84 (EXP_AUX -> empty .)
    lt              reduce using rule 84 (EXP_AUX -> empty .)
    gt              reduce using rule 84 (EXP_AUX -> empty .)
    ne              reduce using rule 84 (EXP_AUX -> empty .)
    ge              reduce using rule 84 (EXP_AUX -> empty .)
    le              reduce using rule 84 (EXP_AUX -> empty .)
    et              reduce using rule 84 (EXP_AUX -> empty .)
    and             reduce using rule 84 (EXP_AUX -> empty .)
    or              reduce using rule 84 (EXP_AUX -> empty .)
    right_par       reduce using rule 84 (EXP_AUX -> empty .)
    comma           reduce using rule 84 (EXP_AUX -> empty .)
    semicolon       reduce using rule 84 (EXP_AUX -> empty .)
    right_cb        reduce using rule 84 (EXP_AUX -> empty .)
    list            reduce using rule 84 (EXP_AUX -> empty .)
    var             reduce using rule 84 (EXP_AUX -> empty .)
    return          reduce using rule 84 (EXP_AUX -> empty .)
    if              reduce using rule 84 (EXP_AUX -> empty .)
    while           reduce using rule 84 (EXP_AUX -> empty .)
    cread           reduce using rule 84 (EXP_AUX -> empty .)
    cwrite          reduce using rule 84 (EXP_AUX -> empty .)
    left_par        reduce using rule 84 (EXP_AUX -> empty .)
    id              reduce using rule 84 (EXP_AUX -> empty .)


state 157

    (89) FACTOR -> left_par EXPRESION . right_par

    right_par       shift and go to state 196


state 158

    (103) NUMERICA -> plus NUMERICA_AUX .

    multiply        reduce using rule 103 (NUMERICA -> plus NUMERICA_AUX .)
    divide          reduce using rule 103 (NUMERICA -> plus NUMERICA_AUX .)
    plus            reduce using rule 103 (NUMERICA -> plus NUMERICA_AUX .)
    minus           reduce using rule 103 (NUMERICA -> plus NUMERICA_AUX .)
    right_cb        reduce using rule 103 (NUMERICA -> plus NUMERICA_AUX .)
    list            reduce using rule 103 (NUMERICA -> plus NUMERICA_AUX .)
    var             reduce using rule 103 (NUMERICA -> plus NUMERICA_AUX .)
    return          reduce using rule 103 (NUMERICA -> plus NUMERICA_AUX .)
    if              reduce using rule 103 (NUMERICA -> plus NUMERICA_AUX .)
    while           reduce using rule 103 (NUMERICA -> plus NUMERICA_AUX .)
    cread           reduce using rule 103 (NUMERICA -> plus NUMERICA_AUX .)
    cwrite          reduce using rule 103 (NUMERICA -> plus NUMERICA_AUX .)
    left_par        reduce using rule 103 (NUMERICA -> plus NUMERICA_AUX .)
    id              reduce using rule 103 (NUMERICA -> plus NUMERICA_AUX .)
    right_sb        reduce using rule 103 (NUMERICA -> plus NUMERICA_AUX .)
    lt              reduce using rule 103 (NUMERICA -> plus NUMERICA_AUX .)
    gt              reduce using rule 103 (NUMERICA -> plus NUMERICA_AUX .)
    ne              reduce using rule 103 (NUMERICA -> plus NUMERICA_AUX .)
    ge              reduce using rule 103 (NUMERICA -> plus NUMERICA_AUX .)
    le              reduce using rule 103 (NUMERICA -> plus NUMERICA_AUX .)
    et              reduce using rule 103 (NUMERICA -> plus NUMERICA_AUX .)
    and             reduce using rule 103 (NUMERICA -> plus NUMERICA_AUX .)
    or              reduce using rule 103 (NUMERICA -> plus NUMERICA_AUX .)
    right_par       reduce using rule 103 (NUMERICA -> plus NUMERICA_AUX .)
    comma           reduce using rule 103 (NUMERICA -> plus NUMERICA_AUX .)
    semicolon       reduce using rule 103 (NUMERICA -> plus NUMERICA_AUX .)


state 159

    (85) TERMINO -> FACTOR TERMINO_AUX .

    plus            reduce using rule 85 (TERMINO -> FACTOR TERMINO_AUX .)
    minus           reduce using rule 85 (TERMINO -> FACTOR TERMINO_AUX .)
    and             reduce using rule 85 (TERMINO -> FACTOR TERMINO_AUX .)
    or              reduce using rule 85 (TERMINO -> FACTOR TERMINO_AUX .)
    right_par       reduce using rule 85 (TERMINO -> FACTOR TERMINO_AUX .)
    comma           reduce using rule 85 (TERMINO -> FACTOR TERMINO_AUX .)
    semicolon       reduce using rule 85 (TERMINO -> FACTOR TERMINO_AUX .)
    lt              reduce using rule 85 (TERMINO -> FACTOR TERMINO_AUX .)
    gt              reduce using rule 85 (TERMINO -> FACTOR TERMINO_AUX .)
    ne              reduce using rule 85 (TERMINO -> FACTOR TERMINO_AUX .)
    ge              reduce using rule 85 (TERMINO -> FACTOR TERMINO_AUX .)
    le              reduce using rule 85 (TERMINO -> FACTOR TERMINO_AUX .)
    et              reduce using rule 85 (TERMINO -> FACTOR TERMINO_AUX .)
    right_sb        reduce using rule 85 (TERMINO -> FACTOR TERMINO_AUX .)
    right_cb        reduce using rule 85 (TERMINO -> FACTOR TERMINO_AUX .)
    list            reduce using rule 85 (TERMINO -> FACTOR TERMINO_AUX .)
    var             reduce using rule 85 (TERMINO -> FACTOR TERMINO_AUX .)
    return          reduce using rule 85 (TERMINO -> FACTOR TERMINO_AUX .)
    if              reduce using rule 85 (TERMINO -> FACTOR TERMINO_AUX .)
    while           reduce using rule 85 (TERMINO -> FACTOR TERMINO_AUX .)
    cread           reduce using rule 85 (TERMINO -> FACTOR TERMINO_AUX .)
    cwrite          reduce using rule 85 (TERMINO -> FACTOR TERMINO_AUX .)
    left_par        reduce using rule 85 (TERMINO -> FACTOR TERMINO_AUX .)
    id              reduce using rule 85 (TERMINO -> FACTOR TERMINO_AUX .)


state 160

    (87) TERMINO_AUX -> divide . TERMINO
    (85) TERMINO -> . FACTOR TERMINO_AUX
    (89) FACTOR -> . left_par EXPRESION right_par
    (90) FACTOR -> . CONSTANTE
    (91) FACTOR -> . LISTA
    (92) FACTOR -> . FACTOR_AUX
    (99) CONSTANTE -> . NUMERICA
    (100) CONSTANTE -> . BOOLEANA
    (101) CONSTANTE -> . STRINGS
    (98) LISTA -> . id left_sb EXP right_sb
    (93) FACTOR_AUX -> . id
    (94) FACTOR_AUX -> . id LLAMADA_F
    (102) NUMERICA -> . NUMERICA_AUX
    (103) NUMERICA -> . plus NUMERICA_AUX
    (104) NUMERICA -> . minus NUMERICA_AUX
    (107) BOOLEANA -> . true
    (108) BOOLEANA -> . false
    (109) STRINGS -> . cteString
    (105) NUMERICA_AUX -> . cteInt
    (106) NUMERICA_AUX -> . cteFloat

    left_par        shift and go to state 117
    id              shift and go to state 112
    plus            shift and go to state 123
    minus           shift and go to state 126
    true            shift and go to state 118
    false           shift and go to state 108
    cteString       shift and go to state 116
    cteInt          shift and go to state 121
    cteFloat        shift and go to state 110

    CONSTANTE                      shift and go to state 120
    FACTOR_AUX                     shift and go to state 114
    NUMERICA_AUX                   shift and go to state 115
    NUMERICA                       shift and go to state 122
    TERMINO                        shift and go to state 197
    FACTOR                         shift and go to state 124
    LISTA                          shift and go to state 125
    STRINGS                        shift and go to state 119
    BOOLEANA                       shift and go to state 111

state 161

    (86) TERMINO_AUX -> multiply . TERMINO
    (85) TERMINO -> . FACTOR TERMINO_AUX
    (89) FACTOR -> . left_par EXPRESION right_par
    (90) FACTOR -> . CONSTANTE
    (91) FACTOR -> . LISTA
    (92) FACTOR -> . FACTOR_AUX
    (99) CONSTANTE -> . NUMERICA
    (100) CONSTANTE -> . BOOLEANA
    (101) CONSTANTE -> . STRINGS
    (98) LISTA -> . id left_sb EXP right_sb
    (93) FACTOR_AUX -> . id
    (94) FACTOR_AUX -> . id LLAMADA_F
    (102) NUMERICA -> . NUMERICA_AUX
    (103) NUMERICA -> . plus NUMERICA_AUX
    (104) NUMERICA -> . minus NUMERICA_AUX
    (107) BOOLEANA -> . true
    (108) BOOLEANA -> . false
    (109) STRINGS -> . cteString
    (105) NUMERICA_AUX -> . cteInt
    (106) NUMERICA_AUX -> . cteFloat

    left_par        shift and go to state 117
    id              shift and go to state 112
    plus            shift and go to state 123
    minus           shift and go to state 126
    true            shift and go to state 118
    false           shift and go to state 108
    cteString       shift and go to state 116
    cteInt          shift and go to state 121
    cteFloat        shift and go to state 110

    CONSTANTE                      shift and go to state 120
    FACTOR_AUX                     shift and go to state 114
    NUMERICA_AUX                   shift and go to state 115
    NUMERICA                       shift and go to state 122
    TERMINO                        shift and go to state 198
    FACTOR                         shift and go to state 124
    LISTA                          shift and go to state 125
    STRINGS                        shift and go to state 119
    BOOLEANA                       shift and go to state 111

state 162

    (88) TERMINO_AUX -> empty .

    plus            reduce using rule 88 (TERMINO_AUX -> empty .)
    minus           reduce using rule 88 (TERMINO_AUX -> empty .)
    right_sb        reduce using rule 88 (TERMINO_AUX -> empty .)
    lt              reduce using rule 88 (TERMINO_AUX -> empty .)
    gt              reduce using rule 88 (TERMINO_AUX -> empty .)
    ne              reduce using rule 88 (TERMINO_AUX -> empty .)
    ge              reduce using rule 88 (TERMINO_AUX -> empty .)
    le              reduce using rule 88 (TERMINO_AUX -> empty .)
    et              reduce using rule 88 (TERMINO_AUX -> empty .)
    and             reduce using rule 88 (TERMINO_AUX -> empty .)
    or              reduce using rule 88 (TERMINO_AUX -> empty .)
    right_par       reduce using rule 88 (TERMINO_AUX -> empty .)
    comma           reduce using rule 88 (TERMINO_AUX -> empty .)
    semicolon       reduce using rule 88 (TERMINO_AUX -> empty .)
    right_cb        reduce using rule 88 (TERMINO_AUX -> empty .)
    list            reduce using rule 88 (TERMINO_AUX -> empty .)
    var             reduce using rule 88 (TERMINO_AUX -> empty .)
    return          reduce using rule 88 (TERMINO_AUX -> empty .)
    if              reduce using rule 88 (TERMINO_AUX -> empty .)
    while           reduce using rule 88 (TERMINO_AUX -> empty .)
    cread           reduce using rule 88 (TERMINO_AUX -> empty .)
    cwrite          reduce using rule 88 (TERMINO_AUX -> empty .)
    left_par        reduce using rule 88 (TERMINO_AUX -> empty .)
    id              reduce using rule 88 (TERMINO_AUX -> empty .)


state 163

    (104) NUMERICA -> minus NUMERICA_AUX .

    multiply        reduce using rule 104 (NUMERICA -> minus NUMERICA_AUX .)
    divide          reduce using rule 104 (NUMERICA -> minus NUMERICA_AUX .)
    plus            reduce using rule 104 (NUMERICA -> minus NUMERICA_AUX .)
    minus           reduce using rule 104 (NUMERICA -> minus NUMERICA_AUX .)
    right_cb        reduce using rule 104 (NUMERICA -> minus NUMERICA_AUX .)
    list            reduce using rule 104 (NUMERICA -> minus NUMERICA_AUX .)
    var             reduce using rule 104 (NUMERICA -> minus NUMERICA_AUX .)
    return          reduce using rule 104 (NUMERICA -> minus NUMERICA_AUX .)
    if              reduce using rule 104 (NUMERICA -> minus NUMERICA_AUX .)
    while           reduce using rule 104 (NUMERICA -> minus NUMERICA_AUX .)
    cread           reduce using rule 104 (NUMERICA -> minus NUMERICA_AUX .)
    cwrite          reduce using rule 104 (NUMERICA -> minus NUMERICA_AUX .)
    left_par        reduce using rule 104 (NUMERICA -> minus NUMERICA_AUX .)
    id              reduce using rule 104 (NUMERICA -> minus NUMERICA_AUX .)
    right_sb        reduce using rule 104 (NUMERICA -> minus NUMERICA_AUX .)
    lt              reduce using rule 104 (NUMERICA -> minus NUMERICA_AUX .)
    gt              reduce using rule 104 (NUMERICA -> minus NUMERICA_AUX .)
    ne              reduce using rule 104 (NUMERICA -> minus NUMERICA_AUX .)
    ge              reduce using rule 104 (NUMERICA -> minus NUMERICA_AUX .)
    le              reduce using rule 104 (NUMERICA -> minus NUMERICA_AUX .)
    et              reduce using rule 104 (NUMERICA -> minus NUMERICA_AUX .)
    and             reduce using rule 104 (NUMERICA -> minus NUMERICA_AUX .)
    or              reduce using rule 104 (NUMERICA -> minus NUMERICA_AUX .)
    right_par       reduce using rule 104 (NUMERICA -> minus NUMERICA_AUX .)
    comma           reduce using rule 104 (NUMERICA -> minus NUMERICA_AUX .)
    semicolon       reduce using rule 104 (NUMERICA -> minus NUMERICA_AUX .)


state 164

    (63) ESCRITURA -> cwrite left_par EXPRESION right_par . semicolon

    semicolon       shift and go to state 199


state 165

    (110) ASIGNACION -> ASIGNACION_AUX equals EXPRESION semicolon .

    right_cb        reduce using rule 110 (ASIGNACION -> ASIGNACION_AUX equals EXPRESION semicolon .)
    list            reduce using rule 110 (ASIGNACION -> ASIGNACION_AUX equals EXPRESION semicolon .)
    var             reduce using rule 110 (ASIGNACION -> ASIGNACION_AUX equals EXPRESION semicolon .)
    if              reduce using rule 110 (ASIGNACION -> ASIGNACION_AUX equals EXPRESION semicolon .)
    while           reduce using rule 110 (ASIGNACION -> ASIGNACION_AUX equals EXPRESION semicolon .)
    cread           reduce using rule 110 (ASIGNACION -> ASIGNACION_AUX equals EXPRESION semicolon .)
    cwrite          reduce using rule 110 (ASIGNACION -> ASIGNACION_AUX equals EXPRESION semicolon .)
    left_par        reduce using rule 110 (ASIGNACION -> ASIGNACION_AUX equals EXPRESION semicolon .)
    id              reduce using rule 110 (ASIGNACION -> ASIGNACION_AUX equals EXPRESION semicolon .)
    return          reduce using rule 110 (ASIGNACION -> ASIGNACION_AUX equals EXPRESION semicolon .)


state 166

    (70) EXPRESION_B -> and . EXPRESION_NOT EXPRESIONLOGICA
    (68) EXPRESION_NOT -> . not
    (69) EXPRESION_NOT -> . empty
    (113) empty -> .

    not             shift and go to state 92
    left_par        reduce using rule 113 (empty -> .)
    id              reduce using rule 113 (empty -> .)
    plus            reduce using rule 113 (empty -> .)
    minus           reduce using rule 113 (empty -> .)
    true            reduce using rule 113 (empty -> .)
    false           reduce using rule 113 (empty -> .)
    cteString       reduce using rule 113 (empty -> .)
    cteInt          reduce using rule 113 (empty -> .)
    cteFloat        reduce using rule 113 (empty -> .)

    EXPRESION_NOT                  shift and go to state 200
    empty                          shift and go to state 93

state 167

    (67) EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA EXPRESION_B .

    right_par       reduce using rule 67 (EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA EXPRESION_B .)
    comma           reduce using rule 67 (EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA EXPRESION_B .)
    semicolon       reduce using rule 67 (EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA EXPRESION_B .)


state 168

    (71) EXPRESION_B -> or . EXPRESION_NOT EXPRESIONLOGICA
    (68) EXPRESION_NOT -> . not
    (69) EXPRESION_NOT -> . empty
    (113) empty -> .

    not             shift and go to state 92
    left_par        reduce using rule 113 (empty -> .)
    id              reduce using rule 113 (empty -> .)
    plus            reduce using rule 113 (empty -> .)
    minus           reduce using rule 113 (empty -> .)
    true            reduce using rule 113 (empty -> .)
    false           reduce using rule 113 (empty -> .)
    cteString       reduce using rule 113 (empty -> .)
    cteInt          reduce using rule 113 (empty -> .)
    cteFloat        reduce using rule 113 (empty -> .)

    EXPRESION_NOT                  shift and go to state 201
    empty                          shift and go to state 93

state 169

    (72) EXPRESION_B -> empty .

    right_par       reduce using rule 72 (EXPRESION_B -> empty .)
    comma           reduce using rule 72 (EXPRESION_B -> empty .)
    semicolon       reduce using rule 72 (EXPRESION_B -> empty .)


state 170

    (75) EXPRESIONLOGICA_AUX -> gt . EXP
    (81) EXP -> . TERMINO EXP_AUX
    (85) TERMINO -> . FACTOR TERMINO_AUX
    (89) FACTOR -> . left_par EXPRESION right_par
    (90) FACTOR -> . CONSTANTE
    (91) FACTOR -> . LISTA
    (92) FACTOR -> . FACTOR_AUX
    (99) CONSTANTE -> . NUMERICA
    (100) CONSTANTE -> . BOOLEANA
    (101) CONSTANTE -> . STRINGS
    (98) LISTA -> . id left_sb EXP right_sb
    (93) FACTOR_AUX -> . id
    (94) FACTOR_AUX -> . id LLAMADA_F
    (102) NUMERICA -> . NUMERICA_AUX
    (103) NUMERICA -> . plus NUMERICA_AUX
    (104) NUMERICA -> . minus NUMERICA_AUX
    (107) BOOLEANA -> . true
    (108) BOOLEANA -> . false
    (109) STRINGS -> . cteString
    (105) NUMERICA_AUX -> . cteInt
    (106) NUMERICA_AUX -> . cteFloat

    left_par        shift and go to state 117
    id              shift and go to state 112
    plus            shift and go to state 123
    minus           shift and go to state 126
    true            shift and go to state 118
    false           shift and go to state 108
    cteString       shift and go to state 116
    cteInt          shift and go to state 121
    cteFloat        shift and go to state 110

    NUMERICA_AUX                   shift and go to state 115
    CONSTANTE                      shift and go to state 120
    FACTOR_AUX                     shift and go to state 114
    STRINGS                        shift and go to state 119
    NUMERICA                       shift and go to state 122
    TERMINO                        shift and go to state 113
    EXP                            shift and go to state 202
    FACTOR                         shift and go to state 124
    LISTA                          shift and go to state 125
    BOOLEANA                       shift and go to state 111

state 171

    (73) EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .

    and             reduce using rule 73 (EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .)
    or              reduce using rule 73 (EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .)
    right_par       reduce using rule 73 (EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .)
    comma           reduce using rule 73 (EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .)
    semicolon       reduce using rule 73 (EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .)


state 172

    (74) EXPRESIONLOGICA_AUX -> lt . EXP
    (81) EXP -> . TERMINO EXP_AUX
    (85) TERMINO -> . FACTOR TERMINO_AUX
    (89) FACTOR -> . left_par EXPRESION right_par
    (90) FACTOR -> . CONSTANTE
    (91) FACTOR -> . LISTA
    (92) FACTOR -> . FACTOR_AUX
    (99) CONSTANTE -> . NUMERICA
    (100) CONSTANTE -> . BOOLEANA
    (101) CONSTANTE -> . STRINGS
    (98) LISTA -> . id left_sb EXP right_sb
    (93) FACTOR_AUX -> . id
    (94) FACTOR_AUX -> . id LLAMADA_F
    (102) NUMERICA -> . NUMERICA_AUX
    (103) NUMERICA -> . plus NUMERICA_AUX
    (104) NUMERICA -> . minus NUMERICA_AUX
    (107) BOOLEANA -> . true
    (108) BOOLEANA -> . false
    (109) STRINGS -> . cteString
    (105) NUMERICA_AUX -> . cteInt
    (106) NUMERICA_AUX -> . cteFloat

    left_par        shift and go to state 117
    id              shift and go to state 112
    plus            shift and go to state 123
    minus           shift and go to state 126
    true            shift and go to state 118
    false           shift and go to state 108
    cteString       shift and go to state 116
    cteInt          shift and go to state 121
    cteFloat        shift and go to state 110

    NUMERICA_AUX                   shift and go to state 115
    CONSTANTE                      shift and go to state 120
    FACTOR_AUX                     shift and go to state 114
    STRINGS                        shift and go to state 119
    NUMERICA                       shift and go to state 122
    TERMINO                        shift and go to state 113
    EXP                            shift and go to state 203
    FACTOR                         shift and go to state 124
    LISTA                          shift and go to state 125
    BOOLEANA                       shift and go to state 111

state 173

    (76) EXPRESIONLOGICA_AUX -> ne . EXP
    (81) EXP -> . TERMINO EXP_AUX
    (85) TERMINO -> . FACTOR TERMINO_AUX
    (89) FACTOR -> . left_par EXPRESION right_par
    (90) FACTOR -> . CONSTANTE
    (91) FACTOR -> . LISTA
    (92) FACTOR -> . FACTOR_AUX
    (99) CONSTANTE -> . NUMERICA
    (100) CONSTANTE -> . BOOLEANA
    (101) CONSTANTE -> . STRINGS
    (98) LISTA -> . id left_sb EXP right_sb
    (93) FACTOR_AUX -> . id
    (94) FACTOR_AUX -> . id LLAMADA_F
    (102) NUMERICA -> . NUMERICA_AUX
    (103) NUMERICA -> . plus NUMERICA_AUX
    (104) NUMERICA -> . minus NUMERICA_AUX
    (107) BOOLEANA -> . true
    (108) BOOLEANA -> . false
    (109) STRINGS -> . cteString
    (105) NUMERICA_AUX -> . cteInt
    (106) NUMERICA_AUX -> . cteFloat

    left_par        shift and go to state 117
    id              shift and go to state 112
    plus            shift and go to state 123
    minus           shift and go to state 126
    true            shift and go to state 118
    false           shift and go to state 108
    cteString       shift and go to state 116
    cteInt          shift and go to state 121
    cteFloat        shift and go to state 110

    NUMERICA_AUX                   shift and go to state 115
    CONSTANTE                      shift and go to state 120
    FACTOR_AUX                     shift and go to state 114
    STRINGS                        shift and go to state 119
    NUMERICA                       shift and go to state 122
    TERMINO                        shift and go to state 113
    EXP                            shift and go to state 204
    FACTOR                         shift and go to state 124
    LISTA                          shift and go to state 125
    BOOLEANA                       shift and go to state 111

state 174

    (77) EXPRESIONLOGICA_AUX -> ge . EXP
    (81) EXP -> . TERMINO EXP_AUX
    (85) TERMINO -> . FACTOR TERMINO_AUX
    (89) FACTOR -> . left_par EXPRESION right_par
    (90) FACTOR -> . CONSTANTE
    (91) FACTOR -> . LISTA
    (92) FACTOR -> . FACTOR_AUX
    (99) CONSTANTE -> . NUMERICA
    (100) CONSTANTE -> . BOOLEANA
    (101) CONSTANTE -> . STRINGS
    (98) LISTA -> . id left_sb EXP right_sb
    (93) FACTOR_AUX -> . id
    (94) FACTOR_AUX -> . id LLAMADA_F
    (102) NUMERICA -> . NUMERICA_AUX
    (103) NUMERICA -> . plus NUMERICA_AUX
    (104) NUMERICA -> . minus NUMERICA_AUX
    (107) BOOLEANA -> . true
    (108) BOOLEANA -> . false
    (109) STRINGS -> . cteString
    (105) NUMERICA_AUX -> . cteInt
    (106) NUMERICA_AUX -> . cteFloat

    left_par        shift and go to state 117
    id              shift and go to state 112
    plus            shift and go to state 123
    minus           shift and go to state 126
    true            shift and go to state 118
    false           shift and go to state 108
    cteString       shift and go to state 116
    cteInt          shift and go to state 121
    cteFloat        shift and go to state 110

    NUMERICA_AUX                   shift and go to state 115
    CONSTANTE                      shift and go to state 120
    FACTOR_AUX                     shift and go to state 114
    STRINGS                        shift and go to state 119
    NUMERICA                       shift and go to state 122
    TERMINO                        shift and go to state 113
    EXP                            shift and go to state 205
    FACTOR                         shift and go to state 124
    LISTA                          shift and go to state 125
    BOOLEANA                       shift and go to state 111

state 175

    (78) EXPRESIONLOGICA_AUX -> le . EXP
    (81) EXP -> . TERMINO EXP_AUX
    (85) TERMINO -> . FACTOR TERMINO_AUX
    (89) FACTOR -> . left_par EXPRESION right_par
    (90) FACTOR -> . CONSTANTE
    (91) FACTOR -> . LISTA
    (92) FACTOR -> . FACTOR_AUX
    (99) CONSTANTE -> . NUMERICA
    (100) CONSTANTE -> . BOOLEANA
    (101) CONSTANTE -> . STRINGS
    (98) LISTA -> . id left_sb EXP right_sb
    (93) FACTOR_AUX -> . id
    (94) FACTOR_AUX -> . id LLAMADA_F
    (102) NUMERICA -> . NUMERICA_AUX
    (103) NUMERICA -> . plus NUMERICA_AUX
    (104) NUMERICA -> . minus NUMERICA_AUX
    (107) BOOLEANA -> . true
    (108) BOOLEANA -> . false
    (109) STRINGS -> . cteString
    (105) NUMERICA_AUX -> . cteInt
    (106) NUMERICA_AUX -> . cteFloat

    left_par        shift and go to state 117
    id              shift and go to state 112
    plus            shift and go to state 123
    minus           shift and go to state 126
    true            shift and go to state 118
    false           shift and go to state 108
    cteString       shift and go to state 116
    cteInt          shift and go to state 121
    cteFloat        shift and go to state 110

    NUMERICA_AUX                   shift and go to state 115
    CONSTANTE                      shift and go to state 120
    FACTOR_AUX                     shift and go to state 114
    STRINGS                        shift and go to state 119
    NUMERICA                       shift and go to state 122
    TERMINO                        shift and go to state 113
    EXP                            shift and go to state 206
    FACTOR                         shift and go to state 124
    LISTA                          shift and go to state 125
    BOOLEANA                       shift and go to state 111

state 176

    (79) EXPRESIONLOGICA_AUX -> et . EXP
    (81) EXP -> . TERMINO EXP_AUX
    (85) TERMINO -> . FACTOR TERMINO_AUX
    (89) FACTOR -> . left_par EXPRESION right_par
    (90) FACTOR -> . CONSTANTE
    (91) FACTOR -> . LISTA
    (92) FACTOR -> . FACTOR_AUX
    (99) CONSTANTE -> . NUMERICA
    (100) CONSTANTE -> . BOOLEANA
    (101) CONSTANTE -> . STRINGS
    (98) LISTA -> . id left_sb EXP right_sb
    (93) FACTOR_AUX -> . id
    (94) FACTOR_AUX -> . id LLAMADA_F
    (102) NUMERICA -> . NUMERICA_AUX
    (103) NUMERICA -> . plus NUMERICA_AUX
    (104) NUMERICA -> . minus NUMERICA_AUX
    (107) BOOLEANA -> . true
    (108) BOOLEANA -> . false
    (109) STRINGS -> . cteString
    (105) NUMERICA_AUX -> . cteInt
    (106) NUMERICA_AUX -> . cteFloat

    left_par        shift and go to state 117
    id              shift and go to state 112
    plus            shift and go to state 123
    minus           shift and go to state 126
    true            shift and go to state 118
    false           shift and go to state 108
    cteString       shift and go to state 116
    cteInt          shift and go to state 121
    cteFloat        shift and go to state 110

    NUMERICA_AUX                   shift and go to state 115
    CONSTANTE                      shift and go to state 120
    FACTOR_AUX                     shift and go to state 114
    STRINGS                        shift and go to state 119
    NUMERICA                       shift and go to state 122
    TERMINO                        shift and go to state 113
    EXP                            shift and go to state 207
    FACTOR                         shift and go to state 124
    LISTA                          shift and go to state 125
    BOOLEANA                       shift and go to state 111

state 177

    (80) EXPRESIONLOGICA_AUX -> empty .

    and             reduce using rule 80 (EXPRESIONLOGICA_AUX -> empty .)
    or              reduce using rule 80 (EXPRESIONLOGICA_AUX -> empty .)
    right_par       reduce using rule 80 (EXPRESIONLOGICA_AUX -> empty .)
    comma           reduce using rule 80 (EXPRESIONLOGICA_AUX -> empty .)
    semicolon       reduce using rule 80 (EXPRESIONLOGICA_AUX -> empty .)


state 178

    (66) LLAMADA_EXPRESION -> LLAMADA_EXPRESION comma EXPRESION .

    right_par       reduce using rule 66 (LLAMADA_EXPRESION -> LLAMADA_EXPRESION comma EXPRESION .)
    comma           reduce using rule 66 (LLAMADA_EXPRESION -> LLAMADA_EXPRESION comma EXPRESION .)


state 179

    (64) LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .

    right_cb        reduce using rule 64 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    list            reduce using rule 64 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    var             reduce using rule 64 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    if              reduce using rule 64 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    while           reduce using rule 64 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    cread           reduce using rule 64 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    cwrite          reduce using rule 64 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    left_par        reduce using rule 64 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    id              reduce using rule 64 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    return          reduce using rule 64 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)


state 180

    (61) CICLO -> while left_par EXPRESION right_par . CUERPO
    (23) CUERPO -> . left_cb CUERPO_AUX right_cb

    left_cb         shift and go to state 37

    CUERPO                         shift and go to state 208

state 181

    (38) CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .

    right_cb        reduce using rule 38 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    list            reduce using rule 38 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    var             reduce using rule 38 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    return          reduce using rule 38 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    if              reduce using rule 38 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    while           reduce using rule 38 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    cread           reduce using rule 38 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    cwrite          reduce using rule 38 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    left_par        reduce using rule 38 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    id              reduce using rule 38 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)


state 182

    (42) RETORNO -> return . EXP
    (81) EXP -> . TERMINO EXP_AUX
    (85) TERMINO -> . FACTOR TERMINO_AUX
    (89) FACTOR -> . left_par EXPRESION right_par
    (90) FACTOR -> . CONSTANTE
    (91) FACTOR -> . LISTA
    (92) FACTOR -> . FACTOR_AUX
    (99) CONSTANTE -> . NUMERICA
    (100) CONSTANTE -> . BOOLEANA
    (101) CONSTANTE -> . STRINGS
    (98) LISTA -> . id left_sb EXP right_sb
    (93) FACTOR_AUX -> . id
    (94) FACTOR_AUX -> . id LLAMADA_F
    (102) NUMERICA -> . NUMERICA_AUX
    (103) NUMERICA -> . plus NUMERICA_AUX
    (104) NUMERICA -> . minus NUMERICA_AUX
    (107) BOOLEANA -> . true
    (108) BOOLEANA -> . false
    (109) STRINGS -> . cteString
    (105) NUMERICA_AUX -> . cteInt
    (106) NUMERICA_AUX -> . cteFloat

    left_par        shift and go to state 117
    id              shift and go to state 112
    plus            shift and go to state 123
    minus           shift and go to state 126
    true            shift and go to state 118
    false           shift and go to state 108
    cteString       shift and go to state 116
    cteInt          shift and go to state 121
    cteFloat        shift and go to state 110

    NUMERICA_AUX                   shift and go to state 115
    CONSTANTE                      shift and go to state 120
    FACTOR_AUX                     shift and go to state 114
    STRINGS                        shift and go to state 119
    NUMERICA                       shift and go to state 122
    TERMINO                        shift and go to state 113
    EXP                            shift and go to state 209
    FACTOR                         shift and go to state 124
    LISTA                          shift and go to state 125
    BOOLEANA                       shift and go to state 111

state 183

    (39) CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX . RETORNO
    (42) RETORNO -> . return EXP

    return          shift and go to state 182

    RETORNO                        shift and go to state 210

state 184

    (37) CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .

    main            reduce using rule 37 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)
    int             reduce using rule 37 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)
    float           reduce using rule 37 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)
    bool            reduce using rule 37 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)
    string          reduce using rule 37 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)
    void            reduce using rule 37 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)


state 185

    (31) CUERPOFUNC_AUX -> CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .

    list            reduce using rule 31 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    var             reduce using rule 31 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    if              reduce using rule 31 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    while           reduce using rule 31 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    cread           reduce using rule 31 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    cwrite          reduce using rule 31 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    left_par        reduce using rule 31 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    id              reduce using rule 31 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    return          reduce using rule 31 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    right_cb        reduce using rule 31 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)


state 186

    (35) CUERPOFUNC_ESTATUTO -> ESTATUTO .

    list            reduce using rule 35 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    var             reduce using rule 35 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    if              reduce using rule 35 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    while           reduce using rule 35 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    cread           reduce using rule 35 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    cwrite          reduce using rule 35 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    left_par        reduce using rule 35 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    id              reduce using rule 35 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    return          reduce using rule 35 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    right_cb        reduce using rule 35 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)


state 187

    (36) CUERPOFUNC_ESTATUTO -> empty .

    list            reduce using rule 36 (CUERPOFUNC_ESTATUTO -> empty .)
    var             reduce using rule 36 (CUERPOFUNC_ESTATUTO -> empty .)
    if              reduce using rule 36 (CUERPOFUNC_ESTATUTO -> empty .)
    while           reduce using rule 36 (CUERPOFUNC_ESTATUTO -> empty .)
    cread           reduce using rule 36 (CUERPOFUNC_ESTATUTO -> empty .)
    cwrite          reduce using rule 36 (CUERPOFUNC_ESTATUTO -> empty .)
    left_par        reduce using rule 36 (CUERPOFUNC_ESTATUTO -> empty .)
    id              reduce using rule 36 (CUERPOFUNC_ESTATUTO -> empty .)
    return          reduce using rule 36 (CUERPOFUNC_ESTATUTO -> empty .)
    right_cb        reduce using rule 36 (CUERPOFUNC_ESTATUTO -> empty .)


state 188

    (32) CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS . CUERPOFUNC_ESTATUTO
    (35) CUERPOFUNC_ESTATUTO -> . ESTATUTO
    (36) CUERPOFUNC_ESTATUTO -> . empty
    (50) ESTATUTO -> . ASIGNACION
    (51) ESTATUTO -> . CONDICION
    (52) ESTATUTO -> . CICLO
    (53) ESTATUTO -> . LECTURA
    (54) ESTATUTO -> . ESCRITURA
    (55) ESTATUTO -> . LLAMADA
    (113) empty -> .
    (110) ASIGNACION -> . ASIGNACION_AUX equals EXPRESION semicolon
    (56) CONDICION -> . if CONDICION_ELSEIF CONDICION_ELSE
    (61) CICLO -> . while left_par EXPRESION right_par CUERPO
    (62) LECTURA -> . cread left_par id right_par semicolon
    (63) ESCRITURA -> . cwrite left_par EXPRESION right_par semicolon
    (64) LLAMADA -> . left_par LLAMADA_EXPRESION right_par semicolon
    (111) ASIGNACION_AUX -> . id
    (112) ASIGNACION_AUX -> . LISTA
    (98) LISTA -> . id left_sb EXP right_sb

  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for cread resolved as shift
  ! shift/reduce conflict for cwrite resolved as shift
  ! shift/reduce conflict for left_par resolved as shift
  ! shift/reduce conflict for id resolved as shift
    list            reduce using rule 113 (empty -> .)
    var             reduce using rule 113 (empty -> .)
    return          reduce using rule 113 (empty -> .)
    right_cb        reduce using rule 113 (empty -> .)
    if              shift and go to state 59
    while           shift and go to state 71
    cread           shift and go to state 57
    cwrite          shift and go to state 63
    left_par        shift and go to state 69
    id              shift and go to state 62

  ! if              [ reduce using rule 113 (empty -> .) ]
  ! while           [ reduce using rule 113 (empty -> .) ]
  ! cread           [ reduce using rule 113 (empty -> .) ]
  ! cwrite          [ reduce using rule 113 (empty -> .) ]
  ! left_par        [ reduce using rule 113 (empty -> .) ]
  ! id              [ reduce using rule 113 (empty -> .) ]

    CUERPOFUNC_ESTATUTO            shift and go to state 211
    CICLO                          shift and go to state 56
    ASIGNACION                     shift and go to state 60
    LISTA                          shift and go to state 72
    ESTATUTO                       shift and go to state 186
    LLAMADA                        shift and go to state 67
    CONDICION                      shift and go to state 68
    ASIGNACION_AUX                 shift and go to state 64
    LECTURA                        shift and go to state 58
    empty                          shift and go to state 187
    ESCRITURA                      shift and go to state 65

state 189

    (47) VOIDFUNC -> void id left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .

    main            reduce using rule 47 (VOIDFUNC -> void id left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)
    int             reduce using rule 47 (VOIDFUNC -> void id left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)
    float           reduce using rule 47 (VOIDFUNC -> void id left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)
    bool            reduce using rule 47 (VOIDFUNC -> void id left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)
    string          reduce using rule 47 (VOIDFUNC -> void id left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)
    void            reduce using rule 47 (VOIDFUNC -> void id left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)


state 190

    (62) LECTURA -> cread left_par id right_par semicolon .

    list            reduce using rule 62 (LECTURA -> cread left_par id right_par semicolon .)
    var             reduce using rule 62 (LECTURA -> cread left_par id right_par semicolon .)
    if              reduce using rule 62 (LECTURA -> cread left_par id right_par semicolon .)
    while           reduce using rule 62 (LECTURA -> cread left_par id right_par semicolon .)
    cread           reduce using rule 62 (LECTURA -> cread left_par id right_par semicolon .)
    cwrite          reduce using rule 62 (LECTURA -> cread left_par id right_par semicolon .)
    left_par        reduce using rule 62 (LECTURA -> cread left_par id right_par semicolon .)
    id              reduce using rule 62 (LECTURA -> cread left_par id right_par semicolon .)
    return          reduce using rule 62 (LECTURA -> cread left_par id right_par semicolon .)
    right_cb        reduce using rule 62 (LECTURA -> cread left_par id right_par semicolon .)


state 191

    (57) CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO .

    elseif          reduce using rule 57 (CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO .)
    else            reduce using rule 57 (CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO .)
    right_cb        reduce using rule 57 (CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO .)
    list            reduce using rule 57 (CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO .)
    var             reduce using rule 57 (CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO .)
    if              reduce using rule 57 (CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO .)
    while           reduce using rule 57 (CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO .)
    cread           reduce using rule 57 (CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO .)
    cwrite          reduce using rule 57 (CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO .)
    left_par        reduce using rule 57 (CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO .)
    id              reduce using rule 57 (CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO .)
    return          reduce using rule 57 (CONDICION_ELSEIF -> left_par EXPRESION right_par CUERPO .)


state 192

    (58) CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION . right_par CUERPO

    right_par       shift and go to state 212


state 193

    (95) LLAMADA_F -> left_par EXPRESION . LLAMADAF_AUX right_par
    (96) LLAMADAF_AUX -> . comma EXPRESION LLAMADAF_AUX
    (97) LLAMADAF_AUX -> . empty
    (113) empty -> .

    comma           shift and go to state 214
    right_par       reduce using rule 113 (empty -> .)

    LLAMADAF_AUX                   shift and go to state 213
    empty                          shift and go to state 215

state 194

    (82) EXP_AUX -> plus EXP .

    right_sb        reduce using rule 82 (EXP_AUX -> plus EXP .)
    lt              reduce using rule 82 (EXP_AUX -> plus EXP .)
    gt              reduce using rule 82 (EXP_AUX -> plus EXP .)
    ne              reduce using rule 82 (EXP_AUX -> plus EXP .)
    ge              reduce using rule 82 (EXP_AUX -> plus EXP .)
    le              reduce using rule 82 (EXP_AUX -> plus EXP .)
    et              reduce using rule 82 (EXP_AUX -> plus EXP .)
    and             reduce using rule 82 (EXP_AUX -> plus EXP .)
    or              reduce using rule 82 (EXP_AUX -> plus EXP .)
    right_par       reduce using rule 82 (EXP_AUX -> plus EXP .)
    comma           reduce using rule 82 (EXP_AUX -> plus EXP .)
    semicolon       reduce using rule 82 (EXP_AUX -> plus EXP .)
    right_cb        reduce using rule 82 (EXP_AUX -> plus EXP .)
    list            reduce using rule 82 (EXP_AUX -> plus EXP .)
    var             reduce using rule 82 (EXP_AUX -> plus EXP .)
    return          reduce using rule 82 (EXP_AUX -> plus EXP .)
    if              reduce using rule 82 (EXP_AUX -> plus EXP .)
    while           reduce using rule 82 (EXP_AUX -> plus EXP .)
    cread           reduce using rule 82 (EXP_AUX -> plus EXP .)
    cwrite          reduce using rule 82 (EXP_AUX -> plus EXP .)
    left_par        reduce using rule 82 (EXP_AUX -> plus EXP .)
    id              reduce using rule 82 (EXP_AUX -> plus EXP .)


state 195

    (83) EXP_AUX -> minus EXP .

    right_sb        reduce using rule 83 (EXP_AUX -> minus EXP .)
    lt              reduce using rule 83 (EXP_AUX -> minus EXP .)
    gt              reduce using rule 83 (EXP_AUX -> minus EXP .)
    ne              reduce using rule 83 (EXP_AUX -> minus EXP .)
    ge              reduce using rule 83 (EXP_AUX -> minus EXP .)
    le              reduce using rule 83 (EXP_AUX -> minus EXP .)
    et              reduce using rule 83 (EXP_AUX -> minus EXP .)
    and             reduce using rule 83 (EXP_AUX -> minus EXP .)
    or              reduce using rule 83 (EXP_AUX -> minus EXP .)
    right_par       reduce using rule 83 (EXP_AUX -> minus EXP .)
    comma           reduce using rule 83 (EXP_AUX -> minus EXP .)
    semicolon       reduce using rule 83 (EXP_AUX -> minus EXP .)
    right_cb        reduce using rule 83 (EXP_AUX -> minus EXP .)
    list            reduce using rule 83 (EXP_AUX -> minus EXP .)
    var             reduce using rule 83 (EXP_AUX -> minus EXP .)
    return          reduce using rule 83 (EXP_AUX -> minus EXP .)
    if              reduce using rule 83 (EXP_AUX -> minus EXP .)
    while           reduce using rule 83 (EXP_AUX -> minus EXP .)
    cread           reduce using rule 83 (EXP_AUX -> minus EXP .)
    cwrite          reduce using rule 83 (EXP_AUX -> minus EXP .)
    left_par        reduce using rule 83 (EXP_AUX -> minus EXP .)
    id              reduce using rule 83 (EXP_AUX -> minus EXP .)


state 196

    (89) FACTOR -> left_par EXPRESION right_par .

    multiply        reduce using rule 89 (FACTOR -> left_par EXPRESION right_par .)
    divide          reduce using rule 89 (FACTOR -> left_par EXPRESION right_par .)
    plus            reduce using rule 89 (FACTOR -> left_par EXPRESION right_par .)
    minus           reduce using rule 89 (FACTOR -> left_par EXPRESION right_par .)
    right_sb        reduce using rule 89 (FACTOR -> left_par EXPRESION right_par .)
    and             reduce using rule 89 (FACTOR -> left_par EXPRESION right_par .)
    or              reduce using rule 89 (FACTOR -> left_par EXPRESION right_par .)
    right_par       reduce using rule 89 (FACTOR -> left_par EXPRESION right_par .)
    comma           reduce using rule 89 (FACTOR -> left_par EXPRESION right_par .)
    semicolon       reduce using rule 89 (FACTOR -> left_par EXPRESION right_par .)
    lt              reduce using rule 89 (FACTOR -> left_par EXPRESION right_par .)
    gt              reduce using rule 89 (FACTOR -> left_par EXPRESION right_par .)
    ne              reduce using rule 89 (FACTOR -> left_par EXPRESION right_par .)
    ge              reduce using rule 89 (FACTOR -> left_par EXPRESION right_par .)
    le              reduce using rule 89 (FACTOR -> left_par EXPRESION right_par .)
    et              reduce using rule 89 (FACTOR -> left_par EXPRESION right_par .)
    right_cb        reduce using rule 89 (FACTOR -> left_par EXPRESION right_par .)
    list            reduce using rule 89 (FACTOR -> left_par EXPRESION right_par .)
    var             reduce using rule 89 (FACTOR -> left_par EXPRESION right_par .)
    return          reduce using rule 89 (FACTOR -> left_par EXPRESION right_par .)
    if              reduce using rule 89 (FACTOR -> left_par EXPRESION right_par .)
    while           reduce using rule 89 (FACTOR -> left_par EXPRESION right_par .)
    cread           reduce using rule 89 (FACTOR -> left_par EXPRESION right_par .)
    cwrite          reduce using rule 89 (FACTOR -> left_par EXPRESION right_par .)
    left_par        reduce using rule 89 (FACTOR -> left_par EXPRESION right_par .)
    id              reduce using rule 89 (FACTOR -> left_par EXPRESION right_par .)


state 197

    (87) TERMINO_AUX -> divide TERMINO .

    plus            reduce using rule 87 (TERMINO_AUX -> divide TERMINO .)
    minus           reduce using rule 87 (TERMINO_AUX -> divide TERMINO .)
    right_sb        reduce using rule 87 (TERMINO_AUX -> divide TERMINO .)
    lt              reduce using rule 87 (TERMINO_AUX -> divide TERMINO .)
    gt              reduce using rule 87 (TERMINO_AUX -> divide TERMINO .)
    ne              reduce using rule 87 (TERMINO_AUX -> divide TERMINO .)
    ge              reduce using rule 87 (TERMINO_AUX -> divide TERMINO .)
    le              reduce using rule 87 (TERMINO_AUX -> divide TERMINO .)
    et              reduce using rule 87 (TERMINO_AUX -> divide TERMINO .)
    and             reduce using rule 87 (TERMINO_AUX -> divide TERMINO .)
    or              reduce using rule 87 (TERMINO_AUX -> divide TERMINO .)
    right_par       reduce using rule 87 (TERMINO_AUX -> divide TERMINO .)
    comma           reduce using rule 87 (TERMINO_AUX -> divide TERMINO .)
    semicolon       reduce using rule 87 (TERMINO_AUX -> divide TERMINO .)
    right_cb        reduce using rule 87 (TERMINO_AUX -> divide TERMINO .)
    list            reduce using rule 87 (TERMINO_AUX -> divide TERMINO .)
    var             reduce using rule 87 (TERMINO_AUX -> divide TERMINO .)
    return          reduce using rule 87 (TERMINO_AUX -> divide TERMINO .)
    if              reduce using rule 87 (TERMINO_AUX -> divide TERMINO .)
    while           reduce using rule 87 (TERMINO_AUX -> divide TERMINO .)
    cread           reduce using rule 87 (TERMINO_AUX -> divide TERMINO .)
    cwrite          reduce using rule 87 (TERMINO_AUX -> divide TERMINO .)
    left_par        reduce using rule 87 (TERMINO_AUX -> divide TERMINO .)
    id              reduce using rule 87 (TERMINO_AUX -> divide TERMINO .)


state 198

    (86) TERMINO_AUX -> multiply TERMINO .

    plus            reduce using rule 86 (TERMINO_AUX -> multiply TERMINO .)
    minus           reduce using rule 86 (TERMINO_AUX -> multiply TERMINO .)
    right_sb        reduce using rule 86 (TERMINO_AUX -> multiply TERMINO .)
    lt              reduce using rule 86 (TERMINO_AUX -> multiply TERMINO .)
    gt              reduce using rule 86 (TERMINO_AUX -> multiply TERMINO .)
    ne              reduce using rule 86 (TERMINO_AUX -> multiply TERMINO .)
    ge              reduce using rule 86 (TERMINO_AUX -> multiply TERMINO .)
    le              reduce using rule 86 (TERMINO_AUX -> multiply TERMINO .)
    et              reduce using rule 86 (TERMINO_AUX -> multiply TERMINO .)
    and             reduce using rule 86 (TERMINO_AUX -> multiply TERMINO .)
    or              reduce using rule 86 (TERMINO_AUX -> multiply TERMINO .)
    right_par       reduce using rule 86 (TERMINO_AUX -> multiply TERMINO .)
    comma           reduce using rule 86 (TERMINO_AUX -> multiply TERMINO .)
    semicolon       reduce using rule 86 (TERMINO_AUX -> multiply TERMINO .)
    right_cb        reduce using rule 86 (TERMINO_AUX -> multiply TERMINO .)
    list            reduce using rule 86 (TERMINO_AUX -> multiply TERMINO .)
    var             reduce using rule 86 (TERMINO_AUX -> multiply TERMINO .)
    return          reduce using rule 86 (TERMINO_AUX -> multiply TERMINO .)
    if              reduce using rule 86 (TERMINO_AUX -> multiply TERMINO .)
    while           reduce using rule 86 (TERMINO_AUX -> multiply TERMINO .)
    cread           reduce using rule 86 (TERMINO_AUX -> multiply TERMINO .)
    cwrite          reduce using rule 86 (TERMINO_AUX -> multiply TERMINO .)
    left_par        reduce using rule 86 (TERMINO_AUX -> multiply TERMINO .)
    id              reduce using rule 86 (TERMINO_AUX -> multiply TERMINO .)


state 199

    (63) ESCRITURA -> cwrite left_par EXPRESION right_par semicolon .

    right_cb        reduce using rule 63 (ESCRITURA -> cwrite left_par EXPRESION right_par semicolon .)
    list            reduce using rule 63 (ESCRITURA -> cwrite left_par EXPRESION right_par semicolon .)
    var             reduce using rule 63 (ESCRITURA -> cwrite left_par EXPRESION right_par semicolon .)
    if              reduce using rule 63 (ESCRITURA -> cwrite left_par EXPRESION right_par semicolon .)
    while           reduce using rule 63 (ESCRITURA -> cwrite left_par EXPRESION right_par semicolon .)
    cread           reduce using rule 63 (ESCRITURA -> cwrite left_par EXPRESION right_par semicolon .)
    cwrite          reduce using rule 63 (ESCRITURA -> cwrite left_par EXPRESION right_par semicolon .)
    left_par        reduce using rule 63 (ESCRITURA -> cwrite left_par EXPRESION right_par semicolon .)
    id              reduce using rule 63 (ESCRITURA -> cwrite left_par EXPRESION right_par semicolon .)
    return          reduce using rule 63 (ESCRITURA -> cwrite left_par EXPRESION right_par semicolon .)


state 200

    (70) EXPRESION_B -> and EXPRESION_NOT . EXPRESIONLOGICA
    (73) EXPRESIONLOGICA -> . EXP EXPRESIONLOGICA_AUX
    (81) EXP -> . TERMINO EXP_AUX
    (85) TERMINO -> . FACTOR TERMINO_AUX
    (89) FACTOR -> . left_par EXPRESION right_par
    (90) FACTOR -> . CONSTANTE
    (91) FACTOR -> . LISTA
    (92) FACTOR -> . FACTOR_AUX
    (99) CONSTANTE -> . NUMERICA
    (100) CONSTANTE -> . BOOLEANA
    (101) CONSTANTE -> . STRINGS
    (98) LISTA -> . id left_sb EXP right_sb
    (93) FACTOR_AUX -> . id
    (94) FACTOR_AUX -> . id LLAMADA_F
    (102) NUMERICA -> . NUMERICA_AUX
    (103) NUMERICA -> . plus NUMERICA_AUX
    (104) NUMERICA -> . minus NUMERICA_AUX
    (107) BOOLEANA -> . true
    (108) BOOLEANA -> . false
    (109) STRINGS -> . cteString
    (105) NUMERICA_AUX -> . cteInt
    (106) NUMERICA_AUX -> . cteFloat

    left_par        shift and go to state 117
    id              shift and go to state 112
    plus            shift and go to state 123
    minus           shift and go to state 126
    true            shift and go to state 118
    false           shift and go to state 108
    cteString       shift and go to state 116
    cteInt          shift and go to state 121
    cteFloat        shift and go to state 110

    EXPRESIONLOGICA                shift and go to state 216
    CONSTANTE                      shift and go to state 120
    FACTOR_AUX                     shift and go to state 114
    STRINGS                        shift and go to state 119
    NUMERICA                       shift and go to state 122
    TERMINO                        shift and go to state 113
    EXP                            shift and go to state 130
    FACTOR                         shift and go to state 124
    LISTA                          shift and go to state 125
    NUMERICA_AUX                   shift and go to state 115
    BOOLEANA                       shift and go to state 111

state 201

    (71) EXPRESION_B -> or EXPRESION_NOT . EXPRESIONLOGICA
    (73) EXPRESIONLOGICA -> . EXP EXPRESIONLOGICA_AUX
    (81) EXP -> . TERMINO EXP_AUX
    (85) TERMINO -> . FACTOR TERMINO_AUX
    (89) FACTOR -> . left_par EXPRESION right_par
    (90) FACTOR -> . CONSTANTE
    (91) FACTOR -> . LISTA
    (92) FACTOR -> . FACTOR_AUX
    (99) CONSTANTE -> . NUMERICA
    (100) CONSTANTE -> . BOOLEANA
    (101) CONSTANTE -> . STRINGS
    (98) LISTA -> . id left_sb EXP right_sb
    (93) FACTOR_AUX -> . id
    (94) FACTOR_AUX -> . id LLAMADA_F
    (102) NUMERICA -> . NUMERICA_AUX
    (103) NUMERICA -> . plus NUMERICA_AUX
    (104) NUMERICA -> . minus NUMERICA_AUX
    (107) BOOLEANA -> . true
    (108) BOOLEANA -> . false
    (109) STRINGS -> . cteString
    (105) NUMERICA_AUX -> . cteInt
    (106) NUMERICA_AUX -> . cteFloat

    left_par        shift and go to state 117
    id              shift and go to state 112
    plus            shift and go to state 123
    minus           shift and go to state 126
    true            shift and go to state 118
    false           shift and go to state 108
    cteString       shift and go to state 116
    cteInt          shift and go to state 121
    cteFloat        shift and go to state 110

    EXPRESIONLOGICA                shift and go to state 217
    CONSTANTE                      shift and go to state 120
    FACTOR_AUX                     shift and go to state 114
    STRINGS                        shift and go to state 119
    NUMERICA                       shift and go to state 122
    TERMINO                        shift and go to state 113
    EXP                            shift and go to state 130
    FACTOR                         shift and go to state 124
    LISTA                          shift and go to state 125
    NUMERICA_AUX                   shift and go to state 115
    BOOLEANA                       shift and go to state 111

state 202

    (75) EXPRESIONLOGICA_AUX -> gt EXP .

    and             reduce using rule 75 (EXPRESIONLOGICA_AUX -> gt EXP .)
    or              reduce using rule 75 (EXPRESIONLOGICA_AUX -> gt EXP .)
    right_par       reduce using rule 75 (EXPRESIONLOGICA_AUX -> gt EXP .)
    comma           reduce using rule 75 (EXPRESIONLOGICA_AUX -> gt EXP .)
    semicolon       reduce using rule 75 (EXPRESIONLOGICA_AUX -> gt EXP .)


state 203

    (74) EXPRESIONLOGICA_AUX -> lt EXP .

    and             reduce using rule 74 (EXPRESIONLOGICA_AUX -> lt EXP .)
    or              reduce using rule 74 (EXPRESIONLOGICA_AUX -> lt EXP .)
    right_par       reduce using rule 74 (EXPRESIONLOGICA_AUX -> lt EXP .)
    comma           reduce using rule 74 (EXPRESIONLOGICA_AUX -> lt EXP .)
    semicolon       reduce using rule 74 (EXPRESIONLOGICA_AUX -> lt EXP .)


state 204

    (76) EXPRESIONLOGICA_AUX -> ne EXP .

    and             reduce using rule 76 (EXPRESIONLOGICA_AUX -> ne EXP .)
    or              reduce using rule 76 (EXPRESIONLOGICA_AUX -> ne EXP .)
    right_par       reduce using rule 76 (EXPRESIONLOGICA_AUX -> ne EXP .)
    comma           reduce using rule 76 (EXPRESIONLOGICA_AUX -> ne EXP .)
    semicolon       reduce using rule 76 (EXPRESIONLOGICA_AUX -> ne EXP .)


state 205

    (77) EXPRESIONLOGICA_AUX -> ge EXP .

    and             reduce using rule 77 (EXPRESIONLOGICA_AUX -> ge EXP .)
    or              reduce using rule 77 (EXPRESIONLOGICA_AUX -> ge EXP .)
    right_par       reduce using rule 77 (EXPRESIONLOGICA_AUX -> ge EXP .)
    comma           reduce using rule 77 (EXPRESIONLOGICA_AUX -> ge EXP .)
    semicolon       reduce using rule 77 (EXPRESIONLOGICA_AUX -> ge EXP .)


state 206

    (78) EXPRESIONLOGICA_AUX -> le EXP .

    and             reduce using rule 78 (EXPRESIONLOGICA_AUX -> le EXP .)
    or              reduce using rule 78 (EXPRESIONLOGICA_AUX -> le EXP .)
    right_par       reduce using rule 78 (EXPRESIONLOGICA_AUX -> le EXP .)
    comma           reduce using rule 78 (EXPRESIONLOGICA_AUX -> le EXP .)
    semicolon       reduce using rule 78 (EXPRESIONLOGICA_AUX -> le EXP .)


state 207

    (79) EXPRESIONLOGICA_AUX -> et EXP .

    and             reduce using rule 79 (EXPRESIONLOGICA_AUX -> et EXP .)
    or              reduce using rule 79 (EXPRESIONLOGICA_AUX -> et EXP .)
    right_par       reduce using rule 79 (EXPRESIONLOGICA_AUX -> et EXP .)
    comma           reduce using rule 79 (EXPRESIONLOGICA_AUX -> et EXP .)
    semicolon       reduce using rule 79 (EXPRESIONLOGICA_AUX -> et EXP .)


state 208

    (61) CICLO -> while left_par EXPRESION right_par CUERPO .

    right_cb        reduce using rule 61 (CICLO -> while left_par EXPRESION right_par CUERPO .)
    list            reduce using rule 61 (CICLO -> while left_par EXPRESION right_par CUERPO .)
    var             reduce using rule 61 (CICLO -> while left_par EXPRESION right_par CUERPO .)
    if              reduce using rule 61 (CICLO -> while left_par EXPRESION right_par CUERPO .)
    while           reduce using rule 61 (CICLO -> while left_par EXPRESION right_par CUERPO .)
    cread           reduce using rule 61 (CICLO -> while left_par EXPRESION right_par CUERPO .)
    cwrite          reduce using rule 61 (CICLO -> while left_par EXPRESION right_par CUERPO .)
    left_par        reduce using rule 61 (CICLO -> while left_par EXPRESION right_par CUERPO .)
    id              reduce using rule 61 (CICLO -> while left_par EXPRESION right_par CUERPO .)
    return          reduce using rule 61 (CICLO -> while left_par EXPRESION right_par CUERPO .)


state 209

    (42) RETORNO -> return EXP .

    right_cb        reduce using rule 42 (RETORNO -> return EXP .)
    list            reduce using rule 42 (RETORNO -> return EXP .)
    var             reduce using rule 42 (RETORNO -> return EXP .)
    return          reduce using rule 42 (RETORNO -> return EXP .)
    if              reduce using rule 42 (RETORNO -> return EXP .)
    while           reduce using rule 42 (RETORNO -> return EXP .)
    cread           reduce using rule 42 (RETORNO -> return EXP .)
    cwrite          reduce using rule 42 (RETORNO -> return EXP .)
    left_par        reduce using rule 42 (RETORNO -> return EXP .)
    id              reduce using rule 42 (RETORNO -> return EXP .)


state 210

    (39) CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .

    right_cb        reduce using rule 39 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    list            reduce using rule 39 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    var             reduce using rule 39 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    return          reduce using rule 39 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    if              reduce using rule 39 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    while           reduce using rule 39 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    cread           reduce using rule 39 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    cwrite          reduce using rule 39 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    left_par        reduce using rule 39 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    id              reduce using rule 39 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)


state 211

    (32) CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .

    list            reduce using rule 32 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    var             reduce using rule 32 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    if              reduce using rule 32 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    while           reduce using rule 32 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    cread           reduce using rule 32 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    cwrite          reduce using rule 32 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    left_par        reduce using rule 32 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    id              reduce using rule 32 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    return          reduce using rule 32 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)
    right_cb        reduce using rule 32 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS CUERPOFUNC_ESTATUTO .)


state 212

    (58) CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par . CUERPO
    (23) CUERPO -> . left_cb CUERPO_AUX right_cb

    left_cb         shift and go to state 37

    CUERPO                         shift and go to state 218

state 213

    (95) LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX . right_par

    right_par       shift and go to state 219


state 214

    (96) LLAMADAF_AUX -> comma . EXPRESION LLAMADAF_AUX
    (67) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA EXPRESION_B
    (68) EXPRESION_NOT -> . not
    (69) EXPRESION_NOT -> . empty
    (113) empty -> .

    not             shift and go to state 92
    left_par        reduce using rule 113 (empty -> .)
    id              reduce using rule 113 (empty -> .)
    plus            reduce using rule 113 (empty -> .)
    minus           reduce using rule 113 (empty -> .)
    true            reduce using rule 113 (empty -> .)
    false           reduce using rule 113 (empty -> .)
    cteString       reduce using rule 113 (empty -> .)
    cteInt          reduce using rule 113 (empty -> .)
    cteFloat        reduce using rule 113 (empty -> .)

    EXPRESION                      shift and go to state 220
    EXPRESION_NOT                  shift and go to state 90
    empty                          shift and go to state 93

state 215

    (97) LLAMADAF_AUX -> empty .

    right_par       reduce using rule 97 (LLAMADAF_AUX -> empty .)


state 216

    (70) EXPRESION_B -> and EXPRESION_NOT EXPRESIONLOGICA .

    right_par       reduce using rule 70 (EXPRESION_B -> and EXPRESION_NOT EXPRESIONLOGICA .)
    comma           reduce using rule 70 (EXPRESION_B -> and EXPRESION_NOT EXPRESIONLOGICA .)
    semicolon       reduce using rule 70 (EXPRESION_B -> and EXPRESION_NOT EXPRESIONLOGICA .)


state 217

    (71) EXPRESION_B -> or EXPRESION_NOT EXPRESIONLOGICA .

    right_par       reduce using rule 71 (EXPRESION_B -> or EXPRESION_NOT EXPRESIONLOGICA .)
    comma           reduce using rule 71 (EXPRESION_B -> or EXPRESION_NOT EXPRESIONLOGICA .)
    semicolon       reduce using rule 71 (EXPRESION_B -> or EXPRESION_NOT EXPRESIONLOGICA .)


state 218

    (58) CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO .

    elseif          reduce using rule 58 (CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO .)
    else            reduce using rule 58 (CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO .)
    right_cb        reduce using rule 58 (CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO .)
    list            reduce using rule 58 (CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO .)
    var             reduce using rule 58 (CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO .)
    if              reduce using rule 58 (CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO .)
    while           reduce using rule 58 (CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO .)
    cread           reduce using rule 58 (CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO .)
    cwrite          reduce using rule 58 (CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO .)
    left_par        reduce using rule 58 (CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO .)
    id              reduce using rule 58 (CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO .)
    return          reduce using rule 58 (CONDICION_ELSEIF -> CONDICION_ELSEIF elseif left_par EXPRESION right_par CUERPO .)


state 219

    (95) LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .

    multiply        reduce using rule 95 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    divide          reduce using rule 95 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    plus            reduce using rule 95 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    minus           reduce using rule 95 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    right_sb        reduce using rule 95 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    lt              reduce using rule 95 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    gt              reduce using rule 95 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    ne              reduce using rule 95 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    ge              reduce using rule 95 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    le              reduce using rule 95 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    et              reduce using rule 95 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    and             reduce using rule 95 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    or              reduce using rule 95 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    right_par       reduce using rule 95 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    comma           reduce using rule 95 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    semicolon       reduce using rule 95 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    right_cb        reduce using rule 95 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    list            reduce using rule 95 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    var             reduce using rule 95 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    return          reduce using rule 95 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    if              reduce using rule 95 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    while           reduce using rule 95 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    cread           reduce using rule 95 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    cwrite          reduce using rule 95 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    left_par        reduce using rule 95 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    id              reduce using rule 95 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)


state 220

    (96) LLAMADAF_AUX -> comma EXPRESION . LLAMADAF_AUX
    (96) LLAMADAF_AUX -> . comma EXPRESION LLAMADAF_AUX
    (97) LLAMADAF_AUX -> . empty
    (113) empty -> .

    comma           shift and go to state 214
    right_par       reduce using rule 113 (empty -> .)

    LLAMADAF_AUX                   shift and go to state 221
    empty                          shift and go to state 215

state 221

    (96) LLAMADAF_AUX -> comma EXPRESION LLAMADAF_AUX .

    right_par       reduce using rule 96 (LLAMADAF_AUX -> comma EXPRESION LLAMADAF_AUX .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for int in state 8 resolved as shift
WARNING: shift/reduce conflict for float in state 8 resolved as shift
WARNING: shift/reduce conflict for bool in state 8 resolved as shift
WARNING: shift/reduce conflict for string in state 8 resolved as shift
WARNING: shift/reduce conflict for void in state 8 resolved as shift
WARNING: shift/reduce conflict for list in state 11 resolved as shift
WARNING: shift/reduce conflict for var in state 11 resolved as shift
WARNING: shift/reduce conflict for main in state 14 resolved as shift
WARNING: shift/reduce conflict for int in state 14 resolved as shift
WARNING: shift/reduce conflict for float in state 14 resolved as shift
WARNING: shift/reduce conflict for bool in state 14 resolved as shift
WARNING: shift/reduce conflict for string in state 14 resolved as shift
WARNING: shift/reduce conflict for void in state 14 resolved as shift
WARNING: shift/reduce conflict for list in state 37 resolved as shift
WARNING: shift/reduce conflict for var in state 37 resolved as shift
WARNING: shift/reduce conflict for if in state 45 resolved as shift
WARNING: shift/reduce conflict for while in state 45 resolved as shift
WARNING: shift/reduce conflict for cread in state 45 resolved as shift
WARNING: shift/reduce conflict for cwrite in state 45 resolved as shift
WARNING: shift/reduce conflict for left_par in state 45 resolved as shift
WARNING: shift/reduce conflict for id in state 45 resolved as shift
WARNING: shift/reduce conflict for right_cb in state 48 resolved as shift
WARNING: shift/reduce conflict for list in state 48 resolved as shift
WARNING: shift/reduce conflict for var in state 48 resolved as shift
WARNING: shift/reduce conflict for if in state 73 resolved as shift
WARNING: shift/reduce conflict for while in state 73 resolved as shift
WARNING: shift/reduce conflict for cread in state 73 resolved as shift
WARNING: shift/reduce conflict for cwrite in state 73 resolved as shift
WARNING: shift/reduce conflict for left_par in state 73 resolved as shift
WARNING: shift/reduce conflict for id in state 73 resolved as shift
WARNING: shift/reduce conflict for list in state 98 resolved as shift
WARNING: shift/reduce conflict for var in state 98 resolved as shift
WARNING: shift/reduce conflict for list in state 100 resolved as shift
WARNING: shift/reduce conflict for var in state 100 resolved as shift
WARNING: shift/reduce conflict for left_par in state 112 resolved as shift
WARNING: shift/reduce conflict for list in state 138 resolved as shift
WARNING: shift/reduce conflict for var in state 138 resolved as shift
WARNING: shift/reduce conflict for if in state 140 resolved as shift
WARNING: shift/reduce conflict for while in state 140 resolved as shift
WARNING: shift/reduce conflict for cread in state 140 resolved as shift
WARNING: shift/reduce conflict for cwrite in state 140 resolved as shift
WARNING: shift/reduce conflict for left_par in state 140 resolved as shift
WARNING: shift/reduce conflict for id in state 140 resolved as shift
WARNING: shift/reduce conflict for list in state 141 resolved as shift
WARNING: shift/reduce conflict for var in state 141 resolved as shift
WARNING: shift/reduce conflict for if in state 188 resolved as shift
WARNING: shift/reduce conflict for while in state 188 resolved as shift
WARNING: shift/reduce conflict for cread in state 188 resolved as shift
WARNING: shift/reduce conflict for cwrite in state 188 resolved as shift
WARNING: shift/reduce conflict for left_par in state 188 resolved as shift
WARNING: shift/reduce conflict for id in state 188 resolved as shift
WARNING: reduce/reduce conflict in state 139 resolved using rule (CUERPOFUNC_VARS -> empty)
WARNING: rejected rule (CUERPORETORNO_CF_AUX -> empty) in state 139
WARNING: reduce/reduce conflict in state 141 resolved using rule (CUERPOFUNC -> CUERPOFUNC_AUX)
WARNING: rejected rule (empty -> <empty>) in state 141
WARNING: Rule (CUERPORETORNO_CF_AUX -> empty) is never reduced
