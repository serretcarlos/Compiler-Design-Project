Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    right_dblquotes
    left_dblquotes

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> program id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO nt_endQuad
Rule 2     nt_cambiarScope -> empty
Rule 3     nt_ambienteMain -> nt_cambiarScope
Rule 4     nt_endQuad -> empty
Rule 5     nt_pushJmpMain -> empty
Rule 6     PROGRAMA_VARS -> VARS
Rule 7     PROGRAMA_VARS -> empty
Rule 8     PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX
Rule 9     PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX
Rule 10    PROGRAMA_FUNC_AUX -> FUNC
Rule 11    PROGRAMA_FUNC_AUX -> empty
Rule 12    VARS -> VARS_AUX
Rule 13    VARS_AUX -> VARS_LIST_VAR
Rule 14    VARS_AUX -> VARS_AUX VARS_LIST_VAR
Rule 15    VARS_LIST_VAR -> VARS_LIST
Rule 16    VARS_LIST_VAR -> VARS_VAR
Rule 17    VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon
Rule 18    nt_hacerLista -> empty
Rule 19    VARS_LIST_AUX -> id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar
Rule 20    VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar
Rule 21    nt_agregarId -> empty
Rule 22    nt_agregarCteLista -> empty
Rule 23    nt_agregarDicVar -> empty
Rule 24    VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon
Rule 25    nt_hacerVar -> empty
Rule 26    VARS_VAR_AUX -> id nt_agregarId nt_agregarDicVar
Rule 27    VARS_VAR_AUX -> VARS_VAR_AUX comma id nt_agregarId nt_agregarDicVar
Rule 28    TIPO -> int nt_cambioTipoActual
Rule 29    TIPO -> float nt_cambioTipoActual
Rule 30    TIPO -> bool nt_cambioTipoActual
Rule 31    TIPO -> string nt_cambioTipoActual
Rule 32    nt_cambioTipoActual -> empty
Rule 33    CUERPO -> left_cb CUERPO_AUX right_cb
Rule 34    CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO
Rule 35    CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO
Rule 36    CUERPO_VARS -> VARS
Rule 37    CUERPO_VARS -> empty
Rule 38    CUERPO_ESTATUTO -> ESTATUTO
Rule 39    CUERPO_ESTATUTO -> empty
Rule 40    CUERPOFUNC -> CUERPOFUNC_AUX
Rule 41    CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
Rule 42    CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
Rule 43    nt_funcInicio -> empty
Rule 44    CUERPOFUNC_VARS -> VARS
Rule 45    CUERPOFUNC_VARS -> empty
Rule 46    CUERPOFUNC_ESTATUTO -> ESTATUTO
Rule 47    CUERPOFUNC_ESTATUTO -> empty
Rule 48    CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb
Rule 49    CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO
Rule 50    CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO
Rule 51    CUERPORETORNO_CF_AUX -> CUERPOFUNC
Rule 52    CUERPORETORNO_CF_AUX -> empty
Rule 53    RETORNO -> return EXP nt_checaRet semicolon
Rule 54    nt_checaRet -> empty
Rule 55    FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub
Rule 56    FUNC -> VOIDFUNC nt_pushEndsub
Rule 57    nt_pushEndsub -> empty
Rule 58    nt_cambioFuncActual -> empty
Rule 59    nt_agregarIdFunc -> empty
Rule 60    FUNC_PARA -> TIPO id nt_agregarParametro
Rule 61    FUNC_PARA -> FUNC_PARA comma TIPO id nt_agregarParametro
Rule 62    FUNC_PARA -> empty
Rule 63    nt_agregarParametro -> empty
Rule 64    VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb
Rule 65    nt_hacerVoid -> empty
Rule 66    VOIDFUNC_PARA -> TIPO id nt_agregarParametro
Rule 67    VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO id nt_agregarParametro
Rule 68    VOIDFUNC_PARA -> empty
Rule 69    ESTATUTO -> ASIGNACION
Rule 70    ESTATUTO -> CONDICION
Rule 71    ESTATUTO -> CICLO
Rule 72    ESTATUTO -> LECTURA
Rule 73    ESTATUTO -> ESCRITURA
Rule 74    ESTATUTO -> LLAMADA
Rule 75    CONDICION -> if CONDICION_AUX
Rule 76    CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto
Rule 77    ELSE_ELIF -> ELSE
Rule 78    ELSE_ELIF -> ELIF
Rule 79    ELSE_ELIF -> empty
Rule 80    ELSE -> else nt_pushElse CUERPO
Rule 81    ELIF -> elseif nt_pushElse CONDICION_AUX
Rule 82    nt_checarBool -> empty
Rule 83    nt_pushSalto -> empty
Rule 84    nt_pushElse -> empty
Rule 85    CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop
Rule 86    nt_saltoLoop -> empty
Rule 87    nt_pushLoop -> empty
Rule 88    LECTURA -> cread left_par id nt_leer right_par semicolon
Rule 89    nt_leer -> empty
Rule 90    ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon
Rule 91    nt_escribir -> empty
Rule 92    LLAMADA -> id nt_verificaFuncIdLlamada left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub
Rule 93    nt_verificaFuncIdLlamada -> empty
Rule 94    LLAMADA_EXPRESION -> LLAMADA_EXPRESION_AUX
Rule 95    LLAMADA_EXPRESION -> empty
Rule 96    LLAMADA_EXPRESION_AUX -> EXPRESION nt_verifyArgType
Rule 97    LLAMADA_EXPRESION_AUX -> LLAMADA_EXPRESION_AUX comma nt_paramPP EXPRESION nt_verifyArgType
Rule 98    EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
Rule 99    nt_checaAndOrNot -> empty
Rule 100   EXPRESION_NOT -> not nt_pushPOper
Rule 101   EXPRESION_NOT -> empty
Rule 102   EXPRESION_B -> and nt_pushPOper EXPRESION
Rule 103   EXPRESION_B -> or nt_pushPOper EXPRESION
Rule 104   EXPRESION_B -> empty
Rule 105   EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX
Rule 106   EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop
Rule 107   EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop
Rule 108   EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop
Rule 109   EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop
Rule 110   EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop
Rule 111   EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop
Rule 112   EXPRESIONLOGICA_AUX -> empty
Rule 113   nt_checarRelop -> empty
Rule 114   EXP -> TERMINO nt_checar_sumas EXP_AUX
Rule 115   nt_checar_sumas -> empty
Rule 116   EXP_AUX -> plus nt_pushPOper EXP
Rule 117   EXP_AUX -> minus nt_pushPOper EXP
Rule 118   EXP_AUX -> empty
Rule 119   TERMINO -> FACTOR nt_checar_multis TERMINO_AUX
Rule 120   nt_checar_multis -> empty
Rule 121   TERMINO_AUX -> multiply nt_pushPOper TERMINO
Rule 122   TERMINO_AUX -> divide nt_pushPOper TERMINO
Rule 123   TERMINO_AUX -> empty
Rule 124   FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper
Rule 125   FACTOR -> CONSTANTE
Rule 126   FACTOR -> LISTA
Rule 127   FACTOR -> FACTOR_AUX
Rule 128   FACTOR_AUX -> id nt_pushPilaO nt_verificaVar
Rule 129   FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F
Rule 130   nt_verificaVar -> empty
Rule 131   nt_verificaFuncId -> empty
Rule 132   LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet
Rule 133   LLAMADAF_AUX -> LLAMADAF_AUX2
Rule 134   LLAMADAF_AUX -> empty
Rule 135   LLAMADAF_AUX2 -> EXPRESION nt_verifyArgType
Rule 136   LLAMADAF_AUX2 -> LLAMADAF_AUX2 comma nt_paramPP EXPRESION nt_verifyArgType
Rule 137   nt_paramPP -> empty
Rule 138   nt_startERA -> empty
Rule 139   nt_verifyArgType -> empty
Rule 140   nt_verificaUltimo -> empty
Rule 141   nt_pushGoSub -> empty
Rule 142   nt_asignarRet -> empty
Rule 143   LISTA -> id nt_verificarVarDim left_sb EXP nt_pushVer right_sb
Rule 144   nt_verificarVarDim -> empty
Rule 145   nt_pushVer -> empty
Rule 146   CONSTANTE -> NUMERICA
Rule 147   CONSTANTE -> BOOLEANA
Rule 148   CONSTANTE -> STRINGS
Rule 149   NUMERICA -> NUMERICA_AUX
Rule 150   NUMERICA -> plus nt_sigMas NUMERICA_AUX
Rule 151   NUMERICA -> minus nt_sigMenos NUMERICA_AUX
Rule 152   nt_sigMas -> empty
Rule 153   nt_sigMenos -> empty
Rule 154   NUMERICA_AUX -> cteInt nt_pushInt
Rule 155   NUMERICA_AUX -> cteFloat nt_pushFloat
Rule 156   nt_pushInt -> empty
Rule 157   nt_pushFloat -> empty
Rule 158   BOOLEANA -> True
Rule 159   BOOLEANA -> False
Rule 160   STRINGS -> cteString
Rule 161   ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon
Rule 162   nt_checaEquals -> empty
Rule 163   ASIGNACION_AUX -> id nt_pushPilaO nt_checaStruct
Rule 164   ASIGNACION_AUX -> LISTA
Rule 165   nt_checaStruct -> empty
Rule 166   nt_pushPilaO -> empty
Rule 167   nt_pushPOper -> empty
Rule 168   nt_popPOper -> empty
Rule 169   empty -> <empty>

Terminals, with rules where they appear

False                : 159
True                 : 158
and                  : 102
bool                 : 30
comma                : 20 27 61 67 97 136
cread                : 88
cteFloat             : 155
cteInt               : 19 20 154
cteString            : 160
cwrite               : 90
divide               : 122
else                 : 80
elseif               : 81
equals               : 161
error                : 
et                   : 111
float                : 29
ge                   : 109
gt                   : 107
id                   : 1 19 20 26 27 55 60 61 64 66 67 88 92 128 129 143 163
if                   : 75
int                  : 28
le                   : 110
left_cb              : 33 48 64
left_dblquotes       : 
left_par             : 55 64 76 85 88 90 92 124 132
left_sb              : 19 20 143
list                 : 17
lt                   : 106
main                 : 1
minus                : 117 151
multiply             : 121
ne                   : 108
not                  : 100
or                   : 103
plus                 : 116 150
program              : 1
return               : 53
right_cb             : 33 48 64
right_dblquotes      : 
right_par            : 55 64 76 85 88 90 92 124 132
right_sb             : 19 20 143
semicolon            : 1 17 24 53 88 90 92 161
string               : 31
var                  : 24
void                 : 64
while                : 85

Nonterminals, with rules where they appear

ASIGNACION           : 69
ASIGNACION_AUX       : 161
BOOLEANA             : 147
CICLO                : 71
CONDICION            : 70
CONDICION_AUX        : 75 81
CONSTANTE            : 125
CUERPO               : 1 76 80 85
CUERPOFUNC           : 51 64
CUERPOFUNC_AUX       : 40 42
CUERPOFUNC_ESTATUTO  : 41 42
CUERPOFUNC_VARS      : 41 42
CUERPORETORNO        : 55
CUERPORETORNO_AUX    : 48 50
CUERPORETORNO_CF_AUX : 49 50
CUERPO_AUX           : 33 35
CUERPO_ESTATUTO      : 34 35
CUERPO_VARS          : 34 35
ELIF                 : 78
ELSE                 : 77
ELSE_ELIF            : 76
ESCRITURA            : 73
ESTATUTO             : 38 46
EXP                  : 53 105 106 107 108 109 110 111 116 117 143
EXPRESION            : 76 85 90 96 97 102 103 124 135 136 161
EXPRESIONLOGICA      : 98
EXPRESIONLOGICA_AUX  : 105
EXPRESION_B          : 98
EXPRESION_NOT        : 98
EXP_AUX              : 114
FACTOR               : 119
FACTOR_AUX           : 127
FUNC                 : 10
FUNC_PARA            : 55 61
LECTURA              : 72
LISTA                : 126 164
LLAMADA              : 74
LLAMADAF_AUX         : 132
LLAMADAF_AUX2        : 133 136
LLAMADA_EXPRESION    : 92
LLAMADA_EXPRESION_AUX : 94 97
LLAMADA_F            : 129
NUMERICA             : 146
NUMERICA_AUX         : 149 150 151
PROGRAMA             : 0
PROGRAMA_FUNC        : 1 9
PROGRAMA_FUNC_AUX    : 8 9
PROGRAMA_VARS        : 1
RETORNO              : 49 50
STRINGS              : 148
TERMINO              : 114 121 122
TERMINO_AUX          : 119
TIPO                 : 17 24 55 60 61 66 67
VARS                 : 6 36 44
VARS_AUX             : 12 14
VARS_LIST            : 15
VARS_LIST_AUX        : 17 20
VARS_LIST_VAR        : 13 14
VARS_VAR             : 16
VARS_VAR_AUX         : 24 27
VOIDFUNC             : 56
VOIDFUNC_PARA        : 64 67
empty                : 2 4 5 7 11 18 21 22 23 25 32 37 39 43 45 47 52 54 57 58 59 62 63 65 68 79 82 83 84 86 87 89 91 93 95 99 101 104 112 113 115 118 120 123 130 131 134 137 138 139 140 141 142 144 145 152 153 156 157 162 165 166 167 168
nt_agregarCteLista   : 19 20
nt_agregarDicVar     : 19 20 26 27
nt_agregarId         : 19 20 26 27
nt_agregarIdFunc     : 55 64
nt_agregarParametro  : 60 61 66 67
nt_ambienteMain      : 1
nt_asignarRet        : 132
nt_cambiarScope      : 1 1 3
nt_cambioFuncActual  : 55
nt_cambioTipoActual  : 28 29 30 31
nt_checaAndOrNot     : 98
nt_checaEquals       : 161
nt_checaRet          : 53
nt_checaStruct       : 163
nt_checarBool        : 76 85
nt_checarRelop       : 106 107 108 109 110 111
nt_checar_multis     : 119
nt_checar_sumas      : 114
nt_endQuad           : 1
nt_escribir          : 90
nt_funcInicio        : 41 42
nt_hacerLista        : 17
nt_hacerVar          : 24
nt_hacerVoid         : 64
nt_leer              : 88
nt_paramPP           : 97 136
nt_popPOper          : 92 124 132
nt_pushElse          : 80 81
nt_pushEndsub        : 55 56
nt_pushFloat         : 155
nt_pushGoSub         : 92 132
nt_pushInt           : 154
nt_pushJmpMain       : 1
nt_pushLoop          : 85
nt_pushPOper         : 92 100 102 103 106 107 108 109 110 111 116 117 121 122 124 132 161
nt_pushPilaO         : 128 163
nt_pushSalto         : 76
nt_pushVer           : 143
nt_saltoLoop         : 85
nt_sigMas            : 150
nt_sigMenos          : 151
nt_startERA          : 92 132
nt_verificaFuncId    : 129
nt_verificaFuncIdLlamada : 92
nt_verificaUltimo    : 92 132
nt_verificaVar       : 128
nt_verificarVarDim   : 143
nt_verifyArgType     : 96 97 135 136

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . program id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO nt_endQuad

    program         shift and go to state 1

    PROGRAMA                       shift and go to state 2

state 1

    (1) PROGRAMA -> program . id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO nt_endQuad

    id              shift and go to state 3


state 2

    (0) S' -> PROGRAMA .



state 3

    (1) PROGRAMA -> program id . nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO nt_endQuad
    (5) nt_pushJmpMain -> . empty
    (169) empty -> .

    semicolon       reduce using rule 169 (empty -> .)

    nt_pushJmpMain                 shift and go to state 4
    empty                          shift and go to state 5

state 4

    (1) PROGRAMA -> program id nt_pushJmpMain . semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO nt_endQuad

    semicolon       shift and go to state 6


state 5

    (5) nt_pushJmpMain -> empty .

    semicolon       reduce using rule 5 (nt_pushJmpMain -> empty .)


state 6

    (1) PROGRAMA -> program id nt_pushJmpMain semicolon . PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO nt_endQuad
    (6) PROGRAMA_VARS -> . VARS
    (7) PROGRAMA_VARS -> . empty
    (12) VARS -> . VARS_AUX
    (169) empty -> .
    (13) VARS_AUX -> . VARS_LIST_VAR
    (14) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (15) VARS_LIST_VAR -> . VARS_LIST
    (16) VARS_LIST_VAR -> . VARS_VAR
    (17) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (24) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

    int             reduce using rule 169 (empty -> .)
    float           reduce using rule 169 (empty -> .)
    bool            reduce using rule 169 (empty -> .)
    string          reduce using rule 169 (empty -> .)
    void            reduce using rule 169 (empty -> .)
    main            reduce using rule 169 (empty -> .)
    list            shift and go to state 14
    var             shift and go to state 10

    VARS                           shift and go to state 7
    VARS_LIST                      shift and go to state 9
    VARS_LIST_VAR                  shift and go to state 12
    PROGRAMA_VARS                  shift and go to state 8
    VARS_AUX                       shift and go to state 15
    VARS_VAR                       shift and go to state 13
    empty                          shift and go to state 11

state 7

    (6) PROGRAMA_VARS -> VARS .

    int             reduce using rule 6 (PROGRAMA_VARS -> VARS .)
    float           reduce using rule 6 (PROGRAMA_VARS -> VARS .)
    bool            reduce using rule 6 (PROGRAMA_VARS -> VARS .)
    string          reduce using rule 6 (PROGRAMA_VARS -> VARS .)
    void            reduce using rule 6 (PROGRAMA_VARS -> VARS .)
    main            reduce using rule 6 (PROGRAMA_VARS -> VARS .)


state 8

    (1) PROGRAMA -> program id nt_pushJmpMain semicolon PROGRAMA_VARS . nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO nt_endQuad
    (2) nt_cambiarScope -> . empty
    (169) empty -> .

    int             reduce using rule 169 (empty -> .)
    float           reduce using rule 169 (empty -> .)
    bool            reduce using rule 169 (empty -> .)
    string          reduce using rule 169 (empty -> .)
    void            reduce using rule 169 (empty -> .)
    main            reduce using rule 169 (empty -> .)

    nt_cambiarScope                shift and go to state 16
    empty                          shift and go to state 17

state 9

    (15) VARS_LIST_VAR -> VARS_LIST .

    list            reduce using rule 15 (VARS_LIST_VAR -> VARS_LIST .)
    var             reduce using rule 15 (VARS_LIST_VAR -> VARS_LIST .)
    if              reduce using rule 15 (VARS_LIST_VAR -> VARS_LIST .)
    while           reduce using rule 15 (VARS_LIST_VAR -> VARS_LIST .)
    cread           reduce using rule 15 (VARS_LIST_VAR -> VARS_LIST .)
    cwrite          reduce using rule 15 (VARS_LIST_VAR -> VARS_LIST .)
    id              reduce using rule 15 (VARS_LIST_VAR -> VARS_LIST .)
    return          reduce using rule 15 (VARS_LIST_VAR -> VARS_LIST .)
    right_cb        reduce using rule 15 (VARS_LIST_VAR -> VARS_LIST .)
    int             reduce using rule 15 (VARS_LIST_VAR -> VARS_LIST .)
    float           reduce using rule 15 (VARS_LIST_VAR -> VARS_LIST .)
    bool            reduce using rule 15 (VARS_LIST_VAR -> VARS_LIST .)
    string          reduce using rule 15 (VARS_LIST_VAR -> VARS_LIST .)
    void            reduce using rule 15 (VARS_LIST_VAR -> VARS_LIST .)
    main            reduce using rule 15 (VARS_LIST_VAR -> VARS_LIST .)


state 10

    (24) VARS_VAR -> var . nt_hacerVar TIPO VARS_VAR_AUX semicolon
    (25) nt_hacerVar -> . empty
    (169) empty -> .

    int             reduce using rule 169 (empty -> .)
    float           reduce using rule 169 (empty -> .)
    bool            reduce using rule 169 (empty -> .)
    string          reduce using rule 169 (empty -> .)

    nt_hacerVar                    shift and go to state 18
    empty                          shift and go to state 19

state 11

    (7) PROGRAMA_VARS -> empty .

    int             reduce using rule 7 (PROGRAMA_VARS -> empty .)
    float           reduce using rule 7 (PROGRAMA_VARS -> empty .)
    bool            reduce using rule 7 (PROGRAMA_VARS -> empty .)
    string          reduce using rule 7 (PROGRAMA_VARS -> empty .)
    void            reduce using rule 7 (PROGRAMA_VARS -> empty .)
    main            reduce using rule 7 (PROGRAMA_VARS -> empty .)


state 12

    (13) VARS_AUX -> VARS_LIST_VAR .

    list            reduce using rule 13 (VARS_AUX -> VARS_LIST_VAR .)
    var             reduce using rule 13 (VARS_AUX -> VARS_LIST_VAR .)
    if              reduce using rule 13 (VARS_AUX -> VARS_LIST_VAR .)
    while           reduce using rule 13 (VARS_AUX -> VARS_LIST_VAR .)
    cread           reduce using rule 13 (VARS_AUX -> VARS_LIST_VAR .)
    cwrite          reduce using rule 13 (VARS_AUX -> VARS_LIST_VAR .)
    id              reduce using rule 13 (VARS_AUX -> VARS_LIST_VAR .)
    return          reduce using rule 13 (VARS_AUX -> VARS_LIST_VAR .)
    right_cb        reduce using rule 13 (VARS_AUX -> VARS_LIST_VAR .)
    int             reduce using rule 13 (VARS_AUX -> VARS_LIST_VAR .)
    float           reduce using rule 13 (VARS_AUX -> VARS_LIST_VAR .)
    bool            reduce using rule 13 (VARS_AUX -> VARS_LIST_VAR .)
    string          reduce using rule 13 (VARS_AUX -> VARS_LIST_VAR .)
    void            reduce using rule 13 (VARS_AUX -> VARS_LIST_VAR .)
    main            reduce using rule 13 (VARS_AUX -> VARS_LIST_VAR .)


state 13

    (16) VARS_LIST_VAR -> VARS_VAR .

    list            reduce using rule 16 (VARS_LIST_VAR -> VARS_VAR .)
    var             reduce using rule 16 (VARS_LIST_VAR -> VARS_VAR .)
    if              reduce using rule 16 (VARS_LIST_VAR -> VARS_VAR .)
    while           reduce using rule 16 (VARS_LIST_VAR -> VARS_VAR .)
    cread           reduce using rule 16 (VARS_LIST_VAR -> VARS_VAR .)
    cwrite          reduce using rule 16 (VARS_LIST_VAR -> VARS_VAR .)
    id              reduce using rule 16 (VARS_LIST_VAR -> VARS_VAR .)
    return          reduce using rule 16 (VARS_LIST_VAR -> VARS_VAR .)
    right_cb        reduce using rule 16 (VARS_LIST_VAR -> VARS_VAR .)
    int             reduce using rule 16 (VARS_LIST_VAR -> VARS_VAR .)
    float           reduce using rule 16 (VARS_LIST_VAR -> VARS_VAR .)
    bool            reduce using rule 16 (VARS_LIST_VAR -> VARS_VAR .)
    string          reduce using rule 16 (VARS_LIST_VAR -> VARS_VAR .)
    void            reduce using rule 16 (VARS_LIST_VAR -> VARS_VAR .)
    main            reduce using rule 16 (VARS_LIST_VAR -> VARS_VAR .)


state 14

    (17) VARS_LIST -> list . nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (18) nt_hacerLista -> . empty
    (169) empty -> .

    int             reduce using rule 169 (empty -> .)
    float           reduce using rule 169 (empty -> .)
    bool            reduce using rule 169 (empty -> .)
    string          reduce using rule 169 (empty -> .)

    empty                          shift and go to state 21
    nt_hacerLista                  shift and go to state 20

state 15

    (12) VARS -> VARS_AUX .
    (14) VARS_AUX -> VARS_AUX . VARS_LIST_VAR
    (15) VARS_LIST_VAR -> . VARS_LIST
    (16) VARS_LIST_VAR -> . VARS_VAR
    (17) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (24) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    int             reduce using rule 12 (VARS -> VARS_AUX .)
    float           reduce using rule 12 (VARS -> VARS_AUX .)
    bool            reduce using rule 12 (VARS -> VARS_AUX .)
    string          reduce using rule 12 (VARS -> VARS_AUX .)
    void            reduce using rule 12 (VARS -> VARS_AUX .)
    main            reduce using rule 12 (VARS -> VARS_AUX .)
    if              reduce using rule 12 (VARS -> VARS_AUX .)
    while           reduce using rule 12 (VARS -> VARS_AUX .)
    cread           reduce using rule 12 (VARS -> VARS_AUX .)
    cwrite          reduce using rule 12 (VARS -> VARS_AUX .)
    id              reduce using rule 12 (VARS -> VARS_AUX .)
    right_cb        reduce using rule 12 (VARS -> VARS_AUX .)
    return          reduce using rule 12 (VARS -> VARS_AUX .)
    list            shift and go to state 14
    var             shift and go to state 10

  ! list            [ reduce using rule 12 (VARS -> VARS_AUX .) ]
  ! var             [ reduce using rule 12 (VARS -> VARS_AUX .) ]

    VARS_LIST                      shift and go to state 9
    VARS_LIST_VAR                  shift and go to state 22
    VARS_VAR                       shift and go to state 13

state 16

    (1) PROGRAMA -> program id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope . PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO nt_endQuad
    (8) PROGRAMA_FUNC -> . PROGRAMA_FUNC_AUX
    (9) PROGRAMA_FUNC -> . PROGRAMA_FUNC PROGRAMA_FUNC_AUX
    (10) PROGRAMA_FUNC_AUX -> . FUNC
    (11) PROGRAMA_FUNC_AUX -> . empty
    (55) FUNC -> . TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub
    (56) FUNC -> . VOIDFUNC nt_pushEndsub
    (169) empty -> .
    (28) TIPO -> . int nt_cambioTipoActual
    (29) TIPO -> . float nt_cambioTipoActual
    (30) TIPO -> . bool nt_cambioTipoActual
    (31) TIPO -> . string nt_cambioTipoActual
    (64) VOIDFUNC -> . void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb

  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for bool resolved as shift
  ! shift/reduce conflict for string resolved as shift
  ! shift/reduce conflict for void resolved as shift
    main            reduce using rule 169 (empty -> .)
    int             shift and go to state 23
    float           shift and go to state 24
    bool            shift and go to state 28
    string          shift and go to state 31
    void            shift and go to state 32

  ! int             [ reduce using rule 169 (empty -> .) ]
  ! float           [ reduce using rule 169 (empty -> .) ]
  ! bool            [ reduce using rule 169 (empty -> .) ]
  ! string          [ reduce using rule 169 (empty -> .) ]
  ! void            [ reduce using rule 169 (empty -> .) ]

    PROGRAMA_FUNC_AUX              shift and go to state 27
    TIPO                           shift and go to state 25
    PROGRAMA_FUNC                  shift and go to state 26
    VOIDFUNC                       shift and go to state 29
    FUNC                           shift and go to state 33
    empty                          shift and go to state 30

state 17

    (2) nt_cambiarScope -> empty .

    left_cb         reduce using rule 2 (nt_cambiarScope -> empty .)
    int             reduce using rule 2 (nt_cambiarScope -> empty .)
    float           reduce using rule 2 (nt_cambiarScope -> empty .)
    bool            reduce using rule 2 (nt_cambiarScope -> empty .)
    string          reduce using rule 2 (nt_cambiarScope -> empty .)
    void            reduce using rule 2 (nt_cambiarScope -> empty .)
    main            reduce using rule 2 (nt_cambiarScope -> empty .)


state 18

    (24) VARS_VAR -> var nt_hacerVar . TIPO VARS_VAR_AUX semicolon
    (28) TIPO -> . int nt_cambioTipoActual
    (29) TIPO -> . float nt_cambioTipoActual
    (30) TIPO -> . bool nt_cambioTipoActual
    (31) TIPO -> . string nt_cambioTipoActual

    int             shift and go to state 23
    float           shift and go to state 24
    bool            shift and go to state 28
    string          shift and go to state 31

    TIPO                           shift and go to state 34

state 19

    (25) nt_hacerVar -> empty .

    int             reduce using rule 25 (nt_hacerVar -> empty .)
    float           reduce using rule 25 (nt_hacerVar -> empty .)
    bool            reduce using rule 25 (nt_hacerVar -> empty .)
    string          reduce using rule 25 (nt_hacerVar -> empty .)


state 20

    (17) VARS_LIST -> list nt_hacerLista . TIPO VARS_LIST_AUX semicolon
    (28) TIPO -> . int nt_cambioTipoActual
    (29) TIPO -> . float nt_cambioTipoActual
    (30) TIPO -> . bool nt_cambioTipoActual
    (31) TIPO -> . string nt_cambioTipoActual

    int             shift and go to state 23
    float           shift and go to state 24
    bool            shift and go to state 28
    string          shift and go to state 31

    TIPO                           shift and go to state 35

state 21

    (18) nt_hacerLista -> empty .

    int             reduce using rule 18 (nt_hacerLista -> empty .)
    float           reduce using rule 18 (nt_hacerLista -> empty .)
    bool            reduce using rule 18 (nt_hacerLista -> empty .)
    string          reduce using rule 18 (nt_hacerLista -> empty .)


state 22

    (14) VARS_AUX -> VARS_AUX VARS_LIST_VAR .

    list            reduce using rule 14 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    var             reduce using rule 14 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    if              reduce using rule 14 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    while           reduce using rule 14 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    cread           reduce using rule 14 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    cwrite          reduce using rule 14 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    id              reduce using rule 14 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    return          reduce using rule 14 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    right_cb        reduce using rule 14 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    int             reduce using rule 14 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    float           reduce using rule 14 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    bool            reduce using rule 14 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    string          reduce using rule 14 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    void            reduce using rule 14 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    main            reduce using rule 14 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)


state 23

    (28) TIPO -> int . nt_cambioTipoActual
    (32) nt_cambioTipoActual -> . empty
    (169) empty -> .

    id              reduce using rule 169 (empty -> .)

    nt_cambioTipoActual            shift and go to state 36
    empty                          shift and go to state 37

state 24

    (29) TIPO -> float . nt_cambioTipoActual
    (32) nt_cambioTipoActual -> . empty
    (169) empty -> .

    id              reduce using rule 169 (empty -> .)

    nt_cambioTipoActual            shift and go to state 38
    empty                          shift and go to state 37

state 25

    (55) FUNC -> TIPO . nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub
    (58) nt_cambioFuncActual -> . empty
    (169) empty -> .

    id              reduce using rule 169 (empty -> .)

    nt_cambioFuncActual            shift and go to state 39
    empty                          shift and go to state 40

state 26

    (1) PROGRAMA -> program id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC . nt_cambiarScope main nt_ambienteMain CUERPO nt_endQuad
    (9) PROGRAMA_FUNC -> PROGRAMA_FUNC . PROGRAMA_FUNC_AUX
    (2) nt_cambiarScope -> . empty
    (10) PROGRAMA_FUNC_AUX -> . FUNC
    (11) PROGRAMA_FUNC_AUX -> . empty
    (169) empty -> .
    (55) FUNC -> . TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub
    (56) FUNC -> . VOIDFUNC nt_pushEndsub
    (28) TIPO -> . int nt_cambioTipoActual
    (29) TIPO -> . float nt_cambioTipoActual
    (30) TIPO -> . bool nt_cambioTipoActual
    (31) TIPO -> . string nt_cambioTipoActual
    (64) VOIDFUNC -> . void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb

  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for bool resolved as shift
  ! shift/reduce conflict for string resolved as shift
  ! shift/reduce conflict for void resolved as shift
    main            reduce using rule 169 (empty -> .)
    int             shift and go to state 23
    float           shift and go to state 24
    bool            shift and go to state 28
    string          shift and go to state 31
    void            shift and go to state 32

  ! int             [ reduce using rule 169 (empty -> .) ]
  ! float           [ reduce using rule 169 (empty -> .) ]
  ! bool            [ reduce using rule 169 (empty -> .) ]
  ! string          [ reduce using rule 169 (empty -> .) ]
  ! void            [ reduce using rule 169 (empty -> .) ]

    PROGRAMA_FUNC_AUX              shift and go to state 41
    TIPO                           shift and go to state 25
    VOIDFUNC                       shift and go to state 29
    FUNC                           shift and go to state 33
    nt_cambiarScope                shift and go to state 43
    empty                          shift and go to state 42

state 27

    (8) PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .

    int             reduce using rule 8 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)
    float           reduce using rule 8 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)
    bool            reduce using rule 8 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)
    string          reduce using rule 8 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)
    void            reduce using rule 8 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)
    main            reduce using rule 8 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)


state 28

    (30) TIPO -> bool . nt_cambioTipoActual
    (32) nt_cambioTipoActual -> . empty
    (169) empty -> .

    id              reduce using rule 169 (empty -> .)

    nt_cambioTipoActual            shift and go to state 44
    empty                          shift and go to state 37

state 29

    (56) FUNC -> VOIDFUNC . nt_pushEndsub
    (57) nt_pushEndsub -> . empty
    (169) empty -> .

    int             reduce using rule 169 (empty -> .)
    float           reduce using rule 169 (empty -> .)
    bool            reduce using rule 169 (empty -> .)
    string          reduce using rule 169 (empty -> .)
    void            reduce using rule 169 (empty -> .)
    main            reduce using rule 169 (empty -> .)

    nt_pushEndsub                  shift and go to state 45
    empty                          shift and go to state 46

state 30

    (11) PROGRAMA_FUNC_AUX -> empty .

    int             reduce using rule 11 (PROGRAMA_FUNC_AUX -> empty .)
    float           reduce using rule 11 (PROGRAMA_FUNC_AUX -> empty .)
    bool            reduce using rule 11 (PROGRAMA_FUNC_AUX -> empty .)
    string          reduce using rule 11 (PROGRAMA_FUNC_AUX -> empty .)
    void            reduce using rule 11 (PROGRAMA_FUNC_AUX -> empty .)
    main            reduce using rule 11 (PROGRAMA_FUNC_AUX -> empty .)


state 31

    (31) TIPO -> string . nt_cambioTipoActual
    (32) nt_cambioTipoActual -> . empty
    (169) empty -> .

    id              reduce using rule 169 (empty -> .)

    nt_cambioTipoActual            shift and go to state 47
    empty                          shift and go to state 37

state 32

    (64) VOIDFUNC -> void . nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb
    (65) nt_hacerVoid -> . empty
    (169) empty -> .

    id              reduce using rule 169 (empty -> .)

    nt_hacerVoid                   shift and go to state 49
    empty                          shift and go to state 48

state 33

    (10) PROGRAMA_FUNC_AUX -> FUNC .

    int             reduce using rule 10 (PROGRAMA_FUNC_AUX -> FUNC .)
    float           reduce using rule 10 (PROGRAMA_FUNC_AUX -> FUNC .)
    bool            reduce using rule 10 (PROGRAMA_FUNC_AUX -> FUNC .)
    string          reduce using rule 10 (PROGRAMA_FUNC_AUX -> FUNC .)
    void            reduce using rule 10 (PROGRAMA_FUNC_AUX -> FUNC .)
    main            reduce using rule 10 (PROGRAMA_FUNC_AUX -> FUNC .)


state 34

    (24) VARS_VAR -> var nt_hacerVar TIPO . VARS_VAR_AUX semicolon
    (26) VARS_VAR_AUX -> . id nt_agregarId nt_agregarDicVar
    (27) VARS_VAR_AUX -> . VARS_VAR_AUX comma id nt_agregarId nt_agregarDicVar

    id              shift and go to state 51

    VARS_VAR_AUX                   shift and go to state 50

state 35

    (17) VARS_LIST -> list nt_hacerLista TIPO . VARS_LIST_AUX semicolon
    (19) VARS_LIST_AUX -> . id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar
    (20) VARS_LIST_AUX -> . VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    id              shift and go to state 53

    VARS_LIST_AUX                  shift and go to state 52

state 36

    (28) TIPO -> int nt_cambioTipoActual .

    id              reduce using rule 28 (TIPO -> int nt_cambioTipoActual .)


state 37

    (32) nt_cambioTipoActual -> empty .

    id              reduce using rule 32 (nt_cambioTipoActual -> empty .)


state 38

    (29) TIPO -> float nt_cambioTipoActual .

    id              reduce using rule 29 (TIPO -> float nt_cambioTipoActual .)


state 39

    (55) FUNC -> TIPO nt_cambioFuncActual . id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub

    id              shift and go to state 54


state 40

    (58) nt_cambioFuncActual -> empty .

    id              reduce using rule 58 (nt_cambioFuncActual -> empty .)


state 41

    (9) PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .

    int             reduce using rule 9 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)
    float           reduce using rule 9 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)
    bool            reduce using rule 9 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)
    string          reduce using rule 9 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)
    void            reduce using rule 9 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)
    main            reduce using rule 9 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)


state 42

    (2) nt_cambiarScope -> empty .
    (11) PROGRAMA_FUNC_AUX -> empty .

  ! reduce/reduce conflict for main resolved using rule 2 (nt_cambiarScope -> empty .)
    main            reduce using rule 2 (nt_cambiarScope -> empty .)
    int             reduce using rule 11 (PROGRAMA_FUNC_AUX -> empty .)
    float           reduce using rule 11 (PROGRAMA_FUNC_AUX -> empty .)
    bool            reduce using rule 11 (PROGRAMA_FUNC_AUX -> empty .)
    string          reduce using rule 11 (PROGRAMA_FUNC_AUX -> empty .)
    void            reduce using rule 11 (PROGRAMA_FUNC_AUX -> empty .)

  ! main            [ reduce using rule 11 (PROGRAMA_FUNC_AUX -> empty .) ]


state 43

    (1) PROGRAMA -> program id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope . main nt_ambienteMain CUERPO nt_endQuad

    main            shift and go to state 55


state 44

    (30) TIPO -> bool nt_cambioTipoActual .

    id              reduce using rule 30 (TIPO -> bool nt_cambioTipoActual .)


state 45

    (56) FUNC -> VOIDFUNC nt_pushEndsub .

    int             reduce using rule 56 (FUNC -> VOIDFUNC nt_pushEndsub .)
    float           reduce using rule 56 (FUNC -> VOIDFUNC nt_pushEndsub .)
    bool            reduce using rule 56 (FUNC -> VOIDFUNC nt_pushEndsub .)
    string          reduce using rule 56 (FUNC -> VOIDFUNC nt_pushEndsub .)
    void            reduce using rule 56 (FUNC -> VOIDFUNC nt_pushEndsub .)
    main            reduce using rule 56 (FUNC -> VOIDFUNC nt_pushEndsub .)


state 46

    (57) nt_pushEndsub -> empty .

    int             reduce using rule 57 (nt_pushEndsub -> empty .)
    float           reduce using rule 57 (nt_pushEndsub -> empty .)
    bool            reduce using rule 57 (nt_pushEndsub -> empty .)
    string          reduce using rule 57 (nt_pushEndsub -> empty .)
    void            reduce using rule 57 (nt_pushEndsub -> empty .)
    main            reduce using rule 57 (nt_pushEndsub -> empty .)


state 47

    (31) TIPO -> string nt_cambioTipoActual .

    id              reduce using rule 31 (TIPO -> string nt_cambioTipoActual .)


state 48

    (65) nt_hacerVoid -> empty .

    id              reduce using rule 65 (nt_hacerVoid -> empty .)


state 49

    (64) VOIDFUNC -> void nt_hacerVoid . id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb

    id              shift and go to state 56


state 50

    (24) VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX . semicolon
    (27) VARS_VAR_AUX -> VARS_VAR_AUX . comma id nt_agregarId nt_agregarDicVar

    semicolon       shift and go to state 57
    comma           shift and go to state 58


state 51

    (26) VARS_VAR_AUX -> id . nt_agregarId nt_agregarDicVar
    (21) nt_agregarId -> . empty
    (169) empty -> .

    semicolon       reduce using rule 169 (empty -> .)
    comma           reduce using rule 169 (empty -> .)

    empty                          shift and go to state 59
    nt_agregarId                   shift and go to state 60

state 52

    (17) VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX . semicolon
    (20) VARS_LIST_AUX -> VARS_LIST_AUX . comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    semicolon       shift and go to state 61
    comma           shift and go to state 62


state 53

    (19) VARS_LIST_AUX -> id . nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar
    (21) nt_agregarId -> . empty
    (169) empty -> .

    left_sb         reduce using rule 169 (empty -> .)

    empty                          shift and go to state 59
    nt_agregarId                   shift and go to state 63

state 54

    (55) FUNC -> TIPO nt_cambioFuncActual id . nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub
    (59) nt_agregarIdFunc -> . empty
    (169) empty -> .

    left_par        reduce using rule 169 (empty -> .)

    nt_agregarIdFunc               shift and go to state 64
    empty                          shift and go to state 65

state 55

    (1) PROGRAMA -> program id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main . nt_ambienteMain CUERPO nt_endQuad
    (3) nt_ambienteMain -> . nt_cambiarScope
    (2) nt_cambiarScope -> . empty
    (169) empty -> .

    left_cb         reduce using rule 169 (empty -> .)

    nt_ambienteMain                shift and go to state 66
    nt_cambiarScope                shift and go to state 67
    empty                          shift and go to state 17

state 56

    (64) VOIDFUNC -> void nt_hacerVoid id . nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb
    (59) nt_agregarIdFunc -> . empty
    (169) empty -> .

    left_par        reduce using rule 169 (empty -> .)

    nt_agregarIdFunc               shift and go to state 68
    empty                          shift and go to state 65

state 57

    (24) VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .

    list            reduce using rule 24 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    var             reduce using rule 24 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    if              reduce using rule 24 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    while           reduce using rule 24 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    cread           reduce using rule 24 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    cwrite          reduce using rule 24 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    id              reduce using rule 24 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    return          reduce using rule 24 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    right_cb        reduce using rule 24 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    int             reduce using rule 24 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    float           reduce using rule 24 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    bool            reduce using rule 24 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    string          reduce using rule 24 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    void            reduce using rule 24 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    main            reduce using rule 24 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)


state 58

    (27) VARS_VAR_AUX -> VARS_VAR_AUX comma . id nt_agregarId nt_agregarDicVar

    id              shift and go to state 69


state 59

    (21) nt_agregarId -> empty .

    semicolon       reduce using rule 21 (nt_agregarId -> empty .)
    comma           reduce using rule 21 (nt_agregarId -> empty .)
    left_sb         reduce using rule 21 (nt_agregarId -> empty .)


state 60

    (26) VARS_VAR_AUX -> id nt_agregarId . nt_agregarDicVar
    (23) nt_agregarDicVar -> . empty
    (169) empty -> .

    semicolon       reduce using rule 169 (empty -> .)
    comma           reduce using rule 169 (empty -> .)

    nt_agregarDicVar               shift and go to state 70
    empty                          shift and go to state 71

state 61

    (17) VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .

    list            reduce using rule 17 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    var             reduce using rule 17 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    if              reduce using rule 17 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    while           reduce using rule 17 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    cread           reduce using rule 17 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    cwrite          reduce using rule 17 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    id              reduce using rule 17 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    right_cb        reduce using rule 17 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    return          reduce using rule 17 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    int             reduce using rule 17 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    float           reduce using rule 17 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    bool            reduce using rule 17 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    string          reduce using rule 17 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    void            reduce using rule 17 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    main            reduce using rule 17 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)


state 62

    (20) VARS_LIST_AUX -> VARS_LIST_AUX comma . id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    id              shift and go to state 72


state 63

    (19) VARS_LIST_AUX -> id nt_agregarId . left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    left_sb         shift and go to state 73


state 64

    (55) FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc . left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub

    left_par        shift and go to state 74


state 65

    (59) nt_agregarIdFunc -> empty .

    left_par        reduce using rule 59 (nt_agregarIdFunc -> empty .)


state 66

    (1) PROGRAMA -> program id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain . CUERPO nt_endQuad
    (33) CUERPO -> . left_cb CUERPO_AUX right_cb

    left_cb         shift and go to state 76

    CUERPO                         shift and go to state 75

state 67

    (3) nt_ambienteMain -> nt_cambiarScope .

    left_cb         reduce using rule 3 (nt_ambienteMain -> nt_cambiarScope .)


state 68

    (64) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc . left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb

    left_par        shift and go to state 77


state 69

    (27) VARS_VAR_AUX -> VARS_VAR_AUX comma id . nt_agregarId nt_agregarDicVar
    (21) nt_agregarId -> . empty
    (169) empty -> .

    semicolon       reduce using rule 169 (empty -> .)
    comma           reduce using rule 169 (empty -> .)

    nt_agregarId                   shift and go to state 78
    empty                          shift and go to state 59

state 70

    (26) VARS_VAR_AUX -> id nt_agregarId nt_agregarDicVar .

    semicolon       reduce using rule 26 (VARS_VAR_AUX -> id nt_agregarId nt_agregarDicVar .)
    comma           reduce using rule 26 (VARS_VAR_AUX -> id nt_agregarId nt_agregarDicVar .)


state 71

    (23) nt_agregarDicVar -> empty .

    semicolon       reduce using rule 23 (nt_agregarDicVar -> empty .)
    comma           reduce using rule 23 (nt_agregarDicVar -> empty .)


state 72

    (20) VARS_LIST_AUX -> VARS_LIST_AUX comma id . nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar
    (21) nt_agregarId -> . empty
    (169) empty -> .

    left_sb         reduce using rule 169 (empty -> .)

    empty                          shift and go to state 59
    nt_agregarId                   shift and go to state 79

state 73

    (19) VARS_LIST_AUX -> id nt_agregarId left_sb . cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    cteInt          shift and go to state 80


state 74

    (55) FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par . FUNC_PARA right_par CUERPORETORNO nt_pushEndsub
    (60) FUNC_PARA -> . TIPO id nt_agregarParametro
    (61) FUNC_PARA -> . FUNC_PARA comma TIPO id nt_agregarParametro
    (62) FUNC_PARA -> . empty
    (28) TIPO -> . int nt_cambioTipoActual
    (29) TIPO -> . float nt_cambioTipoActual
    (30) TIPO -> . bool nt_cambioTipoActual
    (31) TIPO -> . string nt_cambioTipoActual
    (169) empty -> .

    int             shift and go to state 23
    float           shift and go to state 24
    bool            shift and go to state 28
    string          shift and go to state 31
    right_par       reduce using rule 169 (empty -> .)
    comma           reduce using rule 169 (empty -> .)

    TIPO                           shift and go to state 81
    empty                          shift and go to state 82
    FUNC_PARA                      shift and go to state 83

state 75

    (1) PROGRAMA -> program id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO . nt_endQuad
    (4) nt_endQuad -> . empty
    (169) empty -> .

    $end            reduce using rule 169 (empty -> .)

    empty                          shift and go to state 84
    nt_endQuad                     shift and go to state 85

state 76

    (33) CUERPO -> left_cb . CUERPO_AUX right_cb
    (34) CUERPO_AUX -> . CUERPO_VARS CUERPO_ESTATUTO
    (35) CUERPO_AUX -> . CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO
    (36) CUERPO_VARS -> . VARS
    (37) CUERPO_VARS -> . empty
    (12) VARS -> . VARS_AUX
    (169) empty -> .
    (13) VARS_AUX -> . VARS_LIST_VAR
    (14) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (15) VARS_LIST_VAR -> . VARS_LIST
    (16) VARS_LIST_VAR -> . VARS_VAR
    (17) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (24) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    if              reduce using rule 169 (empty -> .)
    while           reduce using rule 169 (empty -> .)
    cread           reduce using rule 169 (empty -> .)
    cwrite          reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    right_cb        reduce using rule 169 (empty -> .)
    list            shift and go to state 14
    var             shift and go to state 10

  ! list            [ reduce using rule 169 (empty -> .) ]
  ! var             [ reduce using rule 169 (empty -> .) ]

    CUERPO_VARS                    shift and go to state 86
    VARS                           shift and go to state 87
    VARS_LIST                      shift and go to state 9
    VARS_LIST_VAR                  shift and go to state 12
    VARS_AUX                       shift and go to state 15
    CUERPO_AUX                     shift and go to state 89
    VARS_VAR                       shift and go to state 13
    empty                          shift and go to state 88

state 77

    (64) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par . VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb
    (66) VOIDFUNC_PARA -> . TIPO id nt_agregarParametro
    (67) VOIDFUNC_PARA -> . VOIDFUNC_PARA comma TIPO id nt_agregarParametro
    (68) VOIDFUNC_PARA -> . empty
    (28) TIPO -> . int nt_cambioTipoActual
    (29) TIPO -> . float nt_cambioTipoActual
    (30) TIPO -> . bool nt_cambioTipoActual
    (31) TIPO -> . string nt_cambioTipoActual
    (169) empty -> .

    int             shift and go to state 23
    float           shift and go to state 24
    bool            shift and go to state 28
    string          shift and go to state 31
    right_par       reduce using rule 169 (empty -> .)
    comma           reduce using rule 169 (empty -> .)

    TIPO                           shift and go to state 92
    VOIDFUNC_PARA                  shift and go to state 90
    empty                          shift and go to state 91

state 78

    (27) VARS_VAR_AUX -> VARS_VAR_AUX comma id nt_agregarId . nt_agregarDicVar
    (23) nt_agregarDicVar -> . empty
    (169) empty -> .

    semicolon       reduce using rule 169 (empty -> .)
    comma           reduce using rule 169 (empty -> .)

    nt_agregarDicVar               shift and go to state 93
    empty                          shift and go to state 71

state 79

    (20) VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId . left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    left_sb         shift and go to state 94


state 80

    (19) VARS_LIST_AUX -> id nt_agregarId left_sb cteInt . nt_agregarCteLista right_sb nt_agregarDicVar
    (22) nt_agregarCteLista -> . empty
    (169) empty -> .

    right_sb        reduce using rule 169 (empty -> .)

    nt_agregarCteLista             shift and go to state 95
    empty                          shift and go to state 96

state 81

    (60) FUNC_PARA -> TIPO . id nt_agregarParametro

    id              shift and go to state 97


state 82

    (62) FUNC_PARA -> empty .

    right_par       reduce using rule 62 (FUNC_PARA -> empty .)
    comma           reduce using rule 62 (FUNC_PARA -> empty .)


state 83

    (55) FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA . right_par CUERPORETORNO nt_pushEndsub
    (61) FUNC_PARA -> FUNC_PARA . comma TIPO id nt_agregarParametro

    right_par       shift and go to state 98
    comma           shift and go to state 99


state 84

    (4) nt_endQuad -> empty .

    $end            reduce using rule 4 (nt_endQuad -> empty .)


state 85

    (1) PROGRAMA -> program id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO nt_endQuad .

    $end            reduce using rule 1 (PROGRAMA -> program id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO nt_endQuad .)


state 86

    (34) CUERPO_AUX -> CUERPO_VARS . CUERPO_ESTATUTO
    (38) CUERPO_ESTATUTO -> . ESTATUTO
    (39) CUERPO_ESTATUTO -> . empty
    (69) ESTATUTO -> . ASIGNACION
    (70) ESTATUTO -> . CONDICION
    (71) ESTATUTO -> . CICLO
    (72) ESTATUTO -> . LECTURA
    (73) ESTATUTO -> . ESCRITURA
    (74) ESTATUTO -> . LLAMADA
    (169) empty -> .
    (161) ASIGNACION -> . ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon
    (75) CONDICION -> . if CONDICION_AUX
    (85) CICLO -> . while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop
    (88) LECTURA -> . cread left_par id nt_leer right_par semicolon
    (90) ESCRITURA -> . cwrite left_par EXPRESION nt_escribir right_par semicolon
    (92) LLAMADA -> . id nt_verificaFuncIdLlamada left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub
    (163) ASIGNACION_AUX -> . id nt_pushPilaO nt_checaStruct
    (164) ASIGNACION_AUX -> . LISTA
    (143) LISTA -> . id nt_verificarVarDim left_sb EXP nt_pushVer right_sb

  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for cread resolved as shift
  ! shift/reduce conflict for cwrite resolved as shift
  ! shift/reduce conflict for id resolved as shift
    right_cb        reduce using rule 169 (empty -> .)
    list            reduce using rule 169 (empty -> .)
    var             reduce using rule 169 (empty -> .)
    if              shift and go to state 103
    while           shift and go to state 114
    cread           shift and go to state 101
    cwrite          shift and go to state 107
    id              shift and go to state 106

  ! if              [ reduce using rule 169 (empty -> .) ]
  ! while           [ reduce using rule 169 (empty -> .) ]
  ! cread           [ reduce using rule 169 (empty -> .) ]
  ! cwrite          [ reduce using rule 169 (empty -> .) ]
  ! id              [ reduce using rule 169 (empty -> .) ]

    CICLO                          shift and go to state 100
    LECTURA                        shift and go to state 102
    ESCRITURA                      shift and go to state 109
    ASIGNACION                     shift and go to state 104
    ESTATUTO                       shift and go to state 105
    ASIGNACION_AUX                 shift and go to state 108
    empty                          shift and go to state 110
    LLAMADA                        shift and go to state 111
    CONDICION                      shift and go to state 112
    CUERPO_ESTATUTO                shift and go to state 113
    LISTA                          shift and go to state 115

state 87

    (36) CUERPO_VARS -> VARS .

    if              reduce using rule 36 (CUERPO_VARS -> VARS .)
    while           reduce using rule 36 (CUERPO_VARS -> VARS .)
    cread           reduce using rule 36 (CUERPO_VARS -> VARS .)
    cwrite          reduce using rule 36 (CUERPO_VARS -> VARS .)
    id              reduce using rule 36 (CUERPO_VARS -> VARS .)
    right_cb        reduce using rule 36 (CUERPO_VARS -> VARS .)
    list            reduce using rule 36 (CUERPO_VARS -> VARS .)
    var             reduce using rule 36 (CUERPO_VARS -> VARS .)


state 88

    (37) CUERPO_VARS -> empty .

    if              reduce using rule 37 (CUERPO_VARS -> empty .)
    while           reduce using rule 37 (CUERPO_VARS -> empty .)
    cread           reduce using rule 37 (CUERPO_VARS -> empty .)
    cwrite          reduce using rule 37 (CUERPO_VARS -> empty .)
    id              reduce using rule 37 (CUERPO_VARS -> empty .)
    right_cb        reduce using rule 37 (CUERPO_VARS -> empty .)
    list            reduce using rule 37 (CUERPO_VARS -> empty .)
    var             reduce using rule 37 (CUERPO_VARS -> empty .)


state 89

    (33) CUERPO -> left_cb CUERPO_AUX . right_cb
    (35) CUERPO_AUX -> CUERPO_AUX . CUERPO_VARS CUERPO_ESTATUTO
    (36) CUERPO_VARS -> . VARS
    (37) CUERPO_VARS -> . empty
    (12) VARS -> . VARS_AUX
    (169) empty -> .
    (13) VARS_AUX -> . VARS_LIST_VAR
    (14) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (15) VARS_LIST_VAR -> . VARS_LIST
    (16) VARS_LIST_VAR -> . VARS_VAR
    (17) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (24) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for right_cb resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    right_cb        shift and go to state 117
    if              reduce using rule 169 (empty -> .)
    while           reduce using rule 169 (empty -> .)
    cread           reduce using rule 169 (empty -> .)
    cwrite          reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    list            shift and go to state 14
    var             shift and go to state 10

  ! right_cb        [ reduce using rule 169 (empty -> .) ]
  ! list            [ reduce using rule 169 (empty -> .) ]
  ! var             [ reduce using rule 169 (empty -> .) ]

    CUERPO_VARS                    shift and go to state 116
    VARS                           shift and go to state 87
    VARS_LIST                      shift and go to state 9
    VARS_LIST_VAR                  shift and go to state 12
    VARS_AUX                       shift and go to state 15
    VARS_VAR                       shift and go to state 13
    empty                          shift and go to state 88

state 90

    (64) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA . right_par left_cb CUERPOFUNC right_cb
    (67) VOIDFUNC_PARA -> VOIDFUNC_PARA . comma TIPO id nt_agregarParametro

    right_par       shift and go to state 118
    comma           shift and go to state 119


state 91

    (68) VOIDFUNC_PARA -> empty .

    right_par       reduce using rule 68 (VOIDFUNC_PARA -> empty .)
    comma           reduce using rule 68 (VOIDFUNC_PARA -> empty .)


state 92

    (66) VOIDFUNC_PARA -> TIPO . id nt_agregarParametro

    id              shift and go to state 120


state 93

    (27) VARS_VAR_AUX -> VARS_VAR_AUX comma id nt_agregarId nt_agregarDicVar .

    semicolon       reduce using rule 27 (VARS_VAR_AUX -> VARS_VAR_AUX comma id nt_agregarId nt_agregarDicVar .)
    comma           reduce using rule 27 (VARS_VAR_AUX -> VARS_VAR_AUX comma id nt_agregarId nt_agregarDicVar .)


state 94

    (20) VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb . cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    cteInt          shift and go to state 121


state 95

    (19) VARS_LIST_AUX -> id nt_agregarId left_sb cteInt nt_agregarCteLista . right_sb nt_agregarDicVar

    right_sb        shift and go to state 122


state 96

    (22) nt_agregarCteLista -> empty .

    right_sb        reduce using rule 22 (nt_agregarCteLista -> empty .)


state 97

    (60) FUNC_PARA -> TIPO id . nt_agregarParametro
    (63) nt_agregarParametro -> . empty
    (169) empty -> .

    right_par       reduce using rule 169 (empty -> .)
    comma           reduce using rule 169 (empty -> .)

    empty                          shift and go to state 123
    nt_agregarParametro            shift and go to state 124

state 98

    (55) FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par . CUERPORETORNO nt_pushEndsub
    (48) CUERPORETORNO -> . left_cb CUERPORETORNO_AUX right_cb

    left_cb         shift and go to state 126

    CUERPORETORNO                  shift and go to state 125

state 99

    (61) FUNC_PARA -> FUNC_PARA comma . TIPO id nt_agregarParametro
    (28) TIPO -> . int nt_cambioTipoActual
    (29) TIPO -> . float nt_cambioTipoActual
    (30) TIPO -> . bool nt_cambioTipoActual
    (31) TIPO -> . string nt_cambioTipoActual

    int             shift and go to state 23
    float           shift and go to state 24
    bool            shift and go to state 28
    string          shift and go to state 31

    TIPO                           shift and go to state 127

state 100

    (71) ESTATUTO -> CICLO .

    list            reduce using rule 71 (ESTATUTO -> CICLO .)
    var             reduce using rule 71 (ESTATUTO -> CICLO .)
    if              reduce using rule 71 (ESTATUTO -> CICLO .)
    while           reduce using rule 71 (ESTATUTO -> CICLO .)
    cread           reduce using rule 71 (ESTATUTO -> CICLO .)
    cwrite          reduce using rule 71 (ESTATUTO -> CICLO .)
    id              reduce using rule 71 (ESTATUTO -> CICLO .)
    return          reduce using rule 71 (ESTATUTO -> CICLO .)
    right_cb        reduce using rule 71 (ESTATUTO -> CICLO .)


state 101

    (88) LECTURA -> cread . left_par id nt_leer right_par semicolon

    left_par        shift and go to state 128


state 102

    (72) ESTATUTO -> LECTURA .

    list            reduce using rule 72 (ESTATUTO -> LECTURA .)
    var             reduce using rule 72 (ESTATUTO -> LECTURA .)
    if              reduce using rule 72 (ESTATUTO -> LECTURA .)
    while           reduce using rule 72 (ESTATUTO -> LECTURA .)
    cread           reduce using rule 72 (ESTATUTO -> LECTURA .)
    cwrite          reduce using rule 72 (ESTATUTO -> LECTURA .)
    id              reduce using rule 72 (ESTATUTO -> LECTURA .)
    return          reduce using rule 72 (ESTATUTO -> LECTURA .)
    right_cb        reduce using rule 72 (ESTATUTO -> LECTURA .)


state 103

    (75) CONDICION -> if . CONDICION_AUX
    (76) CONDICION_AUX -> . left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto

    left_par        shift and go to state 129

    CONDICION_AUX                  shift and go to state 130

state 104

    (69) ESTATUTO -> ASIGNACION .

    list            reduce using rule 69 (ESTATUTO -> ASIGNACION .)
    var             reduce using rule 69 (ESTATUTO -> ASIGNACION .)
    if              reduce using rule 69 (ESTATUTO -> ASIGNACION .)
    while           reduce using rule 69 (ESTATUTO -> ASIGNACION .)
    cread           reduce using rule 69 (ESTATUTO -> ASIGNACION .)
    cwrite          reduce using rule 69 (ESTATUTO -> ASIGNACION .)
    id              reduce using rule 69 (ESTATUTO -> ASIGNACION .)
    return          reduce using rule 69 (ESTATUTO -> ASIGNACION .)
    right_cb        reduce using rule 69 (ESTATUTO -> ASIGNACION .)


state 105

    (38) CUERPO_ESTATUTO -> ESTATUTO .

    right_cb        reduce using rule 38 (CUERPO_ESTATUTO -> ESTATUTO .)
    list            reduce using rule 38 (CUERPO_ESTATUTO -> ESTATUTO .)
    var             reduce using rule 38 (CUERPO_ESTATUTO -> ESTATUTO .)
    if              reduce using rule 38 (CUERPO_ESTATUTO -> ESTATUTO .)
    while           reduce using rule 38 (CUERPO_ESTATUTO -> ESTATUTO .)
    cread           reduce using rule 38 (CUERPO_ESTATUTO -> ESTATUTO .)
    cwrite          reduce using rule 38 (CUERPO_ESTATUTO -> ESTATUTO .)
    id              reduce using rule 38 (CUERPO_ESTATUTO -> ESTATUTO .)


state 106

    (92) LLAMADA -> id . nt_verificaFuncIdLlamada left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub
    (163) ASIGNACION_AUX -> id . nt_pushPilaO nt_checaStruct
    (143) LISTA -> id . nt_verificarVarDim left_sb EXP nt_pushVer right_sb
    (93) nt_verificaFuncIdLlamada -> . empty
    (166) nt_pushPilaO -> . empty
    (144) nt_verificarVarDim -> . empty
    (169) empty -> .

    left_par        reduce using rule 169 (empty -> .)
    equals          reduce using rule 169 (empty -> .)
    left_sb         reduce using rule 169 (empty -> .)

    empty                          shift and go to state 133
    nt_pushPilaO                   shift and go to state 134
    nt_verificaFuncIdLlamada       shift and go to state 132
    nt_verificarVarDim             shift and go to state 131

state 107

    (90) ESCRITURA -> cwrite . left_par EXPRESION nt_escribir right_par semicolon

    left_par        shift and go to state 135


state 108

    (161) ASIGNACION -> ASIGNACION_AUX . equals nt_pushPOper EXPRESION nt_checaEquals semicolon

    equals          shift and go to state 136


state 109

    (73) ESTATUTO -> ESCRITURA .

    list            reduce using rule 73 (ESTATUTO -> ESCRITURA .)
    var             reduce using rule 73 (ESTATUTO -> ESCRITURA .)
    if              reduce using rule 73 (ESTATUTO -> ESCRITURA .)
    while           reduce using rule 73 (ESTATUTO -> ESCRITURA .)
    cread           reduce using rule 73 (ESTATUTO -> ESCRITURA .)
    cwrite          reduce using rule 73 (ESTATUTO -> ESCRITURA .)
    id              reduce using rule 73 (ESTATUTO -> ESCRITURA .)
    return          reduce using rule 73 (ESTATUTO -> ESCRITURA .)
    right_cb        reduce using rule 73 (ESTATUTO -> ESCRITURA .)


state 110

    (39) CUERPO_ESTATUTO -> empty .

    right_cb        reduce using rule 39 (CUERPO_ESTATUTO -> empty .)
    list            reduce using rule 39 (CUERPO_ESTATUTO -> empty .)
    var             reduce using rule 39 (CUERPO_ESTATUTO -> empty .)
    if              reduce using rule 39 (CUERPO_ESTATUTO -> empty .)
    while           reduce using rule 39 (CUERPO_ESTATUTO -> empty .)
    cread           reduce using rule 39 (CUERPO_ESTATUTO -> empty .)
    cwrite          reduce using rule 39 (CUERPO_ESTATUTO -> empty .)
    id              reduce using rule 39 (CUERPO_ESTATUTO -> empty .)


state 111

    (74) ESTATUTO -> LLAMADA .

    list            reduce using rule 74 (ESTATUTO -> LLAMADA .)
    var             reduce using rule 74 (ESTATUTO -> LLAMADA .)
    if              reduce using rule 74 (ESTATUTO -> LLAMADA .)
    while           reduce using rule 74 (ESTATUTO -> LLAMADA .)
    cread           reduce using rule 74 (ESTATUTO -> LLAMADA .)
    cwrite          reduce using rule 74 (ESTATUTO -> LLAMADA .)
    id              reduce using rule 74 (ESTATUTO -> LLAMADA .)
    return          reduce using rule 74 (ESTATUTO -> LLAMADA .)
    right_cb        reduce using rule 74 (ESTATUTO -> LLAMADA .)


state 112

    (70) ESTATUTO -> CONDICION .

    list            reduce using rule 70 (ESTATUTO -> CONDICION .)
    var             reduce using rule 70 (ESTATUTO -> CONDICION .)
    if              reduce using rule 70 (ESTATUTO -> CONDICION .)
    while           reduce using rule 70 (ESTATUTO -> CONDICION .)
    cread           reduce using rule 70 (ESTATUTO -> CONDICION .)
    cwrite          reduce using rule 70 (ESTATUTO -> CONDICION .)
    id              reduce using rule 70 (ESTATUTO -> CONDICION .)
    return          reduce using rule 70 (ESTATUTO -> CONDICION .)
    right_cb        reduce using rule 70 (ESTATUTO -> CONDICION .)


state 113

    (34) CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .

    right_cb        reduce using rule 34 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    list            reduce using rule 34 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    var             reduce using rule 34 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    if              reduce using rule 34 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    while           reduce using rule 34 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    cread           reduce using rule 34 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    cwrite          reduce using rule 34 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    id              reduce using rule 34 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)


state 114

    (85) CICLO -> while . nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop
    (86) nt_saltoLoop -> . empty
    (169) empty -> .

    left_par        reduce using rule 169 (empty -> .)

    nt_saltoLoop                   shift and go to state 138
    empty                          shift and go to state 137

state 115

    (164) ASIGNACION_AUX -> LISTA .

    equals          reduce using rule 164 (ASIGNACION_AUX -> LISTA .)


state 116

    (35) CUERPO_AUX -> CUERPO_AUX CUERPO_VARS . CUERPO_ESTATUTO
    (38) CUERPO_ESTATUTO -> . ESTATUTO
    (39) CUERPO_ESTATUTO -> . empty
    (69) ESTATUTO -> . ASIGNACION
    (70) ESTATUTO -> . CONDICION
    (71) ESTATUTO -> . CICLO
    (72) ESTATUTO -> . LECTURA
    (73) ESTATUTO -> . ESCRITURA
    (74) ESTATUTO -> . LLAMADA
    (169) empty -> .
    (161) ASIGNACION -> . ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon
    (75) CONDICION -> . if CONDICION_AUX
    (85) CICLO -> . while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop
    (88) LECTURA -> . cread left_par id nt_leer right_par semicolon
    (90) ESCRITURA -> . cwrite left_par EXPRESION nt_escribir right_par semicolon
    (92) LLAMADA -> . id nt_verificaFuncIdLlamada left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub
    (163) ASIGNACION_AUX -> . id nt_pushPilaO nt_checaStruct
    (164) ASIGNACION_AUX -> . LISTA
    (143) LISTA -> . id nt_verificarVarDim left_sb EXP nt_pushVer right_sb

  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for cread resolved as shift
  ! shift/reduce conflict for cwrite resolved as shift
  ! shift/reduce conflict for id resolved as shift
    right_cb        reduce using rule 169 (empty -> .)
    list            reduce using rule 169 (empty -> .)
    var             reduce using rule 169 (empty -> .)
    if              shift and go to state 103
    while           shift and go to state 114
    cread           shift and go to state 101
    cwrite          shift and go to state 107
    id              shift and go to state 106

  ! if              [ reduce using rule 169 (empty -> .) ]
  ! while           [ reduce using rule 169 (empty -> .) ]
  ! cread           [ reduce using rule 169 (empty -> .) ]
  ! cwrite          [ reduce using rule 169 (empty -> .) ]
  ! id              [ reduce using rule 169 (empty -> .) ]

    CICLO                          shift and go to state 100
    LECTURA                        shift and go to state 102
    ESCRITURA                      shift and go to state 109
    ASIGNACION                     shift and go to state 104
    ESTATUTO                       shift and go to state 105
    ASIGNACION_AUX                 shift and go to state 108
    empty                          shift and go to state 110
    LLAMADA                        shift and go to state 111
    CONDICION                      shift and go to state 112
    CUERPO_ESTATUTO                shift and go to state 139
    LISTA                          shift and go to state 115

state 117

    (33) CUERPO -> left_cb CUERPO_AUX right_cb .

    right_cb        reduce using rule 33 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    list            reduce using rule 33 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    var             reduce using rule 33 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    if              reduce using rule 33 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    while           reduce using rule 33 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    cread           reduce using rule 33 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    cwrite          reduce using rule 33 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    id              reduce using rule 33 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    return          reduce using rule 33 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    else            reduce using rule 33 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    elseif          reduce using rule 33 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    $end            reduce using rule 33 (CUERPO -> left_cb CUERPO_AUX right_cb .)


state 118

    (64) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par . left_cb CUERPOFUNC right_cb

    left_cb         shift and go to state 140


state 119

    (67) VOIDFUNC_PARA -> VOIDFUNC_PARA comma . TIPO id nt_agregarParametro
    (28) TIPO -> . int nt_cambioTipoActual
    (29) TIPO -> . float nt_cambioTipoActual
    (30) TIPO -> . bool nt_cambioTipoActual
    (31) TIPO -> . string nt_cambioTipoActual

    int             shift and go to state 23
    float           shift and go to state 24
    bool            shift and go to state 28
    string          shift and go to state 31

    TIPO                           shift and go to state 141

state 120

    (66) VOIDFUNC_PARA -> TIPO id . nt_agregarParametro
    (63) nt_agregarParametro -> . empty
    (169) empty -> .

    right_par       reduce using rule 169 (empty -> .)
    comma           reduce using rule 169 (empty -> .)

    empty                          shift and go to state 123
    nt_agregarParametro            shift and go to state 142

state 121

    (20) VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt . nt_agregarCteLista right_sb nt_agregarDicVar
    (22) nt_agregarCteLista -> . empty
    (169) empty -> .

    right_sb        reduce using rule 169 (empty -> .)

    nt_agregarCteLista             shift and go to state 143
    empty                          shift and go to state 96

state 122

    (19) VARS_LIST_AUX -> id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb . nt_agregarDicVar
    (23) nt_agregarDicVar -> . empty
    (169) empty -> .

    semicolon       reduce using rule 169 (empty -> .)
    comma           reduce using rule 169 (empty -> .)

    nt_agregarDicVar               shift and go to state 144
    empty                          shift and go to state 71

state 123

    (63) nt_agregarParametro -> empty .

    right_par       reduce using rule 63 (nt_agregarParametro -> empty .)
    comma           reduce using rule 63 (nt_agregarParametro -> empty .)


state 124

    (60) FUNC_PARA -> TIPO id nt_agregarParametro .

    right_par       reduce using rule 60 (FUNC_PARA -> TIPO id nt_agregarParametro .)
    comma           reduce using rule 60 (FUNC_PARA -> TIPO id nt_agregarParametro .)


state 125

    (55) FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO . nt_pushEndsub
    (57) nt_pushEndsub -> . empty
    (169) empty -> .

    int             reduce using rule 169 (empty -> .)
    float           reduce using rule 169 (empty -> .)
    bool            reduce using rule 169 (empty -> .)
    string          reduce using rule 169 (empty -> .)
    void            reduce using rule 169 (empty -> .)
    main            reduce using rule 169 (empty -> .)

    nt_pushEndsub                  shift and go to state 145
    empty                          shift and go to state 46

state 126

    (48) CUERPORETORNO -> left_cb . CUERPORETORNO_AUX right_cb
    (49) CUERPORETORNO_AUX -> . CUERPORETORNO_CF_AUX RETORNO
    (50) CUERPORETORNO_AUX -> . CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO
    (51) CUERPORETORNO_CF_AUX -> . CUERPOFUNC
    (52) CUERPORETORNO_CF_AUX -> . empty
    (40) CUERPOFUNC -> . CUERPOFUNC_AUX
    (169) empty -> .
    (41) CUERPOFUNC_AUX -> . CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
    (42) CUERPOFUNC_AUX -> . CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
    (44) CUERPOFUNC_VARS -> . VARS
    (45) CUERPOFUNC_VARS -> . empty
    (12) VARS -> . VARS_AUX
    (13) VARS_AUX -> . VARS_LIST_VAR
    (14) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (15) VARS_LIST_VAR -> . VARS_LIST
    (16) VARS_LIST_VAR -> . VARS_VAR
    (17) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (24) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    return          reduce using rule 169 (empty -> .)
    if              reduce using rule 169 (empty -> .)
    while           reduce using rule 169 (empty -> .)
    cread           reduce using rule 169 (empty -> .)
    cwrite          reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    list            shift and go to state 14
    var             shift and go to state 10

  ! list            [ reduce using rule 169 (empty -> .) ]
  ! var             [ reduce using rule 169 (empty -> .) ]

    CUERPORETORNO_CF_AUX           shift and go to state 149
    VARS                           shift and go to state 150
    CUERPOFUNC                     shift and go to state 146
    VARS_LIST                      shift and go to state 9
    VARS_LIST_VAR                  shift and go to state 12
    VARS_VAR                       shift and go to state 13
    VARS_AUX                       shift and go to state 15
    CUERPORETORNO_AUX              shift and go to state 147
    CUERPOFUNC_VARS                shift and go to state 151
    CUERPOFUNC_AUX                 shift and go to state 148
    empty                          shift and go to state 152

state 127

    (61) FUNC_PARA -> FUNC_PARA comma TIPO . id nt_agregarParametro

    id              shift and go to state 153


state 128

    (88) LECTURA -> cread left_par . id nt_leer right_par semicolon

    id              shift and go to state 154


state 129

    (76) CONDICION_AUX -> left_par . EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto
    (98) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (100) EXPRESION_NOT -> . not nt_pushPOper
    (101) EXPRESION_NOT -> . empty
    (169) empty -> .

    not             shift and go to state 157
    left_par        reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    True            reduce using rule 169 (empty -> .)
    False           reduce using rule 169 (empty -> .)
    cteString       reduce using rule 169 (empty -> .)
    cteInt          reduce using rule 169 (empty -> .)
    cteFloat        reduce using rule 169 (empty -> .)

    EXPRESION                      shift and go to state 155
    EXPRESION_NOT                  shift and go to state 156
    empty                          shift and go to state 158

state 130

    (75) CONDICION -> if CONDICION_AUX .

    right_cb        reduce using rule 75 (CONDICION -> if CONDICION_AUX .)
    list            reduce using rule 75 (CONDICION -> if CONDICION_AUX .)
    var             reduce using rule 75 (CONDICION -> if CONDICION_AUX .)
    if              reduce using rule 75 (CONDICION -> if CONDICION_AUX .)
    while           reduce using rule 75 (CONDICION -> if CONDICION_AUX .)
    cread           reduce using rule 75 (CONDICION -> if CONDICION_AUX .)
    cwrite          reduce using rule 75 (CONDICION -> if CONDICION_AUX .)
    id              reduce using rule 75 (CONDICION -> if CONDICION_AUX .)
    return          reduce using rule 75 (CONDICION -> if CONDICION_AUX .)


state 131

    (143) LISTA -> id nt_verificarVarDim . left_sb EXP nt_pushVer right_sb

    left_sb         shift and go to state 159


state 132

    (92) LLAMADA -> id nt_verificaFuncIdLlamada . left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub

    left_par        shift and go to state 160


state 133

    (93) nt_verificaFuncIdLlamada -> empty .
    (166) nt_pushPilaO -> empty .
    (144) nt_verificarVarDim -> empty .

    left_par        reduce using rule 93 (nt_verificaFuncIdLlamada -> empty .)
    equals          reduce using rule 166 (nt_pushPilaO -> empty .)
    left_sb         reduce using rule 144 (nt_verificarVarDim -> empty .)


state 134

    (163) ASIGNACION_AUX -> id nt_pushPilaO . nt_checaStruct
    (165) nt_checaStruct -> . empty
    (169) empty -> .

    equals          reduce using rule 169 (empty -> .)

    nt_checaStruct                 shift and go to state 161
    empty                          shift and go to state 162

state 135

    (90) ESCRITURA -> cwrite left_par . EXPRESION nt_escribir right_par semicolon
    (98) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (100) EXPRESION_NOT -> . not nt_pushPOper
    (101) EXPRESION_NOT -> . empty
    (169) empty -> .

    not             shift and go to state 157
    left_par        reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    True            reduce using rule 169 (empty -> .)
    False           reduce using rule 169 (empty -> .)
    cteString       reduce using rule 169 (empty -> .)
    cteInt          reduce using rule 169 (empty -> .)
    cteFloat        reduce using rule 169 (empty -> .)

    EXPRESION                      shift and go to state 163
    EXPRESION_NOT                  shift and go to state 156
    empty                          shift and go to state 158

state 136

    (161) ASIGNACION -> ASIGNACION_AUX equals . nt_pushPOper EXPRESION nt_checaEquals semicolon
    (167) nt_pushPOper -> . empty
    (169) empty -> .

    not             reduce using rule 169 (empty -> .)
    left_par        reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    True            reduce using rule 169 (empty -> .)
    False           reduce using rule 169 (empty -> .)
    cteString       reduce using rule 169 (empty -> .)
    cteInt          reduce using rule 169 (empty -> .)
    cteFloat        reduce using rule 169 (empty -> .)

    empty                          shift and go to state 164
    nt_pushPOper                   shift and go to state 165

state 137

    (86) nt_saltoLoop -> empty .

    left_par        reduce using rule 86 (nt_saltoLoop -> empty .)


state 138

    (85) CICLO -> while nt_saltoLoop . left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop

    left_par        shift and go to state 166


state 139

    (35) CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .

    right_cb        reduce using rule 35 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    list            reduce using rule 35 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    var             reduce using rule 35 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    if              reduce using rule 35 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    while           reduce using rule 35 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    cread           reduce using rule 35 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    cwrite          reduce using rule 35 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    id              reduce using rule 35 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)


state 140

    (64) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb . CUERPOFUNC right_cb
    (40) CUERPOFUNC -> . CUERPOFUNC_AUX
    (41) CUERPOFUNC_AUX -> . CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
    (42) CUERPOFUNC_AUX -> . CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
    (44) CUERPOFUNC_VARS -> . VARS
    (45) CUERPOFUNC_VARS -> . empty
    (12) VARS -> . VARS_AUX
    (169) empty -> .
    (13) VARS_AUX -> . VARS_LIST_VAR
    (14) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (15) VARS_LIST_VAR -> . VARS_LIST
    (16) VARS_LIST_VAR -> . VARS_VAR
    (17) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (24) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    if              reduce using rule 169 (empty -> .)
    while           reduce using rule 169 (empty -> .)
    cread           reduce using rule 169 (empty -> .)
    cwrite          reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    right_cb        reduce using rule 169 (empty -> .)
    list            shift and go to state 14
    var             shift and go to state 10

  ! list            [ reduce using rule 169 (empty -> .) ]
  ! var             [ reduce using rule 169 (empty -> .) ]

    VARS_LIST                      shift and go to state 9
    VARS                           shift and go to state 150
    CUERPOFUNC                     shift and go to state 167
    VARS_AUX                       shift and go to state 15
    VARS_LIST_VAR                  shift and go to state 12
    CUERPOFUNC_VARS                shift and go to state 151
    VARS_VAR                       shift and go to state 13
    CUERPOFUNC_AUX                 shift and go to state 148
    empty                          shift and go to state 168

state 141

    (67) VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO . id nt_agregarParametro

    id              shift and go to state 169


state 142

    (66) VOIDFUNC_PARA -> TIPO id nt_agregarParametro .

    right_par       reduce using rule 66 (VOIDFUNC_PARA -> TIPO id nt_agregarParametro .)
    comma           reduce using rule 66 (VOIDFUNC_PARA -> TIPO id nt_agregarParametro .)


state 143

    (20) VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista . right_sb nt_agregarDicVar

    right_sb        shift and go to state 170


state 144

    (19) VARS_LIST_AUX -> id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar .

    semicolon       reduce using rule 19 (VARS_LIST_AUX -> id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar .)
    comma           reduce using rule 19 (VARS_LIST_AUX -> id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar .)


state 145

    (55) FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub .

    int             reduce using rule 55 (FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub .)
    float           reduce using rule 55 (FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub .)
    bool            reduce using rule 55 (FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub .)
    string          reduce using rule 55 (FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub .)
    void            reduce using rule 55 (FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub .)
    main            reduce using rule 55 (FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub .)


state 146

    (51) CUERPORETORNO_CF_AUX -> CUERPOFUNC .

    return          reduce using rule 51 (CUERPORETORNO_CF_AUX -> CUERPOFUNC .)


state 147

    (48) CUERPORETORNO -> left_cb CUERPORETORNO_AUX . right_cb
    (50) CUERPORETORNO_AUX -> CUERPORETORNO_AUX . CUERPORETORNO_CF_AUX RETORNO
    (51) CUERPORETORNO_CF_AUX -> . CUERPOFUNC
    (52) CUERPORETORNO_CF_AUX -> . empty
    (40) CUERPOFUNC -> . CUERPOFUNC_AUX
    (169) empty -> .
    (41) CUERPOFUNC_AUX -> . CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
    (42) CUERPOFUNC_AUX -> . CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
    (44) CUERPOFUNC_VARS -> . VARS
    (45) CUERPOFUNC_VARS -> . empty
    (12) VARS -> . VARS_AUX
    (13) VARS_AUX -> . VARS_LIST_VAR
    (14) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (15) VARS_LIST_VAR -> . VARS_LIST
    (16) VARS_LIST_VAR -> . VARS_VAR
    (17) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (24) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    right_cb        shift and go to state 172
    return          reduce using rule 169 (empty -> .)
    if              reduce using rule 169 (empty -> .)
    while           reduce using rule 169 (empty -> .)
    cread           reduce using rule 169 (empty -> .)
    cwrite          reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    list            shift and go to state 14
    var             shift and go to state 10

  ! list            [ reduce using rule 169 (empty -> .) ]
  ! var             [ reduce using rule 169 (empty -> .) ]

    CUERPORETORNO_CF_AUX           shift and go to state 171
    VARS                           shift and go to state 150
    CUERPOFUNC                     shift and go to state 146
    VARS_LIST                      shift and go to state 9
    VARS_LIST_VAR                  shift and go to state 12
    VARS_VAR                       shift and go to state 13
    VARS_AUX                       shift and go to state 15
    CUERPOFUNC_VARS                shift and go to state 151
    CUERPOFUNC_AUX                 shift and go to state 148
    empty                          shift and go to state 152

state 148

    (40) CUERPOFUNC -> CUERPOFUNC_AUX .
    (42) CUERPOFUNC_AUX -> CUERPOFUNC_AUX . CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
    (44) CUERPOFUNC_VARS -> . VARS
    (45) CUERPOFUNC_VARS -> . empty
    (12) VARS -> . VARS_AUX
    (169) empty -> .
    (13) VARS_AUX -> . VARS_LIST_VAR
    (14) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (15) VARS_LIST_VAR -> . VARS_LIST
    (16) VARS_LIST_VAR -> . VARS_VAR
    (17) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (24) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! reduce/reduce conflict for return resolved using rule 40 (CUERPOFUNC -> CUERPOFUNC_AUX .)
  ! reduce/reduce conflict for right_cb resolved using rule 40 (CUERPOFUNC -> CUERPOFUNC_AUX .)
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    return          reduce using rule 40 (CUERPOFUNC -> CUERPOFUNC_AUX .)
    right_cb        reduce using rule 40 (CUERPOFUNC -> CUERPOFUNC_AUX .)
    if              reduce using rule 169 (empty -> .)
    while           reduce using rule 169 (empty -> .)
    cread           reduce using rule 169 (empty -> .)
    cwrite          reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    list            shift and go to state 14
    var             shift and go to state 10

  ! list            [ reduce using rule 169 (empty -> .) ]
  ! var             [ reduce using rule 169 (empty -> .) ]
  ! return          [ reduce using rule 169 (empty -> .) ]
  ! right_cb        [ reduce using rule 169 (empty -> .) ]

    VARS                           shift and go to state 150
    VARS_LIST                      shift and go to state 9
    VARS_LIST_VAR                  shift and go to state 12
    VARS_AUX                       shift and go to state 15
    CUERPOFUNC_VARS                shift and go to state 173
    VARS_VAR                       shift and go to state 13
    empty                          shift and go to state 168

state 149

    (49) CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX . RETORNO
    (53) RETORNO -> . return EXP nt_checaRet semicolon

    return          shift and go to state 174

    RETORNO                        shift and go to state 175

state 150

    (44) CUERPOFUNC_VARS -> VARS .

    if              reduce using rule 44 (CUERPOFUNC_VARS -> VARS .)
    while           reduce using rule 44 (CUERPOFUNC_VARS -> VARS .)
    cread           reduce using rule 44 (CUERPOFUNC_VARS -> VARS .)
    cwrite          reduce using rule 44 (CUERPOFUNC_VARS -> VARS .)
    id              reduce using rule 44 (CUERPOFUNC_VARS -> VARS .)
    list            reduce using rule 44 (CUERPOFUNC_VARS -> VARS .)
    var             reduce using rule 44 (CUERPOFUNC_VARS -> VARS .)
    right_cb        reduce using rule 44 (CUERPOFUNC_VARS -> VARS .)
    return          reduce using rule 44 (CUERPOFUNC_VARS -> VARS .)


state 151

    (41) CUERPOFUNC_AUX -> CUERPOFUNC_VARS . nt_funcInicio CUERPOFUNC_ESTATUTO
    (43) nt_funcInicio -> . empty
    (169) empty -> .

    if              reduce using rule 169 (empty -> .)
    while           reduce using rule 169 (empty -> .)
    cread           reduce using rule 169 (empty -> .)
    cwrite          reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    list            reduce using rule 169 (empty -> .)
    var             reduce using rule 169 (empty -> .)
    return          reduce using rule 169 (empty -> .)
    right_cb        reduce using rule 169 (empty -> .)

    empty                          shift and go to state 176
    nt_funcInicio                  shift and go to state 177

state 152

    (52) CUERPORETORNO_CF_AUX -> empty .
    (45) CUERPOFUNC_VARS -> empty .

  ! reduce/reduce conflict for return resolved using rule 45 (CUERPOFUNC_VARS -> empty .)
    if              reduce using rule 45 (CUERPOFUNC_VARS -> empty .)
    while           reduce using rule 45 (CUERPOFUNC_VARS -> empty .)
    cread           reduce using rule 45 (CUERPOFUNC_VARS -> empty .)
    cwrite          reduce using rule 45 (CUERPOFUNC_VARS -> empty .)
    id              reduce using rule 45 (CUERPOFUNC_VARS -> empty .)
    list            reduce using rule 45 (CUERPOFUNC_VARS -> empty .)
    var             reduce using rule 45 (CUERPOFUNC_VARS -> empty .)
    return          reduce using rule 45 (CUERPOFUNC_VARS -> empty .)

  ! return          [ reduce using rule 52 (CUERPORETORNO_CF_AUX -> empty .) ]


state 153

    (61) FUNC_PARA -> FUNC_PARA comma TIPO id . nt_agregarParametro
    (63) nt_agregarParametro -> . empty
    (169) empty -> .

    right_par       reduce using rule 169 (empty -> .)
    comma           reduce using rule 169 (empty -> .)

    empty                          shift and go to state 123
    nt_agregarParametro            shift and go to state 178

state 154

    (88) LECTURA -> cread left_par id . nt_leer right_par semicolon
    (89) nt_leer -> . empty
    (169) empty -> .

    right_par       reduce using rule 169 (empty -> .)

    empty                          shift and go to state 180
    nt_leer                        shift and go to state 179

state 155

    (76) CONDICION_AUX -> left_par EXPRESION . nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto
    (82) nt_checarBool -> . empty
    (169) empty -> .

    right_par       reduce using rule 169 (empty -> .)

    nt_checarBool                  shift and go to state 181
    empty                          shift and go to state 182

state 156

    (98) EXPRESION -> EXPRESION_NOT . EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (105) EXPRESIONLOGICA -> . EXP EXPRESIONLOGICA_AUX
    (114) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (119) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (124) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (125) FACTOR -> . CONSTANTE
    (126) FACTOR -> . LISTA
    (127) FACTOR -> . FACTOR_AUX
    (146) CONSTANTE -> . NUMERICA
    (147) CONSTANTE -> . BOOLEANA
    (148) CONSTANTE -> . STRINGS
    (143) LISTA -> . id nt_verificarVarDim left_sb EXP nt_pushVer right_sb
    (128) FACTOR_AUX -> . id nt_pushPilaO nt_verificaVar
    (129) FACTOR_AUX -> . id nt_verificaFuncId LLAMADA_F
    (149) NUMERICA -> . NUMERICA_AUX
    (150) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (151) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (158) BOOLEANA -> . True
    (159) BOOLEANA -> . False
    (160) STRINGS -> . cteString
    (154) NUMERICA_AUX -> . cteInt nt_pushInt
    (155) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 192
    id              shift and go to state 187
    plus            shift and go to state 188
    minus           shift and go to state 202
    True            shift and go to state 196
    False           shift and go to state 194
    cteString       shift and go to state 191
    cteInt          shift and go to state 197
    cteFloat        shift and go to state 184

    EXPRESIONLOGICA                shift and go to state 183
    BOOLEANA                       shift and go to state 185
    EXP                            shift and go to state 186
    FACTOR_AUX                     shift and go to state 189
    TERMINO                        shift and go to state 190
    STRINGS                        shift and go to state 193
    CONSTANTE                      shift and go to state 195
    NUMERICA_AUX                   shift and go to state 198
    NUMERICA                       shift and go to state 199
    FACTOR                         shift and go to state 200
    LISTA                          shift and go to state 201

state 157

    (100) EXPRESION_NOT -> not . nt_pushPOper
    (167) nt_pushPOper -> . empty
    (169) empty -> .

    left_par        reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    True            reduce using rule 169 (empty -> .)
    False           reduce using rule 169 (empty -> .)
    cteString       reduce using rule 169 (empty -> .)
    cteInt          reduce using rule 169 (empty -> .)
    cteFloat        reduce using rule 169 (empty -> .)

    empty                          shift and go to state 164
    nt_pushPOper                   shift and go to state 203

state 158

    (101) EXPRESION_NOT -> empty .

    left_par        reduce using rule 101 (EXPRESION_NOT -> empty .)
    id              reduce using rule 101 (EXPRESION_NOT -> empty .)
    plus            reduce using rule 101 (EXPRESION_NOT -> empty .)
    minus           reduce using rule 101 (EXPRESION_NOT -> empty .)
    True            reduce using rule 101 (EXPRESION_NOT -> empty .)
    False           reduce using rule 101 (EXPRESION_NOT -> empty .)
    cteString       reduce using rule 101 (EXPRESION_NOT -> empty .)
    cteInt          reduce using rule 101 (EXPRESION_NOT -> empty .)
    cteFloat        reduce using rule 101 (EXPRESION_NOT -> empty .)


state 159

    (143) LISTA -> id nt_verificarVarDim left_sb . EXP nt_pushVer right_sb
    (114) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (119) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (124) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (125) FACTOR -> . CONSTANTE
    (126) FACTOR -> . LISTA
    (127) FACTOR -> . FACTOR_AUX
    (146) CONSTANTE -> . NUMERICA
    (147) CONSTANTE -> . BOOLEANA
    (148) CONSTANTE -> . STRINGS
    (143) LISTA -> . id nt_verificarVarDim left_sb EXP nt_pushVer right_sb
    (128) FACTOR_AUX -> . id nt_pushPilaO nt_verificaVar
    (129) FACTOR_AUX -> . id nt_verificaFuncId LLAMADA_F
    (149) NUMERICA -> . NUMERICA_AUX
    (150) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (151) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (158) BOOLEANA -> . True
    (159) BOOLEANA -> . False
    (160) STRINGS -> . cteString
    (154) NUMERICA_AUX -> . cteInt nt_pushInt
    (155) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 192
    id              shift and go to state 187
    plus            shift and go to state 188
    minus           shift and go to state 202
    True            shift and go to state 196
    False           shift and go to state 194
    cteString       shift and go to state 191
    cteInt          shift and go to state 197
    cteFloat        shift and go to state 184

    BOOLEANA                       shift and go to state 185
    EXP                            shift and go to state 204
    FACTOR_AUX                     shift and go to state 189
    TERMINO                        shift and go to state 190
    STRINGS                        shift and go to state 193
    CONSTANTE                      shift and go to state 195
    NUMERICA_AUX                   shift and go to state 198
    NUMERICA                       shift and go to state 199
    FACTOR                         shift and go to state 200
    LISTA                          shift and go to state 201

state 160

    (92) LLAMADA -> id nt_verificaFuncIdLlamada left_par . nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub
    (167) nt_pushPOper -> . empty
    (169) empty -> .

    not             reduce using rule 169 (empty -> .)
    right_par       reduce using rule 169 (empty -> .)
    left_par        reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    True            reduce using rule 169 (empty -> .)
    False           reduce using rule 169 (empty -> .)
    cteString       reduce using rule 169 (empty -> .)
    cteInt          reduce using rule 169 (empty -> .)
    cteFloat        reduce using rule 169 (empty -> .)

    empty                          shift and go to state 164
    nt_pushPOper                   shift and go to state 205

state 161

    (163) ASIGNACION_AUX -> id nt_pushPilaO nt_checaStruct .

    equals          reduce using rule 163 (ASIGNACION_AUX -> id nt_pushPilaO nt_checaStruct .)


state 162

    (165) nt_checaStruct -> empty .

    equals          reduce using rule 165 (nt_checaStruct -> empty .)


state 163

    (90) ESCRITURA -> cwrite left_par EXPRESION . nt_escribir right_par semicolon
    (91) nt_escribir -> . empty
    (169) empty -> .

    right_par       reduce using rule 169 (empty -> .)

    nt_escribir                    shift and go to state 206
    empty                          shift and go to state 207

state 164

    (167) nt_pushPOper -> empty .

    left_par        reduce using rule 167 (nt_pushPOper -> empty .)
    id              reduce using rule 167 (nt_pushPOper -> empty .)
    plus            reduce using rule 167 (nt_pushPOper -> empty .)
    minus           reduce using rule 167 (nt_pushPOper -> empty .)
    True            reduce using rule 167 (nt_pushPOper -> empty .)
    False           reduce using rule 167 (nt_pushPOper -> empty .)
    cteString       reduce using rule 167 (nt_pushPOper -> empty .)
    cteInt          reduce using rule 167 (nt_pushPOper -> empty .)
    cteFloat        reduce using rule 167 (nt_pushPOper -> empty .)
    not             reduce using rule 167 (nt_pushPOper -> empty .)
    right_par       reduce using rule 167 (nt_pushPOper -> empty .)


state 165

    (161) ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper . EXPRESION nt_checaEquals semicolon
    (98) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (100) EXPRESION_NOT -> . not nt_pushPOper
    (101) EXPRESION_NOT -> . empty
    (169) empty -> .

    not             shift and go to state 157
    left_par        reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    True            reduce using rule 169 (empty -> .)
    False           reduce using rule 169 (empty -> .)
    cteString       reduce using rule 169 (empty -> .)
    cteInt          reduce using rule 169 (empty -> .)
    cteFloat        reduce using rule 169 (empty -> .)

    EXPRESION                      shift and go to state 208
    EXPRESION_NOT                  shift and go to state 156
    empty                          shift and go to state 158

state 166

    (85) CICLO -> while nt_saltoLoop left_par . EXPRESION nt_checarBool right_par CUERPO nt_pushLoop
    (98) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (100) EXPRESION_NOT -> . not nt_pushPOper
    (101) EXPRESION_NOT -> . empty
    (169) empty -> .

    not             shift and go to state 157
    left_par        reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    True            reduce using rule 169 (empty -> .)
    False           reduce using rule 169 (empty -> .)
    cteString       reduce using rule 169 (empty -> .)
    cteInt          reduce using rule 169 (empty -> .)
    cteFloat        reduce using rule 169 (empty -> .)

    EXPRESION                      shift and go to state 209
    EXPRESION_NOT                  shift and go to state 156
    empty                          shift and go to state 158

state 167

    (64) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC . right_cb

    right_cb        shift and go to state 210


state 168

    (45) CUERPOFUNC_VARS -> empty .

    if              reduce using rule 45 (CUERPOFUNC_VARS -> empty .)
    while           reduce using rule 45 (CUERPOFUNC_VARS -> empty .)
    cread           reduce using rule 45 (CUERPOFUNC_VARS -> empty .)
    cwrite          reduce using rule 45 (CUERPOFUNC_VARS -> empty .)
    id              reduce using rule 45 (CUERPOFUNC_VARS -> empty .)
    list            reduce using rule 45 (CUERPOFUNC_VARS -> empty .)
    var             reduce using rule 45 (CUERPOFUNC_VARS -> empty .)
    right_cb        reduce using rule 45 (CUERPOFUNC_VARS -> empty .)
    return          reduce using rule 45 (CUERPOFUNC_VARS -> empty .)


state 169

    (67) VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO id . nt_agregarParametro
    (63) nt_agregarParametro -> . empty
    (169) empty -> .

    right_par       reduce using rule 169 (empty -> .)
    comma           reduce using rule 169 (empty -> .)

    empty                          shift and go to state 123
    nt_agregarParametro            shift and go to state 211

state 170

    (20) VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb . nt_agregarDicVar
    (23) nt_agregarDicVar -> . empty
    (169) empty -> .

    semicolon       reduce using rule 169 (empty -> .)
    comma           reduce using rule 169 (empty -> .)

    nt_agregarDicVar               shift and go to state 212
    empty                          shift and go to state 71

state 171

    (50) CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX . RETORNO
    (53) RETORNO -> . return EXP nt_checaRet semicolon

    return          shift and go to state 174

    RETORNO                        shift and go to state 213

state 172

    (48) CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .

    int             reduce using rule 48 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)
    float           reduce using rule 48 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)
    bool            reduce using rule 48 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)
    string          reduce using rule 48 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)
    void            reduce using rule 48 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)
    main            reduce using rule 48 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)


state 173

    (42) CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS . nt_funcInicio CUERPOFUNC_ESTATUTO
    (43) nt_funcInicio -> . empty
    (169) empty -> .

    if              reduce using rule 169 (empty -> .)
    while           reduce using rule 169 (empty -> .)
    cread           reduce using rule 169 (empty -> .)
    cwrite          reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    list            reduce using rule 169 (empty -> .)
    var             reduce using rule 169 (empty -> .)
    return          reduce using rule 169 (empty -> .)
    right_cb        reduce using rule 169 (empty -> .)

    empty                          shift and go to state 176
    nt_funcInicio                  shift and go to state 214

state 174

    (53) RETORNO -> return . EXP nt_checaRet semicolon
    (114) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (119) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (124) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (125) FACTOR -> . CONSTANTE
    (126) FACTOR -> . LISTA
    (127) FACTOR -> . FACTOR_AUX
    (146) CONSTANTE -> . NUMERICA
    (147) CONSTANTE -> . BOOLEANA
    (148) CONSTANTE -> . STRINGS
    (143) LISTA -> . id nt_verificarVarDim left_sb EXP nt_pushVer right_sb
    (128) FACTOR_AUX -> . id nt_pushPilaO nt_verificaVar
    (129) FACTOR_AUX -> . id nt_verificaFuncId LLAMADA_F
    (149) NUMERICA -> . NUMERICA_AUX
    (150) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (151) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (158) BOOLEANA -> . True
    (159) BOOLEANA -> . False
    (160) STRINGS -> . cteString
    (154) NUMERICA_AUX -> . cteInt nt_pushInt
    (155) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 192
    id              shift and go to state 187
    plus            shift and go to state 188
    minus           shift and go to state 202
    True            shift and go to state 196
    False           shift and go to state 194
    cteString       shift and go to state 191
    cteInt          shift and go to state 197
    cteFloat        shift and go to state 184

    BOOLEANA                       shift and go to state 185
    EXP                            shift and go to state 215
    NUMERICA_AUX                   shift and go to state 198
    FACTOR_AUX                     shift and go to state 189
    TERMINO                        shift and go to state 190
    STRINGS                        shift and go to state 193
    CONSTANTE                      shift and go to state 195
    NUMERICA                       shift and go to state 199
    FACTOR                         shift and go to state 200
    LISTA                          shift and go to state 201

state 175

    (49) CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .

    right_cb        reduce using rule 49 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    list            reduce using rule 49 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    var             reduce using rule 49 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    return          reduce using rule 49 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    if              reduce using rule 49 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    while           reduce using rule 49 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    cread           reduce using rule 49 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    cwrite          reduce using rule 49 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    id              reduce using rule 49 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)


state 176

    (43) nt_funcInicio -> empty .

    if              reduce using rule 43 (nt_funcInicio -> empty .)
    while           reduce using rule 43 (nt_funcInicio -> empty .)
    cread           reduce using rule 43 (nt_funcInicio -> empty .)
    cwrite          reduce using rule 43 (nt_funcInicio -> empty .)
    id              reduce using rule 43 (nt_funcInicio -> empty .)
    list            reduce using rule 43 (nt_funcInicio -> empty .)
    var             reduce using rule 43 (nt_funcInicio -> empty .)
    return          reduce using rule 43 (nt_funcInicio -> empty .)
    right_cb        reduce using rule 43 (nt_funcInicio -> empty .)


state 177

    (41) CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio . CUERPOFUNC_ESTATUTO
    (46) CUERPOFUNC_ESTATUTO -> . ESTATUTO
    (47) CUERPOFUNC_ESTATUTO -> . empty
    (69) ESTATUTO -> . ASIGNACION
    (70) ESTATUTO -> . CONDICION
    (71) ESTATUTO -> . CICLO
    (72) ESTATUTO -> . LECTURA
    (73) ESTATUTO -> . ESCRITURA
    (74) ESTATUTO -> . LLAMADA
    (169) empty -> .
    (161) ASIGNACION -> . ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon
    (75) CONDICION -> . if CONDICION_AUX
    (85) CICLO -> . while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop
    (88) LECTURA -> . cread left_par id nt_leer right_par semicolon
    (90) ESCRITURA -> . cwrite left_par EXPRESION nt_escribir right_par semicolon
    (92) LLAMADA -> . id nt_verificaFuncIdLlamada left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub
    (163) ASIGNACION_AUX -> . id nt_pushPilaO nt_checaStruct
    (164) ASIGNACION_AUX -> . LISTA
    (143) LISTA -> . id nt_verificarVarDim left_sb EXP nt_pushVer right_sb

  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for cread resolved as shift
  ! shift/reduce conflict for cwrite resolved as shift
  ! shift/reduce conflict for id resolved as shift
    list            reduce using rule 169 (empty -> .)
    var             reduce using rule 169 (empty -> .)
    return          reduce using rule 169 (empty -> .)
    right_cb        reduce using rule 169 (empty -> .)
    if              shift and go to state 103
    while           shift and go to state 114
    cread           shift and go to state 101
    cwrite          shift and go to state 107
    id              shift and go to state 106

  ! if              [ reduce using rule 169 (empty -> .) ]
  ! while           [ reduce using rule 169 (empty -> .) ]
  ! cread           [ reduce using rule 169 (empty -> .) ]
  ! cwrite          [ reduce using rule 169 (empty -> .) ]
  ! id              [ reduce using rule 169 (empty -> .) ]

    CICLO                          shift and go to state 100
    LECTURA                        shift and go to state 102
    ESCRITURA                      shift and go to state 109
    CUERPOFUNC_ESTATUTO            shift and go to state 216
    ASIGNACION                     shift and go to state 104
    ESTATUTO                       shift and go to state 217
    ASIGNACION_AUX                 shift and go to state 108
    empty                          shift and go to state 218
    LLAMADA                        shift and go to state 111
    CONDICION                      shift and go to state 112
    LISTA                          shift and go to state 115

state 178

    (61) FUNC_PARA -> FUNC_PARA comma TIPO id nt_agregarParametro .

    right_par       reduce using rule 61 (FUNC_PARA -> FUNC_PARA comma TIPO id nt_agregarParametro .)
    comma           reduce using rule 61 (FUNC_PARA -> FUNC_PARA comma TIPO id nt_agregarParametro .)


state 179

    (88) LECTURA -> cread left_par id nt_leer . right_par semicolon

    right_par       shift and go to state 219


state 180

    (89) nt_leer -> empty .

    right_par       reduce using rule 89 (nt_leer -> empty .)


state 181

    (76) CONDICION_AUX -> left_par EXPRESION nt_checarBool . right_par CUERPO ELSE_ELIF nt_pushSalto

    right_par       shift and go to state 220


state 182

    (82) nt_checarBool -> empty .

    right_par       reduce using rule 82 (nt_checarBool -> empty .)


state 183

    (98) EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA . nt_checaAndOrNot EXPRESION_B
    (99) nt_checaAndOrNot -> . empty
    (169) empty -> .

    and             reduce using rule 169 (empty -> .)
    or              reduce using rule 169 (empty -> .)
    right_par       reduce using rule 169 (empty -> .)
    semicolon       reduce using rule 169 (empty -> .)
    comma           reduce using rule 169 (empty -> .)

    nt_checaAndOrNot               shift and go to state 221
    empty                          shift and go to state 222

state 184

    (155) NUMERICA_AUX -> cteFloat . nt_pushFloat
    (157) nt_pushFloat -> . empty
    (169) empty -> .

    multiply        reduce using rule 169 (empty -> .)
    divide          reduce using rule 169 (empty -> .)
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    lt              reduce using rule 169 (empty -> .)
    gt              reduce using rule 169 (empty -> .)
    ne              reduce using rule 169 (empty -> .)
    ge              reduce using rule 169 (empty -> .)
    le              reduce using rule 169 (empty -> .)
    et              reduce using rule 169 (empty -> .)
    and             reduce using rule 169 (empty -> .)
    or              reduce using rule 169 (empty -> .)
    right_par       reduce using rule 169 (empty -> .)
    semicolon       reduce using rule 169 (empty -> .)
    comma           reduce using rule 169 (empty -> .)
    right_sb        reduce using rule 169 (empty -> .)

    nt_pushFloat                   shift and go to state 223
    empty                          shift and go to state 224

state 185

    (147) CONSTANTE -> BOOLEANA .

    multiply        reduce using rule 147 (CONSTANTE -> BOOLEANA .)
    divide          reduce using rule 147 (CONSTANTE -> BOOLEANA .)
    plus            reduce using rule 147 (CONSTANTE -> BOOLEANA .)
    minus           reduce using rule 147 (CONSTANTE -> BOOLEANA .)
    and             reduce using rule 147 (CONSTANTE -> BOOLEANA .)
    or              reduce using rule 147 (CONSTANTE -> BOOLEANA .)
    right_par       reduce using rule 147 (CONSTANTE -> BOOLEANA .)
    semicolon       reduce using rule 147 (CONSTANTE -> BOOLEANA .)
    comma           reduce using rule 147 (CONSTANTE -> BOOLEANA .)
    lt              reduce using rule 147 (CONSTANTE -> BOOLEANA .)
    gt              reduce using rule 147 (CONSTANTE -> BOOLEANA .)
    ne              reduce using rule 147 (CONSTANTE -> BOOLEANA .)
    ge              reduce using rule 147 (CONSTANTE -> BOOLEANA .)
    le              reduce using rule 147 (CONSTANTE -> BOOLEANA .)
    et              reduce using rule 147 (CONSTANTE -> BOOLEANA .)
    right_sb        reduce using rule 147 (CONSTANTE -> BOOLEANA .)


state 186

    (105) EXPRESIONLOGICA -> EXP . EXPRESIONLOGICA_AUX
    (106) EXPRESIONLOGICA_AUX -> . lt nt_pushPOper EXP nt_checarRelop
    (107) EXPRESIONLOGICA_AUX -> . gt nt_pushPOper EXP nt_checarRelop
    (108) EXPRESIONLOGICA_AUX -> . ne nt_pushPOper EXP nt_checarRelop
    (109) EXPRESIONLOGICA_AUX -> . ge nt_pushPOper EXP nt_checarRelop
    (110) EXPRESIONLOGICA_AUX -> . le nt_pushPOper EXP nt_checarRelop
    (111) EXPRESIONLOGICA_AUX -> . et nt_pushPOper EXP nt_checarRelop
    (112) EXPRESIONLOGICA_AUX -> . empty
    (169) empty -> .

    lt              shift and go to state 229
    gt              shift and go to state 226
    ne              shift and go to state 228
    ge              shift and go to state 225
    le              shift and go to state 230
    et              shift and go to state 231
    and             reduce using rule 169 (empty -> .)
    or              reduce using rule 169 (empty -> .)
    right_par       reduce using rule 169 (empty -> .)
    semicolon       reduce using rule 169 (empty -> .)
    comma           reduce using rule 169 (empty -> .)

    empty                          shift and go to state 232
    EXPRESIONLOGICA_AUX            shift and go to state 227

state 187

    (143) LISTA -> id . nt_verificarVarDim left_sb EXP nt_pushVer right_sb
    (128) FACTOR_AUX -> id . nt_pushPilaO nt_verificaVar
    (129) FACTOR_AUX -> id . nt_verificaFuncId LLAMADA_F
    (144) nt_verificarVarDim -> . empty
    (166) nt_pushPilaO -> . empty
    (131) nt_verificaFuncId -> . empty
    (169) empty -> .

    left_sb         reduce using rule 169 (empty -> .)
    multiply        reduce using rule 169 (empty -> .)
    divide          reduce using rule 169 (empty -> .)
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    lt              reduce using rule 169 (empty -> .)
    gt              reduce using rule 169 (empty -> .)
    ne              reduce using rule 169 (empty -> .)
    ge              reduce using rule 169 (empty -> .)
    le              reduce using rule 169 (empty -> .)
    et              reduce using rule 169 (empty -> .)
    and             reduce using rule 169 (empty -> .)
    or              reduce using rule 169 (empty -> .)
    right_par       reduce using rule 169 (empty -> .)
    semicolon       reduce using rule 169 (empty -> .)
    comma           reduce using rule 169 (empty -> .)
    right_sb        reduce using rule 169 (empty -> .)
    left_par        reduce using rule 169 (empty -> .)

    nt_verificaFuncId              shift and go to state 235
    nt_pushPilaO                   shift and go to state 234
    empty                          shift and go to state 233
    nt_verificarVarDim             shift and go to state 131

state 188

    (150) NUMERICA -> plus . nt_sigMas NUMERICA_AUX
    (152) nt_sigMas -> . empty
    (169) empty -> .

    cteInt          reduce using rule 169 (empty -> .)
    cteFloat        reduce using rule 169 (empty -> .)

    nt_sigMas                      shift and go to state 236
    empty                          shift and go to state 237

state 189

    (127) FACTOR -> FACTOR_AUX .

    multiply        reduce using rule 127 (FACTOR -> FACTOR_AUX .)
    divide          reduce using rule 127 (FACTOR -> FACTOR_AUX .)
    plus            reduce using rule 127 (FACTOR -> FACTOR_AUX .)
    minus           reduce using rule 127 (FACTOR -> FACTOR_AUX .)
    semicolon       reduce using rule 127 (FACTOR -> FACTOR_AUX .)
    and             reduce using rule 127 (FACTOR -> FACTOR_AUX .)
    or              reduce using rule 127 (FACTOR -> FACTOR_AUX .)
    right_par       reduce using rule 127 (FACTOR -> FACTOR_AUX .)
    comma           reduce using rule 127 (FACTOR -> FACTOR_AUX .)
    right_sb        reduce using rule 127 (FACTOR -> FACTOR_AUX .)
    lt              reduce using rule 127 (FACTOR -> FACTOR_AUX .)
    gt              reduce using rule 127 (FACTOR -> FACTOR_AUX .)
    ne              reduce using rule 127 (FACTOR -> FACTOR_AUX .)
    ge              reduce using rule 127 (FACTOR -> FACTOR_AUX .)
    le              reduce using rule 127 (FACTOR -> FACTOR_AUX .)
    et              reduce using rule 127 (FACTOR -> FACTOR_AUX .)


state 190

    (114) EXP -> TERMINO . nt_checar_sumas EXP_AUX
    (115) nt_checar_sumas -> . empty
    (169) empty -> .

    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    lt              reduce using rule 169 (empty -> .)
    gt              reduce using rule 169 (empty -> .)
    ne              reduce using rule 169 (empty -> .)
    ge              reduce using rule 169 (empty -> .)
    le              reduce using rule 169 (empty -> .)
    et              reduce using rule 169 (empty -> .)
    and             reduce using rule 169 (empty -> .)
    or              reduce using rule 169 (empty -> .)
    right_par       reduce using rule 169 (empty -> .)
    semicolon       reduce using rule 169 (empty -> .)
    comma           reduce using rule 169 (empty -> .)
    right_sb        reduce using rule 169 (empty -> .)

    empty                          shift and go to state 238
    nt_checar_sumas                shift and go to state 239

state 191

    (160) STRINGS -> cteString .

    multiply        reduce using rule 160 (STRINGS -> cteString .)
    divide          reduce using rule 160 (STRINGS -> cteString .)
    plus            reduce using rule 160 (STRINGS -> cteString .)
    minus           reduce using rule 160 (STRINGS -> cteString .)
    lt              reduce using rule 160 (STRINGS -> cteString .)
    gt              reduce using rule 160 (STRINGS -> cteString .)
    ne              reduce using rule 160 (STRINGS -> cteString .)
    ge              reduce using rule 160 (STRINGS -> cteString .)
    le              reduce using rule 160 (STRINGS -> cteString .)
    et              reduce using rule 160 (STRINGS -> cteString .)
    and             reduce using rule 160 (STRINGS -> cteString .)
    or              reduce using rule 160 (STRINGS -> cteString .)
    right_par       reduce using rule 160 (STRINGS -> cteString .)
    semicolon       reduce using rule 160 (STRINGS -> cteString .)
    comma           reduce using rule 160 (STRINGS -> cteString .)
    right_sb        reduce using rule 160 (STRINGS -> cteString .)


state 192

    (124) FACTOR -> left_par . nt_pushPOper EXPRESION right_par nt_popPOper
    (167) nt_pushPOper -> . empty
    (169) empty -> .

    not             reduce using rule 169 (empty -> .)
    left_par        reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    True            reduce using rule 169 (empty -> .)
    False           reduce using rule 169 (empty -> .)
    cteString       reduce using rule 169 (empty -> .)
    cteInt          reduce using rule 169 (empty -> .)
    cteFloat        reduce using rule 169 (empty -> .)

    empty                          shift and go to state 164
    nt_pushPOper                   shift and go to state 240

state 193

    (148) CONSTANTE -> STRINGS .

    multiply        reduce using rule 148 (CONSTANTE -> STRINGS .)
    divide          reduce using rule 148 (CONSTANTE -> STRINGS .)
    plus            reduce using rule 148 (CONSTANTE -> STRINGS .)
    minus           reduce using rule 148 (CONSTANTE -> STRINGS .)
    and             reduce using rule 148 (CONSTANTE -> STRINGS .)
    or              reduce using rule 148 (CONSTANTE -> STRINGS .)
    right_par       reduce using rule 148 (CONSTANTE -> STRINGS .)
    semicolon       reduce using rule 148 (CONSTANTE -> STRINGS .)
    comma           reduce using rule 148 (CONSTANTE -> STRINGS .)
    lt              reduce using rule 148 (CONSTANTE -> STRINGS .)
    gt              reduce using rule 148 (CONSTANTE -> STRINGS .)
    ne              reduce using rule 148 (CONSTANTE -> STRINGS .)
    ge              reduce using rule 148 (CONSTANTE -> STRINGS .)
    le              reduce using rule 148 (CONSTANTE -> STRINGS .)
    et              reduce using rule 148 (CONSTANTE -> STRINGS .)
    right_sb        reduce using rule 148 (CONSTANTE -> STRINGS .)


state 194

    (159) BOOLEANA -> False .

    multiply        reduce using rule 159 (BOOLEANA -> False .)
    divide          reduce using rule 159 (BOOLEANA -> False .)
    plus            reduce using rule 159 (BOOLEANA -> False .)
    minus           reduce using rule 159 (BOOLEANA -> False .)
    lt              reduce using rule 159 (BOOLEANA -> False .)
    gt              reduce using rule 159 (BOOLEANA -> False .)
    ne              reduce using rule 159 (BOOLEANA -> False .)
    ge              reduce using rule 159 (BOOLEANA -> False .)
    le              reduce using rule 159 (BOOLEANA -> False .)
    et              reduce using rule 159 (BOOLEANA -> False .)
    and             reduce using rule 159 (BOOLEANA -> False .)
    or              reduce using rule 159 (BOOLEANA -> False .)
    right_par       reduce using rule 159 (BOOLEANA -> False .)
    semicolon       reduce using rule 159 (BOOLEANA -> False .)
    comma           reduce using rule 159 (BOOLEANA -> False .)
    right_sb        reduce using rule 159 (BOOLEANA -> False .)


state 195

    (125) FACTOR -> CONSTANTE .

    multiply        reduce using rule 125 (FACTOR -> CONSTANTE .)
    divide          reduce using rule 125 (FACTOR -> CONSTANTE .)
    plus            reduce using rule 125 (FACTOR -> CONSTANTE .)
    minus           reduce using rule 125 (FACTOR -> CONSTANTE .)
    semicolon       reduce using rule 125 (FACTOR -> CONSTANTE .)
    and             reduce using rule 125 (FACTOR -> CONSTANTE .)
    or              reduce using rule 125 (FACTOR -> CONSTANTE .)
    right_par       reduce using rule 125 (FACTOR -> CONSTANTE .)
    comma           reduce using rule 125 (FACTOR -> CONSTANTE .)
    right_sb        reduce using rule 125 (FACTOR -> CONSTANTE .)
    lt              reduce using rule 125 (FACTOR -> CONSTANTE .)
    gt              reduce using rule 125 (FACTOR -> CONSTANTE .)
    ne              reduce using rule 125 (FACTOR -> CONSTANTE .)
    ge              reduce using rule 125 (FACTOR -> CONSTANTE .)
    le              reduce using rule 125 (FACTOR -> CONSTANTE .)
    et              reduce using rule 125 (FACTOR -> CONSTANTE .)


state 196

    (158) BOOLEANA -> True .

    multiply        reduce using rule 158 (BOOLEANA -> True .)
    divide          reduce using rule 158 (BOOLEANA -> True .)
    plus            reduce using rule 158 (BOOLEANA -> True .)
    minus           reduce using rule 158 (BOOLEANA -> True .)
    lt              reduce using rule 158 (BOOLEANA -> True .)
    gt              reduce using rule 158 (BOOLEANA -> True .)
    ne              reduce using rule 158 (BOOLEANA -> True .)
    ge              reduce using rule 158 (BOOLEANA -> True .)
    le              reduce using rule 158 (BOOLEANA -> True .)
    et              reduce using rule 158 (BOOLEANA -> True .)
    and             reduce using rule 158 (BOOLEANA -> True .)
    or              reduce using rule 158 (BOOLEANA -> True .)
    right_par       reduce using rule 158 (BOOLEANA -> True .)
    semicolon       reduce using rule 158 (BOOLEANA -> True .)
    comma           reduce using rule 158 (BOOLEANA -> True .)
    right_sb        reduce using rule 158 (BOOLEANA -> True .)


state 197

    (154) NUMERICA_AUX -> cteInt . nt_pushInt
    (156) nt_pushInt -> . empty
    (169) empty -> .

    multiply        reduce using rule 169 (empty -> .)
    divide          reduce using rule 169 (empty -> .)
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    lt              reduce using rule 169 (empty -> .)
    gt              reduce using rule 169 (empty -> .)
    ne              reduce using rule 169 (empty -> .)
    ge              reduce using rule 169 (empty -> .)
    le              reduce using rule 169 (empty -> .)
    et              reduce using rule 169 (empty -> .)
    and             reduce using rule 169 (empty -> .)
    or              reduce using rule 169 (empty -> .)
    right_par       reduce using rule 169 (empty -> .)
    semicolon       reduce using rule 169 (empty -> .)
    comma           reduce using rule 169 (empty -> .)
    right_sb        reduce using rule 169 (empty -> .)

    empty                          shift and go to state 241
    nt_pushInt                     shift and go to state 242

state 198

    (149) NUMERICA -> NUMERICA_AUX .

    multiply        reduce using rule 149 (NUMERICA -> NUMERICA_AUX .)
    divide          reduce using rule 149 (NUMERICA -> NUMERICA_AUX .)
    plus            reduce using rule 149 (NUMERICA -> NUMERICA_AUX .)
    minus           reduce using rule 149 (NUMERICA -> NUMERICA_AUX .)
    lt              reduce using rule 149 (NUMERICA -> NUMERICA_AUX .)
    gt              reduce using rule 149 (NUMERICA -> NUMERICA_AUX .)
    ne              reduce using rule 149 (NUMERICA -> NUMERICA_AUX .)
    ge              reduce using rule 149 (NUMERICA -> NUMERICA_AUX .)
    le              reduce using rule 149 (NUMERICA -> NUMERICA_AUX .)
    et              reduce using rule 149 (NUMERICA -> NUMERICA_AUX .)
    and             reduce using rule 149 (NUMERICA -> NUMERICA_AUX .)
    or              reduce using rule 149 (NUMERICA -> NUMERICA_AUX .)
    right_par       reduce using rule 149 (NUMERICA -> NUMERICA_AUX .)
    semicolon       reduce using rule 149 (NUMERICA -> NUMERICA_AUX .)
    comma           reduce using rule 149 (NUMERICA -> NUMERICA_AUX .)
    right_sb        reduce using rule 149 (NUMERICA -> NUMERICA_AUX .)


state 199

    (146) CONSTANTE -> NUMERICA .

    multiply        reduce using rule 146 (CONSTANTE -> NUMERICA .)
    divide          reduce using rule 146 (CONSTANTE -> NUMERICA .)
    plus            reduce using rule 146 (CONSTANTE -> NUMERICA .)
    minus           reduce using rule 146 (CONSTANTE -> NUMERICA .)
    and             reduce using rule 146 (CONSTANTE -> NUMERICA .)
    or              reduce using rule 146 (CONSTANTE -> NUMERICA .)
    right_par       reduce using rule 146 (CONSTANTE -> NUMERICA .)
    semicolon       reduce using rule 146 (CONSTANTE -> NUMERICA .)
    comma           reduce using rule 146 (CONSTANTE -> NUMERICA .)
    lt              reduce using rule 146 (CONSTANTE -> NUMERICA .)
    gt              reduce using rule 146 (CONSTANTE -> NUMERICA .)
    ne              reduce using rule 146 (CONSTANTE -> NUMERICA .)
    ge              reduce using rule 146 (CONSTANTE -> NUMERICA .)
    le              reduce using rule 146 (CONSTANTE -> NUMERICA .)
    et              reduce using rule 146 (CONSTANTE -> NUMERICA .)
    right_sb        reduce using rule 146 (CONSTANTE -> NUMERICA .)


state 200

    (119) TERMINO -> FACTOR . nt_checar_multis TERMINO_AUX
    (120) nt_checar_multis -> . empty
    (169) empty -> .

    multiply        reduce using rule 169 (empty -> .)
    divide          reduce using rule 169 (empty -> .)
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    lt              reduce using rule 169 (empty -> .)
    gt              reduce using rule 169 (empty -> .)
    ne              reduce using rule 169 (empty -> .)
    ge              reduce using rule 169 (empty -> .)
    le              reduce using rule 169 (empty -> .)
    et              reduce using rule 169 (empty -> .)
    and             reduce using rule 169 (empty -> .)
    or              reduce using rule 169 (empty -> .)
    right_par       reduce using rule 169 (empty -> .)
    semicolon       reduce using rule 169 (empty -> .)
    comma           reduce using rule 169 (empty -> .)
    right_sb        reduce using rule 169 (empty -> .)

    nt_checar_multis               shift and go to state 243
    empty                          shift and go to state 244

state 201

    (126) FACTOR -> LISTA .

    multiply        reduce using rule 126 (FACTOR -> LISTA .)
    divide          reduce using rule 126 (FACTOR -> LISTA .)
    plus            reduce using rule 126 (FACTOR -> LISTA .)
    minus           reduce using rule 126 (FACTOR -> LISTA .)
    semicolon       reduce using rule 126 (FACTOR -> LISTA .)
    and             reduce using rule 126 (FACTOR -> LISTA .)
    or              reduce using rule 126 (FACTOR -> LISTA .)
    right_par       reduce using rule 126 (FACTOR -> LISTA .)
    comma           reduce using rule 126 (FACTOR -> LISTA .)
    right_sb        reduce using rule 126 (FACTOR -> LISTA .)
    lt              reduce using rule 126 (FACTOR -> LISTA .)
    gt              reduce using rule 126 (FACTOR -> LISTA .)
    ne              reduce using rule 126 (FACTOR -> LISTA .)
    ge              reduce using rule 126 (FACTOR -> LISTA .)
    le              reduce using rule 126 (FACTOR -> LISTA .)
    et              reduce using rule 126 (FACTOR -> LISTA .)


state 202

    (151) NUMERICA -> minus . nt_sigMenos NUMERICA_AUX
    (153) nt_sigMenos -> . empty
    (169) empty -> .

    cteInt          reduce using rule 169 (empty -> .)
    cteFloat        reduce using rule 169 (empty -> .)

    nt_sigMenos                    shift and go to state 246
    empty                          shift and go to state 245

state 203

    (100) EXPRESION_NOT -> not nt_pushPOper .

    left_par        reduce using rule 100 (EXPRESION_NOT -> not nt_pushPOper .)
    id              reduce using rule 100 (EXPRESION_NOT -> not nt_pushPOper .)
    plus            reduce using rule 100 (EXPRESION_NOT -> not nt_pushPOper .)
    minus           reduce using rule 100 (EXPRESION_NOT -> not nt_pushPOper .)
    True            reduce using rule 100 (EXPRESION_NOT -> not nt_pushPOper .)
    False           reduce using rule 100 (EXPRESION_NOT -> not nt_pushPOper .)
    cteString       reduce using rule 100 (EXPRESION_NOT -> not nt_pushPOper .)
    cteInt          reduce using rule 100 (EXPRESION_NOT -> not nt_pushPOper .)
    cteFloat        reduce using rule 100 (EXPRESION_NOT -> not nt_pushPOper .)


state 204

    (143) LISTA -> id nt_verificarVarDim left_sb EXP . nt_pushVer right_sb
    (145) nt_pushVer -> . empty
    (169) empty -> .

    right_sb        reduce using rule 169 (empty -> .)

    empty                          shift and go to state 247
    nt_pushVer                     shift and go to state 248

state 205

    (92) LLAMADA -> id nt_verificaFuncIdLlamada left_par nt_pushPOper . nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub
    (138) nt_startERA -> . empty
    (169) empty -> .

    not             reduce using rule 169 (empty -> .)
    right_par       reduce using rule 169 (empty -> .)
    left_par        reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    True            reduce using rule 169 (empty -> .)
    False           reduce using rule 169 (empty -> .)
    cteString       reduce using rule 169 (empty -> .)
    cteInt          reduce using rule 169 (empty -> .)
    cteFloat        reduce using rule 169 (empty -> .)

    nt_startERA                    shift and go to state 249
    empty                          shift and go to state 250

state 206

    (90) ESCRITURA -> cwrite left_par EXPRESION nt_escribir . right_par semicolon

    right_par       shift and go to state 251


state 207

    (91) nt_escribir -> empty .

    right_par       reduce using rule 91 (nt_escribir -> empty .)


state 208

    (161) ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION . nt_checaEquals semicolon
    (162) nt_checaEquals -> . empty
    (169) empty -> .

    semicolon       reduce using rule 169 (empty -> .)

    nt_checaEquals                 shift and go to state 252
    empty                          shift and go to state 253

state 209

    (85) CICLO -> while nt_saltoLoop left_par EXPRESION . nt_checarBool right_par CUERPO nt_pushLoop
    (82) nt_checarBool -> . empty
    (169) empty -> .

    right_par       reduce using rule 169 (empty -> .)

    nt_checarBool                  shift and go to state 254
    empty                          shift and go to state 182

state 210

    (64) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .

    int             reduce using rule 64 (VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)
    float           reduce using rule 64 (VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)
    bool            reduce using rule 64 (VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)
    string          reduce using rule 64 (VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)
    void            reduce using rule 64 (VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)
    main            reduce using rule 64 (VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)


state 211

    (67) VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO id nt_agregarParametro .

    right_par       reduce using rule 67 (VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO id nt_agregarParametro .)
    comma           reduce using rule 67 (VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO id nt_agregarParametro .)


state 212

    (20) VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar .

    semicolon       reduce using rule 20 (VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar .)
    comma           reduce using rule 20 (VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar .)


state 213

    (50) CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .

    right_cb        reduce using rule 50 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    list            reduce using rule 50 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    var             reduce using rule 50 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    return          reduce using rule 50 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    if              reduce using rule 50 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    while           reduce using rule 50 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    cread           reduce using rule 50 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    cwrite          reduce using rule 50 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    id              reduce using rule 50 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)


state 214

    (42) CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio . CUERPOFUNC_ESTATUTO
    (46) CUERPOFUNC_ESTATUTO -> . ESTATUTO
    (47) CUERPOFUNC_ESTATUTO -> . empty
    (69) ESTATUTO -> . ASIGNACION
    (70) ESTATUTO -> . CONDICION
    (71) ESTATUTO -> . CICLO
    (72) ESTATUTO -> . LECTURA
    (73) ESTATUTO -> . ESCRITURA
    (74) ESTATUTO -> . LLAMADA
    (169) empty -> .
    (161) ASIGNACION -> . ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon
    (75) CONDICION -> . if CONDICION_AUX
    (85) CICLO -> . while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop
    (88) LECTURA -> . cread left_par id nt_leer right_par semicolon
    (90) ESCRITURA -> . cwrite left_par EXPRESION nt_escribir right_par semicolon
    (92) LLAMADA -> . id nt_verificaFuncIdLlamada left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub
    (163) ASIGNACION_AUX -> . id nt_pushPilaO nt_checaStruct
    (164) ASIGNACION_AUX -> . LISTA
    (143) LISTA -> . id nt_verificarVarDim left_sb EXP nt_pushVer right_sb

  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for cread resolved as shift
  ! shift/reduce conflict for cwrite resolved as shift
  ! shift/reduce conflict for id resolved as shift
    list            reduce using rule 169 (empty -> .)
    var             reduce using rule 169 (empty -> .)
    return          reduce using rule 169 (empty -> .)
    right_cb        reduce using rule 169 (empty -> .)
    if              shift and go to state 103
    while           shift and go to state 114
    cread           shift and go to state 101
    cwrite          shift and go to state 107
    id              shift and go to state 106

  ! if              [ reduce using rule 169 (empty -> .) ]
  ! while           [ reduce using rule 169 (empty -> .) ]
  ! cread           [ reduce using rule 169 (empty -> .) ]
  ! cwrite          [ reduce using rule 169 (empty -> .) ]
  ! id              [ reduce using rule 169 (empty -> .) ]

    CICLO                          shift and go to state 100
    LECTURA                        shift and go to state 102
    ESCRITURA                      shift and go to state 109
    CUERPOFUNC_ESTATUTO            shift and go to state 255
    ASIGNACION                     shift and go to state 104
    ESTATUTO                       shift and go to state 217
    ASIGNACION_AUX                 shift and go to state 108
    empty                          shift and go to state 218
    LLAMADA                        shift and go to state 111
    CONDICION                      shift and go to state 112
    LISTA                          shift and go to state 115

state 215

    (53) RETORNO -> return EXP . nt_checaRet semicolon
    (54) nt_checaRet -> . empty
    (169) empty -> .

    semicolon       reduce using rule 169 (empty -> .)

    empty                          shift and go to state 256
    nt_checaRet                    shift and go to state 257

state 216

    (41) CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .

    list            reduce using rule 41 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    var             reduce using rule 41 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    if              reduce using rule 41 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    while           reduce using rule 41 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    cread           reduce using rule 41 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    cwrite          reduce using rule 41 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    id              reduce using rule 41 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    right_cb        reduce using rule 41 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    return          reduce using rule 41 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)


state 217

    (46) CUERPOFUNC_ESTATUTO -> ESTATUTO .

    list            reduce using rule 46 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    var             reduce using rule 46 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    if              reduce using rule 46 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    while           reduce using rule 46 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    cread           reduce using rule 46 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    cwrite          reduce using rule 46 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    id              reduce using rule 46 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    return          reduce using rule 46 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    right_cb        reduce using rule 46 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)


state 218

    (47) CUERPOFUNC_ESTATUTO -> empty .

    list            reduce using rule 47 (CUERPOFUNC_ESTATUTO -> empty .)
    var             reduce using rule 47 (CUERPOFUNC_ESTATUTO -> empty .)
    if              reduce using rule 47 (CUERPOFUNC_ESTATUTO -> empty .)
    while           reduce using rule 47 (CUERPOFUNC_ESTATUTO -> empty .)
    cread           reduce using rule 47 (CUERPOFUNC_ESTATUTO -> empty .)
    cwrite          reduce using rule 47 (CUERPOFUNC_ESTATUTO -> empty .)
    id              reduce using rule 47 (CUERPOFUNC_ESTATUTO -> empty .)
    return          reduce using rule 47 (CUERPOFUNC_ESTATUTO -> empty .)
    right_cb        reduce using rule 47 (CUERPOFUNC_ESTATUTO -> empty .)


state 219

    (88) LECTURA -> cread left_par id nt_leer right_par . semicolon

    semicolon       shift and go to state 258


state 220

    (76) CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par . CUERPO ELSE_ELIF nt_pushSalto
    (33) CUERPO -> . left_cb CUERPO_AUX right_cb

    left_cb         shift and go to state 76

    CUERPO                         shift and go to state 259

state 221

    (98) EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot . EXPRESION_B
    (102) EXPRESION_B -> . and nt_pushPOper EXPRESION
    (103) EXPRESION_B -> . or nt_pushPOper EXPRESION
    (104) EXPRESION_B -> . empty
    (169) empty -> .

    and             shift and go to state 260
    or              shift and go to state 262
    right_par       reduce using rule 169 (empty -> .)
    semicolon       reduce using rule 169 (empty -> .)
    comma           reduce using rule 169 (empty -> .)

    EXPRESION_B                    shift and go to state 261
    empty                          shift and go to state 263

state 222

    (99) nt_checaAndOrNot -> empty .

    and             reduce using rule 99 (nt_checaAndOrNot -> empty .)
    or              reduce using rule 99 (nt_checaAndOrNot -> empty .)
    right_par       reduce using rule 99 (nt_checaAndOrNot -> empty .)
    semicolon       reduce using rule 99 (nt_checaAndOrNot -> empty .)
    comma           reduce using rule 99 (nt_checaAndOrNot -> empty .)


state 223

    (155) NUMERICA_AUX -> cteFloat nt_pushFloat .

    multiply        reduce using rule 155 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    divide          reduce using rule 155 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    plus            reduce using rule 155 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    minus           reduce using rule 155 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    and             reduce using rule 155 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    or              reduce using rule 155 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    right_par       reduce using rule 155 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    semicolon       reduce using rule 155 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    comma           reduce using rule 155 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    right_sb        reduce using rule 155 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    lt              reduce using rule 155 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    gt              reduce using rule 155 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    ne              reduce using rule 155 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    ge              reduce using rule 155 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    le              reduce using rule 155 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    et              reduce using rule 155 (NUMERICA_AUX -> cteFloat nt_pushFloat .)


state 224

    (157) nt_pushFloat -> empty .

    multiply        reduce using rule 157 (nt_pushFloat -> empty .)
    divide          reduce using rule 157 (nt_pushFloat -> empty .)
    plus            reduce using rule 157 (nt_pushFloat -> empty .)
    minus           reduce using rule 157 (nt_pushFloat -> empty .)
    lt              reduce using rule 157 (nt_pushFloat -> empty .)
    gt              reduce using rule 157 (nt_pushFloat -> empty .)
    ne              reduce using rule 157 (nt_pushFloat -> empty .)
    ge              reduce using rule 157 (nt_pushFloat -> empty .)
    le              reduce using rule 157 (nt_pushFloat -> empty .)
    et              reduce using rule 157 (nt_pushFloat -> empty .)
    and             reduce using rule 157 (nt_pushFloat -> empty .)
    or              reduce using rule 157 (nt_pushFloat -> empty .)
    right_par       reduce using rule 157 (nt_pushFloat -> empty .)
    semicolon       reduce using rule 157 (nt_pushFloat -> empty .)
    comma           reduce using rule 157 (nt_pushFloat -> empty .)
    right_sb        reduce using rule 157 (nt_pushFloat -> empty .)


state 225

    (109) EXPRESIONLOGICA_AUX -> ge . nt_pushPOper EXP nt_checarRelop
    (167) nt_pushPOper -> . empty
    (169) empty -> .

    left_par        reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    True            reduce using rule 169 (empty -> .)
    False           reduce using rule 169 (empty -> .)
    cteString       reduce using rule 169 (empty -> .)
    cteInt          reduce using rule 169 (empty -> .)
    cteFloat        reduce using rule 169 (empty -> .)

    empty                          shift and go to state 164
    nt_pushPOper                   shift and go to state 264

state 226

    (107) EXPRESIONLOGICA_AUX -> gt . nt_pushPOper EXP nt_checarRelop
    (167) nt_pushPOper -> . empty
    (169) empty -> .

    left_par        reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    True            reduce using rule 169 (empty -> .)
    False           reduce using rule 169 (empty -> .)
    cteString       reduce using rule 169 (empty -> .)
    cteInt          reduce using rule 169 (empty -> .)
    cteFloat        reduce using rule 169 (empty -> .)

    empty                          shift and go to state 164
    nt_pushPOper                   shift and go to state 265

state 227

    (105) EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .

    and             reduce using rule 105 (EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .)
    or              reduce using rule 105 (EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .)
    right_par       reduce using rule 105 (EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .)
    semicolon       reduce using rule 105 (EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .)
    comma           reduce using rule 105 (EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .)


state 228

    (108) EXPRESIONLOGICA_AUX -> ne . nt_pushPOper EXP nt_checarRelop
    (167) nt_pushPOper -> . empty
    (169) empty -> .

    left_par        reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    True            reduce using rule 169 (empty -> .)
    False           reduce using rule 169 (empty -> .)
    cteString       reduce using rule 169 (empty -> .)
    cteInt          reduce using rule 169 (empty -> .)
    cteFloat        reduce using rule 169 (empty -> .)

    empty                          shift and go to state 164
    nt_pushPOper                   shift and go to state 266

state 229

    (106) EXPRESIONLOGICA_AUX -> lt . nt_pushPOper EXP nt_checarRelop
    (167) nt_pushPOper -> . empty
    (169) empty -> .

    left_par        reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    True            reduce using rule 169 (empty -> .)
    False           reduce using rule 169 (empty -> .)
    cteString       reduce using rule 169 (empty -> .)
    cteInt          reduce using rule 169 (empty -> .)
    cteFloat        reduce using rule 169 (empty -> .)

    empty                          shift and go to state 164
    nt_pushPOper                   shift and go to state 267

state 230

    (110) EXPRESIONLOGICA_AUX -> le . nt_pushPOper EXP nt_checarRelop
    (167) nt_pushPOper -> . empty
    (169) empty -> .

    left_par        reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    True            reduce using rule 169 (empty -> .)
    False           reduce using rule 169 (empty -> .)
    cteString       reduce using rule 169 (empty -> .)
    cteInt          reduce using rule 169 (empty -> .)
    cteFloat        reduce using rule 169 (empty -> .)

    empty                          shift and go to state 164
    nt_pushPOper                   shift and go to state 268

state 231

    (111) EXPRESIONLOGICA_AUX -> et . nt_pushPOper EXP nt_checarRelop
    (167) nt_pushPOper -> . empty
    (169) empty -> .

    left_par        reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    True            reduce using rule 169 (empty -> .)
    False           reduce using rule 169 (empty -> .)
    cteString       reduce using rule 169 (empty -> .)
    cteInt          reduce using rule 169 (empty -> .)
    cteFloat        reduce using rule 169 (empty -> .)

    empty                          shift and go to state 164
    nt_pushPOper                   shift and go to state 269

state 232

    (112) EXPRESIONLOGICA_AUX -> empty .

    and             reduce using rule 112 (EXPRESIONLOGICA_AUX -> empty .)
    or              reduce using rule 112 (EXPRESIONLOGICA_AUX -> empty .)
    right_par       reduce using rule 112 (EXPRESIONLOGICA_AUX -> empty .)
    semicolon       reduce using rule 112 (EXPRESIONLOGICA_AUX -> empty .)
    comma           reduce using rule 112 (EXPRESIONLOGICA_AUX -> empty .)


state 233

    (144) nt_verificarVarDim -> empty .
    (166) nt_pushPilaO -> empty .
    (131) nt_verificaFuncId -> empty .

    left_sb         reduce using rule 144 (nt_verificarVarDim -> empty .)
    multiply        reduce using rule 166 (nt_pushPilaO -> empty .)
    divide          reduce using rule 166 (nt_pushPilaO -> empty .)
    plus            reduce using rule 166 (nt_pushPilaO -> empty .)
    minus           reduce using rule 166 (nt_pushPilaO -> empty .)
    lt              reduce using rule 166 (nt_pushPilaO -> empty .)
    gt              reduce using rule 166 (nt_pushPilaO -> empty .)
    ne              reduce using rule 166 (nt_pushPilaO -> empty .)
    ge              reduce using rule 166 (nt_pushPilaO -> empty .)
    le              reduce using rule 166 (nt_pushPilaO -> empty .)
    et              reduce using rule 166 (nt_pushPilaO -> empty .)
    and             reduce using rule 166 (nt_pushPilaO -> empty .)
    or              reduce using rule 166 (nt_pushPilaO -> empty .)
    right_par       reduce using rule 166 (nt_pushPilaO -> empty .)
    semicolon       reduce using rule 166 (nt_pushPilaO -> empty .)
    comma           reduce using rule 166 (nt_pushPilaO -> empty .)
    right_sb        reduce using rule 166 (nt_pushPilaO -> empty .)
    left_par        reduce using rule 131 (nt_verificaFuncId -> empty .)


state 234

    (128) FACTOR_AUX -> id nt_pushPilaO . nt_verificaVar
    (130) nt_verificaVar -> . empty
    (169) empty -> .

    multiply        reduce using rule 169 (empty -> .)
    divide          reduce using rule 169 (empty -> .)
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    lt              reduce using rule 169 (empty -> .)
    gt              reduce using rule 169 (empty -> .)
    ne              reduce using rule 169 (empty -> .)
    ge              reduce using rule 169 (empty -> .)
    le              reduce using rule 169 (empty -> .)
    et              reduce using rule 169 (empty -> .)
    and             reduce using rule 169 (empty -> .)
    or              reduce using rule 169 (empty -> .)
    right_par       reduce using rule 169 (empty -> .)
    semicolon       reduce using rule 169 (empty -> .)
    comma           reduce using rule 169 (empty -> .)
    right_sb        reduce using rule 169 (empty -> .)

    empty                          shift and go to state 270
    nt_verificaVar                 shift and go to state 271

state 235

    (129) FACTOR_AUX -> id nt_verificaFuncId . LLAMADA_F
    (132) LLAMADA_F -> . left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet

    left_par        shift and go to state 272

    LLAMADA_F                      shift and go to state 273

state 236

    (150) NUMERICA -> plus nt_sigMas . NUMERICA_AUX
    (154) NUMERICA_AUX -> . cteInt nt_pushInt
    (155) NUMERICA_AUX -> . cteFloat nt_pushFloat

    cteInt          shift and go to state 197
    cteFloat        shift and go to state 184

    NUMERICA_AUX                   shift and go to state 274

state 237

    (152) nt_sigMas -> empty .

    cteInt          reduce using rule 152 (nt_sigMas -> empty .)
    cteFloat        reduce using rule 152 (nt_sigMas -> empty .)


state 238

    (115) nt_checar_sumas -> empty .

    plus            reduce using rule 115 (nt_checar_sumas -> empty .)
    minus           reduce using rule 115 (nt_checar_sumas -> empty .)
    lt              reduce using rule 115 (nt_checar_sumas -> empty .)
    gt              reduce using rule 115 (nt_checar_sumas -> empty .)
    ne              reduce using rule 115 (nt_checar_sumas -> empty .)
    ge              reduce using rule 115 (nt_checar_sumas -> empty .)
    le              reduce using rule 115 (nt_checar_sumas -> empty .)
    et              reduce using rule 115 (nt_checar_sumas -> empty .)
    and             reduce using rule 115 (nt_checar_sumas -> empty .)
    or              reduce using rule 115 (nt_checar_sumas -> empty .)
    right_par       reduce using rule 115 (nt_checar_sumas -> empty .)
    semicolon       reduce using rule 115 (nt_checar_sumas -> empty .)
    comma           reduce using rule 115 (nt_checar_sumas -> empty .)
    right_sb        reduce using rule 115 (nt_checar_sumas -> empty .)


state 239

    (114) EXP -> TERMINO nt_checar_sumas . EXP_AUX
    (116) EXP_AUX -> . plus nt_pushPOper EXP
    (117) EXP_AUX -> . minus nt_pushPOper EXP
    (118) EXP_AUX -> . empty
    (169) empty -> .

    plus            shift and go to state 277
    minus           shift and go to state 275
    lt              reduce using rule 169 (empty -> .)
    gt              reduce using rule 169 (empty -> .)
    ne              reduce using rule 169 (empty -> .)
    ge              reduce using rule 169 (empty -> .)
    le              reduce using rule 169 (empty -> .)
    et              reduce using rule 169 (empty -> .)
    and             reduce using rule 169 (empty -> .)
    or              reduce using rule 169 (empty -> .)
    right_par       reduce using rule 169 (empty -> .)
    semicolon       reduce using rule 169 (empty -> .)
    comma           reduce using rule 169 (empty -> .)
    right_sb        reduce using rule 169 (empty -> .)

    EXP_AUX                        shift and go to state 278
    empty                          shift and go to state 276

state 240

    (124) FACTOR -> left_par nt_pushPOper . EXPRESION right_par nt_popPOper
    (98) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (100) EXPRESION_NOT -> . not nt_pushPOper
    (101) EXPRESION_NOT -> . empty
    (169) empty -> .

    not             shift and go to state 157
    left_par        reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    True            reduce using rule 169 (empty -> .)
    False           reduce using rule 169 (empty -> .)
    cteString       reduce using rule 169 (empty -> .)
    cteInt          reduce using rule 169 (empty -> .)
    cteFloat        reduce using rule 169 (empty -> .)

    EXPRESION                      shift and go to state 279
    EXPRESION_NOT                  shift and go to state 156
    empty                          shift and go to state 158

state 241

    (156) nt_pushInt -> empty .

    multiply        reduce using rule 156 (nt_pushInt -> empty .)
    divide          reduce using rule 156 (nt_pushInt -> empty .)
    plus            reduce using rule 156 (nt_pushInt -> empty .)
    minus           reduce using rule 156 (nt_pushInt -> empty .)
    lt              reduce using rule 156 (nt_pushInt -> empty .)
    gt              reduce using rule 156 (nt_pushInt -> empty .)
    ne              reduce using rule 156 (nt_pushInt -> empty .)
    ge              reduce using rule 156 (nt_pushInt -> empty .)
    le              reduce using rule 156 (nt_pushInt -> empty .)
    et              reduce using rule 156 (nt_pushInt -> empty .)
    and             reduce using rule 156 (nt_pushInt -> empty .)
    or              reduce using rule 156 (nt_pushInt -> empty .)
    right_par       reduce using rule 156 (nt_pushInt -> empty .)
    semicolon       reduce using rule 156 (nt_pushInt -> empty .)
    comma           reduce using rule 156 (nt_pushInt -> empty .)
    right_sb        reduce using rule 156 (nt_pushInt -> empty .)


state 242

    (154) NUMERICA_AUX -> cteInt nt_pushInt .

    multiply        reduce using rule 154 (NUMERICA_AUX -> cteInt nt_pushInt .)
    divide          reduce using rule 154 (NUMERICA_AUX -> cteInt nt_pushInt .)
    plus            reduce using rule 154 (NUMERICA_AUX -> cteInt nt_pushInt .)
    minus           reduce using rule 154 (NUMERICA_AUX -> cteInt nt_pushInt .)
    and             reduce using rule 154 (NUMERICA_AUX -> cteInt nt_pushInt .)
    or              reduce using rule 154 (NUMERICA_AUX -> cteInt nt_pushInt .)
    right_par       reduce using rule 154 (NUMERICA_AUX -> cteInt nt_pushInt .)
    semicolon       reduce using rule 154 (NUMERICA_AUX -> cteInt nt_pushInt .)
    comma           reduce using rule 154 (NUMERICA_AUX -> cteInt nt_pushInt .)
    right_sb        reduce using rule 154 (NUMERICA_AUX -> cteInt nt_pushInt .)
    lt              reduce using rule 154 (NUMERICA_AUX -> cteInt nt_pushInt .)
    gt              reduce using rule 154 (NUMERICA_AUX -> cteInt nt_pushInt .)
    ne              reduce using rule 154 (NUMERICA_AUX -> cteInt nt_pushInt .)
    ge              reduce using rule 154 (NUMERICA_AUX -> cteInt nt_pushInt .)
    le              reduce using rule 154 (NUMERICA_AUX -> cteInt nt_pushInt .)
    et              reduce using rule 154 (NUMERICA_AUX -> cteInt nt_pushInt .)


state 243

    (119) TERMINO -> FACTOR nt_checar_multis . TERMINO_AUX
    (121) TERMINO_AUX -> . multiply nt_pushPOper TERMINO
    (122) TERMINO_AUX -> . divide nt_pushPOper TERMINO
    (123) TERMINO_AUX -> . empty
    (169) empty -> .

    multiply        shift and go to state 282
    divide          shift and go to state 281
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    lt              reduce using rule 169 (empty -> .)
    gt              reduce using rule 169 (empty -> .)
    ne              reduce using rule 169 (empty -> .)
    ge              reduce using rule 169 (empty -> .)
    le              reduce using rule 169 (empty -> .)
    et              reduce using rule 169 (empty -> .)
    and             reduce using rule 169 (empty -> .)
    or              reduce using rule 169 (empty -> .)
    right_par       reduce using rule 169 (empty -> .)
    semicolon       reduce using rule 169 (empty -> .)
    comma           reduce using rule 169 (empty -> .)
    right_sb        reduce using rule 169 (empty -> .)

    TERMINO_AUX                    shift and go to state 280
    empty                          shift and go to state 283

state 244

    (120) nt_checar_multis -> empty .

    multiply        reduce using rule 120 (nt_checar_multis -> empty .)
    divide          reduce using rule 120 (nt_checar_multis -> empty .)
    plus            reduce using rule 120 (nt_checar_multis -> empty .)
    minus           reduce using rule 120 (nt_checar_multis -> empty .)
    lt              reduce using rule 120 (nt_checar_multis -> empty .)
    gt              reduce using rule 120 (nt_checar_multis -> empty .)
    ne              reduce using rule 120 (nt_checar_multis -> empty .)
    ge              reduce using rule 120 (nt_checar_multis -> empty .)
    le              reduce using rule 120 (nt_checar_multis -> empty .)
    et              reduce using rule 120 (nt_checar_multis -> empty .)
    and             reduce using rule 120 (nt_checar_multis -> empty .)
    or              reduce using rule 120 (nt_checar_multis -> empty .)
    right_par       reduce using rule 120 (nt_checar_multis -> empty .)
    semicolon       reduce using rule 120 (nt_checar_multis -> empty .)
    comma           reduce using rule 120 (nt_checar_multis -> empty .)
    right_sb        reduce using rule 120 (nt_checar_multis -> empty .)


state 245

    (153) nt_sigMenos -> empty .

    cteInt          reduce using rule 153 (nt_sigMenos -> empty .)
    cteFloat        reduce using rule 153 (nt_sigMenos -> empty .)


state 246

    (151) NUMERICA -> minus nt_sigMenos . NUMERICA_AUX
    (154) NUMERICA_AUX -> . cteInt nt_pushInt
    (155) NUMERICA_AUX -> . cteFloat nt_pushFloat

    cteInt          shift and go to state 197
    cteFloat        shift and go to state 184

    NUMERICA_AUX                   shift and go to state 284

state 247

    (145) nt_pushVer -> empty .

    right_sb        reduce using rule 145 (nt_pushVer -> empty .)


state 248

    (143) LISTA -> id nt_verificarVarDim left_sb EXP nt_pushVer . right_sb

    right_sb        shift and go to state 285


state 249

    (92) LLAMADA -> id nt_verificaFuncIdLlamada left_par nt_pushPOper nt_startERA . LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub
    (94) LLAMADA_EXPRESION -> . LLAMADA_EXPRESION_AUX
    (95) LLAMADA_EXPRESION -> . empty
    (96) LLAMADA_EXPRESION_AUX -> . EXPRESION nt_verifyArgType
    (97) LLAMADA_EXPRESION_AUX -> . LLAMADA_EXPRESION_AUX comma nt_paramPP EXPRESION nt_verifyArgType
    (169) empty -> .
    (98) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (100) EXPRESION_NOT -> . not nt_pushPOper
    (101) EXPRESION_NOT -> . empty

    right_par       reduce using rule 169 (empty -> .)
    left_par        reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    True            reduce using rule 169 (empty -> .)
    False           reduce using rule 169 (empty -> .)
    cteString       reduce using rule 169 (empty -> .)
    cteInt          reduce using rule 169 (empty -> .)
    cteFloat        reduce using rule 169 (empty -> .)
    not             shift and go to state 157

    EXPRESION                      shift and go to state 286
    EXPRESION_NOT                  shift and go to state 156
    LLAMADA_EXPRESION              shift and go to state 287
    LLAMADA_EXPRESION_AUX          shift and go to state 289
    empty                          shift and go to state 288

state 250

    (138) nt_startERA -> empty .

    not             reduce using rule 138 (nt_startERA -> empty .)
    right_par       reduce using rule 138 (nt_startERA -> empty .)
    left_par        reduce using rule 138 (nt_startERA -> empty .)
    id              reduce using rule 138 (nt_startERA -> empty .)
    plus            reduce using rule 138 (nt_startERA -> empty .)
    minus           reduce using rule 138 (nt_startERA -> empty .)
    True            reduce using rule 138 (nt_startERA -> empty .)
    False           reduce using rule 138 (nt_startERA -> empty .)
    cteString       reduce using rule 138 (nt_startERA -> empty .)
    cteInt          reduce using rule 138 (nt_startERA -> empty .)
    cteFloat        reduce using rule 138 (nt_startERA -> empty .)


state 251

    (90) ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par . semicolon

    semicolon       shift and go to state 290


state 252

    (161) ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals . semicolon

    semicolon       shift and go to state 291


state 253

    (162) nt_checaEquals -> empty .

    semicolon       reduce using rule 162 (nt_checaEquals -> empty .)


state 254

    (85) CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool . right_par CUERPO nt_pushLoop

    right_par       shift and go to state 292


state 255

    (42) CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .

    list            reduce using rule 42 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    var             reduce using rule 42 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    if              reduce using rule 42 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    while           reduce using rule 42 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    cread           reduce using rule 42 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    cwrite          reduce using rule 42 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    id              reduce using rule 42 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    right_cb        reduce using rule 42 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    return          reduce using rule 42 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)


state 256

    (54) nt_checaRet -> empty .

    semicolon       reduce using rule 54 (nt_checaRet -> empty .)


state 257

    (53) RETORNO -> return EXP nt_checaRet . semicolon

    semicolon       shift and go to state 293


state 258

    (88) LECTURA -> cread left_par id nt_leer right_par semicolon .

    right_cb        reduce using rule 88 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    list            reduce using rule 88 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    var             reduce using rule 88 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    if              reduce using rule 88 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    while           reduce using rule 88 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    cread           reduce using rule 88 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    cwrite          reduce using rule 88 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    id              reduce using rule 88 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    return          reduce using rule 88 (LECTURA -> cread left_par id nt_leer right_par semicolon .)


state 259

    (76) CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO . ELSE_ELIF nt_pushSalto
    (77) ELSE_ELIF -> . ELSE
    (78) ELSE_ELIF -> . ELIF
    (79) ELSE_ELIF -> . empty
    (80) ELSE -> . else nt_pushElse CUERPO
    (81) ELIF -> . elseif nt_pushElse CONDICION_AUX
    (169) empty -> .

    else            shift and go to state 298
    elseif          shift and go to state 297
    right_cb        reduce using rule 169 (empty -> .)
    list            reduce using rule 169 (empty -> .)
    var             reduce using rule 169 (empty -> .)
    if              reduce using rule 169 (empty -> .)
    while           reduce using rule 169 (empty -> .)
    cread           reduce using rule 169 (empty -> .)
    cwrite          reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    return          reduce using rule 169 (empty -> .)

    ELIF                           shift and go to state 295
    ELSE_ELIF                      shift and go to state 294
    ELSE                           shift and go to state 296
    empty                          shift and go to state 299

state 260

    (102) EXPRESION_B -> and . nt_pushPOper EXPRESION
    (167) nt_pushPOper -> . empty
    (169) empty -> .

    not             reduce using rule 169 (empty -> .)
    left_par        reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    True            reduce using rule 169 (empty -> .)
    False           reduce using rule 169 (empty -> .)
    cteString       reduce using rule 169 (empty -> .)
    cteInt          reduce using rule 169 (empty -> .)
    cteFloat        reduce using rule 169 (empty -> .)

    empty                          shift and go to state 164
    nt_pushPOper                   shift and go to state 300

state 261

    (98) EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B .

    comma           reduce using rule 98 (EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B .)
    right_par       reduce using rule 98 (EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B .)
    semicolon       reduce using rule 98 (EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B .)


state 262

    (103) EXPRESION_B -> or . nt_pushPOper EXPRESION
    (167) nt_pushPOper -> . empty
    (169) empty -> .

    not             reduce using rule 169 (empty -> .)
    left_par        reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    True            reduce using rule 169 (empty -> .)
    False           reduce using rule 169 (empty -> .)
    cteString       reduce using rule 169 (empty -> .)
    cteInt          reduce using rule 169 (empty -> .)
    cteFloat        reduce using rule 169 (empty -> .)

    empty                          shift and go to state 164
    nt_pushPOper                   shift and go to state 301

state 263

    (104) EXPRESION_B -> empty .

    right_par       reduce using rule 104 (EXPRESION_B -> empty .)
    semicolon       reduce using rule 104 (EXPRESION_B -> empty .)
    comma           reduce using rule 104 (EXPRESION_B -> empty .)


state 264

    (109) EXPRESIONLOGICA_AUX -> ge nt_pushPOper . EXP nt_checarRelop
    (114) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (119) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (124) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (125) FACTOR -> . CONSTANTE
    (126) FACTOR -> . LISTA
    (127) FACTOR -> . FACTOR_AUX
    (146) CONSTANTE -> . NUMERICA
    (147) CONSTANTE -> . BOOLEANA
    (148) CONSTANTE -> . STRINGS
    (143) LISTA -> . id nt_verificarVarDim left_sb EXP nt_pushVer right_sb
    (128) FACTOR_AUX -> . id nt_pushPilaO nt_verificaVar
    (129) FACTOR_AUX -> . id nt_verificaFuncId LLAMADA_F
    (149) NUMERICA -> . NUMERICA_AUX
    (150) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (151) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (158) BOOLEANA -> . True
    (159) BOOLEANA -> . False
    (160) STRINGS -> . cteString
    (154) NUMERICA_AUX -> . cteInt nt_pushInt
    (155) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 192
    id              shift and go to state 187
    plus            shift and go to state 188
    minus           shift and go to state 202
    True            shift and go to state 196
    False           shift and go to state 194
    cteString       shift and go to state 191
    cteInt          shift and go to state 197
    cteFloat        shift and go to state 184

    BOOLEANA                       shift and go to state 185
    EXP                            shift and go to state 302
    FACTOR_AUX                     shift and go to state 189
    TERMINO                        shift and go to state 190
    STRINGS                        shift and go to state 193
    CONSTANTE                      shift and go to state 195
    NUMERICA_AUX                   shift and go to state 198
    NUMERICA                       shift and go to state 199
    FACTOR                         shift and go to state 200
    LISTA                          shift and go to state 201

state 265

    (107) EXPRESIONLOGICA_AUX -> gt nt_pushPOper . EXP nt_checarRelop
    (114) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (119) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (124) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (125) FACTOR -> . CONSTANTE
    (126) FACTOR -> . LISTA
    (127) FACTOR -> . FACTOR_AUX
    (146) CONSTANTE -> . NUMERICA
    (147) CONSTANTE -> . BOOLEANA
    (148) CONSTANTE -> . STRINGS
    (143) LISTA -> . id nt_verificarVarDim left_sb EXP nt_pushVer right_sb
    (128) FACTOR_AUX -> . id nt_pushPilaO nt_verificaVar
    (129) FACTOR_AUX -> . id nt_verificaFuncId LLAMADA_F
    (149) NUMERICA -> . NUMERICA_AUX
    (150) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (151) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (158) BOOLEANA -> . True
    (159) BOOLEANA -> . False
    (160) STRINGS -> . cteString
    (154) NUMERICA_AUX -> . cteInt nt_pushInt
    (155) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 192
    id              shift and go to state 187
    plus            shift and go to state 188
    minus           shift and go to state 202
    True            shift and go to state 196
    False           shift and go to state 194
    cteString       shift and go to state 191
    cteInt          shift and go to state 197
    cteFloat        shift and go to state 184

    BOOLEANA                       shift and go to state 185
    EXP                            shift and go to state 303
    FACTOR_AUX                     shift and go to state 189
    TERMINO                        shift and go to state 190
    STRINGS                        shift and go to state 193
    CONSTANTE                      shift and go to state 195
    NUMERICA_AUX                   shift and go to state 198
    NUMERICA                       shift and go to state 199
    FACTOR                         shift and go to state 200
    LISTA                          shift and go to state 201

state 266

    (108) EXPRESIONLOGICA_AUX -> ne nt_pushPOper . EXP nt_checarRelop
    (114) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (119) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (124) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (125) FACTOR -> . CONSTANTE
    (126) FACTOR -> . LISTA
    (127) FACTOR -> . FACTOR_AUX
    (146) CONSTANTE -> . NUMERICA
    (147) CONSTANTE -> . BOOLEANA
    (148) CONSTANTE -> . STRINGS
    (143) LISTA -> . id nt_verificarVarDim left_sb EXP nt_pushVer right_sb
    (128) FACTOR_AUX -> . id nt_pushPilaO nt_verificaVar
    (129) FACTOR_AUX -> . id nt_verificaFuncId LLAMADA_F
    (149) NUMERICA -> . NUMERICA_AUX
    (150) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (151) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (158) BOOLEANA -> . True
    (159) BOOLEANA -> . False
    (160) STRINGS -> . cteString
    (154) NUMERICA_AUX -> . cteInt nt_pushInt
    (155) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 192
    id              shift and go to state 187
    plus            shift and go to state 188
    minus           shift and go to state 202
    True            shift and go to state 196
    False           shift and go to state 194
    cteString       shift and go to state 191
    cteInt          shift and go to state 197
    cteFloat        shift and go to state 184

    BOOLEANA                       shift and go to state 185
    EXP                            shift and go to state 304
    FACTOR_AUX                     shift and go to state 189
    TERMINO                        shift and go to state 190
    STRINGS                        shift and go to state 193
    CONSTANTE                      shift and go to state 195
    NUMERICA_AUX                   shift and go to state 198
    NUMERICA                       shift and go to state 199
    FACTOR                         shift and go to state 200
    LISTA                          shift and go to state 201

state 267

    (106) EXPRESIONLOGICA_AUX -> lt nt_pushPOper . EXP nt_checarRelop
    (114) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (119) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (124) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (125) FACTOR -> . CONSTANTE
    (126) FACTOR -> . LISTA
    (127) FACTOR -> . FACTOR_AUX
    (146) CONSTANTE -> . NUMERICA
    (147) CONSTANTE -> . BOOLEANA
    (148) CONSTANTE -> . STRINGS
    (143) LISTA -> . id nt_verificarVarDim left_sb EXP nt_pushVer right_sb
    (128) FACTOR_AUX -> . id nt_pushPilaO nt_verificaVar
    (129) FACTOR_AUX -> . id nt_verificaFuncId LLAMADA_F
    (149) NUMERICA -> . NUMERICA_AUX
    (150) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (151) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (158) BOOLEANA -> . True
    (159) BOOLEANA -> . False
    (160) STRINGS -> . cteString
    (154) NUMERICA_AUX -> . cteInt nt_pushInt
    (155) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 192
    id              shift and go to state 187
    plus            shift and go to state 188
    minus           shift and go to state 202
    True            shift and go to state 196
    False           shift and go to state 194
    cteString       shift and go to state 191
    cteInt          shift and go to state 197
    cteFloat        shift and go to state 184

    BOOLEANA                       shift and go to state 185
    EXP                            shift and go to state 305
    FACTOR_AUX                     shift and go to state 189
    TERMINO                        shift and go to state 190
    STRINGS                        shift and go to state 193
    CONSTANTE                      shift and go to state 195
    NUMERICA_AUX                   shift and go to state 198
    NUMERICA                       shift and go to state 199
    FACTOR                         shift and go to state 200
    LISTA                          shift and go to state 201

state 268

    (110) EXPRESIONLOGICA_AUX -> le nt_pushPOper . EXP nt_checarRelop
    (114) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (119) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (124) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (125) FACTOR -> . CONSTANTE
    (126) FACTOR -> . LISTA
    (127) FACTOR -> . FACTOR_AUX
    (146) CONSTANTE -> . NUMERICA
    (147) CONSTANTE -> . BOOLEANA
    (148) CONSTANTE -> . STRINGS
    (143) LISTA -> . id nt_verificarVarDim left_sb EXP nt_pushVer right_sb
    (128) FACTOR_AUX -> . id nt_pushPilaO nt_verificaVar
    (129) FACTOR_AUX -> . id nt_verificaFuncId LLAMADA_F
    (149) NUMERICA -> . NUMERICA_AUX
    (150) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (151) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (158) BOOLEANA -> . True
    (159) BOOLEANA -> . False
    (160) STRINGS -> . cteString
    (154) NUMERICA_AUX -> . cteInt nt_pushInt
    (155) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 192
    id              shift and go to state 187
    plus            shift and go to state 188
    minus           shift and go to state 202
    True            shift and go to state 196
    False           shift and go to state 194
    cteString       shift and go to state 191
    cteInt          shift and go to state 197
    cteFloat        shift and go to state 184

    BOOLEANA                       shift and go to state 185
    EXP                            shift and go to state 306
    FACTOR_AUX                     shift and go to state 189
    TERMINO                        shift and go to state 190
    STRINGS                        shift and go to state 193
    CONSTANTE                      shift and go to state 195
    NUMERICA_AUX                   shift and go to state 198
    NUMERICA                       shift and go to state 199
    FACTOR                         shift and go to state 200
    LISTA                          shift and go to state 201

state 269

    (111) EXPRESIONLOGICA_AUX -> et nt_pushPOper . EXP nt_checarRelop
    (114) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (119) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (124) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (125) FACTOR -> . CONSTANTE
    (126) FACTOR -> . LISTA
    (127) FACTOR -> . FACTOR_AUX
    (146) CONSTANTE -> . NUMERICA
    (147) CONSTANTE -> . BOOLEANA
    (148) CONSTANTE -> . STRINGS
    (143) LISTA -> . id nt_verificarVarDim left_sb EXP nt_pushVer right_sb
    (128) FACTOR_AUX -> . id nt_pushPilaO nt_verificaVar
    (129) FACTOR_AUX -> . id nt_verificaFuncId LLAMADA_F
    (149) NUMERICA -> . NUMERICA_AUX
    (150) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (151) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (158) BOOLEANA -> . True
    (159) BOOLEANA -> . False
    (160) STRINGS -> . cteString
    (154) NUMERICA_AUX -> . cteInt nt_pushInt
    (155) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 192
    id              shift and go to state 187
    plus            shift and go to state 188
    minus           shift and go to state 202
    True            shift and go to state 196
    False           shift and go to state 194
    cteString       shift and go to state 191
    cteInt          shift and go to state 197
    cteFloat        shift and go to state 184

    BOOLEANA                       shift and go to state 185
    EXP                            shift and go to state 307
    FACTOR_AUX                     shift and go to state 189
    TERMINO                        shift and go to state 190
    STRINGS                        shift and go to state 193
    CONSTANTE                      shift and go to state 195
    NUMERICA_AUX                   shift and go to state 198
    NUMERICA                       shift and go to state 199
    FACTOR                         shift and go to state 200
    LISTA                          shift and go to state 201

state 270

    (130) nt_verificaVar -> empty .

    multiply        reduce using rule 130 (nt_verificaVar -> empty .)
    divide          reduce using rule 130 (nt_verificaVar -> empty .)
    plus            reduce using rule 130 (nt_verificaVar -> empty .)
    minus           reduce using rule 130 (nt_verificaVar -> empty .)
    lt              reduce using rule 130 (nt_verificaVar -> empty .)
    gt              reduce using rule 130 (nt_verificaVar -> empty .)
    ne              reduce using rule 130 (nt_verificaVar -> empty .)
    ge              reduce using rule 130 (nt_verificaVar -> empty .)
    le              reduce using rule 130 (nt_verificaVar -> empty .)
    et              reduce using rule 130 (nt_verificaVar -> empty .)
    and             reduce using rule 130 (nt_verificaVar -> empty .)
    or              reduce using rule 130 (nt_verificaVar -> empty .)
    right_par       reduce using rule 130 (nt_verificaVar -> empty .)
    semicolon       reduce using rule 130 (nt_verificaVar -> empty .)
    comma           reduce using rule 130 (nt_verificaVar -> empty .)
    right_sb        reduce using rule 130 (nt_verificaVar -> empty .)


state 271

    (128) FACTOR_AUX -> id nt_pushPilaO nt_verificaVar .

    multiply        reduce using rule 128 (FACTOR_AUX -> id nt_pushPilaO nt_verificaVar .)
    divide          reduce using rule 128 (FACTOR_AUX -> id nt_pushPilaO nt_verificaVar .)
    plus            reduce using rule 128 (FACTOR_AUX -> id nt_pushPilaO nt_verificaVar .)
    minus           reduce using rule 128 (FACTOR_AUX -> id nt_pushPilaO nt_verificaVar .)
    and             reduce using rule 128 (FACTOR_AUX -> id nt_pushPilaO nt_verificaVar .)
    or              reduce using rule 128 (FACTOR_AUX -> id nt_pushPilaO nt_verificaVar .)
    right_par       reduce using rule 128 (FACTOR_AUX -> id nt_pushPilaO nt_verificaVar .)
    semicolon       reduce using rule 128 (FACTOR_AUX -> id nt_pushPilaO nt_verificaVar .)
    comma           reduce using rule 128 (FACTOR_AUX -> id nt_pushPilaO nt_verificaVar .)
    right_sb        reduce using rule 128 (FACTOR_AUX -> id nt_pushPilaO nt_verificaVar .)
    lt              reduce using rule 128 (FACTOR_AUX -> id nt_pushPilaO nt_verificaVar .)
    gt              reduce using rule 128 (FACTOR_AUX -> id nt_pushPilaO nt_verificaVar .)
    ne              reduce using rule 128 (FACTOR_AUX -> id nt_pushPilaO nt_verificaVar .)
    ge              reduce using rule 128 (FACTOR_AUX -> id nt_pushPilaO nt_verificaVar .)
    le              reduce using rule 128 (FACTOR_AUX -> id nt_pushPilaO nt_verificaVar .)
    et              reduce using rule 128 (FACTOR_AUX -> id nt_pushPilaO nt_verificaVar .)


state 272

    (132) LLAMADA_F -> left_par . nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet
    (167) nt_pushPOper -> . empty
    (169) empty -> .

    not             reduce using rule 169 (empty -> .)
    right_par       reduce using rule 169 (empty -> .)
    left_par        reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    True            reduce using rule 169 (empty -> .)
    False           reduce using rule 169 (empty -> .)
    cteString       reduce using rule 169 (empty -> .)
    cteInt          reduce using rule 169 (empty -> .)
    cteFloat        reduce using rule 169 (empty -> .)

    empty                          shift and go to state 164
    nt_pushPOper                   shift and go to state 308

state 273

    (129) FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .

    multiply        reduce using rule 129 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    divide          reduce using rule 129 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    plus            reduce using rule 129 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    minus           reduce using rule 129 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    and             reduce using rule 129 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    or              reduce using rule 129 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    right_par       reduce using rule 129 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    semicolon       reduce using rule 129 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    comma           reduce using rule 129 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    right_sb        reduce using rule 129 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    lt              reduce using rule 129 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    gt              reduce using rule 129 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    ne              reduce using rule 129 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    ge              reduce using rule 129 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    le              reduce using rule 129 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    et              reduce using rule 129 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)


state 274

    (150) NUMERICA -> plus nt_sigMas NUMERICA_AUX .

    multiply        reduce using rule 150 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    divide          reduce using rule 150 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    plus            reduce using rule 150 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    minus           reduce using rule 150 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    lt              reduce using rule 150 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    gt              reduce using rule 150 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    ne              reduce using rule 150 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    ge              reduce using rule 150 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    le              reduce using rule 150 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    et              reduce using rule 150 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    and             reduce using rule 150 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    or              reduce using rule 150 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    right_par       reduce using rule 150 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    semicolon       reduce using rule 150 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    comma           reduce using rule 150 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    right_sb        reduce using rule 150 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)


state 275

    (117) EXP_AUX -> minus . nt_pushPOper EXP
    (167) nt_pushPOper -> . empty
    (169) empty -> .

    left_par        reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    True            reduce using rule 169 (empty -> .)
    False           reduce using rule 169 (empty -> .)
    cteString       reduce using rule 169 (empty -> .)
    cteInt          reduce using rule 169 (empty -> .)
    cteFloat        reduce using rule 169 (empty -> .)

    empty                          shift and go to state 164
    nt_pushPOper                   shift and go to state 309

state 276

    (118) EXP_AUX -> empty .

    lt              reduce using rule 118 (EXP_AUX -> empty .)
    gt              reduce using rule 118 (EXP_AUX -> empty .)
    ne              reduce using rule 118 (EXP_AUX -> empty .)
    ge              reduce using rule 118 (EXP_AUX -> empty .)
    le              reduce using rule 118 (EXP_AUX -> empty .)
    et              reduce using rule 118 (EXP_AUX -> empty .)
    and             reduce using rule 118 (EXP_AUX -> empty .)
    or              reduce using rule 118 (EXP_AUX -> empty .)
    right_par       reduce using rule 118 (EXP_AUX -> empty .)
    semicolon       reduce using rule 118 (EXP_AUX -> empty .)
    comma           reduce using rule 118 (EXP_AUX -> empty .)
    right_sb        reduce using rule 118 (EXP_AUX -> empty .)


state 277

    (116) EXP_AUX -> plus . nt_pushPOper EXP
    (167) nt_pushPOper -> . empty
    (169) empty -> .

    left_par        reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    True            reduce using rule 169 (empty -> .)
    False           reduce using rule 169 (empty -> .)
    cteString       reduce using rule 169 (empty -> .)
    cteInt          reduce using rule 169 (empty -> .)
    cteFloat        reduce using rule 169 (empty -> .)

    empty                          shift and go to state 164
    nt_pushPOper                   shift and go to state 310

state 278

    (114) EXP -> TERMINO nt_checar_sumas EXP_AUX .

    and             reduce using rule 114 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    or              reduce using rule 114 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    right_par       reduce using rule 114 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    semicolon       reduce using rule 114 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    comma           reduce using rule 114 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    lt              reduce using rule 114 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    gt              reduce using rule 114 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    ne              reduce using rule 114 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    ge              reduce using rule 114 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    le              reduce using rule 114 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    et              reduce using rule 114 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    right_sb        reduce using rule 114 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)


state 279

    (124) FACTOR -> left_par nt_pushPOper EXPRESION . right_par nt_popPOper

    right_par       shift and go to state 311


state 280

    (119) TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .

    plus            reduce using rule 119 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    minus           reduce using rule 119 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    lt              reduce using rule 119 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    gt              reduce using rule 119 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    ne              reduce using rule 119 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    ge              reduce using rule 119 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    le              reduce using rule 119 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    et              reduce using rule 119 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    and             reduce using rule 119 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    or              reduce using rule 119 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    right_par       reduce using rule 119 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    semicolon       reduce using rule 119 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    comma           reduce using rule 119 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    right_sb        reduce using rule 119 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)


state 281

    (122) TERMINO_AUX -> divide . nt_pushPOper TERMINO
    (167) nt_pushPOper -> . empty
    (169) empty -> .

    left_par        reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    True            reduce using rule 169 (empty -> .)
    False           reduce using rule 169 (empty -> .)
    cteString       reduce using rule 169 (empty -> .)
    cteInt          reduce using rule 169 (empty -> .)
    cteFloat        reduce using rule 169 (empty -> .)

    empty                          shift and go to state 164
    nt_pushPOper                   shift and go to state 312

state 282

    (121) TERMINO_AUX -> multiply . nt_pushPOper TERMINO
    (167) nt_pushPOper -> . empty
    (169) empty -> .

    left_par        reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    True            reduce using rule 169 (empty -> .)
    False           reduce using rule 169 (empty -> .)
    cteString       reduce using rule 169 (empty -> .)
    cteInt          reduce using rule 169 (empty -> .)
    cteFloat        reduce using rule 169 (empty -> .)

    empty                          shift and go to state 164
    nt_pushPOper                   shift and go to state 313

state 283

    (123) TERMINO_AUX -> empty .

    plus            reduce using rule 123 (TERMINO_AUX -> empty .)
    minus           reduce using rule 123 (TERMINO_AUX -> empty .)
    lt              reduce using rule 123 (TERMINO_AUX -> empty .)
    gt              reduce using rule 123 (TERMINO_AUX -> empty .)
    ne              reduce using rule 123 (TERMINO_AUX -> empty .)
    ge              reduce using rule 123 (TERMINO_AUX -> empty .)
    le              reduce using rule 123 (TERMINO_AUX -> empty .)
    et              reduce using rule 123 (TERMINO_AUX -> empty .)
    and             reduce using rule 123 (TERMINO_AUX -> empty .)
    or              reduce using rule 123 (TERMINO_AUX -> empty .)
    right_par       reduce using rule 123 (TERMINO_AUX -> empty .)
    semicolon       reduce using rule 123 (TERMINO_AUX -> empty .)
    comma           reduce using rule 123 (TERMINO_AUX -> empty .)
    right_sb        reduce using rule 123 (TERMINO_AUX -> empty .)


state 284

    (151) NUMERICA -> minus nt_sigMenos NUMERICA_AUX .

    multiply        reduce using rule 151 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    divide          reduce using rule 151 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    plus            reduce using rule 151 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    minus           reduce using rule 151 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    lt              reduce using rule 151 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    gt              reduce using rule 151 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    ne              reduce using rule 151 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    ge              reduce using rule 151 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    le              reduce using rule 151 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    et              reduce using rule 151 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    and             reduce using rule 151 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    or              reduce using rule 151 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    right_par       reduce using rule 151 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    semicolon       reduce using rule 151 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    comma           reduce using rule 151 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    right_sb        reduce using rule 151 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)


state 285

    (143) LISTA -> id nt_verificarVarDim left_sb EXP nt_pushVer right_sb .

    multiply        reduce using rule 143 (LISTA -> id nt_verificarVarDim left_sb EXP nt_pushVer right_sb .)
    divide          reduce using rule 143 (LISTA -> id nt_verificarVarDim left_sb EXP nt_pushVer right_sb .)
    plus            reduce using rule 143 (LISTA -> id nt_verificarVarDim left_sb EXP nt_pushVer right_sb .)
    minus           reduce using rule 143 (LISTA -> id nt_verificarVarDim left_sb EXP nt_pushVer right_sb .)
    and             reduce using rule 143 (LISTA -> id nt_verificarVarDim left_sb EXP nt_pushVer right_sb .)
    or              reduce using rule 143 (LISTA -> id nt_verificarVarDim left_sb EXP nt_pushVer right_sb .)
    right_par       reduce using rule 143 (LISTA -> id nt_verificarVarDim left_sb EXP nt_pushVer right_sb .)
    semicolon       reduce using rule 143 (LISTA -> id nt_verificarVarDim left_sb EXP nt_pushVer right_sb .)
    comma           reduce using rule 143 (LISTA -> id nt_verificarVarDim left_sb EXP nt_pushVer right_sb .)
    lt              reduce using rule 143 (LISTA -> id nt_verificarVarDim left_sb EXP nt_pushVer right_sb .)
    gt              reduce using rule 143 (LISTA -> id nt_verificarVarDim left_sb EXP nt_pushVer right_sb .)
    ne              reduce using rule 143 (LISTA -> id nt_verificarVarDim left_sb EXP nt_pushVer right_sb .)
    ge              reduce using rule 143 (LISTA -> id nt_verificarVarDim left_sb EXP nt_pushVer right_sb .)
    le              reduce using rule 143 (LISTA -> id nt_verificarVarDim left_sb EXP nt_pushVer right_sb .)
    et              reduce using rule 143 (LISTA -> id nt_verificarVarDim left_sb EXP nt_pushVer right_sb .)
    right_sb        reduce using rule 143 (LISTA -> id nt_verificarVarDim left_sb EXP nt_pushVer right_sb .)
    equals          reduce using rule 143 (LISTA -> id nt_verificarVarDim left_sb EXP nt_pushVer right_sb .)


state 286

    (96) LLAMADA_EXPRESION_AUX -> EXPRESION . nt_verifyArgType
    (139) nt_verifyArgType -> . empty
    (169) empty -> .

    comma           reduce using rule 169 (empty -> .)
    right_par       reduce using rule 169 (empty -> .)

    empty                          shift and go to state 314
    nt_verifyArgType               shift and go to state 315

state 287

    (92) LLAMADA -> id nt_verificaFuncIdLlamada left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION . nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub
    (140) nt_verificaUltimo -> . empty
    (169) empty -> .

    right_par       reduce using rule 169 (empty -> .)

    nt_verificaUltimo              shift and go to state 316
    empty                          shift and go to state 317

state 288

    (95) LLAMADA_EXPRESION -> empty .
    (101) EXPRESION_NOT -> empty .

    right_par       reduce using rule 95 (LLAMADA_EXPRESION -> empty .)
    left_par        reduce using rule 101 (EXPRESION_NOT -> empty .)
    id              reduce using rule 101 (EXPRESION_NOT -> empty .)
    plus            reduce using rule 101 (EXPRESION_NOT -> empty .)
    minus           reduce using rule 101 (EXPRESION_NOT -> empty .)
    True            reduce using rule 101 (EXPRESION_NOT -> empty .)
    False           reduce using rule 101 (EXPRESION_NOT -> empty .)
    cteString       reduce using rule 101 (EXPRESION_NOT -> empty .)
    cteInt          reduce using rule 101 (EXPRESION_NOT -> empty .)
    cteFloat        reduce using rule 101 (EXPRESION_NOT -> empty .)


state 289

    (94) LLAMADA_EXPRESION -> LLAMADA_EXPRESION_AUX .
    (97) LLAMADA_EXPRESION_AUX -> LLAMADA_EXPRESION_AUX . comma nt_paramPP EXPRESION nt_verifyArgType

    right_par       reduce using rule 94 (LLAMADA_EXPRESION -> LLAMADA_EXPRESION_AUX .)
    comma           shift and go to state 318


state 290

    (90) ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .

    right_cb        reduce using rule 90 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    list            reduce using rule 90 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    var             reduce using rule 90 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    if              reduce using rule 90 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    while           reduce using rule 90 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    cread           reduce using rule 90 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    cwrite          reduce using rule 90 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    id              reduce using rule 90 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    return          reduce using rule 90 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)


state 291

    (161) ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .

    list            reduce using rule 161 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    var             reduce using rule 161 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    if              reduce using rule 161 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    while           reduce using rule 161 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    cread           reduce using rule 161 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    cwrite          reduce using rule 161 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    id              reduce using rule 161 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    return          reduce using rule 161 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    right_cb        reduce using rule 161 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)


state 292

    (85) CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par . CUERPO nt_pushLoop
    (33) CUERPO -> . left_cb CUERPO_AUX right_cb

    left_cb         shift and go to state 76

    CUERPO                         shift and go to state 319

state 293

    (53) RETORNO -> return EXP nt_checaRet semicolon .

    right_cb        reduce using rule 53 (RETORNO -> return EXP nt_checaRet semicolon .)
    list            reduce using rule 53 (RETORNO -> return EXP nt_checaRet semicolon .)
    var             reduce using rule 53 (RETORNO -> return EXP nt_checaRet semicolon .)
    return          reduce using rule 53 (RETORNO -> return EXP nt_checaRet semicolon .)
    if              reduce using rule 53 (RETORNO -> return EXP nt_checaRet semicolon .)
    while           reduce using rule 53 (RETORNO -> return EXP nt_checaRet semicolon .)
    cread           reduce using rule 53 (RETORNO -> return EXP nt_checaRet semicolon .)
    cwrite          reduce using rule 53 (RETORNO -> return EXP nt_checaRet semicolon .)
    id              reduce using rule 53 (RETORNO -> return EXP nt_checaRet semicolon .)


state 294

    (76) CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF . nt_pushSalto
    (83) nt_pushSalto -> . empty
    (169) empty -> .

    right_cb        reduce using rule 169 (empty -> .)
    list            reduce using rule 169 (empty -> .)
    var             reduce using rule 169 (empty -> .)
    if              reduce using rule 169 (empty -> .)
    while           reduce using rule 169 (empty -> .)
    cread           reduce using rule 169 (empty -> .)
    cwrite          reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    return          reduce using rule 169 (empty -> .)

    nt_pushSalto                   shift and go to state 320
    empty                          shift and go to state 321

state 295

    (78) ELSE_ELIF -> ELIF .

    right_cb        reduce using rule 78 (ELSE_ELIF -> ELIF .)
    list            reduce using rule 78 (ELSE_ELIF -> ELIF .)
    var             reduce using rule 78 (ELSE_ELIF -> ELIF .)
    if              reduce using rule 78 (ELSE_ELIF -> ELIF .)
    while           reduce using rule 78 (ELSE_ELIF -> ELIF .)
    cread           reduce using rule 78 (ELSE_ELIF -> ELIF .)
    cwrite          reduce using rule 78 (ELSE_ELIF -> ELIF .)
    id              reduce using rule 78 (ELSE_ELIF -> ELIF .)
    return          reduce using rule 78 (ELSE_ELIF -> ELIF .)


state 296

    (77) ELSE_ELIF -> ELSE .

    right_cb        reduce using rule 77 (ELSE_ELIF -> ELSE .)
    list            reduce using rule 77 (ELSE_ELIF -> ELSE .)
    var             reduce using rule 77 (ELSE_ELIF -> ELSE .)
    if              reduce using rule 77 (ELSE_ELIF -> ELSE .)
    while           reduce using rule 77 (ELSE_ELIF -> ELSE .)
    cread           reduce using rule 77 (ELSE_ELIF -> ELSE .)
    cwrite          reduce using rule 77 (ELSE_ELIF -> ELSE .)
    id              reduce using rule 77 (ELSE_ELIF -> ELSE .)
    return          reduce using rule 77 (ELSE_ELIF -> ELSE .)


state 297

    (81) ELIF -> elseif . nt_pushElse CONDICION_AUX
    (84) nt_pushElse -> . empty
    (169) empty -> .

    left_par        reduce using rule 169 (empty -> .)

    nt_pushElse                    shift and go to state 322
    empty                          shift and go to state 323

state 298

    (80) ELSE -> else . nt_pushElse CUERPO
    (84) nt_pushElse -> . empty
    (169) empty -> .

    left_cb         reduce using rule 169 (empty -> .)

    nt_pushElse                    shift and go to state 324
    empty                          shift and go to state 323

state 299

    (79) ELSE_ELIF -> empty .

    right_cb        reduce using rule 79 (ELSE_ELIF -> empty .)
    list            reduce using rule 79 (ELSE_ELIF -> empty .)
    var             reduce using rule 79 (ELSE_ELIF -> empty .)
    if              reduce using rule 79 (ELSE_ELIF -> empty .)
    while           reduce using rule 79 (ELSE_ELIF -> empty .)
    cread           reduce using rule 79 (ELSE_ELIF -> empty .)
    cwrite          reduce using rule 79 (ELSE_ELIF -> empty .)
    id              reduce using rule 79 (ELSE_ELIF -> empty .)
    return          reduce using rule 79 (ELSE_ELIF -> empty .)


state 300

    (102) EXPRESION_B -> and nt_pushPOper . EXPRESION
    (98) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (100) EXPRESION_NOT -> . not nt_pushPOper
    (101) EXPRESION_NOT -> . empty
    (169) empty -> .

    not             shift and go to state 157
    left_par        reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    True            reduce using rule 169 (empty -> .)
    False           reduce using rule 169 (empty -> .)
    cteString       reduce using rule 169 (empty -> .)
    cteInt          reduce using rule 169 (empty -> .)
    cteFloat        reduce using rule 169 (empty -> .)

    EXPRESION                      shift and go to state 325
    EXPRESION_NOT                  shift and go to state 156
    empty                          shift and go to state 158

state 301

    (103) EXPRESION_B -> or nt_pushPOper . EXPRESION
    (98) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (100) EXPRESION_NOT -> . not nt_pushPOper
    (101) EXPRESION_NOT -> . empty
    (169) empty -> .

    not             shift and go to state 157
    left_par        reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    True            reduce using rule 169 (empty -> .)
    False           reduce using rule 169 (empty -> .)
    cteString       reduce using rule 169 (empty -> .)
    cteInt          reduce using rule 169 (empty -> .)
    cteFloat        reduce using rule 169 (empty -> .)

    EXPRESION                      shift and go to state 326
    EXPRESION_NOT                  shift and go to state 156
    empty                          shift and go to state 158

state 302

    (109) EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP . nt_checarRelop
    (113) nt_checarRelop -> . empty
    (169) empty -> .

    and             reduce using rule 169 (empty -> .)
    or              reduce using rule 169 (empty -> .)
    right_par       reduce using rule 169 (empty -> .)
    semicolon       reduce using rule 169 (empty -> .)
    comma           reduce using rule 169 (empty -> .)

    nt_checarRelop                 shift and go to state 327
    empty                          shift and go to state 328

state 303

    (107) EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP . nt_checarRelop
    (113) nt_checarRelop -> . empty
    (169) empty -> .

    and             reduce using rule 169 (empty -> .)
    or              reduce using rule 169 (empty -> .)
    right_par       reduce using rule 169 (empty -> .)
    semicolon       reduce using rule 169 (empty -> .)
    comma           reduce using rule 169 (empty -> .)

    nt_checarRelop                 shift and go to state 329
    empty                          shift and go to state 328

state 304

    (108) EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP . nt_checarRelop
    (113) nt_checarRelop -> . empty
    (169) empty -> .

    and             reduce using rule 169 (empty -> .)
    or              reduce using rule 169 (empty -> .)
    right_par       reduce using rule 169 (empty -> .)
    semicolon       reduce using rule 169 (empty -> .)
    comma           reduce using rule 169 (empty -> .)

    nt_checarRelop                 shift and go to state 330
    empty                          shift and go to state 328

state 305

    (106) EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP . nt_checarRelop
    (113) nt_checarRelop -> . empty
    (169) empty -> .

    and             reduce using rule 169 (empty -> .)
    or              reduce using rule 169 (empty -> .)
    right_par       reduce using rule 169 (empty -> .)
    semicolon       reduce using rule 169 (empty -> .)
    comma           reduce using rule 169 (empty -> .)

    nt_checarRelop                 shift and go to state 331
    empty                          shift and go to state 328

state 306

    (110) EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP . nt_checarRelop
    (113) nt_checarRelop -> . empty
    (169) empty -> .

    and             reduce using rule 169 (empty -> .)
    or              reduce using rule 169 (empty -> .)
    right_par       reduce using rule 169 (empty -> .)
    semicolon       reduce using rule 169 (empty -> .)
    comma           reduce using rule 169 (empty -> .)

    nt_checarRelop                 shift and go to state 332
    empty                          shift and go to state 328

state 307

    (111) EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP . nt_checarRelop
    (113) nt_checarRelop -> . empty
    (169) empty -> .

    and             reduce using rule 169 (empty -> .)
    or              reduce using rule 169 (empty -> .)
    right_par       reduce using rule 169 (empty -> .)
    semicolon       reduce using rule 169 (empty -> .)
    comma           reduce using rule 169 (empty -> .)

    nt_checarRelop                 shift and go to state 333
    empty                          shift and go to state 328

state 308

    (132) LLAMADA_F -> left_par nt_pushPOper . nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet
    (138) nt_startERA -> . empty
    (169) empty -> .

    not             reduce using rule 169 (empty -> .)
    right_par       reduce using rule 169 (empty -> .)
    left_par        reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    True            reduce using rule 169 (empty -> .)
    False           reduce using rule 169 (empty -> .)
    cteString       reduce using rule 169 (empty -> .)
    cteInt          reduce using rule 169 (empty -> .)
    cteFloat        reduce using rule 169 (empty -> .)

    nt_startERA                    shift and go to state 334
    empty                          shift and go to state 250

state 309

    (117) EXP_AUX -> minus nt_pushPOper . EXP
    (114) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (119) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (124) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (125) FACTOR -> . CONSTANTE
    (126) FACTOR -> . LISTA
    (127) FACTOR -> . FACTOR_AUX
    (146) CONSTANTE -> . NUMERICA
    (147) CONSTANTE -> . BOOLEANA
    (148) CONSTANTE -> . STRINGS
    (143) LISTA -> . id nt_verificarVarDim left_sb EXP nt_pushVer right_sb
    (128) FACTOR_AUX -> . id nt_pushPilaO nt_verificaVar
    (129) FACTOR_AUX -> . id nt_verificaFuncId LLAMADA_F
    (149) NUMERICA -> . NUMERICA_AUX
    (150) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (151) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (158) BOOLEANA -> . True
    (159) BOOLEANA -> . False
    (160) STRINGS -> . cteString
    (154) NUMERICA_AUX -> . cteInt nt_pushInt
    (155) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 192
    id              shift and go to state 187
    plus            shift and go to state 188
    minus           shift and go to state 202
    True            shift and go to state 196
    False           shift and go to state 194
    cteString       shift and go to state 191
    cteInt          shift and go to state 197
    cteFloat        shift and go to state 184

    BOOLEANA                       shift and go to state 185
    EXP                            shift and go to state 335
    FACTOR_AUX                     shift and go to state 189
    TERMINO                        shift and go to state 190
    STRINGS                        shift and go to state 193
    CONSTANTE                      shift and go to state 195
    NUMERICA_AUX                   shift and go to state 198
    NUMERICA                       shift and go to state 199
    FACTOR                         shift and go to state 200
    LISTA                          shift and go to state 201

state 310

    (116) EXP_AUX -> plus nt_pushPOper . EXP
    (114) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (119) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (124) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (125) FACTOR -> . CONSTANTE
    (126) FACTOR -> . LISTA
    (127) FACTOR -> . FACTOR_AUX
    (146) CONSTANTE -> . NUMERICA
    (147) CONSTANTE -> . BOOLEANA
    (148) CONSTANTE -> . STRINGS
    (143) LISTA -> . id nt_verificarVarDim left_sb EXP nt_pushVer right_sb
    (128) FACTOR_AUX -> . id nt_pushPilaO nt_verificaVar
    (129) FACTOR_AUX -> . id nt_verificaFuncId LLAMADA_F
    (149) NUMERICA -> . NUMERICA_AUX
    (150) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (151) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (158) BOOLEANA -> . True
    (159) BOOLEANA -> . False
    (160) STRINGS -> . cteString
    (154) NUMERICA_AUX -> . cteInt nt_pushInt
    (155) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 192
    id              shift and go to state 187
    plus            shift and go to state 188
    minus           shift and go to state 202
    True            shift and go to state 196
    False           shift and go to state 194
    cteString       shift and go to state 191
    cteInt          shift and go to state 197
    cteFloat        shift and go to state 184

    BOOLEANA                       shift and go to state 185
    EXP                            shift and go to state 336
    FACTOR_AUX                     shift and go to state 189
    TERMINO                        shift and go to state 190
    STRINGS                        shift and go to state 193
    CONSTANTE                      shift and go to state 195
    NUMERICA_AUX                   shift and go to state 198
    NUMERICA                       shift and go to state 199
    FACTOR                         shift and go to state 200
    LISTA                          shift and go to state 201

state 311

    (124) FACTOR -> left_par nt_pushPOper EXPRESION right_par . nt_popPOper
    (168) nt_popPOper -> . empty
    (169) empty -> .

    multiply        reduce using rule 169 (empty -> .)
    divide          reduce using rule 169 (empty -> .)
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    lt              reduce using rule 169 (empty -> .)
    gt              reduce using rule 169 (empty -> .)
    ne              reduce using rule 169 (empty -> .)
    ge              reduce using rule 169 (empty -> .)
    le              reduce using rule 169 (empty -> .)
    et              reduce using rule 169 (empty -> .)
    and             reduce using rule 169 (empty -> .)
    or              reduce using rule 169 (empty -> .)
    right_par       reduce using rule 169 (empty -> .)
    semicolon       reduce using rule 169 (empty -> .)
    comma           reduce using rule 169 (empty -> .)
    right_sb        reduce using rule 169 (empty -> .)

    nt_popPOper                    shift and go to state 337
    empty                          shift and go to state 338

state 312

    (122) TERMINO_AUX -> divide nt_pushPOper . TERMINO
    (119) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (124) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (125) FACTOR -> . CONSTANTE
    (126) FACTOR -> . LISTA
    (127) FACTOR -> . FACTOR_AUX
    (146) CONSTANTE -> . NUMERICA
    (147) CONSTANTE -> . BOOLEANA
    (148) CONSTANTE -> . STRINGS
    (143) LISTA -> . id nt_verificarVarDim left_sb EXP nt_pushVer right_sb
    (128) FACTOR_AUX -> . id nt_pushPilaO nt_verificaVar
    (129) FACTOR_AUX -> . id nt_verificaFuncId LLAMADA_F
    (149) NUMERICA -> . NUMERICA_AUX
    (150) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (151) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (158) BOOLEANA -> . True
    (159) BOOLEANA -> . False
    (160) STRINGS -> . cteString
    (154) NUMERICA_AUX -> . cteInt nt_pushInt
    (155) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 192
    id              shift and go to state 187
    plus            shift and go to state 188
    minus           shift and go to state 202
    True            shift and go to state 196
    False           shift and go to state 194
    cteString       shift and go to state 191
    cteInt          shift and go to state 197
    cteFloat        shift and go to state 184

    BOOLEANA                       shift and go to state 185
    FACTOR_AUX                     shift and go to state 189
    NUMERICA_AUX                   shift and go to state 198
    TERMINO                        shift and go to state 339
    STRINGS                        shift and go to state 193
    CONSTANTE                      shift and go to state 195
    NUMERICA                       shift and go to state 199
    FACTOR                         shift and go to state 200
    LISTA                          shift and go to state 201

state 313

    (121) TERMINO_AUX -> multiply nt_pushPOper . TERMINO
    (119) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (124) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (125) FACTOR -> . CONSTANTE
    (126) FACTOR -> . LISTA
    (127) FACTOR -> . FACTOR_AUX
    (146) CONSTANTE -> . NUMERICA
    (147) CONSTANTE -> . BOOLEANA
    (148) CONSTANTE -> . STRINGS
    (143) LISTA -> . id nt_verificarVarDim left_sb EXP nt_pushVer right_sb
    (128) FACTOR_AUX -> . id nt_pushPilaO nt_verificaVar
    (129) FACTOR_AUX -> . id nt_verificaFuncId LLAMADA_F
    (149) NUMERICA -> . NUMERICA_AUX
    (150) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (151) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (158) BOOLEANA -> . True
    (159) BOOLEANA -> . False
    (160) STRINGS -> . cteString
    (154) NUMERICA_AUX -> . cteInt nt_pushInt
    (155) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 192
    id              shift and go to state 187
    plus            shift and go to state 188
    minus           shift and go to state 202
    True            shift and go to state 196
    False           shift and go to state 194
    cteString       shift and go to state 191
    cteInt          shift and go to state 197
    cteFloat        shift and go to state 184

    BOOLEANA                       shift and go to state 185
    FACTOR_AUX                     shift and go to state 189
    NUMERICA_AUX                   shift and go to state 198
    TERMINO                        shift and go to state 340
    STRINGS                        shift and go to state 193
    CONSTANTE                      shift and go to state 195
    NUMERICA                       shift and go to state 199
    FACTOR                         shift and go to state 200
    LISTA                          shift and go to state 201

state 314

    (139) nt_verifyArgType -> empty .

    comma           reduce using rule 139 (nt_verifyArgType -> empty .)
    right_par       reduce using rule 139 (nt_verifyArgType -> empty .)


state 315

    (96) LLAMADA_EXPRESION_AUX -> EXPRESION nt_verifyArgType .

    comma           reduce using rule 96 (LLAMADA_EXPRESION_AUX -> EXPRESION nt_verifyArgType .)
    right_par       reduce using rule 96 (LLAMADA_EXPRESION_AUX -> EXPRESION nt_verifyArgType .)


state 316

    (92) LLAMADA -> id nt_verificaFuncIdLlamada left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo . right_par nt_popPOper semicolon nt_pushGoSub

    right_par       shift and go to state 341


state 317

    (140) nt_verificaUltimo -> empty .

    right_par       reduce using rule 140 (nt_verificaUltimo -> empty .)


state 318

    (97) LLAMADA_EXPRESION_AUX -> LLAMADA_EXPRESION_AUX comma . nt_paramPP EXPRESION nt_verifyArgType
    (137) nt_paramPP -> . empty
    (169) empty -> .

    not             reduce using rule 169 (empty -> .)
    left_par        reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    True            reduce using rule 169 (empty -> .)
    False           reduce using rule 169 (empty -> .)
    cteString       reduce using rule 169 (empty -> .)
    cteInt          reduce using rule 169 (empty -> .)
    cteFloat        reduce using rule 169 (empty -> .)

    empty                          shift and go to state 343
    nt_paramPP                     shift and go to state 342

state 319

    (85) CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO . nt_pushLoop
    (87) nt_pushLoop -> . empty
    (169) empty -> .

    right_cb        reduce using rule 169 (empty -> .)
    list            reduce using rule 169 (empty -> .)
    var             reduce using rule 169 (empty -> .)
    if              reduce using rule 169 (empty -> .)
    while           reduce using rule 169 (empty -> .)
    cread           reduce using rule 169 (empty -> .)
    cwrite          reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    return          reduce using rule 169 (empty -> .)

    nt_pushLoop                    shift and go to state 344
    empty                          shift and go to state 345

state 320

    (76) CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .

    right_cb        reduce using rule 76 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    list            reduce using rule 76 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    var             reduce using rule 76 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    if              reduce using rule 76 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    while           reduce using rule 76 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    cread           reduce using rule 76 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    cwrite          reduce using rule 76 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    id              reduce using rule 76 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    return          reduce using rule 76 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)


state 321

    (83) nt_pushSalto -> empty .

    right_cb        reduce using rule 83 (nt_pushSalto -> empty .)
    list            reduce using rule 83 (nt_pushSalto -> empty .)
    var             reduce using rule 83 (nt_pushSalto -> empty .)
    if              reduce using rule 83 (nt_pushSalto -> empty .)
    while           reduce using rule 83 (nt_pushSalto -> empty .)
    cread           reduce using rule 83 (nt_pushSalto -> empty .)
    cwrite          reduce using rule 83 (nt_pushSalto -> empty .)
    id              reduce using rule 83 (nt_pushSalto -> empty .)
    return          reduce using rule 83 (nt_pushSalto -> empty .)


state 322

    (81) ELIF -> elseif nt_pushElse . CONDICION_AUX
    (76) CONDICION_AUX -> . left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto

    left_par        shift and go to state 129

    CONDICION_AUX                  shift and go to state 346

state 323

    (84) nt_pushElse -> empty .

    left_par        reduce using rule 84 (nt_pushElse -> empty .)
    left_cb         reduce using rule 84 (nt_pushElse -> empty .)


state 324

    (80) ELSE -> else nt_pushElse . CUERPO
    (33) CUERPO -> . left_cb CUERPO_AUX right_cb

    left_cb         shift and go to state 76

    CUERPO                         shift and go to state 347

state 325

    (102) EXPRESION_B -> and nt_pushPOper EXPRESION .

    right_par       reduce using rule 102 (EXPRESION_B -> and nt_pushPOper EXPRESION .)
    semicolon       reduce using rule 102 (EXPRESION_B -> and nt_pushPOper EXPRESION .)
    comma           reduce using rule 102 (EXPRESION_B -> and nt_pushPOper EXPRESION .)


state 326

    (103) EXPRESION_B -> or nt_pushPOper EXPRESION .

    right_par       reduce using rule 103 (EXPRESION_B -> or nt_pushPOper EXPRESION .)
    semicolon       reduce using rule 103 (EXPRESION_B -> or nt_pushPOper EXPRESION .)
    comma           reduce using rule 103 (EXPRESION_B -> or nt_pushPOper EXPRESION .)


state 327

    (109) EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop .

    and             reduce using rule 109 (EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop .)
    or              reduce using rule 109 (EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop .)
    right_par       reduce using rule 109 (EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop .)
    semicolon       reduce using rule 109 (EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop .)
    comma           reduce using rule 109 (EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop .)


state 328

    (113) nt_checarRelop -> empty .

    and             reduce using rule 113 (nt_checarRelop -> empty .)
    or              reduce using rule 113 (nt_checarRelop -> empty .)
    right_par       reduce using rule 113 (nt_checarRelop -> empty .)
    semicolon       reduce using rule 113 (nt_checarRelop -> empty .)
    comma           reduce using rule 113 (nt_checarRelop -> empty .)


state 329

    (107) EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop .

    and             reduce using rule 107 (EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop .)
    or              reduce using rule 107 (EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop .)
    right_par       reduce using rule 107 (EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop .)
    semicolon       reduce using rule 107 (EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop .)
    comma           reduce using rule 107 (EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop .)


state 330

    (108) EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop .

    and             reduce using rule 108 (EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop .)
    or              reduce using rule 108 (EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop .)
    right_par       reduce using rule 108 (EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop .)
    semicolon       reduce using rule 108 (EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop .)
    comma           reduce using rule 108 (EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop .)


state 331

    (106) EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop .

    and             reduce using rule 106 (EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop .)
    or              reduce using rule 106 (EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop .)
    right_par       reduce using rule 106 (EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop .)
    semicolon       reduce using rule 106 (EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop .)
    comma           reduce using rule 106 (EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop .)


state 332

    (110) EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop .

    and             reduce using rule 110 (EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop .)
    or              reduce using rule 110 (EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop .)
    right_par       reduce using rule 110 (EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop .)
    semicolon       reduce using rule 110 (EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop .)
    comma           reduce using rule 110 (EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop .)


state 333

    (111) EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop .

    and             reduce using rule 111 (EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop .)
    or              reduce using rule 111 (EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop .)
    right_par       reduce using rule 111 (EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop .)
    semicolon       reduce using rule 111 (EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop .)
    comma           reduce using rule 111 (EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop .)


state 334

    (132) LLAMADA_F -> left_par nt_pushPOper nt_startERA . LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet
    (133) LLAMADAF_AUX -> . LLAMADAF_AUX2
    (134) LLAMADAF_AUX -> . empty
    (135) LLAMADAF_AUX2 -> . EXPRESION nt_verifyArgType
    (136) LLAMADAF_AUX2 -> . LLAMADAF_AUX2 comma nt_paramPP EXPRESION nt_verifyArgType
    (169) empty -> .
    (98) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (100) EXPRESION_NOT -> . not nt_pushPOper
    (101) EXPRESION_NOT -> . empty

    right_par       reduce using rule 169 (empty -> .)
    left_par        reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    True            reduce using rule 169 (empty -> .)
    False           reduce using rule 169 (empty -> .)
    cteString       reduce using rule 169 (empty -> .)
    cteInt          reduce using rule 169 (empty -> .)
    cteFloat        reduce using rule 169 (empty -> .)
    not             shift and go to state 157

    EXPRESION                      shift and go to state 348
    EXPRESION_NOT                  shift and go to state 156
    LLAMADAF_AUX                   shift and go to state 349
    LLAMADAF_AUX2                  shift and go to state 350
    empty                          shift and go to state 351

state 335

    (117) EXP_AUX -> minus nt_pushPOper EXP .

    lt              reduce using rule 117 (EXP_AUX -> minus nt_pushPOper EXP .)
    gt              reduce using rule 117 (EXP_AUX -> minus nt_pushPOper EXP .)
    ne              reduce using rule 117 (EXP_AUX -> minus nt_pushPOper EXP .)
    ge              reduce using rule 117 (EXP_AUX -> minus nt_pushPOper EXP .)
    le              reduce using rule 117 (EXP_AUX -> minus nt_pushPOper EXP .)
    et              reduce using rule 117 (EXP_AUX -> minus nt_pushPOper EXP .)
    and             reduce using rule 117 (EXP_AUX -> minus nt_pushPOper EXP .)
    or              reduce using rule 117 (EXP_AUX -> minus nt_pushPOper EXP .)
    right_par       reduce using rule 117 (EXP_AUX -> minus nt_pushPOper EXP .)
    semicolon       reduce using rule 117 (EXP_AUX -> minus nt_pushPOper EXP .)
    comma           reduce using rule 117 (EXP_AUX -> minus nt_pushPOper EXP .)
    right_sb        reduce using rule 117 (EXP_AUX -> minus nt_pushPOper EXP .)


state 336

    (116) EXP_AUX -> plus nt_pushPOper EXP .

    lt              reduce using rule 116 (EXP_AUX -> plus nt_pushPOper EXP .)
    gt              reduce using rule 116 (EXP_AUX -> plus nt_pushPOper EXP .)
    ne              reduce using rule 116 (EXP_AUX -> plus nt_pushPOper EXP .)
    ge              reduce using rule 116 (EXP_AUX -> plus nt_pushPOper EXP .)
    le              reduce using rule 116 (EXP_AUX -> plus nt_pushPOper EXP .)
    et              reduce using rule 116 (EXP_AUX -> plus nt_pushPOper EXP .)
    and             reduce using rule 116 (EXP_AUX -> plus nt_pushPOper EXP .)
    or              reduce using rule 116 (EXP_AUX -> plus nt_pushPOper EXP .)
    right_par       reduce using rule 116 (EXP_AUX -> plus nt_pushPOper EXP .)
    semicolon       reduce using rule 116 (EXP_AUX -> plus nt_pushPOper EXP .)
    comma           reduce using rule 116 (EXP_AUX -> plus nt_pushPOper EXP .)
    right_sb        reduce using rule 116 (EXP_AUX -> plus nt_pushPOper EXP .)


state 337

    (124) FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .

    multiply        reduce using rule 124 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    divide          reduce using rule 124 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    plus            reduce using rule 124 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    minus           reduce using rule 124 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    semicolon       reduce using rule 124 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    and             reduce using rule 124 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    or              reduce using rule 124 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    right_par       reduce using rule 124 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    comma           reduce using rule 124 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    right_sb        reduce using rule 124 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    lt              reduce using rule 124 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    gt              reduce using rule 124 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    ne              reduce using rule 124 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    ge              reduce using rule 124 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    le              reduce using rule 124 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    et              reduce using rule 124 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)


state 338

    (168) nt_popPOper -> empty .

    multiply        reduce using rule 168 (nt_popPOper -> empty .)
    divide          reduce using rule 168 (nt_popPOper -> empty .)
    plus            reduce using rule 168 (nt_popPOper -> empty .)
    minus           reduce using rule 168 (nt_popPOper -> empty .)
    lt              reduce using rule 168 (nt_popPOper -> empty .)
    gt              reduce using rule 168 (nt_popPOper -> empty .)
    ne              reduce using rule 168 (nt_popPOper -> empty .)
    ge              reduce using rule 168 (nt_popPOper -> empty .)
    le              reduce using rule 168 (nt_popPOper -> empty .)
    et              reduce using rule 168 (nt_popPOper -> empty .)
    and             reduce using rule 168 (nt_popPOper -> empty .)
    or              reduce using rule 168 (nt_popPOper -> empty .)
    right_par       reduce using rule 168 (nt_popPOper -> empty .)
    semicolon       reduce using rule 168 (nt_popPOper -> empty .)
    comma           reduce using rule 168 (nt_popPOper -> empty .)
    right_sb        reduce using rule 168 (nt_popPOper -> empty .)


state 339

    (122) TERMINO_AUX -> divide nt_pushPOper TERMINO .

    plus            reduce using rule 122 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    minus           reduce using rule 122 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    lt              reduce using rule 122 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    gt              reduce using rule 122 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    ne              reduce using rule 122 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    ge              reduce using rule 122 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    le              reduce using rule 122 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    et              reduce using rule 122 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    and             reduce using rule 122 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    or              reduce using rule 122 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    right_par       reduce using rule 122 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    semicolon       reduce using rule 122 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    comma           reduce using rule 122 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    right_sb        reduce using rule 122 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)


state 340

    (121) TERMINO_AUX -> multiply nt_pushPOper TERMINO .

    plus            reduce using rule 121 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    minus           reduce using rule 121 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    lt              reduce using rule 121 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    gt              reduce using rule 121 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    ne              reduce using rule 121 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    ge              reduce using rule 121 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    le              reduce using rule 121 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    et              reduce using rule 121 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    and             reduce using rule 121 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    or              reduce using rule 121 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    right_par       reduce using rule 121 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    semicolon       reduce using rule 121 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    comma           reduce using rule 121 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    right_sb        reduce using rule 121 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)


state 341

    (92) LLAMADA -> id nt_verificaFuncIdLlamada left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par . nt_popPOper semicolon nt_pushGoSub
    (168) nt_popPOper -> . empty
    (169) empty -> .

    semicolon       reduce using rule 169 (empty -> .)

    nt_popPOper                    shift and go to state 352
    empty                          shift and go to state 338

state 342

    (97) LLAMADA_EXPRESION_AUX -> LLAMADA_EXPRESION_AUX comma nt_paramPP . EXPRESION nt_verifyArgType
    (98) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (100) EXPRESION_NOT -> . not nt_pushPOper
    (101) EXPRESION_NOT -> . empty
    (169) empty -> .

    not             shift and go to state 157
    left_par        reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    True            reduce using rule 169 (empty -> .)
    False           reduce using rule 169 (empty -> .)
    cteString       reduce using rule 169 (empty -> .)
    cteInt          reduce using rule 169 (empty -> .)
    cteFloat        reduce using rule 169 (empty -> .)

    EXPRESION                      shift and go to state 353
    EXPRESION_NOT                  shift and go to state 156
    empty                          shift and go to state 158

state 343

    (137) nt_paramPP -> empty .

    not             reduce using rule 137 (nt_paramPP -> empty .)
    left_par        reduce using rule 137 (nt_paramPP -> empty .)
    id              reduce using rule 137 (nt_paramPP -> empty .)
    plus            reduce using rule 137 (nt_paramPP -> empty .)
    minus           reduce using rule 137 (nt_paramPP -> empty .)
    True            reduce using rule 137 (nt_paramPP -> empty .)
    False           reduce using rule 137 (nt_paramPP -> empty .)
    cteString       reduce using rule 137 (nt_paramPP -> empty .)
    cteInt          reduce using rule 137 (nt_paramPP -> empty .)
    cteFloat        reduce using rule 137 (nt_paramPP -> empty .)


state 344

    (85) CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .

    right_cb        reduce using rule 85 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    list            reduce using rule 85 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    var             reduce using rule 85 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    if              reduce using rule 85 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    while           reduce using rule 85 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    cread           reduce using rule 85 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    cwrite          reduce using rule 85 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    id              reduce using rule 85 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    return          reduce using rule 85 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)


state 345

    (87) nt_pushLoop -> empty .

    right_cb        reduce using rule 87 (nt_pushLoop -> empty .)
    list            reduce using rule 87 (nt_pushLoop -> empty .)
    var             reduce using rule 87 (nt_pushLoop -> empty .)
    if              reduce using rule 87 (nt_pushLoop -> empty .)
    while           reduce using rule 87 (nt_pushLoop -> empty .)
    cread           reduce using rule 87 (nt_pushLoop -> empty .)
    cwrite          reduce using rule 87 (nt_pushLoop -> empty .)
    id              reduce using rule 87 (nt_pushLoop -> empty .)
    return          reduce using rule 87 (nt_pushLoop -> empty .)


state 346

    (81) ELIF -> elseif nt_pushElse CONDICION_AUX .

    right_cb        reduce using rule 81 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    list            reduce using rule 81 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    var             reduce using rule 81 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    if              reduce using rule 81 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    while           reduce using rule 81 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    cread           reduce using rule 81 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    cwrite          reduce using rule 81 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    id              reduce using rule 81 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    return          reduce using rule 81 (ELIF -> elseif nt_pushElse CONDICION_AUX .)


state 347

    (80) ELSE -> else nt_pushElse CUERPO .

    right_cb        reduce using rule 80 (ELSE -> else nt_pushElse CUERPO .)
    list            reduce using rule 80 (ELSE -> else nt_pushElse CUERPO .)
    var             reduce using rule 80 (ELSE -> else nt_pushElse CUERPO .)
    if              reduce using rule 80 (ELSE -> else nt_pushElse CUERPO .)
    while           reduce using rule 80 (ELSE -> else nt_pushElse CUERPO .)
    cread           reduce using rule 80 (ELSE -> else nt_pushElse CUERPO .)
    cwrite          reduce using rule 80 (ELSE -> else nt_pushElse CUERPO .)
    id              reduce using rule 80 (ELSE -> else nt_pushElse CUERPO .)
    return          reduce using rule 80 (ELSE -> else nt_pushElse CUERPO .)


state 348

    (135) LLAMADAF_AUX2 -> EXPRESION . nt_verifyArgType
    (139) nt_verifyArgType -> . empty
    (169) empty -> .

    comma           reduce using rule 169 (empty -> .)
    right_par       reduce using rule 169 (empty -> .)

    empty                          shift and go to state 314
    nt_verifyArgType               shift and go to state 354

state 349

    (132) LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX . nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet
    (140) nt_verificaUltimo -> . empty
    (169) empty -> .

    right_par       reduce using rule 169 (empty -> .)

    nt_verificaUltimo              shift and go to state 355
    empty                          shift and go to state 317

state 350

    (133) LLAMADAF_AUX -> LLAMADAF_AUX2 .
    (136) LLAMADAF_AUX2 -> LLAMADAF_AUX2 . comma nt_paramPP EXPRESION nt_verifyArgType

    right_par       reduce using rule 133 (LLAMADAF_AUX -> LLAMADAF_AUX2 .)
    comma           shift and go to state 356


state 351

    (134) LLAMADAF_AUX -> empty .
    (101) EXPRESION_NOT -> empty .

    right_par       reduce using rule 134 (LLAMADAF_AUX -> empty .)
    left_par        reduce using rule 101 (EXPRESION_NOT -> empty .)
    id              reduce using rule 101 (EXPRESION_NOT -> empty .)
    plus            reduce using rule 101 (EXPRESION_NOT -> empty .)
    minus           reduce using rule 101 (EXPRESION_NOT -> empty .)
    True            reduce using rule 101 (EXPRESION_NOT -> empty .)
    False           reduce using rule 101 (EXPRESION_NOT -> empty .)
    cteString       reduce using rule 101 (EXPRESION_NOT -> empty .)
    cteInt          reduce using rule 101 (EXPRESION_NOT -> empty .)
    cteFloat        reduce using rule 101 (EXPRESION_NOT -> empty .)


state 352

    (92) LLAMADA -> id nt_verificaFuncIdLlamada left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper . semicolon nt_pushGoSub

    semicolon       shift and go to state 357


state 353

    (97) LLAMADA_EXPRESION_AUX -> LLAMADA_EXPRESION_AUX comma nt_paramPP EXPRESION . nt_verifyArgType
    (139) nt_verifyArgType -> . empty
    (169) empty -> .

    comma           reduce using rule 169 (empty -> .)
    right_par       reduce using rule 169 (empty -> .)

    empty                          shift and go to state 314
    nt_verifyArgType               shift and go to state 358

state 354

    (135) LLAMADAF_AUX2 -> EXPRESION nt_verifyArgType .

    comma           reduce using rule 135 (LLAMADAF_AUX2 -> EXPRESION nt_verifyArgType .)
    right_par       reduce using rule 135 (LLAMADAF_AUX2 -> EXPRESION nt_verifyArgType .)


state 355

    (132) LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo . right_par nt_popPOper nt_pushGoSub nt_asignarRet

    right_par       shift and go to state 359


state 356

    (136) LLAMADAF_AUX2 -> LLAMADAF_AUX2 comma . nt_paramPP EXPRESION nt_verifyArgType
    (137) nt_paramPP -> . empty
    (169) empty -> .

    not             reduce using rule 169 (empty -> .)
    left_par        reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    True            reduce using rule 169 (empty -> .)
    False           reduce using rule 169 (empty -> .)
    cteString       reduce using rule 169 (empty -> .)
    cteInt          reduce using rule 169 (empty -> .)
    cteFloat        reduce using rule 169 (empty -> .)

    empty                          shift and go to state 343
    nt_paramPP                     shift and go to state 360

state 357

    (92) LLAMADA -> id nt_verificaFuncIdLlamada left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon . nt_pushGoSub
    (141) nt_pushGoSub -> . empty
    (169) empty -> .

    right_cb        reduce using rule 169 (empty -> .)
    list            reduce using rule 169 (empty -> .)
    var             reduce using rule 169 (empty -> .)
    if              reduce using rule 169 (empty -> .)
    while           reduce using rule 169 (empty -> .)
    cread           reduce using rule 169 (empty -> .)
    cwrite          reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    return          reduce using rule 169 (empty -> .)

    nt_pushGoSub                   shift and go to state 361
    empty                          shift and go to state 362

state 358

    (97) LLAMADA_EXPRESION_AUX -> LLAMADA_EXPRESION_AUX comma nt_paramPP EXPRESION nt_verifyArgType .

    comma           reduce using rule 97 (LLAMADA_EXPRESION_AUX -> LLAMADA_EXPRESION_AUX comma nt_paramPP EXPRESION nt_verifyArgType .)
    right_par       reduce using rule 97 (LLAMADA_EXPRESION_AUX -> LLAMADA_EXPRESION_AUX comma nt_paramPP EXPRESION nt_verifyArgType .)


state 359

    (132) LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par . nt_popPOper nt_pushGoSub nt_asignarRet
    (168) nt_popPOper -> . empty
    (169) empty -> .

    multiply        reduce using rule 169 (empty -> .)
    divide          reduce using rule 169 (empty -> .)
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    lt              reduce using rule 169 (empty -> .)
    gt              reduce using rule 169 (empty -> .)
    ne              reduce using rule 169 (empty -> .)
    ge              reduce using rule 169 (empty -> .)
    le              reduce using rule 169 (empty -> .)
    et              reduce using rule 169 (empty -> .)
    and             reduce using rule 169 (empty -> .)
    or              reduce using rule 169 (empty -> .)
    right_par       reduce using rule 169 (empty -> .)
    semicolon       reduce using rule 169 (empty -> .)
    comma           reduce using rule 169 (empty -> .)
    right_sb        reduce using rule 169 (empty -> .)

    nt_popPOper                    shift and go to state 363
    empty                          shift and go to state 338

state 360

    (136) LLAMADAF_AUX2 -> LLAMADAF_AUX2 comma nt_paramPP . EXPRESION nt_verifyArgType
    (98) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (100) EXPRESION_NOT -> . not nt_pushPOper
    (101) EXPRESION_NOT -> . empty
    (169) empty -> .

    not             shift and go to state 157
    left_par        reduce using rule 169 (empty -> .)
    id              reduce using rule 169 (empty -> .)
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    True            reduce using rule 169 (empty -> .)
    False           reduce using rule 169 (empty -> .)
    cteString       reduce using rule 169 (empty -> .)
    cteInt          reduce using rule 169 (empty -> .)
    cteFloat        reduce using rule 169 (empty -> .)

    EXPRESION                      shift and go to state 364
    EXPRESION_NOT                  shift and go to state 156
    empty                          shift and go to state 158

state 361

    (92) LLAMADA -> id nt_verificaFuncIdLlamada left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub .

    list            reduce using rule 92 (LLAMADA -> id nt_verificaFuncIdLlamada left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub .)
    var             reduce using rule 92 (LLAMADA -> id nt_verificaFuncIdLlamada left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub .)
    if              reduce using rule 92 (LLAMADA -> id nt_verificaFuncIdLlamada left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub .)
    while           reduce using rule 92 (LLAMADA -> id nt_verificaFuncIdLlamada left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub .)
    cread           reduce using rule 92 (LLAMADA -> id nt_verificaFuncIdLlamada left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub .)
    cwrite          reduce using rule 92 (LLAMADA -> id nt_verificaFuncIdLlamada left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub .)
    id              reduce using rule 92 (LLAMADA -> id nt_verificaFuncIdLlamada left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub .)
    return          reduce using rule 92 (LLAMADA -> id nt_verificaFuncIdLlamada left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub .)
    right_cb        reduce using rule 92 (LLAMADA -> id nt_verificaFuncIdLlamada left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub .)


state 362

    (141) nt_pushGoSub -> empty .

    multiply        reduce using rule 141 (nt_pushGoSub -> empty .)
    divide          reduce using rule 141 (nt_pushGoSub -> empty .)
    plus            reduce using rule 141 (nt_pushGoSub -> empty .)
    minus           reduce using rule 141 (nt_pushGoSub -> empty .)
    lt              reduce using rule 141 (nt_pushGoSub -> empty .)
    gt              reduce using rule 141 (nt_pushGoSub -> empty .)
    ne              reduce using rule 141 (nt_pushGoSub -> empty .)
    ge              reduce using rule 141 (nt_pushGoSub -> empty .)
    le              reduce using rule 141 (nt_pushGoSub -> empty .)
    et              reduce using rule 141 (nt_pushGoSub -> empty .)
    and             reduce using rule 141 (nt_pushGoSub -> empty .)
    or              reduce using rule 141 (nt_pushGoSub -> empty .)
    right_par       reduce using rule 141 (nt_pushGoSub -> empty .)
    semicolon       reduce using rule 141 (nt_pushGoSub -> empty .)
    comma           reduce using rule 141 (nt_pushGoSub -> empty .)
    right_sb        reduce using rule 141 (nt_pushGoSub -> empty .)
    right_cb        reduce using rule 141 (nt_pushGoSub -> empty .)
    list            reduce using rule 141 (nt_pushGoSub -> empty .)
    var             reduce using rule 141 (nt_pushGoSub -> empty .)
    if              reduce using rule 141 (nt_pushGoSub -> empty .)
    while           reduce using rule 141 (nt_pushGoSub -> empty .)
    cread           reduce using rule 141 (nt_pushGoSub -> empty .)
    cwrite          reduce using rule 141 (nt_pushGoSub -> empty .)
    id              reduce using rule 141 (nt_pushGoSub -> empty .)
    return          reduce using rule 141 (nt_pushGoSub -> empty .)


state 363

    (132) LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper . nt_pushGoSub nt_asignarRet
    (141) nt_pushGoSub -> . empty
    (169) empty -> .

    multiply        reduce using rule 169 (empty -> .)
    divide          reduce using rule 169 (empty -> .)
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    lt              reduce using rule 169 (empty -> .)
    gt              reduce using rule 169 (empty -> .)
    ne              reduce using rule 169 (empty -> .)
    ge              reduce using rule 169 (empty -> .)
    le              reduce using rule 169 (empty -> .)
    et              reduce using rule 169 (empty -> .)
    and             reduce using rule 169 (empty -> .)
    or              reduce using rule 169 (empty -> .)
    right_par       reduce using rule 169 (empty -> .)
    semicolon       reduce using rule 169 (empty -> .)
    comma           reduce using rule 169 (empty -> .)
    right_sb        reduce using rule 169 (empty -> .)

    nt_pushGoSub                   shift and go to state 365
    empty                          shift and go to state 362

state 364

    (136) LLAMADAF_AUX2 -> LLAMADAF_AUX2 comma nt_paramPP EXPRESION . nt_verifyArgType
    (139) nt_verifyArgType -> . empty
    (169) empty -> .

    comma           reduce using rule 169 (empty -> .)
    right_par       reduce using rule 169 (empty -> .)

    empty                          shift and go to state 314
    nt_verifyArgType               shift and go to state 366

state 365

    (132) LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub . nt_asignarRet
    (142) nt_asignarRet -> . empty
    (169) empty -> .

    multiply        reduce using rule 169 (empty -> .)
    divide          reduce using rule 169 (empty -> .)
    plus            reduce using rule 169 (empty -> .)
    minus           reduce using rule 169 (empty -> .)
    lt              reduce using rule 169 (empty -> .)
    gt              reduce using rule 169 (empty -> .)
    ne              reduce using rule 169 (empty -> .)
    ge              reduce using rule 169 (empty -> .)
    le              reduce using rule 169 (empty -> .)
    et              reduce using rule 169 (empty -> .)
    and             reduce using rule 169 (empty -> .)
    or              reduce using rule 169 (empty -> .)
    right_par       reduce using rule 169 (empty -> .)
    semicolon       reduce using rule 169 (empty -> .)
    comma           reduce using rule 169 (empty -> .)
    right_sb        reduce using rule 169 (empty -> .)

    nt_asignarRet                  shift and go to state 367
    empty                          shift and go to state 368

state 366

    (136) LLAMADAF_AUX2 -> LLAMADAF_AUX2 comma nt_paramPP EXPRESION nt_verifyArgType .

    comma           reduce using rule 136 (LLAMADAF_AUX2 -> LLAMADAF_AUX2 comma nt_paramPP EXPRESION nt_verifyArgType .)
    right_par       reduce using rule 136 (LLAMADAF_AUX2 -> LLAMADAF_AUX2 comma nt_paramPP EXPRESION nt_verifyArgType .)


state 367

    (132) LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet .

    multiply        reduce using rule 132 (LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet .)
    divide          reduce using rule 132 (LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet .)
    plus            reduce using rule 132 (LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet .)
    minus           reduce using rule 132 (LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet .)
    lt              reduce using rule 132 (LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet .)
    gt              reduce using rule 132 (LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet .)
    ne              reduce using rule 132 (LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet .)
    ge              reduce using rule 132 (LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet .)
    le              reduce using rule 132 (LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet .)
    et              reduce using rule 132 (LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet .)
    and             reduce using rule 132 (LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet .)
    or              reduce using rule 132 (LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet .)
    right_par       reduce using rule 132 (LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet .)
    semicolon       reduce using rule 132 (LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet .)
    comma           reduce using rule 132 (LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet .)
    right_sb        reduce using rule 132 (LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet .)


state 368

    (142) nt_asignarRet -> empty .

    multiply        reduce using rule 142 (nt_asignarRet -> empty .)
    divide          reduce using rule 142 (nt_asignarRet -> empty .)
    plus            reduce using rule 142 (nt_asignarRet -> empty .)
    minus           reduce using rule 142 (nt_asignarRet -> empty .)
    lt              reduce using rule 142 (nt_asignarRet -> empty .)
    gt              reduce using rule 142 (nt_asignarRet -> empty .)
    ne              reduce using rule 142 (nt_asignarRet -> empty .)
    ge              reduce using rule 142 (nt_asignarRet -> empty .)
    le              reduce using rule 142 (nt_asignarRet -> empty .)
    et              reduce using rule 142 (nt_asignarRet -> empty .)
    and             reduce using rule 142 (nt_asignarRet -> empty .)
    or              reduce using rule 142 (nt_asignarRet -> empty .)
    right_par       reduce using rule 142 (nt_asignarRet -> empty .)
    semicolon       reduce using rule 142 (nt_asignarRet -> empty .)
    comma           reduce using rule 142 (nt_asignarRet -> empty .)
    right_sb        reduce using rule 142 (nt_asignarRet -> empty .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for list in state 15 resolved as shift
WARNING: shift/reduce conflict for var in state 15 resolved as shift
WARNING: shift/reduce conflict for int in state 16 resolved as shift
WARNING: shift/reduce conflict for float in state 16 resolved as shift
WARNING: shift/reduce conflict for bool in state 16 resolved as shift
WARNING: shift/reduce conflict for string in state 16 resolved as shift
WARNING: shift/reduce conflict for void in state 16 resolved as shift
WARNING: shift/reduce conflict for int in state 26 resolved as shift
WARNING: shift/reduce conflict for float in state 26 resolved as shift
WARNING: shift/reduce conflict for bool in state 26 resolved as shift
WARNING: shift/reduce conflict for string in state 26 resolved as shift
WARNING: shift/reduce conflict for void in state 26 resolved as shift
WARNING: shift/reduce conflict for list in state 76 resolved as shift
WARNING: shift/reduce conflict for var in state 76 resolved as shift
WARNING: shift/reduce conflict for if in state 86 resolved as shift
WARNING: shift/reduce conflict for while in state 86 resolved as shift
WARNING: shift/reduce conflict for cread in state 86 resolved as shift
WARNING: shift/reduce conflict for cwrite in state 86 resolved as shift
WARNING: shift/reduce conflict for id in state 86 resolved as shift
WARNING: shift/reduce conflict for right_cb in state 89 resolved as shift
WARNING: shift/reduce conflict for list in state 89 resolved as shift
WARNING: shift/reduce conflict for var in state 89 resolved as shift
WARNING: shift/reduce conflict for if in state 116 resolved as shift
WARNING: shift/reduce conflict for while in state 116 resolved as shift
WARNING: shift/reduce conflict for cread in state 116 resolved as shift
WARNING: shift/reduce conflict for cwrite in state 116 resolved as shift
WARNING: shift/reduce conflict for id in state 116 resolved as shift
WARNING: shift/reduce conflict for list in state 126 resolved as shift
WARNING: shift/reduce conflict for var in state 126 resolved as shift
WARNING: shift/reduce conflict for list in state 140 resolved as shift
WARNING: shift/reduce conflict for var in state 140 resolved as shift
WARNING: shift/reduce conflict for list in state 147 resolved as shift
WARNING: shift/reduce conflict for var in state 147 resolved as shift
WARNING: shift/reduce conflict for list in state 148 resolved as shift
WARNING: shift/reduce conflict for var in state 148 resolved as shift
WARNING: shift/reduce conflict for if in state 177 resolved as shift
WARNING: shift/reduce conflict for while in state 177 resolved as shift
WARNING: shift/reduce conflict for cread in state 177 resolved as shift
WARNING: shift/reduce conflict for cwrite in state 177 resolved as shift
WARNING: shift/reduce conflict for id in state 177 resolved as shift
WARNING: shift/reduce conflict for if in state 214 resolved as shift
WARNING: shift/reduce conflict for while in state 214 resolved as shift
WARNING: shift/reduce conflict for cread in state 214 resolved as shift
WARNING: shift/reduce conflict for cwrite in state 214 resolved as shift
WARNING: shift/reduce conflict for id in state 214 resolved as shift
WARNING: reduce/reduce conflict in state 42 resolved using rule (nt_cambiarScope -> empty)
WARNING: rejected rule (PROGRAMA_FUNC_AUX -> empty) in state 42
WARNING: reduce/reduce conflict in state 148 resolved using rule (CUERPOFUNC -> CUERPOFUNC_AUX)
WARNING: rejected rule (empty -> <empty>) in state 148
WARNING: reduce/reduce conflict in state 152 resolved using rule (CUERPOFUNC_VARS -> empty)
WARNING: rejected rule (CUERPORETORNO_CF_AUX -> empty) in state 152
WARNING: Rule (CUERPORETORNO_CF_AUX -> empty) is never reduced
