Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    right_dblquotes
    left_dblquotes

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> program id semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO
Rule 2     nt_cambiarScope -> empty
Rule 3     nt_ambienteMain -> nt_cambiarScope
Rule 4     PROGRAMA_VARS -> VARS
Rule 5     PROGRAMA_VARS -> empty
Rule 6     PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX
Rule 7     PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX
Rule 8     PROGRAMA_FUNC_AUX -> FUNC
Rule 9     PROGRAMA_FUNC_AUX -> empty
Rule 10    VARS -> VARS_AUX
Rule 11    VARS_AUX -> VARS_LIST_VAR
Rule 12    VARS_AUX -> VARS_AUX VARS_LIST_VAR
Rule 13    VARS_LIST_VAR -> VARS_LIST
Rule 14    VARS_LIST_VAR -> VARS_VAR
Rule 15    VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon
Rule 16    nt_hacerLista -> empty
Rule 17    VARS_LIST_AUX -> id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar
Rule 18    VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar
Rule 19    nt_agregarId -> empty
Rule 20    nt_agregarCteLista -> empty
Rule 21    nt_agregarDicVar -> empty
Rule 22    VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon
Rule 23    nt_hacerVar -> empty
Rule 24    VARS_VAR_AUX -> id nt_agregarId nt_agregarDicVar
Rule 25    VARS_VAR_AUX -> VARS_VAR_AUX comma id nt_agregarId nt_agregarDicVar
Rule 26    TIPO -> int nt_cambioTipoActual
Rule 27    TIPO -> float nt_cambioTipoActual
Rule 28    TIPO -> bool nt_cambioTipoActual
Rule 29    TIPO -> string nt_cambioTipoActual
Rule 30    nt_cambioTipoActual -> empty
Rule 31    CUERPO -> left_cb CUERPO_AUX right_cb
Rule 32    CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO
Rule 33    CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO
Rule 34    CUERPO_VARS -> VARS
Rule 35    CUERPO_VARS -> empty
Rule 36    CUERPO_ESTATUTO -> ESTATUTO
Rule 37    CUERPO_ESTATUTO -> empty
Rule 38    CUERPOFUNC -> CUERPOFUNC_AUX
Rule 39    CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
Rule 40    CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
Rule 41    nt_funcInicio -> empty
Rule 42    CUERPOFUNC_VARS -> VARS
Rule 43    CUERPOFUNC_VARS -> empty
Rule 44    CUERPOFUNC_ESTATUTO -> ESTATUTO
Rule 45    CUERPOFUNC_ESTATUTO -> empty
Rule 46    CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb
Rule 47    CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO
Rule 48    CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO
Rule 49    CUERPORETORNO_CF_AUX -> CUERPOFUNC
Rule 50    CUERPORETORNO_CF_AUX -> empty
Rule 51    RETORNO -> return EXP semicolon
Rule 52    FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub
Rule 53    FUNC -> VOIDFUNC nt_pushEndsub
Rule 54    nt_pushEndsub -> empty
Rule 55    test_print -> empty
Rule 56    nt_cambioFuncActual -> empty
Rule 57    nt_agregarIdFunc -> empty
Rule 58    FUNC_PARA -> TIPO id nt_agregarParametro
Rule 59    FUNC_PARA -> FUNC_PARA comma TIPO id nt_agregarParametro
Rule 60    FUNC_PARA -> empty
Rule 61    nt_agregarParametro -> empty
Rule 62    VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb
Rule 63    nt_hacerVoid -> empty
Rule 64    VOIDFUNC_PARA -> TIPO id nt_agregarParametro
Rule 65    VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO id nt_agregarParametro
Rule 66    ESTATUTO -> ASIGNACION
Rule 67    ESTATUTO -> CONDICION
Rule 68    ESTATUTO -> CICLO
Rule 69    ESTATUTO -> LECTURA
Rule 70    ESTATUTO -> ESCRITURA
Rule 71    ESTATUTO -> LLAMADA
Rule 72    CONDICION -> if CONDICION_AUX
Rule 73    CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto
Rule 74    ELSE_ELIF -> ELSE
Rule 75    ELSE_ELIF -> ELIF
Rule 76    ELSE_ELIF -> empty
Rule 77    ELSE -> else nt_pushElse CUERPO
Rule 78    ELIF -> elseif nt_pushElse CONDICION_AUX
Rule 79    nt_checarBool -> empty
Rule 80    nt_pushSalto -> empty
Rule 81    nt_pushElse -> empty
Rule 82    CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop
Rule 83    nt_saltoLoop -> empty
Rule 84    nt_pushLoop -> empty
Rule 85    LECTURA -> cread left_par id nt_leer right_par semicolon
Rule 86    nt_leer -> empty
Rule 87    ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon
Rule 88    nt_escribir -> empty
Rule 89    LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon
Rule 90    LLAMADA_EXPRESION -> EXPRESION
Rule 91    LLAMADA_EXPRESION -> LLAMADA_EXPRESION comma EXPRESION
Rule 92    EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
Rule 93    nt_checaAndOrNot -> empty
Rule 94    EXPRESION_NOT -> not nt_pushPOper
Rule 95    EXPRESION_NOT -> empty
Rule 96    EXPRESION_B -> and nt_pushPOper EXPRESION
Rule 97    EXPRESION_B -> or nt_pushPOper EXPRESION
Rule 98    EXPRESION_B -> empty
Rule 99    EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX
Rule 100   EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop
Rule 101   EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop
Rule 102   EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop
Rule 103   EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop
Rule 104   EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop
Rule 105   EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop
Rule 106   EXPRESIONLOGICA_AUX -> empty
Rule 107   nt_checarRelop -> empty
Rule 108   EXP -> TERMINO nt_checar_sumas EXP_AUX
Rule 109   nt_checar_sumas -> empty
Rule 110   EXP_AUX -> plus nt_pushPOper EXP
Rule 111   EXP_AUX -> minus nt_pushPOper EXP
Rule 112   EXP_AUX -> empty
Rule 113   TERMINO -> FACTOR nt_checar_multis TERMINO_AUX
Rule 114   nt_checar_multis -> empty
Rule 115   TERMINO_AUX -> multiply nt_pushPOper TERMINO
Rule 116   TERMINO_AUX -> divide nt_pushPOper TERMINO
Rule 117   TERMINO_AUX -> empty
Rule 118   FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper
Rule 119   FACTOR -> CONSTANTE
Rule 120   FACTOR -> LISTA
Rule 121   FACTOR -> FACTOR_AUX
Rule 122   FACTOR_AUX -> id nt_pushPilaO
Rule 123   FACTOR_AUX -> id LLAMADA_F
Rule 124   LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par
Rule 125   LLAMADAF_AUX -> comma EXPRESION LLAMADAF_AUX
Rule 126   LLAMADAF_AUX -> empty
Rule 127   LISTA -> id left_sb EXP right_sb
Rule 128   CONSTANTE -> NUMERICA
Rule 129   CONSTANTE -> BOOLEANA
Rule 130   CONSTANTE -> STRINGS
Rule 131   NUMERICA -> NUMERICA_AUX
Rule 132   NUMERICA -> plus nt_sigMas NUMERICA_AUX
Rule 133   NUMERICA -> minus nt_sigMenos NUMERICA_AUX
Rule 134   nt_sigMas -> empty
Rule 135   nt_sigMenos -> empty
Rule 136   NUMERICA_AUX -> cteInt nt_pushInt
Rule 137   NUMERICA_AUX -> cteFloat nt_pushFloat
Rule 138   nt_pushInt -> empty
Rule 139   nt_pushFloat -> empty
Rule 140   BOOLEANA -> true
Rule 141   BOOLEANA -> false
Rule 142   STRINGS -> cteString
Rule 143   ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon
Rule 144   nt_checaEquals -> empty
Rule 145   ASIGNACION_AUX -> id nt_pushPilaO
Rule 146   ASIGNACION_AUX -> LISTA
Rule 147   nt_pushPilaO -> empty
Rule 148   nt_pushPOper -> empty
Rule 149   nt_popPOper -> empty
Rule 150   empty -> <empty>

Terminals, with rules where they appear

and                  : 96
bool                 : 28
comma                : 18 25 59 65 91 125
cread                : 85
cteFloat             : 137
cteInt               : 17 18 136
cteString            : 142
cwrite               : 87
divide               : 116
else                 : 77
elseif               : 78
equals               : 143
error                : 
et                   : 105
false                : 141
float                : 27
ge                   : 103
gt                   : 101
id                   : 1 17 18 24 25 52 58 59 62 64 65 85 122 123 127 145
if                   : 72
int                  : 26
le                   : 104
left_cb              : 31 46 62
left_dblquotes       : 
left_par             : 52 62 73 82 85 87 89 118 124
left_sb              : 17 18 127
list                 : 15
lt                   : 100
main                 : 1
minus                : 111 133
multiply             : 115
ne                   : 102
not                  : 94
or                   : 97
plus                 : 110 132
program              : 1
return               : 51
right_cb             : 31 46 62
right_dblquotes      : 
right_par            : 52 62 73 82 85 87 89 118 124
right_sb             : 17 18 127
semicolon            : 1 15 22 51 85 87 89 143
string               : 29
true                 : 140
var                  : 22
void                 : 62
while                : 82

Nonterminals, with rules where they appear

ASIGNACION           : 66
ASIGNACION_AUX       : 143
BOOLEANA             : 129
CICLO                : 68
CONDICION            : 67
CONDICION_AUX        : 72 78
CONSTANTE            : 119
CUERPO               : 1 73 77 82
CUERPOFUNC           : 49 62
CUERPOFUNC_AUX       : 38 40
CUERPOFUNC_ESTATUTO  : 39 40
CUERPOFUNC_VARS      : 39 40
CUERPORETORNO        : 52
CUERPORETORNO_AUX    : 46 48
CUERPORETORNO_CF_AUX : 47 48
CUERPO_AUX           : 31 33
CUERPO_ESTATUTO      : 32 33
CUERPO_VARS          : 32 33
ELIF                 : 75
ELSE                 : 74
ELSE_ELIF            : 73
ESCRITURA            : 70
ESTATUTO             : 36 44
EXP                  : 51 99 100 101 102 103 104 105 110 111 127
EXPRESION            : 73 82 87 90 91 96 97 118 124 125 143
EXPRESIONLOGICA      : 92
EXPRESIONLOGICA_AUX  : 99
EXPRESION_B          : 92
EXPRESION_NOT        : 92
EXP_AUX              : 108
FACTOR               : 113
FACTOR_AUX           : 121
FUNC                 : 8
FUNC_PARA            : 52 59
LECTURA              : 69
LISTA                : 120 146
LLAMADA              : 71
LLAMADAF_AUX         : 124 125
LLAMADA_EXPRESION    : 89 91
LLAMADA_F            : 123
NUMERICA             : 128
NUMERICA_AUX         : 131 132 133
PROGRAMA             : 0
PROGRAMA_FUNC        : 1 7
PROGRAMA_FUNC_AUX    : 6 7
PROGRAMA_VARS        : 1
RETORNO              : 47 48
STRINGS              : 130
TERMINO              : 108 115 116
TERMINO_AUX          : 113
TIPO                 : 15 22 52 58 59 64 65
VARS                 : 4 34 42
VARS_AUX             : 10 12
VARS_LIST            : 13
VARS_LIST_AUX        : 15 18
VARS_LIST_VAR        : 11 12
VARS_VAR             : 14
VARS_VAR_AUX         : 22 25
VOIDFUNC             : 53
VOIDFUNC_PARA        : 62 65
empty                : 2 5 9 16 19 20 21 23 30 35 37 41 43 45 50 54 55 56 57 60 61 63 76 79 80 81 83 84 86 88 93 95 98 106 107 109 112 114 117 126 134 135 138 139 144 147 148 149
nt_agregarCteLista   : 17 18
nt_agregarDicVar     : 17 18 24 25
nt_agregarId         : 17 18 24 25
nt_agregarIdFunc     : 52 62
nt_agregarParametro  : 58 59 64 65
nt_ambienteMain      : 1
nt_cambiarScope      : 1 1 3
nt_cambioFuncActual  : 52
nt_cambioTipoActual  : 26 27 28 29
nt_checaAndOrNot     : 92
nt_checaEquals       : 143
nt_checarBool        : 73 82
nt_checarRelop       : 100 101 102 103 104 105
nt_checar_multis     : 113
nt_checar_sumas      : 108
nt_escribir          : 87
nt_funcInicio        : 39 40
nt_hacerLista        : 15
nt_hacerVar          : 22
nt_hacerVoid         : 62
nt_leer              : 85
nt_popPOper          : 118
nt_pushElse          : 77 78
nt_pushEndsub        : 52 53
nt_pushFloat         : 137
nt_pushInt           : 136
nt_pushLoop          : 82
nt_pushPOper         : 94 96 97 100 101 102 103 104 105 110 111 115 116 118 143
nt_pushPilaO         : 122 145
nt_pushSalto         : 73
nt_saltoLoop         : 82
nt_sigMas            : 132
nt_sigMenos          : 133
test_print           : 

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . program id semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO

    program         shift and go to state 1

    PROGRAMA                       shift and go to state 2

state 1

    (1) PROGRAMA -> program . id semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO

    id              shift and go to state 3


state 2

    (0) S' -> PROGRAMA .



state 3

    (1) PROGRAMA -> program id . semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO

    semicolon       shift and go to state 4


state 4

    (1) PROGRAMA -> program id semicolon . PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO
    (4) PROGRAMA_VARS -> . VARS
    (5) PROGRAMA_VARS -> . empty
    (10) VARS -> . VARS_AUX
    (150) empty -> .
    (11) VARS_AUX -> . VARS_LIST_VAR
    (12) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (13) VARS_LIST_VAR -> . VARS_LIST
    (14) VARS_LIST_VAR -> . VARS_VAR
    (15) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (22) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

    int             reduce using rule 150 (empty -> .)
    float           reduce using rule 150 (empty -> .)
    bool            reduce using rule 150 (empty -> .)
    string          reduce using rule 150 (empty -> .)
    void            reduce using rule 150 (empty -> .)
    main            reduce using rule 150 (empty -> .)
    list            shift and go to state 12
    var             shift and go to state 8

    VARS                           shift and go to state 5
    VARS_LIST                      shift and go to state 6
    VARS_LIST_VAR                  shift and go to state 10
    PROGRAMA_VARS                  shift and go to state 7
    VARS_AUX                       shift and go to state 13
    VARS_VAR                       shift and go to state 11
    empty                          shift and go to state 9

state 5

    (4) PROGRAMA_VARS -> VARS .

    int             reduce using rule 4 (PROGRAMA_VARS -> VARS .)
    float           reduce using rule 4 (PROGRAMA_VARS -> VARS .)
    bool            reduce using rule 4 (PROGRAMA_VARS -> VARS .)
    string          reduce using rule 4 (PROGRAMA_VARS -> VARS .)
    void            reduce using rule 4 (PROGRAMA_VARS -> VARS .)
    main            reduce using rule 4 (PROGRAMA_VARS -> VARS .)


state 6

    (13) VARS_LIST_VAR -> VARS_LIST .

    list            reduce using rule 13 (VARS_LIST_VAR -> VARS_LIST .)
    var             reduce using rule 13 (VARS_LIST_VAR -> VARS_LIST .)
    int             reduce using rule 13 (VARS_LIST_VAR -> VARS_LIST .)
    float           reduce using rule 13 (VARS_LIST_VAR -> VARS_LIST .)
    bool            reduce using rule 13 (VARS_LIST_VAR -> VARS_LIST .)
    string          reduce using rule 13 (VARS_LIST_VAR -> VARS_LIST .)
    void            reduce using rule 13 (VARS_LIST_VAR -> VARS_LIST .)
    main            reduce using rule 13 (VARS_LIST_VAR -> VARS_LIST .)
    if              reduce using rule 13 (VARS_LIST_VAR -> VARS_LIST .)
    while           reduce using rule 13 (VARS_LIST_VAR -> VARS_LIST .)
    cread           reduce using rule 13 (VARS_LIST_VAR -> VARS_LIST .)
    cwrite          reduce using rule 13 (VARS_LIST_VAR -> VARS_LIST .)
    left_par        reduce using rule 13 (VARS_LIST_VAR -> VARS_LIST .)
    id              reduce using rule 13 (VARS_LIST_VAR -> VARS_LIST .)
    return          reduce using rule 13 (VARS_LIST_VAR -> VARS_LIST .)
    right_cb        reduce using rule 13 (VARS_LIST_VAR -> VARS_LIST .)


state 7

    (1) PROGRAMA -> program id semicolon PROGRAMA_VARS . nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO
    (2) nt_cambiarScope -> . empty
    (150) empty -> .

    int             reduce using rule 150 (empty -> .)
    float           reduce using rule 150 (empty -> .)
    bool            reduce using rule 150 (empty -> .)
    string          reduce using rule 150 (empty -> .)
    void            reduce using rule 150 (empty -> .)
    main            reduce using rule 150 (empty -> .)

    nt_cambiarScope                shift and go to state 14
    empty                          shift and go to state 15

state 8

    (22) VARS_VAR -> var . nt_hacerVar TIPO VARS_VAR_AUX semicolon
    (23) nt_hacerVar -> . empty
    (150) empty -> .

    int             reduce using rule 150 (empty -> .)
    float           reduce using rule 150 (empty -> .)
    bool            reduce using rule 150 (empty -> .)
    string          reduce using rule 150 (empty -> .)

    nt_hacerVar                    shift and go to state 16
    empty                          shift and go to state 17

state 9

    (5) PROGRAMA_VARS -> empty .

    int             reduce using rule 5 (PROGRAMA_VARS -> empty .)
    float           reduce using rule 5 (PROGRAMA_VARS -> empty .)
    bool            reduce using rule 5 (PROGRAMA_VARS -> empty .)
    string          reduce using rule 5 (PROGRAMA_VARS -> empty .)
    void            reduce using rule 5 (PROGRAMA_VARS -> empty .)
    main            reduce using rule 5 (PROGRAMA_VARS -> empty .)


state 10

    (11) VARS_AUX -> VARS_LIST_VAR .

    list            reduce using rule 11 (VARS_AUX -> VARS_LIST_VAR .)
    var             reduce using rule 11 (VARS_AUX -> VARS_LIST_VAR .)
    if              reduce using rule 11 (VARS_AUX -> VARS_LIST_VAR .)
    while           reduce using rule 11 (VARS_AUX -> VARS_LIST_VAR .)
    cread           reduce using rule 11 (VARS_AUX -> VARS_LIST_VAR .)
    cwrite          reduce using rule 11 (VARS_AUX -> VARS_LIST_VAR .)
    left_par        reduce using rule 11 (VARS_AUX -> VARS_LIST_VAR .)
    id              reduce using rule 11 (VARS_AUX -> VARS_LIST_VAR .)
    return          reduce using rule 11 (VARS_AUX -> VARS_LIST_VAR .)
    right_cb        reduce using rule 11 (VARS_AUX -> VARS_LIST_VAR .)
    int             reduce using rule 11 (VARS_AUX -> VARS_LIST_VAR .)
    float           reduce using rule 11 (VARS_AUX -> VARS_LIST_VAR .)
    bool            reduce using rule 11 (VARS_AUX -> VARS_LIST_VAR .)
    string          reduce using rule 11 (VARS_AUX -> VARS_LIST_VAR .)
    void            reduce using rule 11 (VARS_AUX -> VARS_LIST_VAR .)
    main            reduce using rule 11 (VARS_AUX -> VARS_LIST_VAR .)


state 11

    (14) VARS_LIST_VAR -> VARS_VAR .

    list            reduce using rule 14 (VARS_LIST_VAR -> VARS_VAR .)
    var             reduce using rule 14 (VARS_LIST_VAR -> VARS_VAR .)
    int             reduce using rule 14 (VARS_LIST_VAR -> VARS_VAR .)
    float           reduce using rule 14 (VARS_LIST_VAR -> VARS_VAR .)
    bool            reduce using rule 14 (VARS_LIST_VAR -> VARS_VAR .)
    string          reduce using rule 14 (VARS_LIST_VAR -> VARS_VAR .)
    void            reduce using rule 14 (VARS_LIST_VAR -> VARS_VAR .)
    main            reduce using rule 14 (VARS_LIST_VAR -> VARS_VAR .)
    if              reduce using rule 14 (VARS_LIST_VAR -> VARS_VAR .)
    while           reduce using rule 14 (VARS_LIST_VAR -> VARS_VAR .)
    cread           reduce using rule 14 (VARS_LIST_VAR -> VARS_VAR .)
    cwrite          reduce using rule 14 (VARS_LIST_VAR -> VARS_VAR .)
    left_par        reduce using rule 14 (VARS_LIST_VAR -> VARS_VAR .)
    id              reduce using rule 14 (VARS_LIST_VAR -> VARS_VAR .)
    return          reduce using rule 14 (VARS_LIST_VAR -> VARS_VAR .)
    right_cb        reduce using rule 14 (VARS_LIST_VAR -> VARS_VAR .)


state 12

    (15) VARS_LIST -> list . nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (16) nt_hacerLista -> . empty
    (150) empty -> .

    int             reduce using rule 150 (empty -> .)
    float           reduce using rule 150 (empty -> .)
    bool            reduce using rule 150 (empty -> .)
    string          reduce using rule 150 (empty -> .)

    empty                          shift and go to state 19
    nt_hacerLista                  shift and go to state 18

state 13

    (10) VARS -> VARS_AUX .
    (12) VARS_AUX -> VARS_AUX . VARS_LIST_VAR
    (13) VARS_LIST_VAR -> . VARS_LIST
    (14) VARS_LIST_VAR -> . VARS_VAR
    (15) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (22) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    if              reduce using rule 10 (VARS -> VARS_AUX .)
    while           reduce using rule 10 (VARS -> VARS_AUX .)
    cread           reduce using rule 10 (VARS -> VARS_AUX .)
    cwrite          reduce using rule 10 (VARS -> VARS_AUX .)
    left_par        reduce using rule 10 (VARS -> VARS_AUX .)
    id              reduce using rule 10 (VARS -> VARS_AUX .)
    right_cb        reduce using rule 10 (VARS -> VARS_AUX .)
    return          reduce using rule 10 (VARS -> VARS_AUX .)
    int             reduce using rule 10 (VARS -> VARS_AUX .)
    float           reduce using rule 10 (VARS -> VARS_AUX .)
    bool            reduce using rule 10 (VARS -> VARS_AUX .)
    string          reduce using rule 10 (VARS -> VARS_AUX .)
    void            reduce using rule 10 (VARS -> VARS_AUX .)
    main            reduce using rule 10 (VARS -> VARS_AUX .)
    list            shift and go to state 12
    var             shift and go to state 8

  ! list            [ reduce using rule 10 (VARS -> VARS_AUX .) ]
  ! var             [ reduce using rule 10 (VARS -> VARS_AUX .) ]

    VARS_LIST                      shift and go to state 6
    VARS_LIST_VAR                  shift and go to state 20
    VARS_VAR                       shift and go to state 11

state 14

    (1) PROGRAMA -> program id semicolon PROGRAMA_VARS nt_cambiarScope . PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO
    (6) PROGRAMA_FUNC -> . PROGRAMA_FUNC_AUX
    (7) PROGRAMA_FUNC -> . PROGRAMA_FUNC PROGRAMA_FUNC_AUX
    (8) PROGRAMA_FUNC_AUX -> . FUNC
    (9) PROGRAMA_FUNC_AUX -> . empty
    (52) FUNC -> . TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub
    (53) FUNC -> . VOIDFUNC nt_pushEndsub
    (150) empty -> .
    (26) TIPO -> . int nt_cambioTipoActual
    (27) TIPO -> . float nt_cambioTipoActual
    (28) TIPO -> . bool nt_cambioTipoActual
    (29) TIPO -> . string nt_cambioTipoActual
    (62) VOIDFUNC -> . void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb

  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for bool resolved as shift
  ! shift/reduce conflict for string resolved as shift
  ! shift/reduce conflict for void resolved as shift
    main            reduce using rule 150 (empty -> .)
    int             shift and go to state 22
    float           shift and go to state 23
    bool            shift and go to state 26
    string          shift and go to state 29
    void            shift and go to state 30

  ! int             [ reduce using rule 150 (empty -> .) ]
  ! float           [ reduce using rule 150 (empty -> .) ]
  ! bool            [ reduce using rule 150 (empty -> .) ]
  ! string          [ reduce using rule 150 (empty -> .) ]
  ! void            [ reduce using rule 150 (empty -> .) ]

    PROGRAMA_FUNC_AUX              shift and go to state 25
    TIPO                           shift and go to state 24
    PROGRAMA_FUNC                  shift and go to state 21
    VOIDFUNC                       shift and go to state 27
    FUNC                           shift and go to state 31
    empty                          shift and go to state 28

state 15

    (2) nt_cambiarScope -> empty .

    int             reduce using rule 2 (nt_cambiarScope -> empty .)
    float           reduce using rule 2 (nt_cambiarScope -> empty .)
    bool            reduce using rule 2 (nt_cambiarScope -> empty .)
    string          reduce using rule 2 (nt_cambiarScope -> empty .)
    void            reduce using rule 2 (nt_cambiarScope -> empty .)
    main            reduce using rule 2 (nt_cambiarScope -> empty .)
    left_cb         reduce using rule 2 (nt_cambiarScope -> empty .)


state 16

    (22) VARS_VAR -> var nt_hacerVar . TIPO VARS_VAR_AUX semicolon
    (26) TIPO -> . int nt_cambioTipoActual
    (27) TIPO -> . float nt_cambioTipoActual
    (28) TIPO -> . bool nt_cambioTipoActual
    (29) TIPO -> . string nt_cambioTipoActual

    int             shift and go to state 22
    float           shift and go to state 23
    bool            shift and go to state 26
    string          shift and go to state 29

    TIPO                           shift and go to state 32

state 17

    (23) nt_hacerVar -> empty .

    int             reduce using rule 23 (nt_hacerVar -> empty .)
    float           reduce using rule 23 (nt_hacerVar -> empty .)
    bool            reduce using rule 23 (nt_hacerVar -> empty .)
    string          reduce using rule 23 (nt_hacerVar -> empty .)


state 18

    (15) VARS_LIST -> list nt_hacerLista . TIPO VARS_LIST_AUX semicolon
    (26) TIPO -> . int nt_cambioTipoActual
    (27) TIPO -> . float nt_cambioTipoActual
    (28) TIPO -> . bool nt_cambioTipoActual
    (29) TIPO -> . string nt_cambioTipoActual

    int             shift and go to state 22
    float           shift and go to state 23
    bool            shift and go to state 26
    string          shift and go to state 29

    TIPO                           shift and go to state 33

state 19

    (16) nt_hacerLista -> empty .

    int             reduce using rule 16 (nt_hacerLista -> empty .)
    float           reduce using rule 16 (nt_hacerLista -> empty .)
    bool            reduce using rule 16 (nt_hacerLista -> empty .)
    string          reduce using rule 16 (nt_hacerLista -> empty .)


state 20

    (12) VARS_AUX -> VARS_AUX VARS_LIST_VAR .

    list            reduce using rule 12 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    var             reduce using rule 12 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    if              reduce using rule 12 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    while           reduce using rule 12 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    cread           reduce using rule 12 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    cwrite          reduce using rule 12 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    left_par        reduce using rule 12 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    id              reduce using rule 12 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    return          reduce using rule 12 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    right_cb        reduce using rule 12 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    int             reduce using rule 12 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    float           reduce using rule 12 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    bool            reduce using rule 12 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    string          reduce using rule 12 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    void            reduce using rule 12 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    main            reduce using rule 12 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)


state 21

    (1) PROGRAMA -> program id semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC . nt_cambiarScope main nt_ambienteMain CUERPO
    (7) PROGRAMA_FUNC -> PROGRAMA_FUNC . PROGRAMA_FUNC_AUX
    (2) nt_cambiarScope -> . empty
    (8) PROGRAMA_FUNC_AUX -> . FUNC
    (9) PROGRAMA_FUNC_AUX -> . empty
    (150) empty -> .
    (52) FUNC -> . TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub
    (53) FUNC -> . VOIDFUNC nt_pushEndsub
    (26) TIPO -> . int nt_cambioTipoActual
    (27) TIPO -> . float nt_cambioTipoActual
    (28) TIPO -> . bool nt_cambioTipoActual
    (29) TIPO -> . string nt_cambioTipoActual
    (62) VOIDFUNC -> . void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb

  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for bool resolved as shift
  ! shift/reduce conflict for string resolved as shift
  ! shift/reduce conflict for void resolved as shift
    main            reduce using rule 150 (empty -> .)
    int             shift and go to state 22
    float           shift and go to state 23
    bool            shift and go to state 26
    string          shift and go to state 29
    void            shift and go to state 30

  ! int             [ reduce using rule 150 (empty -> .) ]
  ! float           [ reduce using rule 150 (empty -> .) ]
  ! bool            [ reduce using rule 150 (empty -> .) ]
  ! string          [ reduce using rule 150 (empty -> .) ]
  ! void            [ reduce using rule 150 (empty -> .) ]

    PROGRAMA_FUNC_AUX              shift and go to state 34
    TIPO                           shift and go to state 24
    VOIDFUNC                       shift and go to state 27
    FUNC                           shift and go to state 31
    nt_cambiarScope                shift and go to state 36
    empty                          shift and go to state 35

state 22

    (26) TIPO -> int . nt_cambioTipoActual
    (30) nt_cambioTipoActual -> . empty
    (150) empty -> .

    id              reduce using rule 150 (empty -> .)

    nt_cambioTipoActual            shift and go to state 37
    empty                          shift and go to state 38

state 23

    (27) TIPO -> float . nt_cambioTipoActual
    (30) nt_cambioTipoActual -> . empty
    (150) empty -> .

    id              reduce using rule 150 (empty -> .)

    nt_cambioTipoActual            shift and go to state 39
    empty                          shift and go to state 38

state 24

    (52) FUNC -> TIPO . nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub
    (56) nt_cambioFuncActual -> . empty
    (150) empty -> .

    id              reduce using rule 150 (empty -> .)

    nt_cambioFuncActual            shift and go to state 40
    empty                          shift and go to state 41

state 25

    (6) PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .

    int             reduce using rule 6 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)
    float           reduce using rule 6 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)
    bool            reduce using rule 6 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)
    string          reduce using rule 6 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)
    void            reduce using rule 6 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)
    main            reduce using rule 6 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)


state 26

    (28) TIPO -> bool . nt_cambioTipoActual
    (30) nt_cambioTipoActual -> . empty
    (150) empty -> .

    id              reduce using rule 150 (empty -> .)

    nt_cambioTipoActual            shift and go to state 42
    empty                          shift and go to state 38

state 27

    (53) FUNC -> VOIDFUNC . nt_pushEndsub
    (54) nt_pushEndsub -> . empty
    (150) empty -> .

    int             reduce using rule 150 (empty -> .)
    float           reduce using rule 150 (empty -> .)
    bool            reduce using rule 150 (empty -> .)
    string          reduce using rule 150 (empty -> .)
    void            reduce using rule 150 (empty -> .)
    main            reduce using rule 150 (empty -> .)

    nt_pushEndsub                  shift and go to state 43
    empty                          shift and go to state 44

state 28

    (9) PROGRAMA_FUNC_AUX -> empty .

    int             reduce using rule 9 (PROGRAMA_FUNC_AUX -> empty .)
    float           reduce using rule 9 (PROGRAMA_FUNC_AUX -> empty .)
    bool            reduce using rule 9 (PROGRAMA_FUNC_AUX -> empty .)
    string          reduce using rule 9 (PROGRAMA_FUNC_AUX -> empty .)
    void            reduce using rule 9 (PROGRAMA_FUNC_AUX -> empty .)
    main            reduce using rule 9 (PROGRAMA_FUNC_AUX -> empty .)


state 29

    (29) TIPO -> string . nt_cambioTipoActual
    (30) nt_cambioTipoActual -> . empty
    (150) empty -> .

    id              reduce using rule 150 (empty -> .)

    nt_cambioTipoActual            shift and go to state 45
    empty                          shift and go to state 38

state 30

    (62) VOIDFUNC -> void . nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb
    (63) nt_hacerVoid -> . empty
    (150) empty -> .

    id              reduce using rule 150 (empty -> .)

    nt_hacerVoid                   shift and go to state 47
    empty                          shift and go to state 46

state 31

    (8) PROGRAMA_FUNC_AUX -> FUNC .

    int             reduce using rule 8 (PROGRAMA_FUNC_AUX -> FUNC .)
    float           reduce using rule 8 (PROGRAMA_FUNC_AUX -> FUNC .)
    bool            reduce using rule 8 (PROGRAMA_FUNC_AUX -> FUNC .)
    string          reduce using rule 8 (PROGRAMA_FUNC_AUX -> FUNC .)
    void            reduce using rule 8 (PROGRAMA_FUNC_AUX -> FUNC .)
    main            reduce using rule 8 (PROGRAMA_FUNC_AUX -> FUNC .)


state 32

    (22) VARS_VAR -> var nt_hacerVar TIPO . VARS_VAR_AUX semicolon
    (24) VARS_VAR_AUX -> . id nt_agregarId nt_agregarDicVar
    (25) VARS_VAR_AUX -> . VARS_VAR_AUX comma id nt_agregarId nt_agregarDicVar

    id              shift and go to state 49

    VARS_VAR_AUX                   shift and go to state 48

state 33

    (15) VARS_LIST -> list nt_hacerLista TIPO . VARS_LIST_AUX semicolon
    (17) VARS_LIST_AUX -> . id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar
    (18) VARS_LIST_AUX -> . VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    id              shift and go to state 51

    VARS_LIST_AUX                  shift and go to state 50

state 34

    (7) PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .

    int             reduce using rule 7 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)
    float           reduce using rule 7 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)
    bool            reduce using rule 7 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)
    string          reduce using rule 7 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)
    void            reduce using rule 7 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)
    main            reduce using rule 7 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)


state 35

    (2) nt_cambiarScope -> empty .
    (9) PROGRAMA_FUNC_AUX -> empty .

  ! reduce/reduce conflict for main resolved using rule 2 (nt_cambiarScope -> empty .)
    main            reduce using rule 2 (nt_cambiarScope -> empty .)
    int             reduce using rule 9 (PROGRAMA_FUNC_AUX -> empty .)
    float           reduce using rule 9 (PROGRAMA_FUNC_AUX -> empty .)
    bool            reduce using rule 9 (PROGRAMA_FUNC_AUX -> empty .)
    string          reduce using rule 9 (PROGRAMA_FUNC_AUX -> empty .)
    void            reduce using rule 9 (PROGRAMA_FUNC_AUX -> empty .)

  ! main            [ reduce using rule 9 (PROGRAMA_FUNC_AUX -> empty .) ]


state 36

    (1) PROGRAMA -> program id semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope . main nt_ambienteMain CUERPO

    main            shift and go to state 52


state 37

    (26) TIPO -> int nt_cambioTipoActual .

    id              reduce using rule 26 (TIPO -> int nt_cambioTipoActual .)


state 38

    (30) nt_cambioTipoActual -> empty .

    id              reduce using rule 30 (nt_cambioTipoActual -> empty .)


state 39

    (27) TIPO -> float nt_cambioTipoActual .

    id              reduce using rule 27 (TIPO -> float nt_cambioTipoActual .)


state 40

    (52) FUNC -> TIPO nt_cambioFuncActual . id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub

    id              shift and go to state 53


state 41

    (56) nt_cambioFuncActual -> empty .

    id              reduce using rule 56 (nt_cambioFuncActual -> empty .)


state 42

    (28) TIPO -> bool nt_cambioTipoActual .

    id              reduce using rule 28 (TIPO -> bool nt_cambioTipoActual .)


state 43

    (53) FUNC -> VOIDFUNC nt_pushEndsub .

    int             reduce using rule 53 (FUNC -> VOIDFUNC nt_pushEndsub .)
    float           reduce using rule 53 (FUNC -> VOIDFUNC nt_pushEndsub .)
    bool            reduce using rule 53 (FUNC -> VOIDFUNC nt_pushEndsub .)
    string          reduce using rule 53 (FUNC -> VOIDFUNC nt_pushEndsub .)
    void            reduce using rule 53 (FUNC -> VOIDFUNC nt_pushEndsub .)
    main            reduce using rule 53 (FUNC -> VOIDFUNC nt_pushEndsub .)


state 44

    (54) nt_pushEndsub -> empty .

    int             reduce using rule 54 (nt_pushEndsub -> empty .)
    float           reduce using rule 54 (nt_pushEndsub -> empty .)
    bool            reduce using rule 54 (nt_pushEndsub -> empty .)
    string          reduce using rule 54 (nt_pushEndsub -> empty .)
    void            reduce using rule 54 (nt_pushEndsub -> empty .)
    main            reduce using rule 54 (nt_pushEndsub -> empty .)


state 45

    (29) TIPO -> string nt_cambioTipoActual .

    id              reduce using rule 29 (TIPO -> string nt_cambioTipoActual .)


state 46

    (63) nt_hacerVoid -> empty .

    id              reduce using rule 63 (nt_hacerVoid -> empty .)


state 47

    (62) VOIDFUNC -> void nt_hacerVoid . id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb

    id              shift and go to state 54


state 48

    (22) VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX . semicolon
    (25) VARS_VAR_AUX -> VARS_VAR_AUX . comma id nt_agregarId nt_agregarDicVar

    semicolon       shift and go to state 55
    comma           shift and go to state 56


state 49

    (24) VARS_VAR_AUX -> id . nt_agregarId nt_agregarDicVar
    (19) nt_agregarId -> . empty
    (150) empty -> .

    semicolon       reduce using rule 150 (empty -> .)
    comma           reduce using rule 150 (empty -> .)

    empty                          shift and go to state 57
    nt_agregarId                   shift and go to state 58

state 50

    (15) VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX . semicolon
    (18) VARS_LIST_AUX -> VARS_LIST_AUX . comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    semicolon       shift and go to state 59
    comma           shift and go to state 60


state 51

    (17) VARS_LIST_AUX -> id . nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar
    (19) nt_agregarId -> . empty
    (150) empty -> .

    left_sb         reduce using rule 150 (empty -> .)

    empty                          shift and go to state 57
    nt_agregarId                   shift and go to state 61

state 52

    (1) PROGRAMA -> program id semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main . nt_ambienteMain CUERPO
    (3) nt_ambienteMain -> . nt_cambiarScope
    (2) nt_cambiarScope -> . empty
    (150) empty -> .

    left_cb         reduce using rule 150 (empty -> .)

    nt_ambienteMain                shift and go to state 62
    nt_cambiarScope                shift and go to state 63
    empty                          shift and go to state 15

state 53

    (52) FUNC -> TIPO nt_cambioFuncActual id . nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub
    (57) nt_agregarIdFunc -> . empty
    (150) empty -> .

    left_par        reduce using rule 150 (empty -> .)

    nt_agregarIdFunc               shift and go to state 64
    empty                          shift and go to state 65

state 54

    (62) VOIDFUNC -> void nt_hacerVoid id . nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb
    (57) nt_agregarIdFunc -> . empty
    (150) empty -> .

    left_par        reduce using rule 150 (empty -> .)

    nt_agregarIdFunc               shift and go to state 66
    empty                          shift and go to state 65

state 55

    (22) VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .

    list            reduce using rule 22 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    var             reduce using rule 22 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    if              reduce using rule 22 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    while           reduce using rule 22 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    cread           reduce using rule 22 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    cwrite          reduce using rule 22 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    left_par        reduce using rule 22 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    id              reduce using rule 22 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    return          reduce using rule 22 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    right_cb        reduce using rule 22 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    int             reduce using rule 22 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    float           reduce using rule 22 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    bool            reduce using rule 22 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    string          reduce using rule 22 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    void            reduce using rule 22 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    main            reduce using rule 22 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)


state 56

    (25) VARS_VAR_AUX -> VARS_VAR_AUX comma . id nt_agregarId nt_agregarDicVar

    id              shift and go to state 67


state 57

    (19) nt_agregarId -> empty .

    left_sb         reduce using rule 19 (nt_agregarId -> empty .)
    semicolon       reduce using rule 19 (nt_agregarId -> empty .)
    comma           reduce using rule 19 (nt_agregarId -> empty .)


state 58

    (24) VARS_VAR_AUX -> id nt_agregarId . nt_agregarDicVar
    (21) nt_agregarDicVar -> . empty
    (150) empty -> .

    semicolon       reduce using rule 150 (empty -> .)
    comma           reduce using rule 150 (empty -> .)

    nt_agregarDicVar               shift and go to state 68
    empty                          shift and go to state 69

state 59

    (15) VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .

    list            reduce using rule 15 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    var             reduce using rule 15 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    if              reduce using rule 15 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    while           reduce using rule 15 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    cread           reduce using rule 15 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    cwrite          reduce using rule 15 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    left_par        reduce using rule 15 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    id              reduce using rule 15 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    return          reduce using rule 15 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    right_cb        reduce using rule 15 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    int             reduce using rule 15 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    float           reduce using rule 15 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    bool            reduce using rule 15 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    string          reduce using rule 15 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    void            reduce using rule 15 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    main            reduce using rule 15 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)


state 60

    (18) VARS_LIST_AUX -> VARS_LIST_AUX comma . id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    id              shift and go to state 70


state 61

    (17) VARS_LIST_AUX -> id nt_agregarId . left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    left_sb         shift and go to state 71


state 62

    (1) PROGRAMA -> program id semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain . CUERPO
    (31) CUERPO -> . left_cb CUERPO_AUX right_cb

    left_cb         shift and go to state 73

    CUERPO                         shift and go to state 72

state 63

    (3) nt_ambienteMain -> nt_cambiarScope .

    left_cb         reduce using rule 3 (nt_ambienteMain -> nt_cambiarScope .)


state 64

    (52) FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc . left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub

    left_par        shift and go to state 74


state 65

    (57) nt_agregarIdFunc -> empty .

    left_par        reduce using rule 57 (nt_agregarIdFunc -> empty .)


state 66

    (62) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc . left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb

    left_par        shift and go to state 75


state 67

    (25) VARS_VAR_AUX -> VARS_VAR_AUX comma id . nt_agregarId nt_agregarDicVar
    (19) nt_agregarId -> . empty
    (150) empty -> .

    semicolon       reduce using rule 150 (empty -> .)
    comma           reduce using rule 150 (empty -> .)

    nt_agregarId                   shift and go to state 76
    empty                          shift and go to state 57

state 68

    (24) VARS_VAR_AUX -> id nt_agregarId nt_agregarDicVar .

    semicolon       reduce using rule 24 (VARS_VAR_AUX -> id nt_agregarId nt_agregarDicVar .)
    comma           reduce using rule 24 (VARS_VAR_AUX -> id nt_agregarId nt_agregarDicVar .)


state 69

    (21) nt_agregarDicVar -> empty .

    semicolon       reduce using rule 21 (nt_agregarDicVar -> empty .)
    comma           reduce using rule 21 (nt_agregarDicVar -> empty .)


state 70

    (18) VARS_LIST_AUX -> VARS_LIST_AUX comma id . nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar
    (19) nt_agregarId -> . empty
    (150) empty -> .

    left_sb         reduce using rule 150 (empty -> .)

    empty                          shift and go to state 57
    nt_agregarId                   shift and go to state 77

state 71

    (17) VARS_LIST_AUX -> id nt_agregarId left_sb . cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    cteInt          shift and go to state 78


state 72

    (1) PROGRAMA -> program id semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO .

    $end            reduce using rule 1 (PROGRAMA -> program id semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO .)


state 73

    (31) CUERPO -> left_cb . CUERPO_AUX right_cb
    (32) CUERPO_AUX -> . CUERPO_VARS CUERPO_ESTATUTO
    (33) CUERPO_AUX -> . CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO
    (34) CUERPO_VARS -> . VARS
    (35) CUERPO_VARS -> . empty
    (10) VARS -> . VARS_AUX
    (150) empty -> .
    (11) VARS_AUX -> . VARS_LIST_VAR
    (12) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (13) VARS_LIST_VAR -> . VARS_LIST
    (14) VARS_LIST_VAR -> . VARS_VAR
    (15) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (22) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    if              reduce using rule 150 (empty -> .)
    while           reduce using rule 150 (empty -> .)
    cread           reduce using rule 150 (empty -> .)
    cwrite          reduce using rule 150 (empty -> .)
    left_par        reduce using rule 150 (empty -> .)
    id              reduce using rule 150 (empty -> .)
    right_cb        reduce using rule 150 (empty -> .)
    list            shift and go to state 12
    var             shift and go to state 8

  ! list            [ reduce using rule 150 (empty -> .) ]
  ! var             [ reduce using rule 150 (empty -> .) ]

    CUERPO_VARS                    shift and go to state 79
    VARS                           shift and go to state 80
    VARS_LIST                      shift and go to state 6
    VARS_LIST_VAR                  shift and go to state 10
    VARS_AUX                       shift and go to state 13
    CUERPO_AUX                     shift and go to state 82
    VARS_VAR                       shift and go to state 11
    empty                          shift and go to state 81

state 74

    (52) FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par . FUNC_PARA right_par CUERPORETORNO nt_pushEndsub
    (58) FUNC_PARA -> . TIPO id nt_agregarParametro
    (59) FUNC_PARA -> . FUNC_PARA comma TIPO id nt_agregarParametro
    (60) FUNC_PARA -> . empty
    (26) TIPO -> . int nt_cambioTipoActual
    (27) TIPO -> . float nt_cambioTipoActual
    (28) TIPO -> . bool nt_cambioTipoActual
    (29) TIPO -> . string nt_cambioTipoActual
    (150) empty -> .

    int             shift and go to state 22
    float           shift and go to state 23
    bool            shift and go to state 26
    string          shift and go to state 29
    right_par       reduce using rule 150 (empty -> .)
    comma           reduce using rule 150 (empty -> .)

    TIPO                           shift and go to state 83
    empty                          shift and go to state 84
    FUNC_PARA                      shift and go to state 85

state 75

    (62) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par . VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb
    (64) VOIDFUNC_PARA -> . TIPO id nt_agregarParametro
    (65) VOIDFUNC_PARA -> . VOIDFUNC_PARA comma TIPO id nt_agregarParametro
    (26) TIPO -> . int nt_cambioTipoActual
    (27) TIPO -> . float nt_cambioTipoActual
    (28) TIPO -> . bool nt_cambioTipoActual
    (29) TIPO -> . string nt_cambioTipoActual

    int             shift and go to state 22
    float           shift and go to state 23
    bool            shift and go to state 26
    string          shift and go to state 29

    TIPO                           shift and go to state 87
    VOIDFUNC_PARA                  shift and go to state 86

state 76

    (25) VARS_VAR_AUX -> VARS_VAR_AUX comma id nt_agregarId . nt_agregarDicVar
    (21) nt_agregarDicVar -> . empty
    (150) empty -> .

    semicolon       reduce using rule 150 (empty -> .)
    comma           reduce using rule 150 (empty -> .)

    nt_agregarDicVar               shift and go to state 88
    empty                          shift and go to state 69

state 77

    (18) VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId . left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    left_sb         shift and go to state 89


state 78

    (17) VARS_LIST_AUX -> id nt_agregarId left_sb cteInt . nt_agregarCteLista right_sb nt_agregarDicVar
    (20) nt_agregarCteLista -> . empty
    (150) empty -> .

    right_sb        reduce using rule 150 (empty -> .)

    nt_agregarCteLista             shift and go to state 90
    empty                          shift and go to state 91

state 79

    (32) CUERPO_AUX -> CUERPO_VARS . CUERPO_ESTATUTO
    (36) CUERPO_ESTATUTO -> . ESTATUTO
    (37) CUERPO_ESTATUTO -> . empty
    (66) ESTATUTO -> . ASIGNACION
    (67) ESTATUTO -> . CONDICION
    (68) ESTATUTO -> . CICLO
    (69) ESTATUTO -> . LECTURA
    (70) ESTATUTO -> . ESCRITURA
    (71) ESTATUTO -> . LLAMADA
    (150) empty -> .
    (143) ASIGNACION -> . ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon
    (72) CONDICION -> . if CONDICION_AUX
    (82) CICLO -> . while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop
    (85) LECTURA -> . cread left_par id nt_leer right_par semicolon
    (87) ESCRITURA -> . cwrite left_par EXPRESION nt_escribir right_par semicolon
    (89) LLAMADA -> . left_par LLAMADA_EXPRESION right_par semicolon
    (145) ASIGNACION_AUX -> . id nt_pushPilaO
    (146) ASIGNACION_AUX -> . LISTA
    (127) LISTA -> . id left_sb EXP right_sb

  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for cread resolved as shift
  ! shift/reduce conflict for cwrite resolved as shift
  ! shift/reduce conflict for left_par resolved as shift
  ! shift/reduce conflict for id resolved as shift
    right_cb        reduce using rule 150 (empty -> .)
    list            reduce using rule 150 (empty -> .)
    var             reduce using rule 150 (empty -> .)
    if              shift and go to state 95
    while           shift and go to state 107
    cread           shift and go to state 93
    cwrite          shift and go to state 99
    left_par        shift and go to state 105
    id              shift and go to state 98

  ! if              [ reduce using rule 150 (empty -> .) ]
  ! while           [ reduce using rule 150 (empty -> .) ]
  ! cread           [ reduce using rule 150 (empty -> .) ]
  ! cwrite          [ reduce using rule 150 (empty -> .) ]
  ! left_par        [ reduce using rule 150 (empty -> .) ]
  ! id              [ reduce using rule 150 (empty -> .) ]

    CICLO                          shift and go to state 92
    LECTURA                        shift and go to state 94
    ESCRITURA                      shift and go to state 101
    ASIGNACION                     shift and go to state 96
    ESTATUTO                       shift and go to state 97
    ASIGNACION_AUX                 shift and go to state 100
    empty                          shift and go to state 102
    LLAMADA                        shift and go to state 103
    CONDICION                      shift and go to state 104
    CUERPO_ESTATUTO                shift and go to state 106
    LISTA                          shift and go to state 108

state 80

    (34) CUERPO_VARS -> VARS .

    if              reduce using rule 34 (CUERPO_VARS -> VARS .)
    while           reduce using rule 34 (CUERPO_VARS -> VARS .)
    cread           reduce using rule 34 (CUERPO_VARS -> VARS .)
    cwrite          reduce using rule 34 (CUERPO_VARS -> VARS .)
    left_par        reduce using rule 34 (CUERPO_VARS -> VARS .)
    id              reduce using rule 34 (CUERPO_VARS -> VARS .)
    right_cb        reduce using rule 34 (CUERPO_VARS -> VARS .)
    list            reduce using rule 34 (CUERPO_VARS -> VARS .)
    var             reduce using rule 34 (CUERPO_VARS -> VARS .)


state 81

    (35) CUERPO_VARS -> empty .

    if              reduce using rule 35 (CUERPO_VARS -> empty .)
    while           reduce using rule 35 (CUERPO_VARS -> empty .)
    cread           reduce using rule 35 (CUERPO_VARS -> empty .)
    cwrite          reduce using rule 35 (CUERPO_VARS -> empty .)
    left_par        reduce using rule 35 (CUERPO_VARS -> empty .)
    id              reduce using rule 35 (CUERPO_VARS -> empty .)
    right_cb        reduce using rule 35 (CUERPO_VARS -> empty .)
    list            reduce using rule 35 (CUERPO_VARS -> empty .)
    var             reduce using rule 35 (CUERPO_VARS -> empty .)


state 82

    (31) CUERPO -> left_cb CUERPO_AUX . right_cb
    (33) CUERPO_AUX -> CUERPO_AUX . CUERPO_VARS CUERPO_ESTATUTO
    (34) CUERPO_VARS -> . VARS
    (35) CUERPO_VARS -> . empty
    (10) VARS -> . VARS_AUX
    (150) empty -> .
    (11) VARS_AUX -> . VARS_LIST_VAR
    (12) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (13) VARS_LIST_VAR -> . VARS_LIST
    (14) VARS_LIST_VAR -> . VARS_VAR
    (15) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (22) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for right_cb resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    right_cb        shift and go to state 110
    if              reduce using rule 150 (empty -> .)
    while           reduce using rule 150 (empty -> .)
    cread           reduce using rule 150 (empty -> .)
    cwrite          reduce using rule 150 (empty -> .)
    left_par        reduce using rule 150 (empty -> .)
    id              reduce using rule 150 (empty -> .)
    list            shift and go to state 12
    var             shift and go to state 8

  ! right_cb        [ reduce using rule 150 (empty -> .) ]
  ! list            [ reduce using rule 150 (empty -> .) ]
  ! var             [ reduce using rule 150 (empty -> .) ]

    CUERPO_VARS                    shift and go to state 109
    VARS                           shift and go to state 80
    VARS_LIST                      shift and go to state 6
    VARS_LIST_VAR                  shift and go to state 10
    VARS_AUX                       shift and go to state 13
    VARS_VAR                       shift and go to state 11
    empty                          shift and go to state 81

state 83

    (58) FUNC_PARA -> TIPO . id nt_agregarParametro

    id              shift and go to state 111


state 84

    (60) FUNC_PARA -> empty .

    right_par       reduce using rule 60 (FUNC_PARA -> empty .)
    comma           reduce using rule 60 (FUNC_PARA -> empty .)


state 85

    (52) FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA . right_par CUERPORETORNO nt_pushEndsub
    (59) FUNC_PARA -> FUNC_PARA . comma TIPO id nt_agregarParametro

    right_par       shift and go to state 112
    comma           shift and go to state 113


state 86

    (62) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA . right_par left_cb CUERPOFUNC right_cb
    (65) VOIDFUNC_PARA -> VOIDFUNC_PARA . comma TIPO id nt_agregarParametro

    right_par       shift and go to state 114
    comma           shift and go to state 115


state 87

    (64) VOIDFUNC_PARA -> TIPO . id nt_agregarParametro

    id              shift and go to state 116


state 88

    (25) VARS_VAR_AUX -> VARS_VAR_AUX comma id nt_agregarId nt_agregarDicVar .

    semicolon       reduce using rule 25 (VARS_VAR_AUX -> VARS_VAR_AUX comma id nt_agregarId nt_agregarDicVar .)
    comma           reduce using rule 25 (VARS_VAR_AUX -> VARS_VAR_AUX comma id nt_agregarId nt_agregarDicVar .)


state 89

    (18) VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb . cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    cteInt          shift and go to state 117


state 90

    (17) VARS_LIST_AUX -> id nt_agregarId left_sb cteInt nt_agregarCteLista . right_sb nt_agregarDicVar

    right_sb        shift and go to state 118


state 91

    (20) nt_agregarCteLista -> empty .

    right_sb        reduce using rule 20 (nt_agregarCteLista -> empty .)


state 92

    (68) ESTATUTO -> CICLO .

    right_cb        reduce using rule 68 (ESTATUTO -> CICLO .)
    list            reduce using rule 68 (ESTATUTO -> CICLO .)
    var             reduce using rule 68 (ESTATUTO -> CICLO .)
    if              reduce using rule 68 (ESTATUTO -> CICLO .)
    while           reduce using rule 68 (ESTATUTO -> CICLO .)
    cread           reduce using rule 68 (ESTATUTO -> CICLO .)
    cwrite          reduce using rule 68 (ESTATUTO -> CICLO .)
    left_par        reduce using rule 68 (ESTATUTO -> CICLO .)
    id              reduce using rule 68 (ESTATUTO -> CICLO .)
    return          reduce using rule 68 (ESTATUTO -> CICLO .)


state 93

    (85) LECTURA -> cread . left_par id nt_leer right_par semicolon

    left_par        shift and go to state 119


state 94

    (69) ESTATUTO -> LECTURA .

    right_cb        reduce using rule 69 (ESTATUTO -> LECTURA .)
    list            reduce using rule 69 (ESTATUTO -> LECTURA .)
    var             reduce using rule 69 (ESTATUTO -> LECTURA .)
    if              reduce using rule 69 (ESTATUTO -> LECTURA .)
    while           reduce using rule 69 (ESTATUTO -> LECTURA .)
    cread           reduce using rule 69 (ESTATUTO -> LECTURA .)
    cwrite          reduce using rule 69 (ESTATUTO -> LECTURA .)
    left_par        reduce using rule 69 (ESTATUTO -> LECTURA .)
    id              reduce using rule 69 (ESTATUTO -> LECTURA .)
    return          reduce using rule 69 (ESTATUTO -> LECTURA .)


state 95

    (72) CONDICION -> if . CONDICION_AUX
    (73) CONDICION_AUX -> . left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto

    left_par        shift and go to state 120

    CONDICION_AUX                  shift and go to state 121

state 96

    (66) ESTATUTO -> ASIGNACION .

    right_cb        reduce using rule 66 (ESTATUTO -> ASIGNACION .)
    list            reduce using rule 66 (ESTATUTO -> ASIGNACION .)
    var             reduce using rule 66 (ESTATUTO -> ASIGNACION .)
    if              reduce using rule 66 (ESTATUTO -> ASIGNACION .)
    while           reduce using rule 66 (ESTATUTO -> ASIGNACION .)
    cread           reduce using rule 66 (ESTATUTO -> ASIGNACION .)
    cwrite          reduce using rule 66 (ESTATUTO -> ASIGNACION .)
    left_par        reduce using rule 66 (ESTATUTO -> ASIGNACION .)
    id              reduce using rule 66 (ESTATUTO -> ASIGNACION .)
    return          reduce using rule 66 (ESTATUTO -> ASIGNACION .)


state 97

    (36) CUERPO_ESTATUTO -> ESTATUTO .

    right_cb        reduce using rule 36 (CUERPO_ESTATUTO -> ESTATUTO .)
    list            reduce using rule 36 (CUERPO_ESTATUTO -> ESTATUTO .)
    var             reduce using rule 36 (CUERPO_ESTATUTO -> ESTATUTO .)
    if              reduce using rule 36 (CUERPO_ESTATUTO -> ESTATUTO .)
    while           reduce using rule 36 (CUERPO_ESTATUTO -> ESTATUTO .)
    cread           reduce using rule 36 (CUERPO_ESTATUTO -> ESTATUTO .)
    cwrite          reduce using rule 36 (CUERPO_ESTATUTO -> ESTATUTO .)
    left_par        reduce using rule 36 (CUERPO_ESTATUTO -> ESTATUTO .)
    id              reduce using rule 36 (CUERPO_ESTATUTO -> ESTATUTO .)


state 98

    (145) ASIGNACION_AUX -> id . nt_pushPilaO
    (127) LISTA -> id . left_sb EXP right_sb
    (147) nt_pushPilaO -> . empty
    (150) empty -> .

    left_sb         shift and go to state 122
    equals          reduce using rule 150 (empty -> .)

    nt_pushPilaO                   shift and go to state 123
    empty                          shift and go to state 124

state 99

    (87) ESCRITURA -> cwrite . left_par EXPRESION nt_escribir right_par semicolon

    left_par        shift and go to state 125


state 100

    (143) ASIGNACION -> ASIGNACION_AUX . equals nt_pushPOper EXPRESION nt_checaEquals semicolon

    equals          shift and go to state 126


state 101

    (70) ESTATUTO -> ESCRITURA .

    right_cb        reduce using rule 70 (ESTATUTO -> ESCRITURA .)
    list            reduce using rule 70 (ESTATUTO -> ESCRITURA .)
    var             reduce using rule 70 (ESTATUTO -> ESCRITURA .)
    if              reduce using rule 70 (ESTATUTO -> ESCRITURA .)
    while           reduce using rule 70 (ESTATUTO -> ESCRITURA .)
    cread           reduce using rule 70 (ESTATUTO -> ESCRITURA .)
    cwrite          reduce using rule 70 (ESTATUTO -> ESCRITURA .)
    left_par        reduce using rule 70 (ESTATUTO -> ESCRITURA .)
    id              reduce using rule 70 (ESTATUTO -> ESCRITURA .)
    return          reduce using rule 70 (ESTATUTO -> ESCRITURA .)


state 102

    (37) CUERPO_ESTATUTO -> empty .

    right_cb        reduce using rule 37 (CUERPO_ESTATUTO -> empty .)
    list            reduce using rule 37 (CUERPO_ESTATUTO -> empty .)
    var             reduce using rule 37 (CUERPO_ESTATUTO -> empty .)
    if              reduce using rule 37 (CUERPO_ESTATUTO -> empty .)
    while           reduce using rule 37 (CUERPO_ESTATUTO -> empty .)
    cread           reduce using rule 37 (CUERPO_ESTATUTO -> empty .)
    cwrite          reduce using rule 37 (CUERPO_ESTATUTO -> empty .)
    left_par        reduce using rule 37 (CUERPO_ESTATUTO -> empty .)
    id              reduce using rule 37 (CUERPO_ESTATUTO -> empty .)


state 103

    (71) ESTATUTO -> LLAMADA .

    right_cb        reduce using rule 71 (ESTATUTO -> LLAMADA .)
    list            reduce using rule 71 (ESTATUTO -> LLAMADA .)
    var             reduce using rule 71 (ESTATUTO -> LLAMADA .)
    if              reduce using rule 71 (ESTATUTO -> LLAMADA .)
    while           reduce using rule 71 (ESTATUTO -> LLAMADA .)
    cread           reduce using rule 71 (ESTATUTO -> LLAMADA .)
    cwrite          reduce using rule 71 (ESTATUTO -> LLAMADA .)
    left_par        reduce using rule 71 (ESTATUTO -> LLAMADA .)
    id              reduce using rule 71 (ESTATUTO -> LLAMADA .)
    return          reduce using rule 71 (ESTATUTO -> LLAMADA .)


state 104

    (67) ESTATUTO -> CONDICION .

    right_cb        reduce using rule 67 (ESTATUTO -> CONDICION .)
    list            reduce using rule 67 (ESTATUTO -> CONDICION .)
    var             reduce using rule 67 (ESTATUTO -> CONDICION .)
    if              reduce using rule 67 (ESTATUTO -> CONDICION .)
    while           reduce using rule 67 (ESTATUTO -> CONDICION .)
    cread           reduce using rule 67 (ESTATUTO -> CONDICION .)
    cwrite          reduce using rule 67 (ESTATUTO -> CONDICION .)
    left_par        reduce using rule 67 (ESTATUTO -> CONDICION .)
    id              reduce using rule 67 (ESTATUTO -> CONDICION .)
    return          reduce using rule 67 (ESTATUTO -> CONDICION .)


state 105

    (89) LLAMADA -> left_par . LLAMADA_EXPRESION right_par semicolon
    (90) LLAMADA_EXPRESION -> . EXPRESION
    (91) LLAMADA_EXPRESION -> . LLAMADA_EXPRESION comma EXPRESION
    (92) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (94) EXPRESION_NOT -> . not nt_pushPOper
    (95) EXPRESION_NOT -> . empty
    (150) empty -> .

    not             shift and go to state 130
    left_par        reduce using rule 150 (empty -> .)
    id              reduce using rule 150 (empty -> .)
    plus            reduce using rule 150 (empty -> .)
    minus           reduce using rule 150 (empty -> .)
    true            reduce using rule 150 (empty -> .)
    false           reduce using rule 150 (empty -> .)
    cteString       reduce using rule 150 (empty -> .)
    cteInt          reduce using rule 150 (empty -> .)
    cteFloat        reduce using rule 150 (empty -> .)

    EXPRESION                      shift and go to state 127
    EXPRESION_NOT                  shift and go to state 128
    LLAMADA_EXPRESION              shift and go to state 129
    empty                          shift and go to state 131

state 106

    (32) CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .

    right_cb        reduce using rule 32 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    list            reduce using rule 32 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    var             reduce using rule 32 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    if              reduce using rule 32 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    while           reduce using rule 32 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    cread           reduce using rule 32 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    cwrite          reduce using rule 32 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    left_par        reduce using rule 32 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    id              reduce using rule 32 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)


state 107

    (82) CICLO -> while . nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop
    (83) nt_saltoLoop -> . empty
    (150) empty -> .

    left_par        reduce using rule 150 (empty -> .)

    nt_saltoLoop                   shift and go to state 133
    empty                          shift and go to state 132

state 108

    (146) ASIGNACION_AUX -> LISTA .

    equals          reduce using rule 146 (ASIGNACION_AUX -> LISTA .)


state 109

    (33) CUERPO_AUX -> CUERPO_AUX CUERPO_VARS . CUERPO_ESTATUTO
    (36) CUERPO_ESTATUTO -> . ESTATUTO
    (37) CUERPO_ESTATUTO -> . empty
    (66) ESTATUTO -> . ASIGNACION
    (67) ESTATUTO -> . CONDICION
    (68) ESTATUTO -> . CICLO
    (69) ESTATUTO -> . LECTURA
    (70) ESTATUTO -> . ESCRITURA
    (71) ESTATUTO -> . LLAMADA
    (150) empty -> .
    (143) ASIGNACION -> . ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon
    (72) CONDICION -> . if CONDICION_AUX
    (82) CICLO -> . while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop
    (85) LECTURA -> . cread left_par id nt_leer right_par semicolon
    (87) ESCRITURA -> . cwrite left_par EXPRESION nt_escribir right_par semicolon
    (89) LLAMADA -> . left_par LLAMADA_EXPRESION right_par semicolon
    (145) ASIGNACION_AUX -> . id nt_pushPilaO
    (146) ASIGNACION_AUX -> . LISTA
    (127) LISTA -> . id left_sb EXP right_sb

  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for cread resolved as shift
  ! shift/reduce conflict for cwrite resolved as shift
  ! shift/reduce conflict for left_par resolved as shift
  ! shift/reduce conflict for id resolved as shift
    right_cb        reduce using rule 150 (empty -> .)
    list            reduce using rule 150 (empty -> .)
    var             reduce using rule 150 (empty -> .)
    if              shift and go to state 95
    while           shift and go to state 107
    cread           shift and go to state 93
    cwrite          shift and go to state 99
    left_par        shift and go to state 105
    id              shift and go to state 98

  ! if              [ reduce using rule 150 (empty -> .) ]
  ! while           [ reduce using rule 150 (empty -> .) ]
  ! cread           [ reduce using rule 150 (empty -> .) ]
  ! cwrite          [ reduce using rule 150 (empty -> .) ]
  ! left_par        [ reduce using rule 150 (empty -> .) ]
  ! id              [ reduce using rule 150 (empty -> .) ]

    CICLO                          shift and go to state 92
    LECTURA                        shift and go to state 94
    ESCRITURA                      shift and go to state 101
    ASIGNACION                     shift and go to state 96
    ESTATUTO                       shift and go to state 97
    ASIGNACION_AUX                 shift and go to state 100
    empty                          shift and go to state 102
    LLAMADA                        shift and go to state 103
    CONDICION                      shift and go to state 104
    CUERPO_ESTATUTO                shift and go to state 134
    LISTA                          shift and go to state 108

state 110

    (31) CUERPO -> left_cb CUERPO_AUX right_cb .

    right_cb        reduce using rule 31 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    list            reduce using rule 31 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    var             reduce using rule 31 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    if              reduce using rule 31 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    while           reduce using rule 31 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    cread           reduce using rule 31 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    cwrite          reduce using rule 31 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    left_par        reduce using rule 31 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    id              reduce using rule 31 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    return          reduce using rule 31 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    $end            reduce using rule 31 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    else            reduce using rule 31 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    elseif          reduce using rule 31 (CUERPO -> left_cb CUERPO_AUX right_cb .)


state 111

    (58) FUNC_PARA -> TIPO id . nt_agregarParametro
    (61) nt_agregarParametro -> . empty
    (150) empty -> .

    right_par       reduce using rule 150 (empty -> .)
    comma           reduce using rule 150 (empty -> .)

    empty                          shift and go to state 135
    nt_agregarParametro            shift and go to state 136

state 112

    (52) FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par . CUERPORETORNO nt_pushEndsub
    (46) CUERPORETORNO -> . left_cb CUERPORETORNO_AUX right_cb

    left_cb         shift and go to state 138

    CUERPORETORNO                  shift and go to state 137

state 113

    (59) FUNC_PARA -> FUNC_PARA comma . TIPO id nt_agregarParametro
    (26) TIPO -> . int nt_cambioTipoActual
    (27) TIPO -> . float nt_cambioTipoActual
    (28) TIPO -> . bool nt_cambioTipoActual
    (29) TIPO -> . string nt_cambioTipoActual

    int             shift and go to state 22
    float           shift and go to state 23
    bool            shift and go to state 26
    string          shift and go to state 29

    TIPO                           shift and go to state 139

state 114

    (62) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par . left_cb CUERPOFUNC right_cb

    left_cb         shift and go to state 140


state 115

    (65) VOIDFUNC_PARA -> VOIDFUNC_PARA comma . TIPO id nt_agregarParametro
    (26) TIPO -> . int nt_cambioTipoActual
    (27) TIPO -> . float nt_cambioTipoActual
    (28) TIPO -> . bool nt_cambioTipoActual
    (29) TIPO -> . string nt_cambioTipoActual

    int             shift and go to state 22
    float           shift and go to state 23
    bool            shift and go to state 26
    string          shift and go to state 29

    TIPO                           shift and go to state 141

state 116

    (64) VOIDFUNC_PARA -> TIPO id . nt_agregarParametro
    (61) nt_agregarParametro -> . empty
    (150) empty -> .

    right_par       reduce using rule 150 (empty -> .)
    comma           reduce using rule 150 (empty -> .)

    empty                          shift and go to state 135
    nt_agregarParametro            shift and go to state 142

state 117

    (18) VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt . nt_agregarCteLista right_sb nt_agregarDicVar
    (20) nt_agregarCteLista -> . empty
    (150) empty -> .

    right_sb        reduce using rule 150 (empty -> .)

    nt_agregarCteLista             shift and go to state 143
    empty                          shift and go to state 91

state 118

    (17) VARS_LIST_AUX -> id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb . nt_agregarDicVar
    (21) nt_agregarDicVar -> . empty
    (150) empty -> .

    semicolon       reduce using rule 150 (empty -> .)
    comma           reduce using rule 150 (empty -> .)

    nt_agregarDicVar               shift and go to state 144
    empty                          shift and go to state 69

state 119

    (85) LECTURA -> cread left_par . id nt_leer right_par semicolon

    id              shift and go to state 145


state 120

    (73) CONDICION_AUX -> left_par . EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto
    (92) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (94) EXPRESION_NOT -> . not nt_pushPOper
    (95) EXPRESION_NOT -> . empty
    (150) empty -> .

    not             shift and go to state 130
    left_par        reduce using rule 150 (empty -> .)
    id              reduce using rule 150 (empty -> .)
    plus            reduce using rule 150 (empty -> .)
    minus           reduce using rule 150 (empty -> .)
    true            reduce using rule 150 (empty -> .)
    false           reduce using rule 150 (empty -> .)
    cteString       reduce using rule 150 (empty -> .)
    cteInt          reduce using rule 150 (empty -> .)
    cteFloat        reduce using rule 150 (empty -> .)

    EXPRESION                      shift and go to state 146
    EXPRESION_NOT                  shift and go to state 128
    empty                          shift and go to state 131

state 121

    (72) CONDICION -> if CONDICION_AUX .

    right_cb        reduce using rule 72 (CONDICION -> if CONDICION_AUX .)
    list            reduce using rule 72 (CONDICION -> if CONDICION_AUX .)
    var             reduce using rule 72 (CONDICION -> if CONDICION_AUX .)
    if              reduce using rule 72 (CONDICION -> if CONDICION_AUX .)
    while           reduce using rule 72 (CONDICION -> if CONDICION_AUX .)
    cread           reduce using rule 72 (CONDICION -> if CONDICION_AUX .)
    cwrite          reduce using rule 72 (CONDICION -> if CONDICION_AUX .)
    left_par        reduce using rule 72 (CONDICION -> if CONDICION_AUX .)
    id              reduce using rule 72 (CONDICION -> if CONDICION_AUX .)
    return          reduce using rule 72 (CONDICION -> if CONDICION_AUX .)


state 122

    (127) LISTA -> id left_sb . EXP right_sb
    (108) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (113) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (118) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (119) FACTOR -> . CONSTANTE
    (120) FACTOR -> . LISTA
    (121) FACTOR -> . FACTOR_AUX
    (128) CONSTANTE -> . NUMERICA
    (129) CONSTANTE -> . BOOLEANA
    (130) CONSTANTE -> . STRINGS
    (127) LISTA -> . id left_sb EXP right_sb
    (122) FACTOR_AUX -> . id nt_pushPilaO
    (123) FACTOR_AUX -> . id LLAMADA_F
    (131) NUMERICA -> . NUMERICA_AUX
    (132) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (133) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (140) BOOLEANA -> . true
    (141) BOOLEANA -> . false
    (142) STRINGS -> . cteString
    (136) NUMERICA_AUX -> . cteInt nt_pushInt
    (137) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 156
    id              shift and go to state 151
    plus            shift and go to state 152
    minus           shift and go to state 165
    true            shift and go to state 157
    false           shift and go to state 147
    cteString       shift and go to state 155
    cteInt          shift and go to state 160
    cteFloat        shift and go to state 149

    BOOLEANA                       shift and go to state 150
    EXP                            shift and go to state 148
    FACTOR_AUX                     shift and go to state 153
    NUMERICA_AUX                   shift and go to state 161
    TERMINO                        shift and go to state 154
    STRINGS                        shift and go to state 158
    CONSTANTE                      shift and go to state 159
    NUMERICA                       shift and go to state 162
    FACTOR                         shift and go to state 163
    LISTA                          shift and go to state 164

state 123

    (145) ASIGNACION_AUX -> id nt_pushPilaO .

    equals          reduce using rule 145 (ASIGNACION_AUX -> id nt_pushPilaO .)


state 124

    (147) nt_pushPilaO -> empty .

    multiply        reduce using rule 147 (nt_pushPilaO -> empty .)
    divide          reduce using rule 147 (nt_pushPilaO -> empty .)
    plus            reduce using rule 147 (nt_pushPilaO -> empty .)
    minus           reduce using rule 147 (nt_pushPilaO -> empty .)
    right_sb        reduce using rule 147 (nt_pushPilaO -> empty .)
    lt              reduce using rule 147 (nt_pushPilaO -> empty .)
    gt              reduce using rule 147 (nt_pushPilaO -> empty .)
    ne              reduce using rule 147 (nt_pushPilaO -> empty .)
    ge              reduce using rule 147 (nt_pushPilaO -> empty .)
    le              reduce using rule 147 (nt_pushPilaO -> empty .)
    et              reduce using rule 147 (nt_pushPilaO -> empty .)
    and             reduce using rule 147 (nt_pushPilaO -> empty .)
    or              reduce using rule 147 (nt_pushPilaO -> empty .)
    right_par       reduce using rule 147 (nt_pushPilaO -> empty .)
    comma           reduce using rule 147 (nt_pushPilaO -> empty .)
    semicolon       reduce using rule 147 (nt_pushPilaO -> empty .)
    equals          reduce using rule 147 (nt_pushPilaO -> empty .)


state 125

    (87) ESCRITURA -> cwrite left_par . EXPRESION nt_escribir right_par semicolon
    (92) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (94) EXPRESION_NOT -> . not nt_pushPOper
    (95) EXPRESION_NOT -> . empty
    (150) empty -> .

    not             shift and go to state 130
    left_par        reduce using rule 150 (empty -> .)
    id              reduce using rule 150 (empty -> .)
    plus            reduce using rule 150 (empty -> .)
    minus           reduce using rule 150 (empty -> .)
    true            reduce using rule 150 (empty -> .)
    false           reduce using rule 150 (empty -> .)
    cteString       reduce using rule 150 (empty -> .)
    cteInt          reduce using rule 150 (empty -> .)
    cteFloat        reduce using rule 150 (empty -> .)

    EXPRESION                      shift and go to state 166
    EXPRESION_NOT                  shift and go to state 128
    empty                          shift and go to state 131

state 126

    (143) ASIGNACION -> ASIGNACION_AUX equals . nt_pushPOper EXPRESION nt_checaEquals semicolon
    (148) nt_pushPOper -> . empty
    (150) empty -> .

    not             reduce using rule 150 (empty -> .)
    left_par        reduce using rule 150 (empty -> .)
    id              reduce using rule 150 (empty -> .)
    plus            reduce using rule 150 (empty -> .)
    minus           reduce using rule 150 (empty -> .)
    true            reduce using rule 150 (empty -> .)
    false           reduce using rule 150 (empty -> .)
    cteString       reduce using rule 150 (empty -> .)
    cteInt          reduce using rule 150 (empty -> .)
    cteFloat        reduce using rule 150 (empty -> .)

    empty                          shift and go to state 167
    nt_pushPOper                   shift and go to state 168

state 127

    (90) LLAMADA_EXPRESION -> EXPRESION .

    right_par       reduce using rule 90 (LLAMADA_EXPRESION -> EXPRESION .)
    comma           reduce using rule 90 (LLAMADA_EXPRESION -> EXPRESION .)


state 128

    (92) EXPRESION -> EXPRESION_NOT . EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (99) EXPRESIONLOGICA -> . EXP EXPRESIONLOGICA_AUX
    (108) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (113) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (118) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (119) FACTOR -> . CONSTANTE
    (120) FACTOR -> . LISTA
    (121) FACTOR -> . FACTOR_AUX
    (128) CONSTANTE -> . NUMERICA
    (129) CONSTANTE -> . BOOLEANA
    (130) CONSTANTE -> . STRINGS
    (127) LISTA -> . id left_sb EXP right_sb
    (122) FACTOR_AUX -> . id nt_pushPilaO
    (123) FACTOR_AUX -> . id LLAMADA_F
    (131) NUMERICA -> . NUMERICA_AUX
    (132) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (133) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (140) BOOLEANA -> . true
    (141) BOOLEANA -> . false
    (142) STRINGS -> . cteString
    (136) NUMERICA_AUX -> . cteInt nt_pushInt
    (137) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 156
    id              shift and go to state 151
    plus            shift and go to state 152
    minus           shift and go to state 165
    true            shift and go to state 157
    false           shift and go to state 147
    cteString       shift and go to state 155
    cteInt          shift and go to state 160
    cteFloat        shift and go to state 149

    EXPRESIONLOGICA                shift and go to state 169
    BOOLEANA                       shift and go to state 150
    EXP                            shift and go to state 170
    FACTOR_AUX                     shift and go to state 153
    TERMINO                        shift and go to state 154
    STRINGS                        shift and go to state 158
    CONSTANTE                      shift and go to state 159
    NUMERICA_AUX                   shift and go to state 161
    NUMERICA                       shift and go to state 162
    FACTOR                         shift and go to state 163
    LISTA                          shift and go to state 164

state 129

    (89) LLAMADA -> left_par LLAMADA_EXPRESION . right_par semicolon
    (91) LLAMADA_EXPRESION -> LLAMADA_EXPRESION . comma EXPRESION

    right_par       shift and go to state 172
    comma           shift and go to state 171


state 130

    (94) EXPRESION_NOT -> not . nt_pushPOper
    (148) nt_pushPOper -> . empty
    (150) empty -> .

    left_par        reduce using rule 150 (empty -> .)
    id              reduce using rule 150 (empty -> .)
    plus            reduce using rule 150 (empty -> .)
    minus           reduce using rule 150 (empty -> .)
    true            reduce using rule 150 (empty -> .)
    false           reduce using rule 150 (empty -> .)
    cteString       reduce using rule 150 (empty -> .)
    cteInt          reduce using rule 150 (empty -> .)
    cteFloat        reduce using rule 150 (empty -> .)

    empty                          shift and go to state 167
    nt_pushPOper                   shift and go to state 173

state 131

    (95) EXPRESION_NOT -> empty .

    left_par        reduce using rule 95 (EXPRESION_NOT -> empty .)
    id              reduce using rule 95 (EXPRESION_NOT -> empty .)
    plus            reduce using rule 95 (EXPRESION_NOT -> empty .)
    minus           reduce using rule 95 (EXPRESION_NOT -> empty .)
    true            reduce using rule 95 (EXPRESION_NOT -> empty .)
    false           reduce using rule 95 (EXPRESION_NOT -> empty .)
    cteString       reduce using rule 95 (EXPRESION_NOT -> empty .)
    cteInt          reduce using rule 95 (EXPRESION_NOT -> empty .)
    cteFloat        reduce using rule 95 (EXPRESION_NOT -> empty .)


state 132

    (83) nt_saltoLoop -> empty .

    left_par        reduce using rule 83 (nt_saltoLoop -> empty .)


state 133

    (82) CICLO -> while nt_saltoLoop . left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop

    left_par        shift and go to state 174


state 134

    (33) CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .

    right_cb        reduce using rule 33 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    list            reduce using rule 33 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    var             reduce using rule 33 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    if              reduce using rule 33 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    while           reduce using rule 33 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    cread           reduce using rule 33 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    cwrite          reduce using rule 33 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    left_par        reduce using rule 33 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    id              reduce using rule 33 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)


state 135

    (61) nt_agregarParametro -> empty .

    right_par       reduce using rule 61 (nt_agregarParametro -> empty .)
    comma           reduce using rule 61 (nt_agregarParametro -> empty .)


state 136

    (58) FUNC_PARA -> TIPO id nt_agregarParametro .

    right_par       reduce using rule 58 (FUNC_PARA -> TIPO id nt_agregarParametro .)
    comma           reduce using rule 58 (FUNC_PARA -> TIPO id nt_agregarParametro .)


state 137

    (52) FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO . nt_pushEndsub
    (54) nt_pushEndsub -> . empty
    (150) empty -> .

    int             reduce using rule 150 (empty -> .)
    float           reduce using rule 150 (empty -> .)
    bool            reduce using rule 150 (empty -> .)
    string          reduce using rule 150 (empty -> .)
    void            reduce using rule 150 (empty -> .)
    main            reduce using rule 150 (empty -> .)

    nt_pushEndsub                  shift and go to state 175
    empty                          shift and go to state 44

state 138

    (46) CUERPORETORNO -> left_cb . CUERPORETORNO_AUX right_cb
    (47) CUERPORETORNO_AUX -> . CUERPORETORNO_CF_AUX RETORNO
    (48) CUERPORETORNO_AUX -> . CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO
    (49) CUERPORETORNO_CF_AUX -> . CUERPOFUNC
    (50) CUERPORETORNO_CF_AUX -> . empty
    (38) CUERPOFUNC -> . CUERPOFUNC_AUX
    (150) empty -> .
    (39) CUERPOFUNC_AUX -> . CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
    (40) CUERPOFUNC_AUX -> . CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
    (42) CUERPOFUNC_VARS -> . VARS
    (43) CUERPOFUNC_VARS -> . empty
    (10) VARS -> . VARS_AUX
    (11) VARS_AUX -> . VARS_LIST_VAR
    (12) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (13) VARS_LIST_VAR -> . VARS_LIST
    (14) VARS_LIST_VAR -> . VARS_VAR
    (15) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (22) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    return          reduce using rule 150 (empty -> .)
    if              reduce using rule 150 (empty -> .)
    while           reduce using rule 150 (empty -> .)
    cread           reduce using rule 150 (empty -> .)
    cwrite          reduce using rule 150 (empty -> .)
    left_par        reduce using rule 150 (empty -> .)
    id              reduce using rule 150 (empty -> .)
    list            shift and go to state 12
    var             shift and go to state 8

  ! list            [ reduce using rule 150 (empty -> .) ]
  ! var             [ reduce using rule 150 (empty -> .) ]

    CUERPORETORNO_CF_AUX           shift and go to state 179
    VARS                           shift and go to state 180
    CUERPOFUNC                     shift and go to state 176
    VARS_LIST                      shift and go to state 6
    VARS_LIST_VAR                  shift and go to state 10
    VARS_VAR                       shift and go to state 11
    VARS_AUX                       shift and go to state 13
    CUERPORETORNO_AUX              shift and go to state 177
    CUERPOFUNC_VARS                shift and go to state 181
    CUERPOFUNC_AUX                 shift and go to state 178
    empty                          shift and go to state 182

state 139

    (59) FUNC_PARA -> FUNC_PARA comma TIPO . id nt_agregarParametro

    id              shift and go to state 183


state 140

    (62) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb . CUERPOFUNC right_cb
    (38) CUERPOFUNC -> . CUERPOFUNC_AUX
    (39) CUERPOFUNC_AUX -> . CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
    (40) CUERPOFUNC_AUX -> . CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
    (42) CUERPOFUNC_VARS -> . VARS
    (43) CUERPOFUNC_VARS -> . empty
    (10) VARS -> . VARS_AUX
    (150) empty -> .
    (11) VARS_AUX -> . VARS_LIST_VAR
    (12) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (13) VARS_LIST_VAR -> . VARS_LIST
    (14) VARS_LIST_VAR -> . VARS_VAR
    (15) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (22) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    if              reduce using rule 150 (empty -> .)
    while           reduce using rule 150 (empty -> .)
    cread           reduce using rule 150 (empty -> .)
    cwrite          reduce using rule 150 (empty -> .)
    left_par        reduce using rule 150 (empty -> .)
    id              reduce using rule 150 (empty -> .)
    right_cb        reduce using rule 150 (empty -> .)
    list            shift and go to state 12
    var             shift and go to state 8

  ! list            [ reduce using rule 150 (empty -> .) ]
  ! var             [ reduce using rule 150 (empty -> .) ]

    VARS_LIST                      shift and go to state 6
    VARS                           shift and go to state 180
    CUERPOFUNC                     shift and go to state 184
    VARS_AUX                       shift and go to state 13
    VARS_LIST_VAR                  shift and go to state 10
    CUERPOFUNC_VARS                shift and go to state 181
    VARS_VAR                       shift and go to state 11
    CUERPOFUNC_AUX                 shift and go to state 178
    empty                          shift and go to state 185

state 141

    (65) VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO . id nt_agregarParametro

    id              shift and go to state 186


state 142

    (64) VOIDFUNC_PARA -> TIPO id nt_agregarParametro .

    right_par       reduce using rule 64 (VOIDFUNC_PARA -> TIPO id nt_agregarParametro .)
    comma           reduce using rule 64 (VOIDFUNC_PARA -> TIPO id nt_agregarParametro .)


state 143

    (18) VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista . right_sb nt_agregarDicVar

    right_sb        shift and go to state 187


state 144

    (17) VARS_LIST_AUX -> id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar .

    semicolon       reduce using rule 17 (VARS_LIST_AUX -> id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar .)
    comma           reduce using rule 17 (VARS_LIST_AUX -> id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar .)


state 145

    (85) LECTURA -> cread left_par id . nt_leer right_par semicolon
    (86) nt_leer -> . empty
    (150) empty -> .

    right_par       reduce using rule 150 (empty -> .)

    empty                          shift and go to state 189
    nt_leer                        shift and go to state 188

state 146

    (73) CONDICION_AUX -> left_par EXPRESION . nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto
    (79) nt_checarBool -> . empty
    (150) empty -> .

    right_par       reduce using rule 150 (empty -> .)

    nt_checarBool                  shift and go to state 190
    empty                          shift and go to state 191

state 147

    (141) BOOLEANA -> false .

    multiply        reduce using rule 141 (BOOLEANA -> false .)
    divide          reduce using rule 141 (BOOLEANA -> false .)
    plus            reduce using rule 141 (BOOLEANA -> false .)
    minus           reduce using rule 141 (BOOLEANA -> false .)
    right_sb        reduce using rule 141 (BOOLEANA -> false .)
    semicolon       reduce using rule 141 (BOOLEANA -> false .)
    and             reduce using rule 141 (BOOLEANA -> false .)
    or              reduce using rule 141 (BOOLEANA -> false .)
    right_par       reduce using rule 141 (BOOLEANA -> false .)
    comma           reduce using rule 141 (BOOLEANA -> false .)
    lt              reduce using rule 141 (BOOLEANA -> false .)
    gt              reduce using rule 141 (BOOLEANA -> false .)
    ne              reduce using rule 141 (BOOLEANA -> false .)
    ge              reduce using rule 141 (BOOLEANA -> false .)
    le              reduce using rule 141 (BOOLEANA -> false .)
    et              reduce using rule 141 (BOOLEANA -> false .)


state 148

    (127) LISTA -> id left_sb EXP . right_sb

    right_sb        shift and go to state 192


state 149

    (137) NUMERICA_AUX -> cteFloat . nt_pushFloat
    (139) nt_pushFloat -> . empty
    (150) empty -> .

    multiply        reduce using rule 150 (empty -> .)
    divide          reduce using rule 150 (empty -> .)
    plus            reduce using rule 150 (empty -> .)
    minus           reduce using rule 150 (empty -> .)
    right_sb        reduce using rule 150 (empty -> .)
    lt              reduce using rule 150 (empty -> .)
    gt              reduce using rule 150 (empty -> .)
    ne              reduce using rule 150 (empty -> .)
    ge              reduce using rule 150 (empty -> .)
    le              reduce using rule 150 (empty -> .)
    et              reduce using rule 150 (empty -> .)
    and             reduce using rule 150 (empty -> .)
    or              reduce using rule 150 (empty -> .)
    right_par       reduce using rule 150 (empty -> .)
    comma           reduce using rule 150 (empty -> .)
    semicolon       reduce using rule 150 (empty -> .)

    nt_pushFloat                   shift and go to state 193
    empty                          shift and go to state 194

state 150

    (129) CONSTANTE -> BOOLEANA .

    multiply        reduce using rule 129 (CONSTANTE -> BOOLEANA .)
    divide          reduce using rule 129 (CONSTANTE -> BOOLEANA .)
    plus            reduce using rule 129 (CONSTANTE -> BOOLEANA .)
    minus           reduce using rule 129 (CONSTANTE -> BOOLEANA .)
    semicolon       reduce using rule 129 (CONSTANTE -> BOOLEANA .)
    right_sb        reduce using rule 129 (CONSTANTE -> BOOLEANA .)
    lt              reduce using rule 129 (CONSTANTE -> BOOLEANA .)
    gt              reduce using rule 129 (CONSTANTE -> BOOLEANA .)
    ne              reduce using rule 129 (CONSTANTE -> BOOLEANA .)
    ge              reduce using rule 129 (CONSTANTE -> BOOLEANA .)
    le              reduce using rule 129 (CONSTANTE -> BOOLEANA .)
    et              reduce using rule 129 (CONSTANTE -> BOOLEANA .)
    and             reduce using rule 129 (CONSTANTE -> BOOLEANA .)
    or              reduce using rule 129 (CONSTANTE -> BOOLEANA .)
    right_par       reduce using rule 129 (CONSTANTE -> BOOLEANA .)
    comma           reduce using rule 129 (CONSTANTE -> BOOLEANA .)


state 151

    (127) LISTA -> id . left_sb EXP right_sb
    (122) FACTOR_AUX -> id . nt_pushPilaO
    (123) FACTOR_AUX -> id . LLAMADA_F
    (147) nt_pushPilaO -> . empty
    (124) LLAMADA_F -> . left_par EXPRESION LLAMADAF_AUX right_par
    (150) empty -> .

    left_sb         shift and go to state 122
    left_par        shift and go to state 196
    multiply        reduce using rule 150 (empty -> .)
    divide          reduce using rule 150 (empty -> .)
    plus            reduce using rule 150 (empty -> .)
    minus           reduce using rule 150 (empty -> .)
    right_sb        reduce using rule 150 (empty -> .)
    lt              reduce using rule 150 (empty -> .)
    gt              reduce using rule 150 (empty -> .)
    ne              reduce using rule 150 (empty -> .)
    ge              reduce using rule 150 (empty -> .)
    le              reduce using rule 150 (empty -> .)
    et              reduce using rule 150 (empty -> .)
    and             reduce using rule 150 (empty -> .)
    or              reduce using rule 150 (empty -> .)
    right_par       reduce using rule 150 (empty -> .)
    comma           reduce using rule 150 (empty -> .)
    semicolon       reduce using rule 150 (empty -> .)

    nt_pushPilaO                   shift and go to state 195
    LLAMADA_F                      shift and go to state 197
    empty                          shift and go to state 124

state 152

    (132) NUMERICA -> plus . nt_sigMas NUMERICA_AUX
    (134) nt_sigMas -> . empty
    (150) empty -> .

    cteInt          reduce using rule 150 (empty -> .)
    cteFloat        reduce using rule 150 (empty -> .)

    nt_sigMas                      shift and go to state 198
    empty                          shift and go to state 199

state 153

    (121) FACTOR -> FACTOR_AUX .

    multiply        reduce using rule 121 (FACTOR -> FACTOR_AUX .)
    divide          reduce using rule 121 (FACTOR -> FACTOR_AUX .)
    plus            reduce using rule 121 (FACTOR -> FACTOR_AUX .)
    minus           reduce using rule 121 (FACTOR -> FACTOR_AUX .)
    right_sb        reduce using rule 121 (FACTOR -> FACTOR_AUX .)
    and             reduce using rule 121 (FACTOR -> FACTOR_AUX .)
    or              reduce using rule 121 (FACTOR -> FACTOR_AUX .)
    right_par       reduce using rule 121 (FACTOR -> FACTOR_AUX .)
    comma           reduce using rule 121 (FACTOR -> FACTOR_AUX .)
    semicolon       reduce using rule 121 (FACTOR -> FACTOR_AUX .)
    lt              reduce using rule 121 (FACTOR -> FACTOR_AUX .)
    gt              reduce using rule 121 (FACTOR -> FACTOR_AUX .)
    ne              reduce using rule 121 (FACTOR -> FACTOR_AUX .)
    ge              reduce using rule 121 (FACTOR -> FACTOR_AUX .)
    le              reduce using rule 121 (FACTOR -> FACTOR_AUX .)
    et              reduce using rule 121 (FACTOR -> FACTOR_AUX .)


state 154

    (108) EXP -> TERMINO . nt_checar_sumas EXP_AUX
    (109) nt_checar_sumas -> . empty
    (150) empty -> .

    plus            reduce using rule 150 (empty -> .)
    minus           reduce using rule 150 (empty -> .)
    right_sb        reduce using rule 150 (empty -> .)
    lt              reduce using rule 150 (empty -> .)
    gt              reduce using rule 150 (empty -> .)
    ne              reduce using rule 150 (empty -> .)
    ge              reduce using rule 150 (empty -> .)
    le              reduce using rule 150 (empty -> .)
    et              reduce using rule 150 (empty -> .)
    and             reduce using rule 150 (empty -> .)
    or              reduce using rule 150 (empty -> .)
    right_par       reduce using rule 150 (empty -> .)
    comma           reduce using rule 150 (empty -> .)
    semicolon       reduce using rule 150 (empty -> .)

    empty                          shift and go to state 200
    nt_checar_sumas                shift and go to state 201

state 155

    (142) STRINGS -> cteString .

    multiply        reduce using rule 142 (STRINGS -> cteString .)
    divide          reduce using rule 142 (STRINGS -> cteString .)
    plus            reduce using rule 142 (STRINGS -> cteString .)
    minus           reduce using rule 142 (STRINGS -> cteString .)
    right_sb        reduce using rule 142 (STRINGS -> cteString .)
    lt              reduce using rule 142 (STRINGS -> cteString .)
    gt              reduce using rule 142 (STRINGS -> cteString .)
    ne              reduce using rule 142 (STRINGS -> cteString .)
    ge              reduce using rule 142 (STRINGS -> cteString .)
    le              reduce using rule 142 (STRINGS -> cteString .)
    et              reduce using rule 142 (STRINGS -> cteString .)
    and             reduce using rule 142 (STRINGS -> cteString .)
    or              reduce using rule 142 (STRINGS -> cteString .)
    right_par       reduce using rule 142 (STRINGS -> cteString .)
    comma           reduce using rule 142 (STRINGS -> cteString .)
    semicolon       reduce using rule 142 (STRINGS -> cteString .)


state 156

    (118) FACTOR -> left_par . nt_pushPOper EXPRESION right_par nt_popPOper
    (148) nt_pushPOper -> . empty
    (150) empty -> .

    not             reduce using rule 150 (empty -> .)
    left_par        reduce using rule 150 (empty -> .)
    id              reduce using rule 150 (empty -> .)
    plus            reduce using rule 150 (empty -> .)
    minus           reduce using rule 150 (empty -> .)
    true            reduce using rule 150 (empty -> .)
    false           reduce using rule 150 (empty -> .)
    cteString       reduce using rule 150 (empty -> .)
    cteInt          reduce using rule 150 (empty -> .)
    cteFloat        reduce using rule 150 (empty -> .)

    empty                          shift and go to state 167
    nt_pushPOper                   shift and go to state 202

state 157

    (140) BOOLEANA -> true .

    multiply        reduce using rule 140 (BOOLEANA -> true .)
    divide          reduce using rule 140 (BOOLEANA -> true .)
    plus            reduce using rule 140 (BOOLEANA -> true .)
    minus           reduce using rule 140 (BOOLEANA -> true .)
    right_sb        reduce using rule 140 (BOOLEANA -> true .)
    semicolon       reduce using rule 140 (BOOLEANA -> true .)
    and             reduce using rule 140 (BOOLEANA -> true .)
    or              reduce using rule 140 (BOOLEANA -> true .)
    right_par       reduce using rule 140 (BOOLEANA -> true .)
    comma           reduce using rule 140 (BOOLEANA -> true .)
    lt              reduce using rule 140 (BOOLEANA -> true .)
    gt              reduce using rule 140 (BOOLEANA -> true .)
    ne              reduce using rule 140 (BOOLEANA -> true .)
    ge              reduce using rule 140 (BOOLEANA -> true .)
    le              reduce using rule 140 (BOOLEANA -> true .)
    et              reduce using rule 140 (BOOLEANA -> true .)


state 158

    (130) CONSTANTE -> STRINGS .

    multiply        reduce using rule 130 (CONSTANTE -> STRINGS .)
    divide          reduce using rule 130 (CONSTANTE -> STRINGS .)
    plus            reduce using rule 130 (CONSTANTE -> STRINGS .)
    minus           reduce using rule 130 (CONSTANTE -> STRINGS .)
    semicolon       reduce using rule 130 (CONSTANTE -> STRINGS .)
    right_sb        reduce using rule 130 (CONSTANTE -> STRINGS .)
    lt              reduce using rule 130 (CONSTANTE -> STRINGS .)
    gt              reduce using rule 130 (CONSTANTE -> STRINGS .)
    ne              reduce using rule 130 (CONSTANTE -> STRINGS .)
    ge              reduce using rule 130 (CONSTANTE -> STRINGS .)
    le              reduce using rule 130 (CONSTANTE -> STRINGS .)
    et              reduce using rule 130 (CONSTANTE -> STRINGS .)
    and             reduce using rule 130 (CONSTANTE -> STRINGS .)
    or              reduce using rule 130 (CONSTANTE -> STRINGS .)
    right_par       reduce using rule 130 (CONSTANTE -> STRINGS .)
    comma           reduce using rule 130 (CONSTANTE -> STRINGS .)


state 159

    (119) FACTOR -> CONSTANTE .

    multiply        reduce using rule 119 (FACTOR -> CONSTANTE .)
    divide          reduce using rule 119 (FACTOR -> CONSTANTE .)
    plus            reduce using rule 119 (FACTOR -> CONSTANTE .)
    minus           reduce using rule 119 (FACTOR -> CONSTANTE .)
    right_sb        reduce using rule 119 (FACTOR -> CONSTANTE .)
    and             reduce using rule 119 (FACTOR -> CONSTANTE .)
    or              reduce using rule 119 (FACTOR -> CONSTANTE .)
    right_par       reduce using rule 119 (FACTOR -> CONSTANTE .)
    comma           reduce using rule 119 (FACTOR -> CONSTANTE .)
    semicolon       reduce using rule 119 (FACTOR -> CONSTANTE .)
    lt              reduce using rule 119 (FACTOR -> CONSTANTE .)
    gt              reduce using rule 119 (FACTOR -> CONSTANTE .)
    ne              reduce using rule 119 (FACTOR -> CONSTANTE .)
    ge              reduce using rule 119 (FACTOR -> CONSTANTE .)
    le              reduce using rule 119 (FACTOR -> CONSTANTE .)
    et              reduce using rule 119 (FACTOR -> CONSTANTE .)


state 160

    (136) NUMERICA_AUX -> cteInt . nt_pushInt
    (138) nt_pushInt -> . empty
    (150) empty -> .

    multiply        reduce using rule 150 (empty -> .)
    divide          reduce using rule 150 (empty -> .)
    plus            reduce using rule 150 (empty -> .)
    minus           reduce using rule 150 (empty -> .)
    right_sb        reduce using rule 150 (empty -> .)
    lt              reduce using rule 150 (empty -> .)
    gt              reduce using rule 150 (empty -> .)
    ne              reduce using rule 150 (empty -> .)
    ge              reduce using rule 150 (empty -> .)
    le              reduce using rule 150 (empty -> .)
    et              reduce using rule 150 (empty -> .)
    and             reduce using rule 150 (empty -> .)
    or              reduce using rule 150 (empty -> .)
    right_par       reduce using rule 150 (empty -> .)
    comma           reduce using rule 150 (empty -> .)
    semicolon       reduce using rule 150 (empty -> .)

    empty                          shift and go to state 203
    nt_pushInt                     shift and go to state 204

state 161

    (131) NUMERICA -> NUMERICA_AUX .

    multiply        reduce using rule 131 (NUMERICA -> NUMERICA_AUX .)
    divide          reduce using rule 131 (NUMERICA -> NUMERICA_AUX .)
    plus            reduce using rule 131 (NUMERICA -> NUMERICA_AUX .)
    minus           reduce using rule 131 (NUMERICA -> NUMERICA_AUX .)
    right_sb        reduce using rule 131 (NUMERICA -> NUMERICA_AUX .)
    lt              reduce using rule 131 (NUMERICA -> NUMERICA_AUX .)
    gt              reduce using rule 131 (NUMERICA -> NUMERICA_AUX .)
    ne              reduce using rule 131 (NUMERICA -> NUMERICA_AUX .)
    ge              reduce using rule 131 (NUMERICA -> NUMERICA_AUX .)
    le              reduce using rule 131 (NUMERICA -> NUMERICA_AUX .)
    et              reduce using rule 131 (NUMERICA -> NUMERICA_AUX .)
    and             reduce using rule 131 (NUMERICA -> NUMERICA_AUX .)
    or              reduce using rule 131 (NUMERICA -> NUMERICA_AUX .)
    right_par       reduce using rule 131 (NUMERICA -> NUMERICA_AUX .)
    comma           reduce using rule 131 (NUMERICA -> NUMERICA_AUX .)
    semicolon       reduce using rule 131 (NUMERICA -> NUMERICA_AUX .)


state 162

    (128) CONSTANTE -> NUMERICA .

    multiply        reduce using rule 128 (CONSTANTE -> NUMERICA .)
    divide          reduce using rule 128 (CONSTANTE -> NUMERICA .)
    plus            reduce using rule 128 (CONSTANTE -> NUMERICA .)
    minus           reduce using rule 128 (CONSTANTE -> NUMERICA .)
    semicolon       reduce using rule 128 (CONSTANTE -> NUMERICA .)
    right_sb        reduce using rule 128 (CONSTANTE -> NUMERICA .)
    lt              reduce using rule 128 (CONSTANTE -> NUMERICA .)
    gt              reduce using rule 128 (CONSTANTE -> NUMERICA .)
    ne              reduce using rule 128 (CONSTANTE -> NUMERICA .)
    ge              reduce using rule 128 (CONSTANTE -> NUMERICA .)
    le              reduce using rule 128 (CONSTANTE -> NUMERICA .)
    et              reduce using rule 128 (CONSTANTE -> NUMERICA .)
    and             reduce using rule 128 (CONSTANTE -> NUMERICA .)
    or              reduce using rule 128 (CONSTANTE -> NUMERICA .)
    right_par       reduce using rule 128 (CONSTANTE -> NUMERICA .)
    comma           reduce using rule 128 (CONSTANTE -> NUMERICA .)


state 163

    (113) TERMINO -> FACTOR . nt_checar_multis TERMINO_AUX
    (114) nt_checar_multis -> . empty
    (150) empty -> .

    multiply        reduce using rule 150 (empty -> .)
    divide          reduce using rule 150 (empty -> .)
    plus            reduce using rule 150 (empty -> .)
    minus           reduce using rule 150 (empty -> .)
    right_sb        reduce using rule 150 (empty -> .)
    lt              reduce using rule 150 (empty -> .)
    gt              reduce using rule 150 (empty -> .)
    ne              reduce using rule 150 (empty -> .)
    ge              reduce using rule 150 (empty -> .)
    le              reduce using rule 150 (empty -> .)
    et              reduce using rule 150 (empty -> .)
    and             reduce using rule 150 (empty -> .)
    or              reduce using rule 150 (empty -> .)
    right_par       reduce using rule 150 (empty -> .)
    comma           reduce using rule 150 (empty -> .)
    semicolon       reduce using rule 150 (empty -> .)

    nt_checar_multis               shift and go to state 205
    empty                          shift and go to state 206

state 164

    (120) FACTOR -> LISTA .

    multiply        reduce using rule 120 (FACTOR -> LISTA .)
    divide          reduce using rule 120 (FACTOR -> LISTA .)
    plus            reduce using rule 120 (FACTOR -> LISTA .)
    minus           reduce using rule 120 (FACTOR -> LISTA .)
    right_sb        reduce using rule 120 (FACTOR -> LISTA .)
    and             reduce using rule 120 (FACTOR -> LISTA .)
    or              reduce using rule 120 (FACTOR -> LISTA .)
    right_par       reduce using rule 120 (FACTOR -> LISTA .)
    comma           reduce using rule 120 (FACTOR -> LISTA .)
    semicolon       reduce using rule 120 (FACTOR -> LISTA .)
    lt              reduce using rule 120 (FACTOR -> LISTA .)
    gt              reduce using rule 120 (FACTOR -> LISTA .)
    ne              reduce using rule 120 (FACTOR -> LISTA .)
    ge              reduce using rule 120 (FACTOR -> LISTA .)
    le              reduce using rule 120 (FACTOR -> LISTA .)
    et              reduce using rule 120 (FACTOR -> LISTA .)


state 165

    (133) NUMERICA -> minus . nt_sigMenos NUMERICA_AUX
    (135) nt_sigMenos -> . empty
    (150) empty -> .

    cteInt          reduce using rule 150 (empty -> .)
    cteFloat        reduce using rule 150 (empty -> .)

    nt_sigMenos                    shift and go to state 208
    empty                          shift and go to state 207

state 166

    (87) ESCRITURA -> cwrite left_par EXPRESION . nt_escribir right_par semicolon
    (88) nt_escribir -> . empty
    (150) empty -> .

    right_par       reduce using rule 150 (empty -> .)

    nt_escribir                    shift and go to state 209
    empty                          shift and go to state 210

state 167

    (148) nt_pushPOper -> empty .

    left_par        reduce using rule 148 (nt_pushPOper -> empty .)
    id              reduce using rule 148 (nt_pushPOper -> empty .)
    plus            reduce using rule 148 (nt_pushPOper -> empty .)
    minus           reduce using rule 148 (nt_pushPOper -> empty .)
    true            reduce using rule 148 (nt_pushPOper -> empty .)
    false           reduce using rule 148 (nt_pushPOper -> empty .)
    cteString       reduce using rule 148 (nt_pushPOper -> empty .)
    cteInt          reduce using rule 148 (nt_pushPOper -> empty .)
    cteFloat        reduce using rule 148 (nt_pushPOper -> empty .)
    not             reduce using rule 148 (nt_pushPOper -> empty .)


state 168

    (143) ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper . EXPRESION nt_checaEquals semicolon
    (92) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (94) EXPRESION_NOT -> . not nt_pushPOper
    (95) EXPRESION_NOT -> . empty
    (150) empty -> .

    not             shift and go to state 130
    left_par        reduce using rule 150 (empty -> .)
    id              reduce using rule 150 (empty -> .)
    plus            reduce using rule 150 (empty -> .)
    minus           reduce using rule 150 (empty -> .)
    true            reduce using rule 150 (empty -> .)
    false           reduce using rule 150 (empty -> .)
    cteString       reduce using rule 150 (empty -> .)
    cteInt          reduce using rule 150 (empty -> .)
    cteFloat        reduce using rule 150 (empty -> .)

    EXPRESION                      shift and go to state 211
    EXPRESION_NOT                  shift and go to state 128
    empty                          shift and go to state 131

state 169

    (92) EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA . nt_checaAndOrNot EXPRESION_B
    (93) nt_checaAndOrNot -> . empty
    (150) empty -> .

    and             reduce using rule 150 (empty -> .)
    or              reduce using rule 150 (empty -> .)
    right_par       reduce using rule 150 (empty -> .)
    comma           reduce using rule 150 (empty -> .)
    semicolon       reduce using rule 150 (empty -> .)

    nt_checaAndOrNot               shift and go to state 212
    empty                          shift and go to state 213

state 170

    (99) EXPRESIONLOGICA -> EXP . EXPRESIONLOGICA_AUX
    (100) EXPRESIONLOGICA_AUX -> . lt nt_pushPOper EXP nt_checarRelop
    (101) EXPRESIONLOGICA_AUX -> . gt nt_pushPOper EXP nt_checarRelop
    (102) EXPRESIONLOGICA_AUX -> . ne nt_pushPOper EXP nt_checarRelop
    (103) EXPRESIONLOGICA_AUX -> . ge nt_pushPOper EXP nt_checarRelop
    (104) EXPRESIONLOGICA_AUX -> . le nt_pushPOper EXP nt_checarRelop
    (105) EXPRESIONLOGICA_AUX -> . et nt_pushPOper EXP nt_checarRelop
    (106) EXPRESIONLOGICA_AUX -> . empty
    (150) empty -> .

    lt              shift and go to state 218
    gt              shift and go to state 215
    ne              shift and go to state 217
    ge              shift and go to state 214
    le              shift and go to state 219
    et              shift and go to state 220
    and             reduce using rule 150 (empty -> .)
    or              reduce using rule 150 (empty -> .)
    right_par       reduce using rule 150 (empty -> .)
    comma           reduce using rule 150 (empty -> .)
    semicolon       reduce using rule 150 (empty -> .)

    empty                          shift and go to state 221
    EXPRESIONLOGICA_AUX            shift and go to state 216

state 171

    (91) LLAMADA_EXPRESION -> LLAMADA_EXPRESION comma . EXPRESION
    (92) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (94) EXPRESION_NOT -> . not nt_pushPOper
    (95) EXPRESION_NOT -> . empty
    (150) empty -> .

    not             shift and go to state 130
    left_par        reduce using rule 150 (empty -> .)
    id              reduce using rule 150 (empty -> .)
    plus            reduce using rule 150 (empty -> .)
    minus           reduce using rule 150 (empty -> .)
    true            reduce using rule 150 (empty -> .)
    false           reduce using rule 150 (empty -> .)
    cteString       reduce using rule 150 (empty -> .)
    cteInt          reduce using rule 150 (empty -> .)
    cteFloat        reduce using rule 150 (empty -> .)

    EXPRESION                      shift and go to state 222
    EXPRESION_NOT                  shift and go to state 128
    empty                          shift and go to state 131

state 172

    (89) LLAMADA -> left_par LLAMADA_EXPRESION right_par . semicolon

    semicolon       shift and go to state 223


state 173

    (94) EXPRESION_NOT -> not nt_pushPOper .

    left_par        reduce using rule 94 (EXPRESION_NOT -> not nt_pushPOper .)
    id              reduce using rule 94 (EXPRESION_NOT -> not nt_pushPOper .)
    plus            reduce using rule 94 (EXPRESION_NOT -> not nt_pushPOper .)
    minus           reduce using rule 94 (EXPRESION_NOT -> not nt_pushPOper .)
    true            reduce using rule 94 (EXPRESION_NOT -> not nt_pushPOper .)
    false           reduce using rule 94 (EXPRESION_NOT -> not nt_pushPOper .)
    cteString       reduce using rule 94 (EXPRESION_NOT -> not nt_pushPOper .)
    cteInt          reduce using rule 94 (EXPRESION_NOT -> not nt_pushPOper .)
    cteFloat        reduce using rule 94 (EXPRESION_NOT -> not nt_pushPOper .)


state 174

    (82) CICLO -> while nt_saltoLoop left_par . EXPRESION nt_checarBool right_par CUERPO nt_pushLoop
    (92) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (94) EXPRESION_NOT -> . not nt_pushPOper
    (95) EXPRESION_NOT -> . empty
    (150) empty -> .

    not             shift and go to state 130
    left_par        reduce using rule 150 (empty -> .)
    id              reduce using rule 150 (empty -> .)
    plus            reduce using rule 150 (empty -> .)
    minus           reduce using rule 150 (empty -> .)
    true            reduce using rule 150 (empty -> .)
    false           reduce using rule 150 (empty -> .)
    cteString       reduce using rule 150 (empty -> .)
    cteInt          reduce using rule 150 (empty -> .)
    cteFloat        reduce using rule 150 (empty -> .)

    EXPRESION                      shift and go to state 224
    EXPRESION_NOT                  shift and go to state 128
    empty                          shift and go to state 131

state 175

    (52) FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub .

    int             reduce using rule 52 (FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub .)
    float           reduce using rule 52 (FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub .)
    bool            reduce using rule 52 (FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub .)
    string          reduce using rule 52 (FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub .)
    void            reduce using rule 52 (FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub .)
    main            reduce using rule 52 (FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub .)


state 176

    (49) CUERPORETORNO_CF_AUX -> CUERPOFUNC .

    return          reduce using rule 49 (CUERPORETORNO_CF_AUX -> CUERPOFUNC .)


state 177

    (46) CUERPORETORNO -> left_cb CUERPORETORNO_AUX . right_cb
    (48) CUERPORETORNO_AUX -> CUERPORETORNO_AUX . CUERPORETORNO_CF_AUX RETORNO
    (49) CUERPORETORNO_CF_AUX -> . CUERPOFUNC
    (50) CUERPORETORNO_CF_AUX -> . empty
    (38) CUERPOFUNC -> . CUERPOFUNC_AUX
    (150) empty -> .
    (39) CUERPOFUNC_AUX -> . CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
    (40) CUERPOFUNC_AUX -> . CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
    (42) CUERPOFUNC_VARS -> . VARS
    (43) CUERPOFUNC_VARS -> . empty
    (10) VARS -> . VARS_AUX
    (11) VARS_AUX -> . VARS_LIST_VAR
    (12) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (13) VARS_LIST_VAR -> . VARS_LIST
    (14) VARS_LIST_VAR -> . VARS_VAR
    (15) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (22) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    right_cb        shift and go to state 226
    return          reduce using rule 150 (empty -> .)
    if              reduce using rule 150 (empty -> .)
    while           reduce using rule 150 (empty -> .)
    cread           reduce using rule 150 (empty -> .)
    cwrite          reduce using rule 150 (empty -> .)
    left_par        reduce using rule 150 (empty -> .)
    id              reduce using rule 150 (empty -> .)
    list            shift and go to state 12
    var             shift and go to state 8

  ! list            [ reduce using rule 150 (empty -> .) ]
  ! var             [ reduce using rule 150 (empty -> .) ]

    CUERPORETORNO_CF_AUX           shift and go to state 225
    VARS                           shift and go to state 180
    CUERPOFUNC                     shift and go to state 176
    VARS_LIST                      shift and go to state 6
    VARS_LIST_VAR                  shift and go to state 10
    VARS_VAR                       shift and go to state 11
    VARS_AUX                       shift and go to state 13
    CUERPOFUNC_VARS                shift and go to state 181
    CUERPOFUNC_AUX                 shift and go to state 178
    empty                          shift and go to state 182

state 178

    (38) CUERPOFUNC -> CUERPOFUNC_AUX .
    (40) CUERPOFUNC_AUX -> CUERPOFUNC_AUX . CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
    (42) CUERPOFUNC_VARS -> . VARS
    (43) CUERPOFUNC_VARS -> . empty
    (10) VARS -> . VARS_AUX
    (150) empty -> .
    (11) VARS_AUX -> . VARS_LIST_VAR
    (12) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (13) VARS_LIST_VAR -> . VARS_LIST
    (14) VARS_LIST_VAR -> . VARS_VAR
    (15) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (22) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! reduce/reduce conflict for return resolved using rule 38 (CUERPOFUNC -> CUERPOFUNC_AUX .)
  ! reduce/reduce conflict for right_cb resolved using rule 38 (CUERPOFUNC -> CUERPOFUNC_AUX .)
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    right_cb        reduce using rule 38 (CUERPOFUNC -> CUERPOFUNC_AUX .)
    return          reduce using rule 38 (CUERPOFUNC -> CUERPOFUNC_AUX .)
    if              reduce using rule 150 (empty -> .)
    while           reduce using rule 150 (empty -> .)
    cread           reduce using rule 150 (empty -> .)
    cwrite          reduce using rule 150 (empty -> .)
    left_par        reduce using rule 150 (empty -> .)
    id              reduce using rule 150 (empty -> .)
    list            shift and go to state 12
    var             shift and go to state 8

  ! list            [ reduce using rule 150 (empty -> .) ]
  ! var             [ reduce using rule 150 (empty -> .) ]
  ! return          [ reduce using rule 150 (empty -> .) ]
  ! right_cb        [ reduce using rule 150 (empty -> .) ]

    VARS                           shift and go to state 180
    VARS_LIST                      shift and go to state 6
    VARS_LIST_VAR                  shift and go to state 10
    VARS_AUX                       shift and go to state 13
    CUERPOFUNC_VARS                shift and go to state 227
    VARS_VAR                       shift and go to state 11
    empty                          shift and go to state 185

state 179

    (47) CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX . RETORNO
    (51) RETORNO -> . return EXP semicolon

    return          shift and go to state 229

    RETORNO                        shift and go to state 228

state 180

    (42) CUERPOFUNC_VARS -> VARS .

    if              reduce using rule 42 (CUERPOFUNC_VARS -> VARS .)
    while           reduce using rule 42 (CUERPOFUNC_VARS -> VARS .)
    cread           reduce using rule 42 (CUERPOFUNC_VARS -> VARS .)
    cwrite          reduce using rule 42 (CUERPOFUNC_VARS -> VARS .)
    left_par        reduce using rule 42 (CUERPOFUNC_VARS -> VARS .)
    id              reduce using rule 42 (CUERPOFUNC_VARS -> VARS .)
    list            reduce using rule 42 (CUERPOFUNC_VARS -> VARS .)
    var             reduce using rule 42 (CUERPOFUNC_VARS -> VARS .)
    right_cb        reduce using rule 42 (CUERPOFUNC_VARS -> VARS .)
    return          reduce using rule 42 (CUERPOFUNC_VARS -> VARS .)


state 181

    (39) CUERPOFUNC_AUX -> CUERPOFUNC_VARS . nt_funcInicio CUERPOFUNC_ESTATUTO
    (41) nt_funcInicio -> . empty
    (150) empty -> .

    if              reduce using rule 150 (empty -> .)
    while           reduce using rule 150 (empty -> .)
    cread           reduce using rule 150 (empty -> .)
    cwrite          reduce using rule 150 (empty -> .)
    left_par        reduce using rule 150 (empty -> .)
    id              reduce using rule 150 (empty -> .)
    list            reduce using rule 150 (empty -> .)
    var             reduce using rule 150 (empty -> .)
    return          reduce using rule 150 (empty -> .)
    right_cb        reduce using rule 150 (empty -> .)

    empty                          shift and go to state 230
    nt_funcInicio                  shift and go to state 231

state 182

    (50) CUERPORETORNO_CF_AUX -> empty .
    (43) CUERPOFUNC_VARS -> empty .

  ! reduce/reduce conflict for return resolved using rule 43 (CUERPOFUNC_VARS -> empty .)
    if              reduce using rule 43 (CUERPOFUNC_VARS -> empty .)
    while           reduce using rule 43 (CUERPOFUNC_VARS -> empty .)
    cread           reduce using rule 43 (CUERPOFUNC_VARS -> empty .)
    cwrite          reduce using rule 43 (CUERPOFUNC_VARS -> empty .)
    left_par        reduce using rule 43 (CUERPOFUNC_VARS -> empty .)
    id              reduce using rule 43 (CUERPOFUNC_VARS -> empty .)
    list            reduce using rule 43 (CUERPOFUNC_VARS -> empty .)
    var             reduce using rule 43 (CUERPOFUNC_VARS -> empty .)
    return          reduce using rule 43 (CUERPOFUNC_VARS -> empty .)

  ! return          [ reduce using rule 50 (CUERPORETORNO_CF_AUX -> empty .) ]


state 183

    (59) FUNC_PARA -> FUNC_PARA comma TIPO id . nt_agregarParametro
    (61) nt_agregarParametro -> . empty
    (150) empty -> .

    right_par       reduce using rule 150 (empty -> .)
    comma           reduce using rule 150 (empty -> .)

    empty                          shift and go to state 135
    nt_agregarParametro            shift and go to state 232

state 184

    (62) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC . right_cb

    right_cb        shift and go to state 233


state 185

    (43) CUERPOFUNC_VARS -> empty .

    if              reduce using rule 43 (CUERPOFUNC_VARS -> empty .)
    while           reduce using rule 43 (CUERPOFUNC_VARS -> empty .)
    cread           reduce using rule 43 (CUERPOFUNC_VARS -> empty .)
    cwrite          reduce using rule 43 (CUERPOFUNC_VARS -> empty .)
    left_par        reduce using rule 43 (CUERPOFUNC_VARS -> empty .)
    id              reduce using rule 43 (CUERPOFUNC_VARS -> empty .)
    list            reduce using rule 43 (CUERPOFUNC_VARS -> empty .)
    var             reduce using rule 43 (CUERPOFUNC_VARS -> empty .)
    right_cb        reduce using rule 43 (CUERPOFUNC_VARS -> empty .)
    return          reduce using rule 43 (CUERPOFUNC_VARS -> empty .)


state 186

    (65) VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO id . nt_agregarParametro
    (61) nt_agregarParametro -> . empty
    (150) empty -> .

    right_par       reduce using rule 150 (empty -> .)
    comma           reduce using rule 150 (empty -> .)

    empty                          shift and go to state 135
    nt_agregarParametro            shift and go to state 234

state 187

    (18) VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb . nt_agregarDicVar
    (21) nt_agregarDicVar -> . empty
    (150) empty -> .

    semicolon       reduce using rule 150 (empty -> .)
    comma           reduce using rule 150 (empty -> .)

    nt_agregarDicVar               shift and go to state 235
    empty                          shift and go to state 69

state 188

    (85) LECTURA -> cread left_par id nt_leer . right_par semicolon

    right_par       shift and go to state 236


state 189

    (86) nt_leer -> empty .

    right_par       reduce using rule 86 (nt_leer -> empty .)


state 190

    (73) CONDICION_AUX -> left_par EXPRESION nt_checarBool . right_par CUERPO ELSE_ELIF nt_pushSalto

    right_par       shift and go to state 237


state 191

    (79) nt_checarBool -> empty .

    right_par       reduce using rule 79 (nt_checarBool -> empty .)


state 192

    (127) LISTA -> id left_sb EXP right_sb .

    multiply        reduce using rule 127 (LISTA -> id left_sb EXP right_sb .)
    divide          reduce using rule 127 (LISTA -> id left_sb EXP right_sb .)
    plus            reduce using rule 127 (LISTA -> id left_sb EXP right_sb .)
    minus           reduce using rule 127 (LISTA -> id left_sb EXP right_sb .)
    right_sb        reduce using rule 127 (LISTA -> id left_sb EXP right_sb .)
    lt              reduce using rule 127 (LISTA -> id left_sb EXP right_sb .)
    gt              reduce using rule 127 (LISTA -> id left_sb EXP right_sb .)
    ne              reduce using rule 127 (LISTA -> id left_sb EXP right_sb .)
    ge              reduce using rule 127 (LISTA -> id left_sb EXP right_sb .)
    le              reduce using rule 127 (LISTA -> id left_sb EXP right_sb .)
    et              reduce using rule 127 (LISTA -> id left_sb EXP right_sb .)
    and             reduce using rule 127 (LISTA -> id left_sb EXP right_sb .)
    or              reduce using rule 127 (LISTA -> id left_sb EXP right_sb .)
    right_par       reduce using rule 127 (LISTA -> id left_sb EXP right_sb .)
    comma           reduce using rule 127 (LISTA -> id left_sb EXP right_sb .)
    semicolon       reduce using rule 127 (LISTA -> id left_sb EXP right_sb .)
    equals          reduce using rule 127 (LISTA -> id left_sb EXP right_sb .)


state 193

    (137) NUMERICA_AUX -> cteFloat nt_pushFloat .

    multiply        reduce using rule 137 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    divide          reduce using rule 137 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    plus            reduce using rule 137 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    minus           reduce using rule 137 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    and             reduce using rule 137 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    or              reduce using rule 137 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    right_par       reduce using rule 137 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    comma           reduce using rule 137 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    semicolon       reduce using rule 137 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    right_sb        reduce using rule 137 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    lt              reduce using rule 137 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    gt              reduce using rule 137 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    ne              reduce using rule 137 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    ge              reduce using rule 137 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    le              reduce using rule 137 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    et              reduce using rule 137 (NUMERICA_AUX -> cteFloat nt_pushFloat .)


state 194

    (139) nt_pushFloat -> empty .

    multiply        reduce using rule 139 (nt_pushFloat -> empty .)
    divide          reduce using rule 139 (nt_pushFloat -> empty .)
    plus            reduce using rule 139 (nt_pushFloat -> empty .)
    minus           reduce using rule 139 (nt_pushFloat -> empty .)
    right_sb        reduce using rule 139 (nt_pushFloat -> empty .)
    lt              reduce using rule 139 (nt_pushFloat -> empty .)
    gt              reduce using rule 139 (nt_pushFloat -> empty .)
    ne              reduce using rule 139 (nt_pushFloat -> empty .)
    ge              reduce using rule 139 (nt_pushFloat -> empty .)
    le              reduce using rule 139 (nt_pushFloat -> empty .)
    et              reduce using rule 139 (nt_pushFloat -> empty .)
    and             reduce using rule 139 (nt_pushFloat -> empty .)
    or              reduce using rule 139 (nt_pushFloat -> empty .)
    right_par       reduce using rule 139 (nt_pushFloat -> empty .)
    comma           reduce using rule 139 (nt_pushFloat -> empty .)
    semicolon       reduce using rule 139 (nt_pushFloat -> empty .)


state 195

    (122) FACTOR_AUX -> id nt_pushPilaO .

    multiply        reduce using rule 122 (FACTOR_AUX -> id nt_pushPilaO .)
    divide          reduce using rule 122 (FACTOR_AUX -> id nt_pushPilaO .)
    plus            reduce using rule 122 (FACTOR_AUX -> id nt_pushPilaO .)
    minus           reduce using rule 122 (FACTOR_AUX -> id nt_pushPilaO .)
    and             reduce using rule 122 (FACTOR_AUX -> id nt_pushPilaO .)
    or              reduce using rule 122 (FACTOR_AUX -> id nt_pushPilaO .)
    right_par       reduce using rule 122 (FACTOR_AUX -> id nt_pushPilaO .)
    comma           reduce using rule 122 (FACTOR_AUX -> id nt_pushPilaO .)
    semicolon       reduce using rule 122 (FACTOR_AUX -> id nt_pushPilaO .)
    right_sb        reduce using rule 122 (FACTOR_AUX -> id nt_pushPilaO .)
    lt              reduce using rule 122 (FACTOR_AUX -> id nt_pushPilaO .)
    gt              reduce using rule 122 (FACTOR_AUX -> id nt_pushPilaO .)
    ne              reduce using rule 122 (FACTOR_AUX -> id nt_pushPilaO .)
    ge              reduce using rule 122 (FACTOR_AUX -> id nt_pushPilaO .)
    le              reduce using rule 122 (FACTOR_AUX -> id nt_pushPilaO .)
    et              reduce using rule 122 (FACTOR_AUX -> id nt_pushPilaO .)


state 196

    (124) LLAMADA_F -> left_par . EXPRESION LLAMADAF_AUX right_par
    (92) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (94) EXPRESION_NOT -> . not nt_pushPOper
    (95) EXPRESION_NOT -> . empty
    (150) empty -> .

    not             shift and go to state 130
    left_par        reduce using rule 150 (empty -> .)
    id              reduce using rule 150 (empty -> .)
    plus            reduce using rule 150 (empty -> .)
    minus           reduce using rule 150 (empty -> .)
    true            reduce using rule 150 (empty -> .)
    false           reduce using rule 150 (empty -> .)
    cteString       reduce using rule 150 (empty -> .)
    cteInt          reduce using rule 150 (empty -> .)
    cteFloat        reduce using rule 150 (empty -> .)

    EXPRESION                      shift and go to state 238
    EXPRESION_NOT                  shift and go to state 128
    empty                          shift and go to state 131

state 197

    (123) FACTOR_AUX -> id LLAMADA_F .

    multiply        reduce using rule 123 (FACTOR_AUX -> id LLAMADA_F .)
    divide          reduce using rule 123 (FACTOR_AUX -> id LLAMADA_F .)
    plus            reduce using rule 123 (FACTOR_AUX -> id LLAMADA_F .)
    minus           reduce using rule 123 (FACTOR_AUX -> id LLAMADA_F .)
    and             reduce using rule 123 (FACTOR_AUX -> id LLAMADA_F .)
    or              reduce using rule 123 (FACTOR_AUX -> id LLAMADA_F .)
    right_par       reduce using rule 123 (FACTOR_AUX -> id LLAMADA_F .)
    comma           reduce using rule 123 (FACTOR_AUX -> id LLAMADA_F .)
    semicolon       reduce using rule 123 (FACTOR_AUX -> id LLAMADA_F .)
    right_sb        reduce using rule 123 (FACTOR_AUX -> id LLAMADA_F .)
    lt              reduce using rule 123 (FACTOR_AUX -> id LLAMADA_F .)
    gt              reduce using rule 123 (FACTOR_AUX -> id LLAMADA_F .)
    ne              reduce using rule 123 (FACTOR_AUX -> id LLAMADA_F .)
    ge              reduce using rule 123 (FACTOR_AUX -> id LLAMADA_F .)
    le              reduce using rule 123 (FACTOR_AUX -> id LLAMADA_F .)
    et              reduce using rule 123 (FACTOR_AUX -> id LLAMADA_F .)


state 198

    (132) NUMERICA -> plus nt_sigMas . NUMERICA_AUX
    (136) NUMERICA_AUX -> . cteInt nt_pushInt
    (137) NUMERICA_AUX -> . cteFloat nt_pushFloat

    cteInt          shift and go to state 160
    cteFloat        shift and go to state 149

    NUMERICA_AUX                   shift and go to state 239

state 199

    (134) nt_sigMas -> empty .

    cteInt          reduce using rule 134 (nt_sigMas -> empty .)
    cteFloat        reduce using rule 134 (nt_sigMas -> empty .)


state 200

    (109) nt_checar_sumas -> empty .

    plus            reduce using rule 109 (nt_checar_sumas -> empty .)
    minus           reduce using rule 109 (nt_checar_sumas -> empty .)
    right_sb        reduce using rule 109 (nt_checar_sumas -> empty .)
    lt              reduce using rule 109 (nt_checar_sumas -> empty .)
    gt              reduce using rule 109 (nt_checar_sumas -> empty .)
    ne              reduce using rule 109 (nt_checar_sumas -> empty .)
    ge              reduce using rule 109 (nt_checar_sumas -> empty .)
    le              reduce using rule 109 (nt_checar_sumas -> empty .)
    et              reduce using rule 109 (nt_checar_sumas -> empty .)
    and             reduce using rule 109 (nt_checar_sumas -> empty .)
    or              reduce using rule 109 (nt_checar_sumas -> empty .)
    right_par       reduce using rule 109 (nt_checar_sumas -> empty .)
    comma           reduce using rule 109 (nt_checar_sumas -> empty .)
    semicolon       reduce using rule 109 (nt_checar_sumas -> empty .)


state 201

    (108) EXP -> TERMINO nt_checar_sumas . EXP_AUX
    (110) EXP_AUX -> . plus nt_pushPOper EXP
    (111) EXP_AUX -> . minus nt_pushPOper EXP
    (112) EXP_AUX -> . empty
    (150) empty -> .

    plus            shift and go to state 242
    minus           shift and go to state 240
    right_sb        reduce using rule 150 (empty -> .)
    lt              reduce using rule 150 (empty -> .)
    gt              reduce using rule 150 (empty -> .)
    ne              reduce using rule 150 (empty -> .)
    ge              reduce using rule 150 (empty -> .)
    le              reduce using rule 150 (empty -> .)
    et              reduce using rule 150 (empty -> .)
    and             reduce using rule 150 (empty -> .)
    or              reduce using rule 150 (empty -> .)
    right_par       reduce using rule 150 (empty -> .)
    comma           reduce using rule 150 (empty -> .)
    semicolon       reduce using rule 150 (empty -> .)

    EXP_AUX                        shift and go to state 243
    empty                          shift and go to state 241

state 202

    (118) FACTOR -> left_par nt_pushPOper . EXPRESION right_par nt_popPOper
    (92) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (94) EXPRESION_NOT -> . not nt_pushPOper
    (95) EXPRESION_NOT -> . empty
    (150) empty -> .

    not             shift and go to state 130
    left_par        reduce using rule 150 (empty -> .)
    id              reduce using rule 150 (empty -> .)
    plus            reduce using rule 150 (empty -> .)
    minus           reduce using rule 150 (empty -> .)
    true            reduce using rule 150 (empty -> .)
    false           reduce using rule 150 (empty -> .)
    cteString       reduce using rule 150 (empty -> .)
    cteInt          reduce using rule 150 (empty -> .)
    cteFloat        reduce using rule 150 (empty -> .)

    EXPRESION                      shift and go to state 244
    EXPRESION_NOT                  shift and go to state 128
    empty                          shift and go to state 131

state 203

    (138) nt_pushInt -> empty .

    multiply        reduce using rule 138 (nt_pushInt -> empty .)
    divide          reduce using rule 138 (nt_pushInt -> empty .)
    plus            reduce using rule 138 (nt_pushInt -> empty .)
    minus           reduce using rule 138 (nt_pushInt -> empty .)
    right_sb        reduce using rule 138 (nt_pushInt -> empty .)
    lt              reduce using rule 138 (nt_pushInt -> empty .)
    gt              reduce using rule 138 (nt_pushInt -> empty .)
    ne              reduce using rule 138 (nt_pushInt -> empty .)
    ge              reduce using rule 138 (nt_pushInt -> empty .)
    le              reduce using rule 138 (nt_pushInt -> empty .)
    et              reduce using rule 138 (nt_pushInt -> empty .)
    and             reduce using rule 138 (nt_pushInt -> empty .)
    or              reduce using rule 138 (nt_pushInt -> empty .)
    right_par       reduce using rule 138 (nt_pushInt -> empty .)
    comma           reduce using rule 138 (nt_pushInt -> empty .)
    semicolon       reduce using rule 138 (nt_pushInt -> empty .)


state 204

    (136) NUMERICA_AUX -> cteInt nt_pushInt .

    multiply        reduce using rule 136 (NUMERICA_AUX -> cteInt nt_pushInt .)
    divide          reduce using rule 136 (NUMERICA_AUX -> cteInt nt_pushInt .)
    plus            reduce using rule 136 (NUMERICA_AUX -> cteInt nt_pushInt .)
    minus           reduce using rule 136 (NUMERICA_AUX -> cteInt nt_pushInt .)
    and             reduce using rule 136 (NUMERICA_AUX -> cteInt nt_pushInt .)
    or              reduce using rule 136 (NUMERICA_AUX -> cteInt nt_pushInt .)
    right_par       reduce using rule 136 (NUMERICA_AUX -> cteInt nt_pushInt .)
    comma           reduce using rule 136 (NUMERICA_AUX -> cteInt nt_pushInt .)
    semicolon       reduce using rule 136 (NUMERICA_AUX -> cteInt nt_pushInt .)
    right_sb        reduce using rule 136 (NUMERICA_AUX -> cteInt nt_pushInt .)
    lt              reduce using rule 136 (NUMERICA_AUX -> cteInt nt_pushInt .)
    gt              reduce using rule 136 (NUMERICA_AUX -> cteInt nt_pushInt .)
    ne              reduce using rule 136 (NUMERICA_AUX -> cteInt nt_pushInt .)
    ge              reduce using rule 136 (NUMERICA_AUX -> cteInt nt_pushInt .)
    le              reduce using rule 136 (NUMERICA_AUX -> cteInt nt_pushInt .)
    et              reduce using rule 136 (NUMERICA_AUX -> cteInt nt_pushInt .)


state 205

    (113) TERMINO -> FACTOR nt_checar_multis . TERMINO_AUX
    (115) TERMINO_AUX -> . multiply nt_pushPOper TERMINO
    (116) TERMINO_AUX -> . divide nt_pushPOper TERMINO
    (117) TERMINO_AUX -> . empty
    (150) empty -> .

    multiply        shift and go to state 247
    divide          shift and go to state 246
    plus            reduce using rule 150 (empty -> .)
    minus           reduce using rule 150 (empty -> .)
    right_sb        reduce using rule 150 (empty -> .)
    lt              reduce using rule 150 (empty -> .)
    gt              reduce using rule 150 (empty -> .)
    ne              reduce using rule 150 (empty -> .)
    ge              reduce using rule 150 (empty -> .)
    le              reduce using rule 150 (empty -> .)
    et              reduce using rule 150 (empty -> .)
    and             reduce using rule 150 (empty -> .)
    or              reduce using rule 150 (empty -> .)
    right_par       reduce using rule 150 (empty -> .)
    comma           reduce using rule 150 (empty -> .)
    semicolon       reduce using rule 150 (empty -> .)

    TERMINO_AUX                    shift and go to state 245
    empty                          shift and go to state 248

state 206

    (114) nt_checar_multis -> empty .

    multiply        reduce using rule 114 (nt_checar_multis -> empty .)
    divide          reduce using rule 114 (nt_checar_multis -> empty .)
    plus            reduce using rule 114 (nt_checar_multis -> empty .)
    minus           reduce using rule 114 (nt_checar_multis -> empty .)
    right_sb        reduce using rule 114 (nt_checar_multis -> empty .)
    lt              reduce using rule 114 (nt_checar_multis -> empty .)
    gt              reduce using rule 114 (nt_checar_multis -> empty .)
    ne              reduce using rule 114 (nt_checar_multis -> empty .)
    ge              reduce using rule 114 (nt_checar_multis -> empty .)
    le              reduce using rule 114 (nt_checar_multis -> empty .)
    et              reduce using rule 114 (nt_checar_multis -> empty .)
    and             reduce using rule 114 (nt_checar_multis -> empty .)
    or              reduce using rule 114 (nt_checar_multis -> empty .)
    right_par       reduce using rule 114 (nt_checar_multis -> empty .)
    comma           reduce using rule 114 (nt_checar_multis -> empty .)
    semicolon       reduce using rule 114 (nt_checar_multis -> empty .)


state 207

    (135) nt_sigMenos -> empty .

    cteInt          reduce using rule 135 (nt_sigMenos -> empty .)
    cteFloat        reduce using rule 135 (nt_sigMenos -> empty .)


state 208

    (133) NUMERICA -> minus nt_sigMenos . NUMERICA_AUX
    (136) NUMERICA_AUX -> . cteInt nt_pushInt
    (137) NUMERICA_AUX -> . cteFloat nt_pushFloat

    cteInt          shift and go to state 160
    cteFloat        shift and go to state 149

    NUMERICA_AUX                   shift and go to state 249

state 209

    (87) ESCRITURA -> cwrite left_par EXPRESION nt_escribir . right_par semicolon

    right_par       shift and go to state 250


state 210

    (88) nt_escribir -> empty .

    right_par       reduce using rule 88 (nt_escribir -> empty .)


state 211

    (143) ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION . nt_checaEquals semicolon
    (144) nt_checaEquals -> . empty
    (150) empty -> .

    semicolon       reduce using rule 150 (empty -> .)

    nt_checaEquals                 shift and go to state 251
    empty                          shift and go to state 252

state 212

    (92) EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot . EXPRESION_B
    (96) EXPRESION_B -> . and nt_pushPOper EXPRESION
    (97) EXPRESION_B -> . or nt_pushPOper EXPRESION
    (98) EXPRESION_B -> . empty
    (150) empty -> .

    and             shift and go to state 253
    or              shift and go to state 255
    right_par       reduce using rule 150 (empty -> .)
    comma           reduce using rule 150 (empty -> .)
    semicolon       reduce using rule 150 (empty -> .)

    EXPRESION_B                    shift and go to state 254
    empty                          shift and go to state 256

state 213

    (93) nt_checaAndOrNot -> empty .

    and             reduce using rule 93 (nt_checaAndOrNot -> empty .)
    or              reduce using rule 93 (nt_checaAndOrNot -> empty .)
    right_par       reduce using rule 93 (nt_checaAndOrNot -> empty .)
    comma           reduce using rule 93 (nt_checaAndOrNot -> empty .)
    semicolon       reduce using rule 93 (nt_checaAndOrNot -> empty .)


state 214

    (103) EXPRESIONLOGICA_AUX -> ge . nt_pushPOper EXP nt_checarRelop
    (148) nt_pushPOper -> . empty
    (150) empty -> .

    left_par        reduce using rule 150 (empty -> .)
    id              reduce using rule 150 (empty -> .)
    plus            reduce using rule 150 (empty -> .)
    minus           reduce using rule 150 (empty -> .)
    true            reduce using rule 150 (empty -> .)
    false           reduce using rule 150 (empty -> .)
    cteString       reduce using rule 150 (empty -> .)
    cteInt          reduce using rule 150 (empty -> .)
    cteFloat        reduce using rule 150 (empty -> .)

    empty                          shift and go to state 167
    nt_pushPOper                   shift and go to state 257

state 215

    (101) EXPRESIONLOGICA_AUX -> gt . nt_pushPOper EXP nt_checarRelop
    (148) nt_pushPOper -> . empty
    (150) empty -> .

    left_par        reduce using rule 150 (empty -> .)
    id              reduce using rule 150 (empty -> .)
    plus            reduce using rule 150 (empty -> .)
    minus           reduce using rule 150 (empty -> .)
    true            reduce using rule 150 (empty -> .)
    false           reduce using rule 150 (empty -> .)
    cteString       reduce using rule 150 (empty -> .)
    cteInt          reduce using rule 150 (empty -> .)
    cteFloat        reduce using rule 150 (empty -> .)

    empty                          shift and go to state 167
    nt_pushPOper                   shift and go to state 258

state 216

    (99) EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .

    and             reduce using rule 99 (EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .)
    or              reduce using rule 99 (EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .)
    right_par       reduce using rule 99 (EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .)
    comma           reduce using rule 99 (EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .)
    semicolon       reduce using rule 99 (EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .)


state 217

    (102) EXPRESIONLOGICA_AUX -> ne . nt_pushPOper EXP nt_checarRelop
    (148) nt_pushPOper -> . empty
    (150) empty -> .

    left_par        reduce using rule 150 (empty -> .)
    id              reduce using rule 150 (empty -> .)
    plus            reduce using rule 150 (empty -> .)
    minus           reduce using rule 150 (empty -> .)
    true            reduce using rule 150 (empty -> .)
    false           reduce using rule 150 (empty -> .)
    cteString       reduce using rule 150 (empty -> .)
    cteInt          reduce using rule 150 (empty -> .)
    cteFloat        reduce using rule 150 (empty -> .)

    empty                          shift and go to state 167
    nt_pushPOper                   shift and go to state 259

state 218

    (100) EXPRESIONLOGICA_AUX -> lt . nt_pushPOper EXP nt_checarRelop
    (148) nt_pushPOper -> . empty
    (150) empty -> .

    left_par        reduce using rule 150 (empty -> .)
    id              reduce using rule 150 (empty -> .)
    plus            reduce using rule 150 (empty -> .)
    minus           reduce using rule 150 (empty -> .)
    true            reduce using rule 150 (empty -> .)
    false           reduce using rule 150 (empty -> .)
    cteString       reduce using rule 150 (empty -> .)
    cteInt          reduce using rule 150 (empty -> .)
    cteFloat        reduce using rule 150 (empty -> .)

    empty                          shift and go to state 167
    nt_pushPOper                   shift and go to state 260

state 219

    (104) EXPRESIONLOGICA_AUX -> le . nt_pushPOper EXP nt_checarRelop
    (148) nt_pushPOper -> . empty
    (150) empty -> .

    left_par        reduce using rule 150 (empty -> .)
    id              reduce using rule 150 (empty -> .)
    plus            reduce using rule 150 (empty -> .)
    minus           reduce using rule 150 (empty -> .)
    true            reduce using rule 150 (empty -> .)
    false           reduce using rule 150 (empty -> .)
    cteString       reduce using rule 150 (empty -> .)
    cteInt          reduce using rule 150 (empty -> .)
    cteFloat        reduce using rule 150 (empty -> .)

    empty                          shift and go to state 167
    nt_pushPOper                   shift and go to state 261

state 220

    (105) EXPRESIONLOGICA_AUX -> et . nt_pushPOper EXP nt_checarRelop
    (148) nt_pushPOper -> . empty
    (150) empty -> .

    left_par        reduce using rule 150 (empty -> .)
    id              reduce using rule 150 (empty -> .)
    plus            reduce using rule 150 (empty -> .)
    minus           reduce using rule 150 (empty -> .)
    true            reduce using rule 150 (empty -> .)
    false           reduce using rule 150 (empty -> .)
    cteString       reduce using rule 150 (empty -> .)
    cteInt          reduce using rule 150 (empty -> .)
    cteFloat        reduce using rule 150 (empty -> .)

    empty                          shift and go to state 167
    nt_pushPOper                   shift and go to state 262

state 221

    (106) EXPRESIONLOGICA_AUX -> empty .

    and             reduce using rule 106 (EXPRESIONLOGICA_AUX -> empty .)
    or              reduce using rule 106 (EXPRESIONLOGICA_AUX -> empty .)
    right_par       reduce using rule 106 (EXPRESIONLOGICA_AUX -> empty .)
    comma           reduce using rule 106 (EXPRESIONLOGICA_AUX -> empty .)
    semicolon       reduce using rule 106 (EXPRESIONLOGICA_AUX -> empty .)


state 222

    (91) LLAMADA_EXPRESION -> LLAMADA_EXPRESION comma EXPRESION .

    right_par       reduce using rule 91 (LLAMADA_EXPRESION -> LLAMADA_EXPRESION comma EXPRESION .)
    comma           reduce using rule 91 (LLAMADA_EXPRESION -> LLAMADA_EXPRESION comma EXPRESION .)


state 223

    (89) LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .

    right_cb        reduce using rule 89 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    list            reduce using rule 89 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    var             reduce using rule 89 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    if              reduce using rule 89 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    while           reduce using rule 89 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    cread           reduce using rule 89 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    cwrite          reduce using rule 89 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    left_par        reduce using rule 89 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    id              reduce using rule 89 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)
    return          reduce using rule 89 (LLAMADA -> left_par LLAMADA_EXPRESION right_par semicolon .)


state 224

    (82) CICLO -> while nt_saltoLoop left_par EXPRESION . nt_checarBool right_par CUERPO nt_pushLoop
    (79) nt_checarBool -> . empty
    (150) empty -> .

    right_par       reduce using rule 150 (empty -> .)

    nt_checarBool                  shift and go to state 263
    empty                          shift and go to state 191

state 225

    (48) CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX . RETORNO
    (51) RETORNO -> . return EXP semicolon

    return          shift and go to state 229

    RETORNO                        shift and go to state 264

state 226

    (46) CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .

    int             reduce using rule 46 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)
    float           reduce using rule 46 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)
    bool            reduce using rule 46 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)
    string          reduce using rule 46 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)
    void            reduce using rule 46 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)
    main            reduce using rule 46 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)


state 227

    (40) CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS . nt_funcInicio CUERPOFUNC_ESTATUTO
    (41) nt_funcInicio -> . empty
    (150) empty -> .

    if              reduce using rule 150 (empty -> .)
    while           reduce using rule 150 (empty -> .)
    cread           reduce using rule 150 (empty -> .)
    cwrite          reduce using rule 150 (empty -> .)
    left_par        reduce using rule 150 (empty -> .)
    id              reduce using rule 150 (empty -> .)
    list            reduce using rule 150 (empty -> .)
    var             reduce using rule 150 (empty -> .)
    return          reduce using rule 150 (empty -> .)
    right_cb        reduce using rule 150 (empty -> .)

    empty                          shift and go to state 230
    nt_funcInicio                  shift and go to state 265

state 228

    (47) CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .

    right_cb        reduce using rule 47 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    list            reduce using rule 47 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    var             reduce using rule 47 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    return          reduce using rule 47 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    if              reduce using rule 47 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    while           reduce using rule 47 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    cread           reduce using rule 47 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    cwrite          reduce using rule 47 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    left_par        reduce using rule 47 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    id              reduce using rule 47 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)


state 229

    (51) RETORNO -> return . EXP semicolon
    (108) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (113) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (118) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (119) FACTOR -> . CONSTANTE
    (120) FACTOR -> . LISTA
    (121) FACTOR -> . FACTOR_AUX
    (128) CONSTANTE -> . NUMERICA
    (129) CONSTANTE -> . BOOLEANA
    (130) CONSTANTE -> . STRINGS
    (127) LISTA -> . id left_sb EXP right_sb
    (122) FACTOR_AUX -> . id nt_pushPilaO
    (123) FACTOR_AUX -> . id LLAMADA_F
    (131) NUMERICA -> . NUMERICA_AUX
    (132) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (133) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (140) BOOLEANA -> . true
    (141) BOOLEANA -> . false
    (142) STRINGS -> . cteString
    (136) NUMERICA_AUX -> . cteInt nt_pushInt
    (137) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 156
    id              shift and go to state 151
    plus            shift and go to state 152
    minus           shift and go to state 165
    true            shift and go to state 157
    false           shift and go to state 147
    cteString       shift and go to state 155
    cteInt          shift and go to state 160
    cteFloat        shift and go to state 149

    BOOLEANA                       shift and go to state 150
    EXP                            shift and go to state 266
    FACTOR_AUX                     shift and go to state 153
    NUMERICA_AUX                   shift and go to state 161
    TERMINO                        shift and go to state 154
    STRINGS                        shift and go to state 158
    CONSTANTE                      shift and go to state 159
    NUMERICA                       shift and go to state 162
    FACTOR                         shift and go to state 163
    LISTA                          shift and go to state 164

state 230

    (41) nt_funcInicio -> empty .

    if              reduce using rule 41 (nt_funcInicio -> empty .)
    while           reduce using rule 41 (nt_funcInicio -> empty .)
    cread           reduce using rule 41 (nt_funcInicio -> empty .)
    cwrite          reduce using rule 41 (nt_funcInicio -> empty .)
    left_par        reduce using rule 41 (nt_funcInicio -> empty .)
    id              reduce using rule 41 (nt_funcInicio -> empty .)
    list            reduce using rule 41 (nt_funcInicio -> empty .)
    var             reduce using rule 41 (nt_funcInicio -> empty .)
    return          reduce using rule 41 (nt_funcInicio -> empty .)
    right_cb        reduce using rule 41 (nt_funcInicio -> empty .)


state 231

    (39) CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio . CUERPOFUNC_ESTATUTO
    (44) CUERPOFUNC_ESTATUTO -> . ESTATUTO
    (45) CUERPOFUNC_ESTATUTO -> . empty
    (66) ESTATUTO -> . ASIGNACION
    (67) ESTATUTO -> . CONDICION
    (68) ESTATUTO -> . CICLO
    (69) ESTATUTO -> . LECTURA
    (70) ESTATUTO -> . ESCRITURA
    (71) ESTATUTO -> . LLAMADA
    (150) empty -> .
    (143) ASIGNACION -> . ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon
    (72) CONDICION -> . if CONDICION_AUX
    (82) CICLO -> . while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop
    (85) LECTURA -> . cread left_par id nt_leer right_par semicolon
    (87) ESCRITURA -> . cwrite left_par EXPRESION nt_escribir right_par semicolon
    (89) LLAMADA -> . left_par LLAMADA_EXPRESION right_par semicolon
    (145) ASIGNACION_AUX -> . id nt_pushPilaO
    (146) ASIGNACION_AUX -> . LISTA
    (127) LISTA -> . id left_sb EXP right_sb

  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for cread resolved as shift
  ! shift/reduce conflict for cwrite resolved as shift
  ! shift/reduce conflict for left_par resolved as shift
  ! shift/reduce conflict for id resolved as shift
    list            reduce using rule 150 (empty -> .)
    var             reduce using rule 150 (empty -> .)
    return          reduce using rule 150 (empty -> .)
    right_cb        reduce using rule 150 (empty -> .)
    if              shift and go to state 95
    while           shift and go to state 107
    cread           shift and go to state 93
    cwrite          shift and go to state 99
    left_par        shift and go to state 105
    id              shift and go to state 98

  ! if              [ reduce using rule 150 (empty -> .) ]
  ! while           [ reduce using rule 150 (empty -> .) ]
  ! cread           [ reduce using rule 150 (empty -> .) ]
  ! cwrite          [ reduce using rule 150 (empty -> .) ]
  ! left_par        [ reduce using rule 150 (empty -> .) ]
  ! id              [ reduce using rule 150 (empty -> .) ]

    CICLO                          shift and go to state 92
    LECTURA                        shift and go to state 94
    ESCRITURA                      shift and go to state 101
    CUERPOFUNC_ESTATUTO            shift and go to state 267
    ASIGNACION                     shift and go to state 96
    ESTATUTO                       shift and go to state 268
    ASIGNACION_AUX                 shift and go to state 100
    empty                          shift and go to state 269
    LLAMADA                        shift and go to state 103
    CONDICION                      shift and go to state 104
    LISTA                          shift and go to state 108

state 232

    (59) FUNC_PARA -> FUNC_PARA comma TIPO id nt_agregarParametro .

    right_par       reduce using rule 59 (FUNC_PARA -> FUNC_PARA comma TIPO id nt_agregarParametro .)
    comma           reduce using rule 59 (FUNC_PARA -> FUNC_PARA comma TIPO id nt_agregarParametro .)


state 233

    (62) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .

    int             reduce using rule 62 (VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)
    float           reduce using rule 62 (VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)
    bool            reduce using rule 62 (VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)
    string          reduce using rule 62 (VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)
    void            reduce using rule 62 (VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)
    main            reduce using rule 62 (VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)


state 234

    (65) VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO id nt_agregarParametro .

    right_par       reduce using rule 65 (VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO id nt_agregarParametro .)
    comma           reduce using rule 65 (VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO id nt_agregarParametro .)


state 235

    (18) VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar .

    semicolon       reduce using rule 18 (VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar .)
    comma           reduce using rule 18 (VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar .)


state 236

    (85) LECTURA -> cread left_par id nt_leer right_par . semicolon

    semicolon       shift and go to state 270


state 237

    (73) CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par . CUERPO ELSE_ELIF nt_pushSalto
    (31) CUERPO -> . left_cb CUERPO_AUX right_cb

    left_cb         shift and go to state 73

    CUERPO                         shift and go to state 271

state 238

    (124) LLAMADA_F -> left_par EXPRESION . LLAMADAF_AUX right_par
    (125) LLAMADAF_AUX -> . comma EXPRESION LLAMADAF_AUX
    (126) LLAMADAF_AUX -> . empty
    (150) empty -> .

    comma           shift and go to state 273
    right_par       reduce using rule 150 (empty -> .)

    LLAMADAF_AUX                   shift and go to state 272
    empty                          shift and go to state 274

state 239

    (132) NUMERICA -> plus nt_sigMas NUMERICA_AUX .

    multiply        reduce using rule 132 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    divide          reduce using rule 132 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    plus            reduce using rule 132 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    minus           reduce using rule 132 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    right_sb        reduce using rule 132 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    lt              reduce using rule 132 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    gt              reduce using rule 132 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    ne              reduce using rule 132 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    ge              reduce using rule 132 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    le              reduce using rule 132 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    et              reduce using rule 132 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    and             reduce using rule 132 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    or              reduce using rule 132 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    right_par       reduce using rule 132 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    comma           reduce using rule 132 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    semicolon       reduce using rule 132 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)


state 240

    (111) EXP_AUX -> minus . nt_pushPOper EXP
    (148) nt_pushPOper -> . empty
    (150) empty -> .

    left_par        reduce using rule 150 (empty -> .)
    id              reduce using rule 150 (empty -> .)
    plus            reduce using rule 150 (empty -> .)
    minus           reduce using rule 150 (empty -> .)
    true            reduce using rule 150 (empty -> .)
    false           reduce using rule 150 (empty -> .)
    cteString       reduce using rule 150 (empty -> .)
    cteInt          reduce using rule 150 (empty -> .)
    cteFloat        reduce using rule 150 (empty -> .)

    empty                          shift and go to state 167
    nt_pushPOper                   shift and go to state 275

state 241

    (112) EXP_AUX -> empty .

    right_sb        reduce using rule 112 (EXP_AUX -> empty .)
    lt              reduce using rule 112 (EXP_AUX -> empty .)
    gt              reduce using rule 112 (EXP_AUX -> empty .)
    ne              reduce using rule 112 (EXP_AUX -> empty .)
    ge              reduce using rule 112 (EXP_AUX -> empty .)
    le              reduce using rule 112 (EXP_AUX -> empty .)
    et              reduce using rule 112 (EXP_AUX -> empty .)
    and             reduce using rule 112 (EXP_AUX -> empty .)
    or              reduce using rule 112 (EXP_AUX -> empty .)
    right_par       reduce using rule 112 (EXP_AUX -> empty .)
    comma           reduce using rule 112 (EXP_AUX -> empty .)
    semicolon       reduce using rule 112 (EXP_AUX -> empty .)


state 242

    (110) EXP_AUX -> plus . nt_pushPOper EXP
    (148) nt_pushPOper -> . empty
    (150) empty -> .

    left_par        reduce using rule 150 (empty -> .)
    id              reduce using rule 150 (empty -> .)
    plus            reduce using rule 150 (empty -> .)
    minus           reduce using rule 150 (empty -> .)
    true            reduce using rule 150 (empty -> .)
    false           reduce using rule 150 (empty -> .)
    cteString       reduce using rule 150 (empty -> .)
    cteInt          reduce using rule 150 (empty -> .)
    cteFloat        reduce using rule 150 (empty -> .)

    empty                          shift and go to state 167
    nt_pushPOper                   shift and go to state 276

state 243

    (108) EXP -> TERMINO nt_checar_sumas EXP_AUX .

    right_sb        reduce using rule 108 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    lt              reduce using rule 108 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    gt              reduce using rule 108 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    ne              reduce using rule 108 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    ge              reduce using rule 108 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    le              reduce using rule 108 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    et              reduce using rule 108 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    and             reduce using rule 108 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    or              reduce using rule 108 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    right_par       reduce using rule 108 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    comma           reduce using rule 108 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    semicolon       reduce using rule 108 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)


state 244

    (118) FACTOR -> left_par nt_pushPOper EXPRESION . right_par nt_popPOper

    right_par       shift and go to state 277


state 245

    (113) TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .

    plus            reduce using rule 113 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    minus           reduce using rule 113 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    and             reduce using rule 113 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    or              reduce using rule 113 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    right_par       reduce using rule 113 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    comma           reduce using rule 113 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    semicolon       reduce using rule 113 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    right_sb        reduce using rule 113 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    lt              reduce using rule 113 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    gt              reduce using rule 113 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    ne              reduce using rule 113 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    ge              reduce using rule 113 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    le              reduce using rule 113 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    et              reduce using rule 113 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)


state 246

    (116) TERMINO_AUX -> divide . nt_pushPOper TERMINO
    (148) nt_pushPOper -> . empty
    (150) empty -> .

    left_par        reduce using rule 150 (empty -> .)
    id              reduce using rule 150 (empty -> .)
    plus            reduce using rule 150 (empty -> .)
    minus           reduce using rule 150 (empty -> .)
    true            reduce using rule 150 (empty -> .)
    false           reduce using rule 150 (empty -> .)
    cteString       reduce using rule 150 (empty -> .)
    cteInt          reduce using rule 150 (empty -> .)
    cteFloat        reduce using rule 150 (empty -> .)

    empty                          shift and go to state 167
    nt_pushPOper                   shift and go to state 278

state 247

    (115) TERMINO_AUX -> multiply . nt_pushPOper TERMINO
    (148) nt_pushPOper -> . empty
    (150) empty -> .

    left_par        reduce using rule 150 (empty -> .)
    id              reduce using rule 150 (empty -> .)
    plus            reduce using rule 150 (empty -> .)
    minus           reduce using rule 150 (empty -> .)
    true            reduce using rule 150 (empty -> .)
    false           reduce using rule 150 (empty -> .)
    cteString       reduce using rule 150 (empty -> .)
    cteInt          reduce using rule 150 (empty -> .)
    cteFloat        reduce using rule 150 (empty -> .)

    empty                          shift and go to state 167
    nt_pushPOper                   shift and go to state 279

state 248

    (117) TERMINO_AUX -> empty .

    plus            reduce using rule 117 (TERMINO_AUX -> empty .)
    minus           reduce using rule 117 (TERMINO_AUX -> empty .)
    right_sb        reduce using rule 117 (TERMINO_AUX -> empty .)
    lt              reduce using rule 117 (TERMINO_AUX -> empty .)
    gt              reduce using rule 117 (TERMINO_AUX -> empty .)
    ne              reduce using rule 117 (TERMINO_AUX -> empty .)
    ge              reduce using rule 117 (TERMINO_AUX -> empty .)
    le              reduce using rule 117 (TERMINO_AUX -> empty .)
    et              reduce using rule 117 (TERMINO_AUX -> empty .)
    and             reduce using rule 117 (TERMINO_AUX -> empty .)
    or              reduce using rule 117 (TERMINO_AUX -> empty .)
    right_par       reduce using rule 117 (TERMINO_AUX -> empty .)
    comma           reduce using rule 117 (TERMINO_AUX -> empty .)
    semicolon       reduce using rule 117 (TERMINO_AUX -> empty .)


state 249

    (133) NUMERICA -> minus nt_sigMenos NUMERICA_AUX .

    multiply        reduce using rule 133 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    divide          reduce using rule 133 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    plus            reduce using rule 133 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    minus           reduce using rule 133 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    right_sb        reduce using rule 133 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    lt              reduce using rule 133 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    gt              reduce using rule 133 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    ne              reduce using rule 133 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    ge              reduce using rule 133 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    le              reduce using rule 133 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    et              reduce using rule 133 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    and             reduce using rule 133 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    or              reduce using rule 133 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    right_par       reduce using rule 133 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    comma           reduce using rule 133 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    semicolon       reduce using rule 133 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)


state 250

    (87) ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par . semicolon

    semicolon       shift and go to state 280


state 251

    (143) ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals . semicolon

    semicolon       shift and go to state 281


state 252

    (144) nt_checaEquals -> empty .

    semicolon       reduce using rule 144 (nt_checaEquals -> empty .)


state 253

    (96) EXPRESION_B -> and . nt_pushPOper EXPRESION
    (148) nt_pushPOper -> . empty
    (150) empty -> .

    not             reduce using rule 150 (empty -> .)
    left_par        reduce using rule 150 (empty -> .)
    id              reduce using rule 150 (empty -> .)
    plus            reduce using rule 150 (empty -> .)
    minus           reduce using rule 150 (empty -> .)
    true            reduce using rule 150 (empty -> .)
    false           reduce using rule 150 (empty -> .)
    cteString       reduce using rule 150 (empty -> .)
    cteInt          reduce using rule 150 (empty -> .)
    cteFloat        reduce using rule 150 (empty -> .)

    empty                          shift and go to state 167
    nt_pushPOper                   shift and go to state 282

state 254

    (92) EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B .

    right_par       reduce using rule 92 (EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B .)
    comma           reduce using rule 92 (EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B .)
    semicolon       reduce using rule 92 (EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B .)


state 255

    (97) EXPRESION_B -> or . nt_pushPOper EXPRESION
    (148) nt_pushPOper -> . empty
    (150) empty -> .

    not             reduce using rule 150 (empty -> .)
    left_par        reduce using rule 150 (empty -> .)
    id              reduce using rule 150 (empty -> .)
    plus            reduce using rule 150 (empty -> .)
    minus           reduce using rule 150 (empty -> .)
    true            reduce using rule 150 (empty -> .)
    false           reduce using rule 150 (empty -> .)
    cteString       reduce using rule 150 (empty -> .)
    cteInt          reduce using rule 150 (empty -> .)
    cteFloat        reduce using rule 150 (empty -> .)

    empty                          shift and go to state 167
    nt_pushPOper                   shift and go to state 283

state 256

    (98) EXPRESION_B -> empty .

    right_par       reduce using rule 98 (EXPRESION_B -> empty .)
    comma           reduce using rule 98 (EXPRESION_B -> empty .)
    semicolon       reduce using rule 98 (EXPRESION_B -> empty .)


state 257

    (103) EXPRESIONLOGICA_AUX -> ge nt_pushPOper . EXP nt_checarRelop
    (108) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (113) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (118) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (119) FACTOR -> . CONSTANTE
    (120) FACTOR -> . LISTA
    (121) FACTOR -> . FACTOR_AUX
    (128) CONSTANTE -> . NUMERICA
    (129) CONSTANTE -> . BOOLEANA
    (130) CONSTANTE -> . STRINGS
    (127) LISTA -> . id left_sb EXP right_sb
    (122) FACTOR_AUX -> . id nt_pushPilaO
    (123) FACTOR_AUX -> . id LLAMADA_F
    (131) NUMERICA -> . NUMERICA_AUX
    (132) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (133) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (140) BOOLEANA -> . true
    (141) BOOLEANA -> . false
    (142) STRINGS -> . cteString
    (136) NUMERICA_AUX -> . cteInt nt_pushInt
    (137) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 156
    id              shift and go to state 151
    plus            shift and go to state 152
    minus           shift and go to state 165
    true            shift and go to state 157
    false           shift and go to state 147
    cteString       shift and go to state 155
    cteInt          shift and go to state 160
    cteFloat        shift and go to state 149

    BOOLEANA                       shift and go to state 150
    EXP                            shift and go to state 284
    FACTOR_AUX                     shift and go to state 153
    NUMERICA_AUX                   shift and go to state 161
    TERMINO                        shift and go to state 154
    STRINGS                        shift and go to state 158
    CONSTANTE                      shift and go to state 159
    NUMERICA                       shift and go to state 162
    FACTOR                         shift and go to state 163
    LISTA                          shift and go to state 164

state 258

    (101) EXPRESIONLOGICA_AUX -> gt nt_pushPOper . EXP nt_checarRelop
    (108) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (113) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (118) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (119) FACTOR -> . CONSTANTE
    (120) FACTOR -> . LISTA
    (121) FACTOR -> . FACTOR_AUX
    (128) CONSTANTE -> . NUMERICA
    (129) CONSTANTE -> . BOOLEANA
    (130) CONSTANTE -> . STRINGS
    (127) LISTA -> . id left_sb EXP right_sb
    (122) FACTOR_AUX -> . id nt_pushPilaO
    (123) FACTOR_AUX -> . id LLAMADA_F
    (131) NUMERICA -> . NUMERICA_AUX
    (132) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (133) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (140) BOOLEANA -> . true
    (141) BOOLEANA -> . false
    (142) STRINGS -> . cteString
    (136) NUMERICA_AUX -> . cteInt nt_pushInt
    (137) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 156
    id              shift and go to state 151
    plus            shift and go to state 152
    minus           shift and go to state 165
    true            shift and go to state 157
    false           shift and go to state 147
    cteString       shift and go to state 155
    cteInt          shift and go to state 160
    cteFloat        shift and go to state 149

    BOOLEANA                       shift and go to state 150
    EXP                            shift and go to state 285
    FACTOR_AUX                     shift and go to state 153
    NUMERICA_AUX                   shift and go to state 161
    TERMINO                        shift and go to state 154
    STRINGS                        shift and go to state 158
    CONSTANTE                      shift and go to state 159
    NUMERICA                       shift and go to state 162
    FACTOR                         shift and go to state 163
    LISTA                          shift and go to state 164

state 259

    (102) EXPRESIONLOGICA_AUX -> ne nt_pushPOper . EXP nt_checarRelop
    (108) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (113) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (118) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (119) FACTOR -> . CONSTANTE
    (120) FACTOR -> . LISTA
    (121) FACTOR -> . FACTOR_AUX
    (128) CONSTANTE -> . NUMERICA
    (129) CONSTANTE -> . BOOLEANA
    (130) CONSTANTE -> . STRINGS
    (127) LISTA -> . id left_sb EXP right_sb
    (122) FACTOR_AUX -> . id nt_pushPilaO
    (123) FACTOR_AUX -> . id LLAMADA_F
    (131) NUMERICA -> . NUMERICA_AUX
    (132) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (133) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (140) BOOLEANA -> . true
    (141) BOOLEANA -> . false
    (142) STRINGS -> . cteString
    (136) NUMERICA_AUX -> . cteInt nt_pushInt
    (137) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 156
    id              shift and go to state 151
    plus            shift and go to state 152
    minus           shift and go to state 165
    true            shift and go to state 157
    false           shift and go to state 147
    cteString       shift and go to state 155
    cteInt          shift and go to state 160
    cteFloat        shift and go to state 149

    BOOLEANA                       shift and go to state 150
    EXP                            shift and go to state 286
    FACTOR_AUX                     shift and go to state 153
    NUMERICA_AUX                   shift and go to state 161
    TERMINO                        shift and go to state 154
    STRINGS                        shift and go to state 158
    CONSTANTE                      shift and go to state 159
    NUMERICA                       shift and go to state 162
    FACTOR                         shift and go to state 163
    LISTA                          shift and go to state 164

state 260

    (100) EXPRESIONLOGICA_AUX -> lt nt_pushPOper . EXP nt_checarRelop
    (108) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (113) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (118) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (119) FACTOR -> . CONSTANTE
    (120) FACTOR -> . LISTA
    (121) FACTOR -> . FACTOR_AUX
    (128) CONSTANTE -> . NUMERICA
    (129) CONSTANTE -> . BOOLEANA
    (130) CONSTANTE -> . STRINGS
    (127) LISTA -> . id left_sb EXP right_sb
    (122) FACTOR_AUX -> . id nt_pushPilaO
    (123) FACTOR_AUX -> . id LLAMADA_F
    (131) NUMERICA -> . NUMERICA_AUX
    (132) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (133) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (140) BOOLEANA -> . true
    (141) BOOLEANA -> . false
    (142) STRINGS -> . cteString
    (136) NUMERICA_AUX -> . cteInt nt_pushInt
    (137) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 156
    id              shift and go to state 151
    plus            shift and go to state 152
    minus           shift and go to state 165
    true            shift and go to state 157
    false           shift and go to state 147
    cteString       shift and go to state 155
    cteInt          shift and go to state 160
    cteFloat        shift and go to state 149

    BOOLEANA                       shift and go to state 150
    EXP                            shift and go to state 287
    FACTOR_AUX                     shift and go to state 153
    NUMERICA_AUX                   shift and go to state 161
    TERMINO                        shift and go to state 154
    STRINGS                        shift and go to state 158
    CONSTANTE                      shift and go to state 159
    NUMERICA                       shift and go to state 162
    FACTOR                         shift and go to state 163
    LISTA                          shift and go to state 164

state 261

    (104) EXPRESIONLOGICA_AUX -> le nt_pushPOper . EXP nt_checarRelop
    (108) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (113) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (118) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (119) FACTOR -> . CONSTANTE
    (120) FACTOR -> . LISTA
    (121) FACTOR -> . FACTOR_AUX
    (128) CONSTANTE -> . NUMERICA
    (129) CONSTANTE -> . BOOLEANA
    (130) CONSTANTE -> . STRINGS
    (127) LISTA -> . id left_sb EXP right_sb
    (122) FACTOR_AUX -> . id nt_pushPilaO
    (123) FACTOR_AUX -> . id LLAMADA_F
    (131) NUMERICA -> . NUMERICA_AUX
    (132) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (133) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (140) BOOLEANA -> . true
    (141) BOOLEANA -> . false
    (142) STRINGS -> . cteString
    (136) NUMERICA_AUX -> . cteInt nt_pushInt
    (137) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 156
    id              shift and go to state 151
    plus            shift and go to state 152
    minus           shift and go to state 165
    true            shift and go to state 157
    false           shift and go to state 147
    cteString       shift and go to state 155
    cteInt          shift and go to state 160
    cteFloat        shift and go to state 149

    BOOLEANA                       shift and go to state 150
    EXP                            shift and go to state 288
    FACTOR_AUX                     shift and go to state 153
    NUMERICA_AUX                   shift and go to state 161
    TERMINO                        shift and go to state 154
    STRINGS                        shift and go to state 158
    CONSTANTE                      shift and go to state 159
    NUMERICA                       shift and go to state 162
    FACTOR                         shift and go to state 163
    LISTA                          shift and go to state 164

state 262

    (105) EXPRESIONLOGICA_AUX -> et nt_pushPOper . EXP nt_checarRelop
    (108) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (113) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (118) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (119) FACTOR -> . CONSTANTE
    (120) FACTOR -> . LISTA
    (121) FACTOR -> . FACTOR_AUX
    (128) CONSTANTE -> . NUMERICA
    (129) CONSTANTE -> . BOOLEANA
    (130) CONSTANTE -> . STRINGS
    (127) LISTA -> . id left_sb EXP right_sb
    (122) FACTOR_AUX -> . id nt_pushPilaO
    (123) FACTOR_AUX -> . id LLAMADA_F
    (131) NUMERICA -> . NUMERICA_AUX
    (132) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (133) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (140) BOOLEANA -> . true
    (141) BOOLEANA -> . false
    (142) STRINGS -> . cteString
    (136) NUMERICA_AUX -> . cteInt nt_pushInt
    (137) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 156
    id              shift and go to state 151
    plus            shift and go to state 152
    minus           shift and go to state 165
    true            shift and go to state 157
    false           shift and go to state 147
    cteString       shift and go to state 155
    cteInt          shift and go to state 160
    cteFloat        shift and go to state 149

    BOOLEANA                       shift and go to state 150
    EXP                            shift and go to state 289
    FACTOR_AUX                     shift and go to state 153
    NUMERICA_AUX                   shift and go to state 161
    TERMINO                        shift and go to state 154
    STRINGS                        shift and go to state 158
    CONSTANTE                      shift and go to state 159
    NUMERICA                       shift and go to state 162
    FACTOR                         shift and go to state 163
    LISTA                          shift and go to state 164

state 263

    (82) CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool . right_par CUERPO nt_pushLoop

    right_par       shift and go to state 290


state 264

    (48) CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .

    right_cb        reduce using rule 48 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    list            reduce using rule 48 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    var             reduce using rule 48 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    return          reduce using rule 48 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    if              reduce using rule 48 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    while           reduce using rule 48 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    cread           reduce using rule 48 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    cwrite          reduce using rule 48 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    left_par        reduce using rule 48 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    id              reduce using rule 48 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)


state 265

    (40) CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio . CUERPOFUNC_ESTATUTO
    (44) CUERPOFUNC_ESTATUTO -> . ESTATUTO
    (45) CUERPOFUNC_ESTATUTO -> . empty
    (66) ESTATUTO -> . ASIGNACION
    (67) ESTATUTO -> . CONDICION
    (68) ESTATUTO -> . CICLO
    (69) ESTATUTO -> . LECTURA
    (70) ESTATUTO -> . ESCRITURA
    (71) ESTATUTO -> . LLAMADA
    (150) empty -> .
    (143) ASIGNACION -> . ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon
    (72) CONDICION -> . if CONDICION_AUX
    (82) CICLO -> . while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop
    (85) LECTURA -> . cread left_par id nt_leer right_par semicolon
    (87) ESCRITURA -> . cwrite left_par EXPRESION nt_escribir right_par semicolon
    (89) LLAMADA -> . left_par LLAMADA_EXPRESION right_par semicolon
    (145) ASIGNACION_AUX -> . id nt_pushPilaO
    (146) ASIGNACION_AUX -> . LISTA
    (127) LISTA -> . id left_sb EXP right_sb

  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for cread resolved as shift
  ! shift/reduce conflict for cwrite resolved as shift
  ! shift/reduce conflict for left_par resolved as shift
  ! shift/reduce conflict for id resolved as shift
    list            reduce using rule 150 (empty -> .)
    var             reduce using rule 150 (empty -> .)
    return          reduce using rule 150 (empty -> .)
    right_cb        reduce using rule 150 (empty -> .)
    if              shift and go to state 95
    while           shift and go to state 107
    cread           shift and go to state 93
    cwrite          shift and go to state 99
    left_par        shift and go to state 105
    id              shift and go to state 98

  ! if              [ reduce using rule 150 (empty -> .) ]
  ! while           [ reduce using rule 150 (empty -> .) ]
  ! cread           [ reduce using rule 150 (empty -> .) ]
  ! cwrite          [ reduce using rule 150 (empty -> .) ]
  ! left_par        [ reduce using rule 150 (empty -> .) ]
  ! id              [ reduce using rule 150 (empty -> .) ]

    CICLO                          shift and go to state 92
    LECTURA                        shift and go to state 94
    ESCRITURA                      shift and go to state 101
    CUERPOFUNC_ESTATUTO            shift and go to state 291
    ASIGNACION                     shift and go to state 96
    ESTATUTO                       shift and go to state 268
    ASIGNACION_AUX                 shift and go to state 100
    empty                          shift and go to state 269
    LLAMADA                        shift and go to state 103
    CONDICION                      shift and go to state 104
    LISTA                          shift and go to state 108

state 266

    (51) RETORNO -> return EXP . semicolon

    semicolon       shift and go to state 292


state 267

    (39) CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .

    list            reduce using rule 39 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    var             reduce using rule 39 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    if              reduce using rule 39 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    while           reduce using rule 39 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    cread           reduce using rule 39 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    cwrite          reduce using rule 39 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    left_par        reduce using rule 39 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    id              reduce using rule 39 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    right_cb        reduce using rule 39 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    return          reduce using rule 39 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)


state 268

    (44) CUERPOFUNC_ESTATUTO -> ESTATUTO .

    list            reduce using rule 44 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    var             reduce using rule 44 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    if              reduce using rule 44 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    while           reduce using rule 44 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    cread           reduce using rule 44 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    cwrite          reduce using rule 44 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    left_par        reduce using rule 44 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    id              reduce using rule 44 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    return          reduce using rule 44 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    right_cb        reduce using rule 44 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)


state 269

    (45) CUERPOFUNC_ESTATUTO -> empty .

    list            reduce using rule 45 (CUERPOFUNC_ESTATUTO -> empty .)
    var             reduce using rule 45 (CUERPOFUNC_ESTATUTO -> empty .)
    if              reduce using rule 45 (CUERPOFUNC_ESTATUTO -> empty .)
    while           reduce using rule 45 (CUERPOFUNC_ESTATUTO -> empty .)
    cread           reduce using rule 45 (CUERPOFUNC_ESTATUTO -> empty .)
    cwrite          reduce using rule 45 (CUERPOFUNC_ESTATUTO -> empty .)
    left_par        reduce using rule 45 (CUERPOFUNC_ESTATUTO -> empty .)
    id              reduce using rule 45 (CUERPOFUNC_ESTATUTO -> empty .)
    return          reduce using rule 45 (CUERPOFUNC_ESTATUTO -> empty .)
    right_cb        reduce using rule 45 (CUERPOFUNC_ESTATUTO -> empty .)


state 270

    (85) LECTURA -> cread left_par id nt_leer right_par semicolon .

    list            reduce using rule 85 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    var             reduce using rule 85 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    if              reduce using rule 85 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    while           reduce using rule 85 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    cread           reduce using rule 85 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    cwrite          reduce using rule 85 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    left_par        reduce using rule 85 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    id              reduce using rule 85 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    return          reduce using rule 85 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    right_cb        reduce using rule 85 (LECTURA -> cread left_par id nt_leer right_par semicolon .)


state 271

    (73) CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO . ELSE_ELIF nt_pushSalto
    (74) ELSE_ELIF -> . ELSE
    (75) ELSE_ELIF -> . ELIF
    (76) ELSE_ELIF -> . empty
    (77) ELSE -> . else nt_pushElse CUERPO
    (78) ELIF -> . elseif nt_pushElse CONDICION_AUX
    (150) empty -> .

    else            shift and go to state 297
    elseif          shift and go to state 296
    right_cb        reduce using rule 150 (empty -> .)
    list            reduce using rule 150 (empty -> .)
    var             reduce using rule 150 (empty -> .)
    if              reduce using rule 150 (empty -> .)
    while           reduce using rule 150 (empty -> .)
    cread           reduce using rule 150 (empty -> .)
    cwrite          reduce using rule 150 (empty -> .)
    left_par        reduce using rule 150 (empty -> .)
    id              reduce using rule 150 (empty -> .)
    return          reduce using rule 150 (empty -> .)

    ELIF                           shift and go to state 294
    ELSE_ELIF                      shift and go to state 293
    ELSE                           shift and go to state 295
    empty                          shift and go to state 298

state 272

    (124) LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX . right_par

    right_par       shift and go to state 299


state 273

    (125) LLAMADAF_AUX -> comma . EXPRESION LLAMADAF_AUX
    (92) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (94) EXPRESION_NOT -> . not nt_pushPOper
    (95) EXPRESION_NOT -> . empty
    (150) empty -> .

    not             shift and go to state 130
    left_par        reduce using rule 150 (empty -> .)
    id              reduce using rule 150 (empty -> .)
    plus            reduce using rule 150 (empty -> .)
    minus           reduce using rule 150 (empty -> .)
    true            reduce using rule 150 (empty -> .)
    false           reduce using rule 150 (empty -> .)
    cteString       reduce using rule 150 (empty -> .)
    cteInt          reduce using rule 150 (empty -> .)
    cteFloat        reduce using rule 150 (empty -> .)

    EXPRESION                      shift and go to state 300
    EXPRESION_NOT                  shift and go to state 128
    empty                          shift and go to state 131

state 274

    (126) LLAMADAF_AUX -> empty .

    right_par       reduce using rule 126 (LLAMADAF_AUX -> empty .)


state 275

    (111) EXP_AUX -> minus nt_pushPOper . EXP
    (108) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (113) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (118) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (119) FACTOR -> . CONSTANTE
    (120) FACTOR -> . LISTA
    (121) FACTOR -> . FACTOR_AUX
    (128) CONSTANTE -> . NUMERICA
    (129) CONSTANTE -> . BOOLEANA
    (130) CONSTANTE -> . STRINGS
    (127) LISTA -> . id left_sb EXP right_sb
    (122) FACTOR_AUX -> . id nt_pushPilaO
    (123) FACTOR_AUX -> . id LLAMADA_F
    (131) NUMERICA -> . NUMERICA_AUX
    (132) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (133) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (140) BOOLEANA -> . true
    (141) BOOLEANA -> . false
    (142) STRINGS -> . cteString
    (136) NUMERICA_AUX -> . cteInt nt_pushInt
    (137) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 156
    id              shift and go to state 151
    plus            shift and go to state 152
    minus           shift and go to state 165
    true            shift and go to state 157
    false           shift and go to state 147
    cteString       shift and go to state 155
    cteInt          shift and go to state 160
    cteFloat        shift and go to state 149

    BOOLEANA                       shift and go to state 150
    EXP                            shift and go to state 301
    FACTOR_AUX                     shift and go to state 153
    NUMERICA_AUX                   shift and go to state 161
    TERMINO                        shift and go to state 154
    STRINGS                        shift and go to state 158
    CONSTANTE                      shift and go to state 159
    NUMERICA                       shift and go to state 162
    FACTOR                         shift and go to state 163
    LISTA                          shift and go to state 164

state 276

    (110) EXP_AUX -> plus nt_pushPOper . EXP
    (108) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (113) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (118) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (119) FACTOR -> . CONSTANTE
    (120) FACTOR -> . LISTA
    (121) FACTOR -> . FACTOR_AUX
    (128) CONSTANTE -> . NUMERICA
    (129) CONSTANTE -> . BOOLEANA
    (130) CONSTANTE -> . STRINGS
    (127) LISTA -> . id left_sb EXP right_sb
    (122) FACTOR_AUX -> . id nt_pushPilaO
    (123) FACTOR_AUX -> . id LLAMADA_F
    (131) NUMERICA -> . NUMERICA_AUX
    (132) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (133) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (140) BOOLEANA -> . true
    (141) BOOLEANA -> . false
    (142) STRINGS -> . cteString
    (136) NUMERICA_AUX -> . cteInt nt_pushInt
    (137) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 156
    id              shift and go to state 151
    plus            shift and go to state 152
    minus           shift and go to state 165
    true            shift and go to state 157
    false           shift and go to state 147
    cteString       shift and go to state 155
    cteInt          shift and go to state 160
    cteFloat        shift and go to state 149

    BOOLEANA                       shift and go to state 150
    EXP                            shift and go to state 302
    FACTOR_AUX                     shift and go to state 153
    NUMERICA_AUX                   shift and go to state 161
    TERMINO                        shift and go to state 154
    STRINGS                        shift and go to state 158
    CONSTANTE                      shift and go to state 159
    NUMERICA                       shift and go to state 162
    FACTOR                         shift and go to state 163
    LISTA                          shift and go to state 164

state 277

    (118) FACTOR -> left_par nt_pushPOper EXPRESION right_par . nt_popPOper
    (149) nt_popPOper -> . empty
    (150) empty -> .

    multiply        reduce using rule 150 (empty -> .)
    divide          reduce using rule 150 (empty -> .)
    plus            reduce using rule 150 (empty -> .)
    minus           reduce using rule 150 (empty -> .)
    right_sb        reduce using rule 150 (empty -> .)
    lt              reduce using rule 150 (empty -> .)
    gt              reduce using rule 150 (empty -> .)
    ne              reduce using rule 150 (empty -> .)
    ge              reduce using rule 150 (empty -> .)
    le              reduce using rule 150 (empty -> .)
    et              reduce using rule 150 (empty -> .)
    and             reduce using rule 150 (empty -> .)
    or              reduce using rule 150 (empty -> .)
    right_par       reduce using rule 150 (empty -> .)
    comma           reduce using rule 150 (empty -> .)
    semicolon       reduce using rule 150 (empty -> .)

    nt_popPOper                    shift and go to state 303
    empty                          shift and go to state 304

state 278

    (116) TERMINO_AUX -> divide nt_pushPOper . TERMINO
    (113) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (118) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (119) FACTOR -> . CONSTANTE
    (120) FACTOR -> . LISTA
    (121) FACTOR -> . FACTOR_AUX
    (128) CONSTANTE -> . NUMERICA
    (129) CONSTANTE -> . BOOLEANA
    (130) CONSTANTE -> . STRINGS
    (127) LISTA -> . id left_sb EXP right_sb
    (122) FACTOR_AUX -> . id nt_pushPilaO
    (123) FACTOR_AUX -> . id LLAMADA_F
    (131) NUMERICA -> . NUMERICA_AUX
    (132) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (133) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (140) BOOLEANA -> . true
    (141) BOOLEANA -> . false
    (142) STRINGS -> . cteString
    (136) NUMERICA_AUX -> . cteInt nt_pushInt
    (137) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 156
    id              shift and go to state 151
    plus            shift and go to state 152
    minus           shift and go to state 165
    true            shift and go to state 157
    false           shift and go to state 147
    cteString       shift and go to state 155
    cteInt          shift and go to state 160
    cteFloat        shift and go to state 149

    CONSTANTE                      shift and go to state 159
    FACTOR_AUX                     shift and go to state 153
    NUMERICA                       shift and go to state 162
    NUMERICA_AUX                   shift and go to state 161
    BOOLEANA                       shift and go to state 150
    TERMINO                        shift and go to state 305
    FACTOR                         shift and go to state 163
    LISTA                          shift and go to state 164
    STRINGS                        shift and go to state 158

state 279

    (115) TERMINO_AUX -> multiply nt_pushPOper . TERMINO
    (113) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (118) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (119) FACTOR -> . CONSTANTE
    (120) FACTOR -> . LISTA
    (121) FACTOR -> . FACTOR_AUX
    (128) CONSTANTE -> . NUMERICA
    (129) CONSTANTE -> . BOOLEANA
    (130) CONSTANTE -> . STRINGS
    (127) LISTA -> . id left_sb EXP right_sb
    (122) FACTOR_AUX -> . id nt_pushPilaO
    (123) FACTOR_AUX -> . id LLAMADA_F
    (131) NUMERICA -> . NUMERICA_AUX
    (132) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (133) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (140) BOOLEANA -> . true
    (141) BOOLEANA -> . false
    (142) STRINGS -> . cteString
    (136) NUMERICA_AUX -> . cteInt nt_pushInt
    (137) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 156
    id              shift and go to state 151
    plus            shift and go to state 152
    minus           shift and go to state 165
    true            shift and go to state 157
    false           shift and go to state 147
    cteString       shift and go to state 155
    cteInt          shift and go to state 160
    cteFloat        shift and go to state 149

    CONSTANTE                      shift and go to state 159
    FACTOR_AUX                     shift and go to state 153
    NUMERICA                       shift and go to state 162
    NUMERICA_AUX                   shift and go to state 161
    BOOLEANA                       shift and go to state 150
    TERMINO                        shift and go to state 306
    FACTOR                         shift and go to state 163
    LISTA                          shift and go to state 164
    STRINGS                        shift and go to state 158

state 280

    (87) ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .

    list            reduce using rule 87 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    var             reduce using rule 87 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    if              reduce using rule 87 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    while           reduce using rule 87 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    cread           reduce using rule 87 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    cwrite          reduce using rule 87 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    left_par        reduce using rule 87 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    id              reduce using rule 87 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    return          reduce using rule 87 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    right_cb        reduce using rule 87 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)


state 281

    (143) ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .

    right_cb        reduce using rule 143 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    list            reduce using rule 143 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    var             reduce using rule 143 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    if              reduce using rule 143 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    while           reduce using rule 143 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    cread           reduce using rule 143 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    cwrite          reduce using rule 143 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    left_par        reduce using rule 143 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    id              reduce using rule 143 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    return          reduce using rule 143 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)


state 282

    (96) EXPRESION_B -> and nt_pushPOper . EXPRESION
    (92) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (94) EXPRESION_NOT -> . not nt_pushPOper
    (95) EXPRESION_NOT -> . empty
    (150) empty -> .

    not             shift and go to state 130
    left_par        reduce using rule 150 (empty -> .)
    id              reduce using rule 150 (empty -> .)
    plus            reduce using rule 150 (empty -> .)
    minus           reduce using rule 150 (empty -> .)
    true            reduce using rule 150 (empty -> .)
    false           reduce using rule 150 (empty -> .)
    cteString       reduce using rule 150 (empty -> .)
    cteInt          reduce using rule 150 (empty -> .)
    cteFloat        reduce using rule 150 (empty -> .)

    EXPRESION                      shift and go to state 307
    EXPRESION_NOT                  shift and go to state 128
    empty                          shift and go to state 131

state 283

    (97) EXPRESION_B -> or nt_pushPOper . EXPRESION
    (92) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (94) EXPRESION_NOT -> . not nt_pushPOper
    (95) EXPRESION_NOT -> . empty
    (150) empty -> .

    not             shift and go to state 130
    left_par        reduce using rule 150 (empty -> .)
    id              reduce using rule 150 (empty -> .)
    plus            reduce using rule 150 (empty -> .)
    minus           reduce using rule 150 (empty -> .)
    true            reduce using rule 150 (empty -> .)
    false           reduce using rule 150 (empty -> .)
    cteString       reduce using rule 150 (empty -> .)
    cteInt          reduce using rule 150 (empty -> .)
    cteFloat        reduce using rule 150 (empty -> .)

    EXPRESION                      shift and go to state 308
    EXPRESION_NOT                  shift and go to state 128
    empty                          shift and go to state 131

state 284

    (103) EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP . nt_checarRelop
    (107) nt_checarRelop -> . empty
    (150) empty -> .

    and             reduce using rule 150 (empty -> .)
    or              reduce using rule 150 (empty -> .)
    right_par       reduce using rule 150 (empty -> .)
    comma           reduce using rule 150 (empty -> .)
    semicolon       reduce using rule 150 (empty -> .)

    nt_checarRelop                 shift and go to state 309
    empty                          shift and go to state 310

state 285

    (101) EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP . nt_checarRelop
    (107) nt_checarRelop -> . empty
    (150) empty -> .

    and             reduce using rule 150 (empty -> .)
    or              reduce using rule 150 (empty -> .)
    right_par       reduce using rule 150 (empty -> .)
    comma           reduce using rule 150 (empty -> .)
    semicolon       reduce using rule 150 (empty -> .)

    nt_checarRelop                 shift and go to state 311
    empty                          shift and go to state 310

state 286

    (102) EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP . nt_checarRelop
    (107) nt_checarRelop -> . empty
    (150) empty -> .

    and             reduce using rule 150 (empty -> .)
    or              reduce using rule 150 (empty -> .)
    right_par       reduce using rule 150 (empty -> .)
    comma           reduce using rule 150 (empty -> .)
    semicolon       reduce using rule 150 (empty -> .)

    nt_checarRelop                 shift and go to state 312
    empty                          shift and go to state 310

state 287

    (100) EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP . nt_checarRelop
    (107) nt_checarRelop -> . empty
    (150) empty -> .

    and             reduce using rule 150 (empty -> .)
    or              reduce using rule 150 (empty -> .)
    right_par       reduce using rule 150 (empty -> .)
    comma           reduce using rule 150 (empty -> .)
    semicolon       reduce using rule 150 (empty -> .)

    nt_checarRelop                 shift and go to state 313
    empty                          shift and go to state 310

state 288

    (104) EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP . nt_checarRelop
    (107) nt_checarRelop -> . empty
    (150) empty -> .

    and             reduce using rule 150 (empty -> .)
    or              reduce using rule 150 (empty -> .)
    right_par       reduce using rule 150 (empty -> .)
    comma           reduce using rule 150 (empty -> .)
    semicolon       reduce using rule 150 (empty -> .)

    nt_checarRelop                 shift and go to state 314
    empty                          shift and go to state 310

state 289

    (105) EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP . nt_checarRelop
    (107) nt_checarRelop -> . empty
    (150) empty -> .

    and             reduce using rule 150 (empty -> .)
    or              reduce using rule 150 (empty -> .)
    right_par       reduce using rule 150 (empty -> .)
    comma           reduce using rule 150 (empty -> .)
    semicolon       reduce using rule 150 (empty -> .)

    nt_checarRelop                 shift and go to state 315
    empty                          shift and go to state 310

state 290

    (82) CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par . CUERPO nt_pushLoop
    (31) CUERPO -> . left_cb CUERPO_AUX right_cb

    left_cb         shift and go to state 73

    CUERPO                         shift and go to state 316

state 291

    (40) CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .

    list            reduce using rule 40 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    var             reduce using rule 40 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    if              reduce using rule 40 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    while           reduce using rule 40 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    cread           reduce using rule 40 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    cwrite          reduce using rule 40 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    left_par        reduce using rule 40 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    id              reduce using rule 40 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    right_cb        reduce using rule 40 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    return          reduce using rule 40 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)


state 292

    (51) RETORNO -> return EXP semicolon .

    right_cb        reduce using rule 51 (RETORNO -> return EXP semicolon .)
    list            reduce using rule 51 (RETORNO -> return EXP semicolon .)
    var             reduce using rule 51 (RETORNO -> return EXP semicolon .)
    return          reduce using rule 51 (RETORNO -> return EXP semicolon .)
    if              reduce using rule 51 (RETORNO -> return EXP semicolon .)
    while           reduce using rule 51 (RETORNO -> return EXP semicolon .)
    cread           reduce using rule 51 (RETORNO -> return EXP semicolon .)
    cwrite          reduce using rule 51 (RETORNO -> return EXP semicolon .)
    left_par        reduce using rule 51 (RETORNO -> return EXP semicolon .)
    id              reduce using rule 51 (RETORNO -> return EXP semicolon .)


state 293

    (73) CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF . nt_pushSalto
    (80) nt_pushSalto -> . empty
    (150) empty -> .

    right_cb        reduce using rule 150 (empty -> .)
    list            reduce using rule 150 (empty -> .)
    var             reduce using rule 150 (empty -> .)
    if              reduce using rule 150 (empty -> .)
    while           reduce using rule 150 (empty -> .)
    cread           reduce using rule 150 (empty -> .)
    cwrite          reduce using rule 150 (empty -> .)
    left_par        reduce using rule 150 (empty -> .)
    id              reduce using rule 150 (empty -> .)
    return          reduce using rule 150 (empty -> .)

    nt_pushSalto                   shift and go to state 317
    empty                          shift and go to state 318

state 294

    (75) ELSE_ELIF -> ELIF .

    right_cb        reduce using rule 75 (ELSE_ELIF -> ELIF .)
    list            reduce using rule 75 (ELSE_ELIF -> ELIF .)
    var             reduce using rule 75 (ELSE_ELIF -> ELIF .)
    if              reduce using rule 75 (ELSE_ELIF -> ELIF .)
    while           reduce using rule 75 (ELSE_ELIF -> ELIF .)
    cread           reduce using rule 75 (ELSE_ELIF -> ELIF .)
    cwrite          reduce using rule 75 (ELSE_ELIF -> ELIF .)
    left_par        reduce using rule 75 (ELSE_ELIF -> ELIF .)
    id              reduce using rule 75 (ELSE_ELIF -> ELIF .)
    return          reduce using rule 75 (ELSE_ELIF -> ELIF .)


state 295

    (74) ELSE_ELIF -> ELSE .

    right_cb        reduce using rule 74 (ELSE_ELIF -> ELSE .)
    list            reduce using rule 74 (ELSE_ELIF -> ELSE .)
    var             reduce using rule 74 (ELSE_ELIF -> ELSE .)
    if              reduce using rule 74 (ELSE_ELIF -> ELSE .)
    while           reduce using rule 74 (ELSE_ELIF -> ELSE .)
    cread           reduce using rule 74 (ELSE_ELIF -> ELSE .)
    cwrite          reduce using rule 74 (ELSE_ELIF -> ELSE .)
    left_par        reduce using rule 74 (ELSE_ELIF -> ELSE .)
    id              reduce using rule 74 (ELSE_ELIF -> ELSE .)
    return          reduce using rule 74 (ELSE_ELIF -> ELSE .)


state 296

    (78) ELIF -> elseif . nt_pushElse CONDICION_AUX
    (81) nt_pushElse -> . empty
    (150) empty -> .

    left_par        reduce using rule 150 (empty -> .)

    nt_pushElse                    shift and go to state 319
    empty                          shift and go to state 320

state 297

    (77) ELSE -> else . nt_pushElse CUERPO
    (81) nt_pushElse -> . empty
    (150) empty -> .

    left_cb         reduce using rule 150 (empty -> .)

    nt_pushElse                    shift and go to state 321
    empty                          shift and go to state 320

state 298

    (76) ELSE_ELIF -> empty .

    right_cb        reduce using rule 76 (ELSE_ELIF -> empty .)
    list            reduce using rule 76 (ELSE_ELIF -> empty .)
    var             reduce using rule 76 (ELSE_ELIF -> empty .)
    if              reduce using rule 76 (ELSE_ELIF -> empty .)
    while           reduce using rule 76 (ELSE_ELIF -> empty .)
    cread           reduce using rule 76 (ELSE_ELIF -> empty .)
    cwrite          reduce using rule 76 (ELSE_ELIF -> empty .)
    left_par        reduce using rule 76 (ELSE_ELIF -> empty .)
    id              reduce using rule 76 (ELSE_ELIF -> empty .)
    return          reduce using rule 76 (ELSE_ELIF -> empty .)


state 299

    (124) LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .

    multiply        reduce using rule 124 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    divide          reduce using rule 124 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    plus            reduce using rule 124 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    minus           reduce using rule 124 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    right_sb        reduce using rule 124 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    lt              reduce using rule 124 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    gt              reduce using rule 124 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    ne              reduce using rule 124 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    ge              reduce using rule 124 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    le              reduce using rule 124 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    et              reduce using rule 124 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    and             reduce using rule 124 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    or              reduce using rule 124 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    right_par       reduce using rule 124 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    comma           reduce using rule 124 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)
    semicolon       reduce using rule 124 (LLAMADA_F -> left_par EXPRESION LLAMADAF_AUX right_par .)


state 300

    (125) LLAMADAF_AUX -> comma EXPRESION . LLAMADAF_AUX
    (125) LLAMADAF_AUX -> . comma EXPRESION LLAMADAF_AUX
    (126) LLAMADAF_AUX -> . empty
    (150) empty -> .

    comma           shift and go to state 273
    right_par       reduce using rule 150 (empty -> .)

    LLAMADAF_AUX                   shift and go to state 322
    empty                          shift and go to state 274

state 301

    (111) EXP_AUX -> minus nt_pushPOper EXP .

    right_sb        reduce using rule 111 (EXP_AUX -> minus nt_pushPOper EXP .)
    lt              reduce using rule 111 (EXP_AUX -> minus nt_pushPOper EXP .)
    gt              reduce using rule 111 (EXP_AUX -> minus nt_pushPOper EXP .)
    ne              reduce using rule 111 (EXP_AUX -> minus nt_pushPOper EXP .)
    ge              reduce using rule 111 (EXP_AUX -> minus nt_pushPOper EXP .)
    le              reduce using rule 111 (EXP_AUX -> minus nt_pushPOper EXP .)
    et              reduce using rule 111 (EXP_AUX -> minus nt_pushPOper EXP .)
    and             reduce using rule 111 (EXP_AUX -> minus nt_pushPOper EXP .)
    or              reduce using rule 111 (EXP_AUX -> minus nt_pushPOper EXP .)
    right_par       reduce using rule 111 (EXP_AUX -> minus nt_pushPOper EXP .)
    comma           reduce using rule 111 (EXP_AUX -> minus nt_pushPOper EXP .)
    semicolon       reduce using rule 111 (EXP_AUX -> minus nt_pushPOper EXP .)


state 302

    (110) EXP_AUX -> plus nt_pushPOper EXP .

    right_sb        reduce using rule 110 (EXP_AUX -> plus nt_pushPOper EXP .)
    lt              reduce using rule 110 (EXP_AUX -> plus nt_pushPOper EXP .)
    gt              reduce using rule 110 (EXP_AUX -> plus nt_pushPOper EXP .)
    ne              reduce using rule 110 (EXP_AUX -> plus nt_pushPOper EXP .)
    ge              reduce using rule 110 (EXP_AUX -> plus nt_pushPOper EXP .)
    le              reduce using rule 110 (EXP_AUX -> plus nt_pushPOper EXP .)
    et              reduce using rule 110 (EXP_AUX -> plus nt_pushPOper EXP .)
    and             reduce using rule 110 (EXP_AUX -> plus nt_pushPOper EXP .)
    or              reduce using rule 110 (EXP_AUX -> plus nt_pushPOper EXP .)
    right_par       reduce using rule 110 (EXP_AUX -> plus nt_pushPOper EXP .)
    comma           reduce using rule 110 (EXP_AUX -> plus nt_pushPOper EXP .)
    semicolon       reduce using rule 110 (EXP_AUX -> plus nt_pushPOper EXP .)


state 303

    (118) FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .

    multiply        reduce using rule 118 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    divide          reduce using rule 118 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    plus            reduce using rule 118 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    minus           reduce using rule 118 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    right_sb        reduce using rule 118 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    and             reduce using rule 118 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    or              reduce using rule 118 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    right_par       reduce using rule 118 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    comma           reduce using rule 118 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    semicolon       reduce using rule 118 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    lt              reduce using rule 118 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    gt              reduce using rule 118 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    ne              reduce using rule 118 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    ge              reduce using rule 118 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    le              reduce using rule 118 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    et              reduce using rule 118 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)


state 304

    (149) nt_popPOper -> empty .

    multiply        reduce using rule 149 (nt_popPOper -> empty .)
    divide          reduce using rule 149 (nt_popPOper -> empty .)
    plus            reduce using rule 149 (nt_popPOper -> empty .)
    minus           reduce using rule 149 (nt_popPOper -> empty .)
    right_sb        reduce using rule 149 (nt_popPOper -> empty .)
    lt              reduce using rule 149 (nt_popPOper -> empty .)
    gt              reduce using rule 149 (nt_popPOper -> empty .)
    ne              reduce using rule 149 (nt_popPOper -> empty .)
    ge              reduce using rule 149 (nt_popPOper -> empty .)
    le              reduce using rule 149 (nt_popPOper -> empty .)
    et              reduce using rule 149 (nt_popPOper -> empty .)
    and             reduce using rule 149 (nt_popPOper -> empty .)
    or              reduce using rule 149 (nt_popPOper -> empty .)
    right_par       reduce using rule 149 (nt_popPOper -> empty .)
    comma           reduce using rule 149 (nt_popPOper -> empty .)
    semicolon       reduce using rule 149 (nt_popPOper -> empty .)


state 305

    (116) TERMINO_AUX -> divide nt_pushPOper TERMINO .

    plus            reduce using rule 116 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    minus           reduce using rule 116 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    right_sb        reduce using rule 116 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    lt              reduce using rule 116 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    gt              reduce using rule 116 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    ne              reduce using rule 116 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    ge              reduce using rule 116 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    le              reduce using rule 116 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    et              reduce using rule 116 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    and             reduce using rule 116 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    or              reduce using rule 116 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    right_par       reduce using rule 116 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    comma           reduce using rule 116 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    semicolon       reduce using rule 116 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)


state 306

    (115) TERMINO_AUX -> multiply nt_pushPOper TERMINO .

    plus            reduce using rule 115 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    minus           reduce using rule 115 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    right_sb        reduce using rule 115 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    lt              reduce using rule 115 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    gt              reduce using rule 115 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    ne              reduce using rule 115 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    ge              reduce using rule 115 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    le              reduce using rule 115 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    et              reduce using rule 115 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    and             reduce using rule 115 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    or              reduce using rule 115 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    right_par       reduce using rule 115 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    comma           reduce using rule 115 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    semicolon       reduce using rule 115 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)


state 307

    (96) EXPRESION_B -> and nt_pushPOper EXPRESION .

    right_par       reduce using rule 96 (EXPRESION_B -> and nt_pushPOper EXPRESION .)
    comma           reduce using rule 96 (EXPRESION_B -> and nt_pushPOper EXPRESION .)
    semicolon       reduce using rule 96 (EXPRESION_B -> and nt_pushPOper EXPRESION .)


state 308

    (97) EXPRESION_B -> or nt_pushPOper EXPRESION .

    right_par       reduce using rule 97 (EXPRESION_B -> or nt_pushPOper EXPRESION .)
    comma           reduce using rule 97 (EXPRESION_B -> or nt_pushPOper EXPRESION .)
    semicolon       reduce using rule 97 (EXPRESION_B -> or nt_pushPOper EXPRESION .)


state 309

    (103) EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop .

    and             reduce using rule 103 (EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop .)
    or              reduce using rule 103 (EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop .)
    right_par       reduce using rule 103 (EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop .)
    comma           reduce using rule 103 (EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop .)
    semicolon       reduce using rule 103 (EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop .)


state 310

    (107) nt_checarRelop -> empty .

    and             reduce using rule 107 (nt_checarRelop -> empty .)
    or              reduce using rule 107 (nt_checarRelop -> empty .)
    right_par       reduce using rule 107 (nt_checarRelop -> empty .)
    comma           reduce using rule 107 (nt_checarRelop -> empty .)
    semicolon       reduce using rule 107 (nt_checarRelop -> empty .)


state 311

    (101) EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop .

    and             reduce using rule 101 (EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop .)
    or              reduce using rule 101 (EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop .)
    right_par       reduce using rule 101 (EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop .)
    comma           reduce using rule 101 (EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop .)
    semicolon       reduce using rule 101 (EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop .)


state 312

    (102) EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop .

    and             reduce using rule 102 (EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop .)
    or              reduce using rule 102 (EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop .)
    right_par       reduce using rule 102 (EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop .)
    comma           reduce using rule 102 (EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop .)
    semicolon       reduce using rule 102 (EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop .)


state 313

    (100) EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop .

    and             reduce using rule 100 (EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop .)
    or              reduce using rule 100 (EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop .)
    right_par       reduce using rule 100 (EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop .)
    comma           reduce using rule 100 (EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop .)
    semicolon       reduce using rule 100 (EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop .)


state 314

    (104) EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop .

    and             reduce using rule 104 (EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop .)
    or              reduce using rule 104 (EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop .)
    right_par       reduce using rule 104 (EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop .)
    comma           reduce using rule 104 (EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop .)
    semicolon       reduce using rule 104 (EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop .)


state 315

    (105) EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop .

    and             reduce using rule 105 (EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop .)
    or              reduce using rule 105 (EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop .)
    right_par       reduce using rule 105 (EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop .)
    comma           reduce using rule 105 (EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop .)
    semicolon       reduce using rule 105 (EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop .)


state 316

    (82) CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO . nt_pushLoop
    (84) nt_pushLoop -> . empty
    (150) empty -> .

    right_cb        reduce using rule 150 (empty -> .)
    list            reduce using rule 150 (empty -> .)
    var             reduce using rule 150 (empty -> .)
    if              reduce using rule 150 (empty -> .)
    while           reduce using rule 150 (empty -> .)
    cread           reduce using rule 150 (empty -> .)
    cwrite          reduce using rule 150 (empty -> .)
    left_par        reduce using rule 150 (empty -> .)
    id              reduce using rule 150 (empty -> .)
    return          reduce using rule 150 (empty -> .)

    nt_pushLoop                    shift and go to state 323
    empty                          shift and go to state 324

state 317

    (73) CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .

    right_cb        reduce using rule 73 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    list            reduce using rule 73 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    var             reduce using rule 73 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    if              reduce using rule 73 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    while           reduce using rule 73 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    cread           reduce using rule 73 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    cwrite          reduce using rule 73 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    left_par        reduce using rule 73 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    id              reduce using rule 73 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    return          reduce using rule 73 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)


state 318

    (80) nt_pushSalto -> empty .

    right_cb        reduce using rule 80 (nt_pushSalto -> empty .)
    list            reduce using rule 80 (nt_pushSalto -> empty .)
    var             reduce using rule 80 (nt_pushSalto -> empty .)
    if              reduce using rule 80 (nt_pushSalto -> empty .)
    while           reduce using rule 80 (nt_pushSalto -> empty .)
    cread           reduce using rule 80 (nt_pushSalto -> empty .)
    cwrite          reduce using rule 80 (nt_pushSalto -> empty .)
    left_par        reduce using rule 80 (nt_pushSalto -> empty .)
    id              reduce using rule 80 (nt_pushSalto -> empty .)
    return          reduce using rule 80 (nt_pushSalto -> empty .)


state 319

    (78) ELIF -> elseif nt_pushElse . CONDICION_AUX
    (73) CONDICION_AUX -> . left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto

    left_par        shift and go to state 120

    CONDICION_AUX                  shift and go to state 325

state 320

    (81) nt_pushElse -> empty .

    left_cb         reduce using rule 81 (nt_pushElse -> empty .)
    left_par        reduce using rule 81 (nt_pushElse -> empty .)


state 321

    (77) ELSE -> else nt_pushElse . CUERPO
    (31) CUERPO -> . left_cb CUERPO_AUX right_cb

    left_cb         shift and go to state 73

    CUERPO                         shift and go to state 326

state 322

    (125) LLAMADAF_AUX -> comma EXPRESION LLAMADAF_AUX .

    right_par       reduce using rule 125 (LLAMADAF_AUX -> comma EXPRESION LLAMADAF_AUX .)


state 323

    (82) CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .

    list            reduce using rule 82 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    var             reduce using rule 82 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    if              reduce using rule 82 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    while           reduce using rule 82 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    cread           reduce using rule 82 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    cwrite          reduce using rule 82 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    left_par        reduce using rule 82 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    id              reduce using rule 82 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    return          reduce using rule 82 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    right_cb        reduce using rule 82 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)


state 324

    (84) nt_pushLoop -> empty .

    right_cb        reduce using rule 84 (nt_pushLoop -> empty .)
    list            reduce using rule 84 (nt_pushLoop -> empty .)
    var             reduce using rule 84 (nt_pushLoop -> empty .)
    if              reduce using rule 84 (nt_pushLoop -> empty .)
    while           reduce using rule 84 (nt_pushLoop -> empty .)
    cread           reduce using rule 84 (nt_pushLoop -> empty .)
    cwrite          reduce using rule 84 (nt_pushLoop -> empty .)
    left_par        reduce using rule 84 (nt_pushLoop -> empty .)
    id              reduce using rule 84 (nt_pushLoop -> empty .)
    return          reduce using rule 84 (nt_pushLoop -> empty .)


state 325

    (78) ELIF -> elseif nt_pushElse CONDICION_AUX .

    right_cb        reduce using rule 78 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    list            reduce using rule 78 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    var             reduce using rule 78 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    if              reduce using rule 78 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    while           reduce using rule 78 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    cread           reduce using rule 78 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    cwrite          reduce using rule 78 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    left_par        reduce using rule 78 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    id              reduce using rule 78 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    return          reduce using rule 78 (ELIF -> elseif nt_pushElse CONDICION_AUX .)


state 326

    (77) ELSE -> else nt_pushElse CUERPO .

    right_cb        reduce using rule 77 (ELSE -> else nt_pushElse CUERPO .)
    list            reduce using rule 77 (ELSE -> else nt_pushElse CUERPO .)
    var             reduce using rule 77 (ELSE -> else nt_pushElse CUERPO .)
    if              reduce using rule 77 (ELSE -> else nt_pushElse CUERPO .)
    while           reduce using rule 77 (ELSE -> else nt_pushElse CUERPO .)
    cread           reduce using rule 77 (ELSE -> else nt_pushElse CUERPO .)
    cwrite          reduce using rule 77 (ELSE -> else nt_pushElse CUERPO .)
    left_par        reduce using rule 77 (ELSE -> else nt_pushElse CUERPO .)
    id              reduce using rule 77 (ELSE -> else nt_pushElse CUERPO .)
    return          reduce using rule 77 (ELSE -> else nt_pushElse CUERPO .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for list in state 13 resolved as shift
WARNING: shift/reduce conflict for var in state 13 resolved as shift
WARNING: shift/reduce conflict for int in state 14 resolved as shift
WARNING: shift/reduce conflict for float in state 14 resolved as shift
WARNING: shift/reduce conflict for bool in state 14 resolved as shift
WARNING: shift/reduce conflict for string in state 14 resolved as shift
WARNING: shift/reduce conflict for void in state 14 resolved as shift
WARNING: shift/reduce conflict for int in state 21 resolved as shift
WARNING: shift/reduce conflict for float in state 21 resolved as shift
WARNING: shift/reduce conflict for bool in state 21 resolved as shift
WARNING: shift/reduce conflict for string in state 21 resolved as shift
WARNING: shift/reduce conflict for void in state 21 resolved as shift
WARNING: shift/reduce conflict for list in state 73 resolved as shift
WARNING: shift/reduce conflict for var in state 73 resolved as shift
WARNING: shift/reduce conflict for if in state 79 resolved as shift
WARNING: shift/reduce conflict for while in state 79 resolved as shift
WARNING: shift/reduce conflict for cread in state 79 resolved as shift
WARNING: shift/reduce conflict for cwrite in state 79 resolved as shift
WARNING: shift/reduce conflict for left_par in state 79 resolved as shift
WARNING: shift/reduce conflict for id in state 79 resolved as shift
WARNING: shift/reduce conflict for right_cb in state 82 resolved as shift
WARNING: shift/reduce conflict for list in state 82 resolved as shift
WARNING: shift/reduce conflict for var in state 82 resolved as shift
WARNING: shift/reduce conflict for if in state 109 resolved as shift
WARNING: shift/reduce conflict for while in state 109 resolved as shift
WARNING: shift/reduce conflict for cread in state 109 resolved as shift
WARNING: shift/reduce conflict for cwrite in state 109 resolved as shift
WARNING: shift/reduce conflict for left_par in state 109 resolved as shift
WARNING: shift/reduce conflict for id in state 109 resolved as shift
WARNING: shift/reduce conflict for list in state 138 resolved as shift
WARNING: shift/reduce conflict for var in state 138 resolved as shift
WARNING: shift/reduce conflict for list in state 140 resolved as shift
WARNING: shift/reduce conflict for var in state 140 resolved as shift
WARNING: shift/reduce conflict for list in state 177 resolved as shift
WARNING: shift/reduce conflict for var in state 177 resolved as shift
WARNING: shift/reduce conflict for list in state 178 resolved as shift
WARNING: shift/reduce conflict for var in state 178 resolved as shift
WARNING: shift/reduce conflict for if in state 231 resolved as shift
WARNING: shift/reduce conflict for while in state 231 resolved as shift
WARNING: shift/reduce conflict for cread in state 231 resolved as shift
WARNING: shift/reduce conflict for cwrite in state 231 resolved as shift
WARNING: shift/reduce conflict for left_par in state 231 resolved as shift
WARNING: shift/reduce conflict for id in state 231 resolved as shift
WARNING: shift/reduce conflict for if in state 265 resolved as shift
WARNING: shift/reduce conflict for while in state 265 resolved as shift
WARNING: shift/reduce conflict for cread in state 265 resolved as shift
WARNING: shift/reduce conflict for cwrite in state 265 resolved as shift
WARNING: shift/reduce conflict for left_par in state 265 resolved as shift
WARNING: shift/reduce conflict for id in state 265 resolved as shift
WARNING: reduce/reduce conflict in state 35 resolved using rule (nt_cambiarScope -> empty)
WARNING: rejected rule (PROGRAMA_FUNC_AUX -> empty) in state 35
WARNING: reduce/reduce conflict in state 178 resolved using rule (CUERPOFUNC -> CUERPOFUNC_AUX)
WARNING: rejected rule (empty -> <empty>) in state 178
WARNING: reduce/reduce conflict in state 182 resolved using rule (CUERPOFUNC_VARS -> empty)
WARNING: rejected rule (CUERPORETORNO_CF_AUX -> empty) in state 182
WARNING: Rule (CUERPORETORNO_CF_AUX -> empty) is never reduced
