Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    right_dblquotes
    left_dblquotes

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> program id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO
Rule 2     nt_cambiarScope -> empty
Rule 3     nt_ambienteMain -> nt_cambiarScope
Rule 4     nt_pushJmpMain -> empty
Rule 5     PROGRAMA_VARS -> VARS
Rule 6     PROGRAMA_VARS -> empty
Rule 7     PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX
Rule 8     PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX
Rule 9     PROGRAMA_FUNC_AUX -> FUNC
Rule 10    PROGRAMA_FUNC_AUX -> empty
Rule 11    VARS -> VARS_AUX
Rule 12    VARS_AUX -> VARS_LIST_VAR
Rule 13    VARS_AUX -> VARS_AUX VARS_LIST_VAR
Rule 14    VARS_LIST_VAR -> VARS_LIST
Rule 15    VARS_LIST_VAR -> VARS_VAR
Rule 16    VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon
Rule 17    nt_hacerLista -> empty
Rule 18    VARS_LIST_AUX -> id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar
Rule 19    VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar
Rule 20    nt_agregarId -> empty
Rule 21    nt_agregarCteLista -> empty
Rule 22    nt_agregarDicVar -> empty
Rule 23    VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon
Rule 24    nt_hacerVar -> empty
Rule 25    VARS_VAR_AUX -> id nt_agregarId nt_agregarDicVar
Rule 26    VARS_VAR_AUX -> VARS_VAR_AUX comma id nt_agregarId nt_agregarDicVar
Rule 27    TIPO -> int nt_cambioTipoActual
Rule 28    TIPO -> float nt_cambioTipoActual
Rule 29    TIPO -> bool nt_cambioTipoActual
Rule 30    TIPO -> string nt_cambioTipoActual
Rule 31    nt_cambioTipoActual -> empty
Rule 32    CUERPO -> left_cb CUERPO_AUX right_cb
Rule 33    CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO
Rule 34    CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO
Rule 35    CUERPO_VARS -> VARS
Rule 36    CUERPO_VARS -> empty
Rule 37    CUERPO_ESTATUTO -> ESTATUTO
Rule 38    CUERPO_ESTATUTO -> empty
Rule 39    CUERPOFUNC -> CUERPOFUNC_AUX
Rule 40    CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
Rule 41    CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
Rule 42    nt_funcInicio -> empty
Rule 43    CUERPOFUNC_VARS -> VARS
Rule 44    CUERPOFUNC_VARS -> empty
Rule 45    CUERPOFUNC_ESTATUTO -> ESTATUTO
Rule 46    CUERPOFUNC_ESTATUTO -> empty
Rule 47    CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb
Rule 48    CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO
Rule 49    CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO
Rule 50    CUERPORETORNO_CF_AUX -> CUERPOFUNC
Rule 51    CUERPORETORNO_CF_AUX -> empty
Rule 52    RETORNO -> return EXP semicolon
Rule 53    FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub
Rule 54    FUNC -> VOIDFUNC nt_pushEndsub
Rule 55    nt_pushEndsub -> empty
Rule 56    nt_cambioFuncActual -> empty
Rule 57    nt_agregarIdFunc -> empty
Rule 58    FUNC_PARA -> TIPO id nt_agregarParametro
Rule 59    FUNC_PARA -> FUNC_PARA comma TIPO id nt_agregarParametro
Rule 60    FUNC_PARA -> empty
Rule 61    nt_agregarParametro -> empty
Rule 62    VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb
Rule 63    nt_hacerVoid -> empty
Rule 64    VOIDFUNC_PARA -> TIPO id nt_agregarParametro
Rule 65    VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO id nt_agregarParametro
Rule 66    ESTATUTO -> ASIGNACION
Rule 67    ESTATUTO -> CONDICION
Rule 68    ESTATUTO -> CICLO
Rule 69    ESTATUTO -> LECTURA
Rule 70    ESTATUTO -> ESCRITURA
Rule 71    ESTATUTO -> LLAMADA
Rule 72    CONDICION -> if CONDICION_AUX
Rule 73    CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto
Rule 74    ELSE_ELIF -> ELSE
Rule 75    ELSE_ELIF -> ELIF
Rule 76    ELSE_ELIF -> empty
Rule 77    ELSE -> else nt_pushElse CUERPO
Rule 78    ELIF -> elseif nt_pushElse CONDICION_AUX
Rule 79    nt_checarBool -> empty
Rule 80    nt_pushSalto -> empty
Rule 81    nt_pushElse -> empty
Rule 82    CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop
Rule 83    nt_saltoLoop -> empty
Rule 84    nt_pushLoop -> empty
Rule 85    LECTURA -> cread left_par id nt_leer right_par semicolon
Rule 86    nt_leer -> empty
Rule 87    ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon
Rule 88    nt_escribir -> empty
Rule 89    LLAMADA -> id nt_verificaFuncId left_par nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par semicolon nt_pushGoSub
Rule 90    LLAMADA_EXPRESION -> LLAMADA_EXPRESION_AUX
Rule 91    LLAMADA_EXPRESION -> empty
Rule 92    LLAMADA_EXPRESION_AUX -> EXPRESION nt_verifyArgType
Rule 93    LLAMADA_EXPRESION_AUX -> LLAMADA_EXPRESION_AUX comma nt_paramPP EXPRESION nt_verifyArgType
Rule 94    EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
Rule 95    nt_checaAndOrNot -> empty
Rule 96    EXPRESION_NOT -> not nt_pushPOper
Rule 97    EXPRESION_NOT -> empty
Rule 98    EXPRESION_B -> and nt_pushPOper EXPRESION
Rule 99    EXPRESION_B -> or nt_pushPOper EXPRESION
Rule 100   EXPRESION_B -> empty
Rule 101   EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX
Rule 102   EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop
Rule 103   EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop
Rule 104   EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop
Rule 105   EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop
Rule 106   EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop
Rule 107   EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop
Rule 108   EXPRESIONLOGICA_AUX -> empty
Rule 109   nt_checarRelop -> empty
Rule 110   EXP -> TERMINO nt_checar_sumas EXP_AUX
Rule 111   nt_checar_sumas -> empty
Rule 112   EXP_AUX -> plus nt_pushPOper EXP
Rule 113   EXP_AUX -> minus nt_pushPOper EXP
Rule 114   EXP_AUX -> empty
Rule 115   TERMINO -> FACTOR nt_checar_multis TERMINO_AUX
Rule 116   nt_checar_multis -> empty
Rule 117   TERMINO_AUX -> multiply nt_pushPOper TERMINO
Rule 118   TERMINO_AUX -> divide nt_pushPOper TERMINO
Rule 119   TERMINO_AUX -> empty
Rule 120   FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper
Rule 121   FACTOR -> CONSTANTE
Rule 122   FACTOR -> LISTA
Rule 123   FACTOR -> FACTOR_AUX
Rule 124   FACTOR_AUX -> id nt_pushPilaO
Rule 125   FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F
Rule 126   nt_verificaFuncId -> empty
Rule 127   LLAMADA_F -> left_par nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_pushGoSub
Rule 128   LLAMADAF_AUX -> LLAMADAF_AUX2
Rule 129   LLAMADAF_AUX -> empty
Rule 130   LLAMADAF_AUX2 -> EXPRESION nt_verifyArgType
Rule 131   LLAMADAF_AUX2 -> LLAMADAF_AUX2 comma nt_paramPP EXPRESION nt_verifyArgType
Rule 132   nt_paramPP -> empty
Rule 133   nt_startERA -> empty
Rule 134   nt_verifyArgType -> empty
Rule 135   nt_verificaUltimo -> empty
Rule 136   nt_pushGoSub -> empty
Rule 137   LISTA -> id left_sb EXP right_sb
Rule 138   CONSTANTE -> NUMERICA
Rule 139   CONSTANTE -> BOOLEANA
Rule 140   CONSTANTE -> STRINGS
Rule 141   NUMERICA -> NUMERICA_AUX
Rule 142   NUMERICA -> plus nt_sigMas NUMERICA_AUX
Rule 143   NUMERICA -> minus nt_sigMenos NUMERICA_AUX
Rule 144   nt_sigMas -> empty
Rule 145   nt_sigMenos -> empty
Rule 146   NUMERICA_AUX -> cteInt nt_pushInt
Rule 147   NUMERICA_AUX -> cteFloat nt_pushFloat
Rule 148   nt_pushInt -> empty
Rule 149   nt_pushFloat -> empty
Rule 150   BOOLEANA -> true
Rule 151   BOOLEANA -> false
Rule 152   STRINGS -> cteString
Rule 153   ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon
Rule 154   nt_checaEquals -> empty
Rule 155   ASIGNACION_AUX -> id nt_pushPilaO
Rule 156   ASIGNACION_AUX -> LISTA
Rule 157   nt_pushPilaO -> empty
Rule 158   nt_pushPOper -> empty
Rule 159   nt_popPOper -> empty
Rule 160   empty -> <empty>

Terminals, with rules where they appear

and                  : 98
bool                 : 29
comma                : 19 26 59 65 93 131
cread                : 85
cteFloat             : 147
cteInt               : 18 19 146
cteString            : 152
cwrite               : 87
divide               : 118
else                 : 77
elseif               : 78
equals               : 153
error                : 
et                   : 107
false                : 151
float                : 28
ge                   : 105
gt                   : 103
id                   : 1 18 19 25 26 53 58 59 62 64 65 85 89 124 125 137 155
if                   : 72
int                  : 27
le                   : 106
left_cb              : 32 47 62
left_dblquotes       : 
left_par             : 53 62 73 82 85 87 89 120 127
left_sb              : 18 19 137
list                 : 16
lt                   : 102
main                 : 1
minus                : 113 143
multiply             : 117
ne                   : 104
not                  : 96
or                   : 99
plus                 : 112 142
program              : 1
return               : 52
right_cb             : 32 47 62
right_dblquotes      : 
right_par            : 53 62 73 82 85 87 89 120 127
right_sb             : 18 19 137
semicolon            : 1 16 23 52 85 87 89 153
string               : 30
true                 : 150
var                  : 23
void                 : 62
while                : 82

Nonterminals, with rules where they appear

ASIGNACION           : 66
ASIGNACION_AUX       : 153
BOOLEANA             : 139
CICLO                : 68
CONDICION            : 67
CONDICION_AUX        : 72 78
CONSTANTE            : 121
CUERPO               : 1 73 77 82
CUERPOFUNC           : 50 62
CUERPOFUNC_AUX       : 39 41
CUERPOFUNC_ESTATUTO  : 40 41
CUERPOFUNC_VARS      : 40 41
CUERPORETORNO        : 53
CUERPORETORNO_AUX    : 47 49
CUERPORETORNO_CF_AUX : 48 49
CUERPO_AUX           : 32 34
CUERPO_ESTATUTO      : 33 34
CUERPO_VARS          : 33 34
ELIF                 : 75
ELSE                 : 74
ELSE_ELIF            : 73
ESCRITURA            : 70
ESTATUTO             : 37 45
EXP                  : 52 101 102 103 104 105 106 107 112 113 137
EXPRESION            : 73 82 87 92 93 98 99 120 130 131 153
EXPRESIONLOGICA      : 94
EXPRESIONLOGICA_AUX  : 101
EXPRESION_B          : 94
EXPRESION_NOT        : 94
EXP_AUX              : 110
FACTOR               : 115
FACTOR_AUX           : 123
FUNC                 : 9
FUNC_PARA            : 53 59
LECTURA              : 69
LISTA                : 122 156
LLAMADA              : 71
LLAMADAF_AUX         : 127
LLAMADAF_AUX2        : 128 131
LLAMADA_EXPRESION    : 89
LLAMADA_EXPRESION_AUX : 90 93
LLAMADA_F            : 125
NUMERICA             : 138
NUMERICA_AUX         : 141 142 143
PROGRAMA             : 0
PROGRAMA_FUNC        : 1 8
PROGRAMA_FUNC_AUX    : 7 8
PROGRAMA_VARS        : 1
RETORNO              : 48 49
STRINGS              : 140
TERMINO              : 110 117 118
TERMINO_AUX          : 115
TIPO                 : 16 23 53 58 59 64 65
VARS                 : 5 35 43
VARS_AUX             : 11 13
VARS_LIST            : 14
VARS_LIST_AUX        : 16 19
VARS_LIST_VAR        : 12 13
VARS_VAR             : 15
VARS_VAR_AUX         : 23 26
VOIDFUNC             : 54
VOIDFUNC_PARA        : 62 65
empty                : 2 4 6 10 17 20 21 22 24 31 36 38 42 44 46 51 55 56 57 60 61 63 76 79 80 81 83 84 86 88 91 95 97 100 108 109 111 114 116 119 126 129 132 133 134 135 136 144 145 148 149 154 157 158 159
nt_agregarCteLista   : 18 19
nt_agregarDicVar     : 18 19 25 26
nt_agregarId         : 18 19 25 26
nt_agregarIdFunc     : 53 62
nt_agregarParametro  : 58 59 64 65
nt_ambienteMain      : 1
nt_cambiarScope      : 1 1 3
nt_cambioFuncActual  : 53
nt_cambioTipoActual  : 27 28 29 30
nt_checaAndOrNot     : 94
nt_checaEquals       : 153
nt_checarBool        : 73 82
nt_checarRelop       : 102 103 104 105 106 107
nt_checar_multis     : 115
nt_checar_sumas      : 110
nt_escribir          : 87
nt_funcInicio        : 40 41
nt_hacerLista        : 16
nt_hacerVar          : 23
nt_hacerVoid         : 62
nt_leer              : 85
nt_paramPP           : 93 131
nt_popPOper          : 120
nt_pushElse          : 77 78
nt_pushEndsub        : 53 54
nt_pushFloat         : 147
nt_pushGoSub         : 89 127
nt_pushInt           : 146
nt_pushJmpMain       : 1
nt_pushLoop          : 82
nt_pushPOper         : 96 98 99 102 103 104 105 106 107 112 113 117 118 120 153
nt_pushPilaO         : 124 155
nt_pushSalto         : 73
nt_saltoLoop         : 82
nt_sigMas            : 142
nt_sigMenos          : 143
nt_startERA          : 89 127
nt_verificaFuncId    : 89 125
nt_verificaUltimo    : 89 127
nt_verifyArgType     : 92 93 130 131

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . program id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO

    program         shift and go to state 1

    PROGRAMA                       shift and go to state 2

state 1

    (1) PROGRAMA -> program . id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO

    id              shift and go to state 3


state 2

    (0) S' -> PROGRAMA .



state 3

    (1) PROGRAMA -> program id . nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO
    (4) nt_pushJmpMain -> . empty
    (160) empty -> .

    semicolon       reduce using rule 160 (empty -> .)

    nt_pushJmpMain                 shift and go to state 4
    empty                          shift and go to state 5

state 4

    (1) PROGRAMA -> program id nt_pushJmpMain . semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO

    semicolon       shift and go to state 6


state 5

    (4) nt_pushJmpMain -> empty .

    semicolon       reduce using rule 4 (nt_pushJmpMain -> empty .)


state 6

    (1) PROGRAMA -> program id nt_pushJmpMain semicolon . PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO
    (5) PROGRAMA_VARS -> . VARS
    (6) PROGRAMA_VARS -> . empty
    (11) VARS -> . VARS_AUX
    (160) empty -> .
    (12) VARS_AUX -> . VARS_LIST_VAR
    (13) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (14) VARS_LIST_VAR -> . VARS_LIST
    (15) VARS_LIST_VAR -> . VARS_VAR
    (16) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (23) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

    int             reduce using rule 160 (empty -> .)
    float           reduce using rule 160 (empty -> .)
    bool            reduce using rule 160 (empty -> .)
    string          reduce using rule 160 (empty -> .)
    void            reduce using rule 160 (empty -> .)
    main            reduce using rule 160 (empty -> .)
    list            shift and go to state 14
    var             shift and go to state 10

    VARS                           shift and go to state 7
    VARS_LIST                      shift and go to state 9
    VARS_LIST_VAR                  shift and go to state 12
    PROGRAMA_VARS                  shift and go to state 8
    VARS_AUX                       shift and go to state 15
    VARS_VAR                       shift and go to state 13
    empty                          shift and go to state 11

state 7

    (5) PROGRAMA_VARS -> VARS .

    int             reduce using rule 5 (PROGRAMA_VARS -> VARS .)
    float           reduce using rule 5 (PROGRAMA_VARS -> VARS .)
    bool            reduce using rule 5 (PROGRAMA_VARS -> VARS .)
    string          reduce using rule 5 (PROGRAMA_VARS -> VARS .)
    void            reduce using rule 5 (PROGRAMA_VARS -> VARS .)
    main            reduce using rule 5 (PROGRAMA_VARS -> VARS .)


state 8

    (1) PROGRAMA -> program id nt_pushJmpMain semicolon PROGRAMA_VARS . nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO
    (2) nt_cambiarScope -> . empty
    (160) empty -> .

    int             reduce using rule 160 (empty -> .)
    float           reduce using rule 160 (empty -> .)
    bool            reduce using rule 160 (empty -> .)
    string          reduce using rule 160 (empty -> .)
    void            reduce using rule 160 (empty -> .)
    main            reduce using rule 160 (empty -> .)

    nt_cambiarScope                shift and go to state 16
    empty                          shift and go to state 17

state 9

    (14) VARS_LIST_VAR -> VARS_LIST .

    list            reduce using rule 14 (VARS_LIST_VAR -> VARS_LIST .)
    var             reduce using rule 14 (VARS_LIST_VAR -> VARS_LIST .)
    if              reduce using rule 14 (VARS_LIST_VAR -> VARS_LIST .)
    while           reduce using rule 14 (VARS_LIST_VAR -> VARS_LIST .)
    cread           reduce using rule 14 (VARS_LIST_VAR -> VARS_LIST .)
    cwrite          reduce using rule 14 (VARS_LIST_VAR -> VARS_LIST .)
    id              reduce using rule 14 (VARS_LIST_VAR -> VARS_LIST .)
    right_cb        reduce using rule 14 (VARS_LIST_VAR -> VARS_LIST .)
    return          reduce using rule 14 (VARS_LIST_VAR -> VARS_LIST .)
    int             reduce using rule 14 (VARS_LIST_VAR -> VARS_LIST .)
    float           reduce using rule 14 (VARS_LIST_VAR -> VARS_LIST .)
    bool            reduce using rule 14 (VARS_LIST_VAR -> VARS_LIST .)
    string          reduce using rule 14 (VARS_LIST_VAR -> VARS_LIST .)
    void            reduce using rule 14 (VARS_LIST_VAR -> VARS_LIST .)
    main            reduce using rule 14 (VARS_LIST_VAR -> VARS_LIST .)


state 10

    (23) VARS_VAR -> var . nt_hacerVar TIPO VARS_VAR_AUX semicolon
    (24) nt_hacerVar -> . empty
    (160) empty -> .

    int             reduce using rule 160 (empty -> .)
    float           reduce using rule 160 (empty -> .)
    bool            reduce using rule 160 (empty -> .)
    string          reduce using rule 160 (empty -> .)

    nt_hacerVar                    shift and go to state 18
    empty                          shift and go to state 19

state 11

    (6) PROGRAMA_VARS -> empty .

    int             reduce using rule 6 (PROGRAMA_VARS -> empty .)
    float           reduce using rule 6 (PROGRAMA_VARS -> empty .)
    bool            reduce using rule 6 (PROGRAMA_VARS -> empty .)
    string          reduce using rule 6 (PROGRAMA_VARS -> empty .)
    void            reduce using rule 6 (PROGRAMA_VARS -> empty .)
    main            reduce using rule 6 (PROGRAMA_VARS -> empty .)


state 12

    (12) VARS_AUX -> VARS_LIST_VAR .

    list            reduce using rule 12 (VARS_AUX -> VARS_LIST_VAR .)
    var             reduce using rule 12 (VARS_AUX -> VARS_LIST_VAR .)
    if              reduce using rule 12 (VARS_AUX -> VARS_LIST_VAR .)
    while           reduce using rule 12 (VARS_AUX -> VARS_LIST_VAR .)
    cread           reduce using rule 12 (VARS_AUX -> VARS_LIST_VAR .)
    cwrite          reduce using rule 12 (VARS_AUX -> VARS_LIST_VAR .)
    id              reduce using rule 12 (VARS_AUX -> VARS_LIST_VAR .)
    return          reduce using rule 12 (VARS_AUX -> VARS_LIST_VAR .)
    right_cb        reduce using rule 12 (VARS_AUX -> VARS_LIST_VAR .)
    int             reduce using rule 12 (VARS_AUX -> VARS_LIST_VAR .)
    float           reduce using rule 12 (VARS_AUX -> VARS_LIST_VAR .)
    bool            reduce using rule 12 (VARS_AUX -> VARS_LIST_VAR .)
    string          reduce using rule 12 (VARS_AUX -> VARS_LIST_VAR .)
    void            reduce using rule 12 (VARS_AUX -> VARS_LIST_VAR .)
    main            reduce using rule 12 (VARS_AUX -> VARS_LIST_VAR .)


state 13

    (15) VARS_LIST_VAR -> VARS_VAR .

    list            reduce using rule 15 (VARS_LIST_VAR -> VARS_VAR .)
    var             reduce using rule 15 (VARS_LIST_VAR -> VARS_VAR .)
    if              reduce using rule 15 (VARS_LIST_VAR -> VARS_VAR .)
    while           reduce using rule 15 (VARS_LIST_VAR -> VARS_VAR .)
    cread           reduce using rule 15 (VARS_LIST_VAR -> VARS_VAR .)
    cwrite          reduce using rule 15 (VARS_LIST_VAR -> VARS_VAR .)
    id              reduce using rule 15 (VARS_LIST_VAR -> VARS_VAR .)
    right_cb        reduce using rule 15 (VARS_LIST_VAR -> VARS_VAR .)
    return          reduce using rule 15 (VARS_LIST_VAR -> VARS_VAR .)
    int             reduce using rule 15 (VARS_LIST_VAR -> VARS_VAR .)
    float           reduce using rule 15 (VARS_LIST_VAR -> VARS_VAR .)
    bool            reduce using rule 15 (VARS_LIST_VAR -> VARS_VAR .)
    string          reduce using rule 15 (VARS_LIST_VAR -> VARS_VAR .)
    void            reduce using rule 15 (VARS_LIST_VAR -> VARS_VAR .)
    main            reduce using rule 15 (VARS_LIST_VAR -> VARS_VAR .)


state 14

    (16) VARS_LIST -> list . nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (17) nt_hacerLista -> . empty
    (160) empty -> .

    int             reduce using rule 160 (empty -> .)
    float           reduce using rule 160 (empty -> .)
    bool            reduce using rule 160 (empty -> .)
    string          reduce using rule 160 (empty -> .)

    empty                          shift and go to state 21
    nt_hacerLista                  shift and go to state 20

state 15

    (11) VARS -> VARS_AUX .
    (13) VARS_AUX -> VARS_AUX . VARS_LIST_VAR
    (14) VARS_LIST_VAR -> . VARS_LIST
    (15) VARS_LIST_VAR -> . VARS_VAR
    (16) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (23) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    int             reduce using rule 11 (VARS -> VARS_AUX .)
    float           reduce using rule 11 (VARS -> VARS_AUX .)
    bool            reduce using rule 11 (VARS -> VARS_AUX .)
    string          reduce using rule 11 (VARS -> VARS_AUX .)
    void            reduce using rule 11 (VARS -> VARS_AUX .)
    main            reduce using rule 11 (VARS -> VARS_AUX .)
    if              reduce using rule 11 (VARS -> VARS_AUX .)
    while           reduce using rule 11 (VARS -> VARS_AUX .)
    cread           reduce using rule 11 (VARS -> VARS_AUX .)
    cwrite          reduce using rule 11 (VARS -> VARS_AUX .)
    id              reduce using rule 11 (VARS -> VARS_AUX .)
    return          reduce using rule 11 (VARS -> VARS_AUX .)
    right_cb        reduce using rule 11 (VARS -> VARS_AUX .)
    list            shift and go to state 14
    var             shift and go to state 10

  ! list            [ reduce using rule 11 (VARS -> VARS_AUX .) ]
  ! var             [ reduce using rule 11 (VARS -> VARS_AUX .) ]

    VARS_LIST                      shift and go to state 9
    VARS_LIST_VAR                  shift and go to state 22
    VARS_VAR                       shift and go to state 13

state 16

    (1) PROGRAMA -> program id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope . PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO
    (7) PROGRAMA_FUNC -> . PROGRAMA_FUNC_AUX
    (8) PROGRAMA_FUNC -> . PROGRAMA_FUNC PROGRAMA_FUNC_AUX
    (9) PROGRAMA_FUNC_AUX -> . FUNC
    (10) PROGRAMA_FUNC_AUX -> . empty
    (53) FUNC -> . TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub
    (54) FUNC -> . VOIDFUNC nt_pushEndsub
    (160) empty -> .
    (27) TIPO -> . int nt_cambioTipoActual
    (28) TIPO -> . float nt_cambioTipoActual
    (29) TIPO -> . bool nt_cambioTipoActual
    (30) TIPO -> . string nt_cambioTipoActual
    (62) VOIDFUNC -> . void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb

  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for bool resolved as shift
  ! shift/reduce conflict for string resolved as shift
  ! shift/reduce conflict for void resolved as shift
    main            reduce using rule 160 (empty -> .)
    int             shift and go to state 23
    float           shift and go to state 24
    bool            shift and go to state 28
    string          shift and go to state 31
    void            shift and go to state 32

  ! int             [ reduce using rule 160 (empty -> .) ]
  ! float           [ reduce using rule 160 (empty -> .) ]
  ! bool            [ reduce using rule 160 (empty -> .) ]
  ! string          [ reduce using rule 160 (empty -> .) ]
  ! void            [ reduce using rule 160 (empty -> .) ]

    PROGRAMA_FUNC_AUX              shift and go to state 27
    TIPO                           shift and go to state 25
    PROGRAMA_FUNC                  shift and go to state 26
    VOIDFUNC                       shift and go to state 29
    FUNC                           shift and go to state 33
    empty                          shift and go to state 30

state 17

    (2) nt_cambiarScope -> empty .

    left_cb         reduce using rule 2 (nt_cambiarScope -> empty .)
    int             reduce using rule 2 (nt_cambiarScope -> empty .)
    float           reduce using rule 2 (nt_cambiarScope -> empty .)
    bool            reduce using rule 2 (nt_cambiarScope -> empty .)
    string          reduce using rule 2 (nt_cambiarScope -> empty .)
    void            reduce using rule 2 (nt_cambiarScope -> empty .)
    main            reduce using rule 2 (nt_cambiarScope -> empty .)


state 18

    (23) VARS_VAR -> var nt_hacerVar . TIPO VARS_VAR_AUX semicolon
    (27) TIPO -> . int nt_cambioTipoActual
    (28) TIPO -> . float nt_cambioTipoActual
    (29) TIPO -> . bool nt_cambioTipoActual
    (30) TIPO -> . string nt_cambioTipoActual

    int             shift and go to state 23
    float           shift and go to state 24
    bool            shift and go to state 28
    string          shift and go to state 31

    TIPO                           shift and go to state 34

state 19

    (24) nt_hacerVar -> empty .

    int             reduce using rule 24 (nt_hacerVar -> empty .)
    float           reduce using rule 24 (nt_hacerVar -> empty .)
    bool            reduce using rule 24 (nt_hacerVar -> empty .)
    string          reduce using rule 24 (nt_hacerVar -> empty .)


state 20

    (16) VARS_LIST -> list nt_hacerLista . TIPO VARS_LIST_AUX semicolon
    (27) TIPO -> . int nt_cambioTipoActual
    (28) TIPO -> . float nt_cambioTipoActual
    (29) TIPO -> . bool nt_cambioTipoActual
    (30) TIPO -> . string nt_cambioTipoActual

    int             shift and go to state 23
    float           shift and go to state 24
    bool            shift and go to state 28
    string          shift and go to state 31

    TIPO                           shift and go to state 35

state 21

    (17) nt_hacerLista -> empty .

    int             reduce using rule 17 (nt_hacerLista -> empty .)
    float           reduce using rule 17 (nt_hacerLista -> empty .)
    bool            reduce using rule 17 (nt_hacerLista -> empty .)
    string          reduce using rule 17 (nt_hacerLista -> empty .)


state 22

    (13) VARS_AUX -> VARS_AUX VARS_LIST_VAR .

    list            reduce using rule 13 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    var             reduce using rule 13 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    if              reduce using rule 13 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    while           reduce using rule 13 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    cread           reduce using rule 13 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    cwrite          reduce using rule 13 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    id              reduce using rule 13 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    return          reduce using rule 13 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    right_cb        reduce using rule 13 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    int             reduce using rule 13 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    float           reduce using rule 13 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    bool            reduce using rule 13 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    string          reduce using rule 13 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    void            reduce using rule 13 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    main            reduce using rule 13 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)


state 23

    (27) TIPO -> int . nt_cambioTipoActual
    (31) nt_cambioTipoActual -> . empty
    (160) empty -> .

    id              reduce using rule 160 (empty -> .)

    nt_cambioTipoActual            shift and go to state 36
    empty                          shift and go to state 37

state 24

    (28) TIPO -> float . nt_cambioTipoActual
    (31) nt_cambioTipoActual -> . empty
    (160) empty -> .

    id              reduce using rule 160 (empty -> .)

    nt_cambioTipoActual            shift and go to state 38
    empty                          shift and go to state 37

state 25

    (53) FUNC -> TIPO . nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub
    (56) nt_cambioFuncActual -> . empty
    (160) empty -> .

    id              reduce using rule 160 (empty -> .)

    nt_cambioFuncActual            shift and go to state 39
    empty                          shift and go to state 40

state 26

    (1) PROGRAMA -> program id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC . nt_cambiarScope main nt_ambienteMain CUERPO
    (8) PROGRAMA_FUNC -> PROGRAMA_FUNC . PROGRAMA_FUNC_AUX
    (2) nt_cambiarScope -> . empty
    (9) PROGRAMA_FUNC_AUX -> . FUNC
    (10) PROGRAMA_FUNC_AUX -> . empty
    (160) empty -> .
    (53) FUNC -> . TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub
    (54) FUNC -> . VOIDFUNC nt_pushEndsub
    (27) TIPO -> . int nt_cambioTipoActual
    (28) TIPO -> . float nt_cambioTipoActual
    (29) TIPO -> . bool nt_cambioTipoActual
    (30) TIPO -> . string nt_cambioTipoActual
    (62) VOIDFUNC -> . void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb

  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for bool resolved as shift
  ! shift/reduce conflict for string resolved as shift
  ! shift/reduce conflict for void resolved as shift
    main            reduce using rule 160 (empty -> .)
    int             shift and go to state 23
    float           shift and go to state 24
    bool            shift and go to state 28
    string          shift and go to state 31
    void            shift and go to state 32

  ! int             [ reduce using rule 160 (empty -> .) ]
  ! float           [ reduce using rule 160 (empty -> .) ]
  ! bool            [ reduce using rule 160 (empty -> .) ]
  ! string          [ reduce using rule 160 (empty -> .) ]
  ! void            [ reduce using rule 160 (empty -> .) ]

    PROGRAMA_FUNC_AUX              shift and go to state 41
    TIPO                           shift and go to state 25
    VOIDFUNC                       shift and go to state 29
    FUNC                           shift and go to state 33
    nt_cambiarScope                shift and go to state 43
    empty                          shift and go to state 42

state 27

    (7) PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .

    int             reduce using rule 7 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)
    float           reduce using rule 7 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)
    bool            reduce using rule 7 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)
    string          reduce using rule 7 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)
    void            reduce using rule 7 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)
    main            reduce using rule 7 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)


state 28

    (29) TIPO -> bool . nt_cambioTipoActual
    (31) nt_cambioTipoActual -> . empty
    (160) empty -> .

    id              reduce using rule 160 (empty -> .)

    nt_cambioTipoActual            shift and go to state 44
    empty                          shift and go to state 37

state 29

    (54) FUNC -> VOIDFUNC . nt_pushEndsub
    (55) nt_pushEndsub -> . empty
    (160) empty -> .

    int             reduce using rule 160 (empty -> .)
    float           reduce using rule 160 (empty -> .)
    bool            reduce using rule 160 (empty -> .)
    string          reduce using rule 160 (empty -> .)
    void            reduce using rule 160 (empty -> .)
    main            reduce using rule 160 (empty -> .)

    nt_pushEndsub                  shift and go to state 45
    empty                          shift and go to state 46

state 30

    (10) PROGRAMA_FUNC_AUX -> empty .

    int             reduce using rule 10 (PROGRAMA_FUNC_AUX -> empty .)
    float           reduce using rule 10 (PROGRAMA_FUNC_AUX -> empty .)
    bool            reduce using rule 10 (PROGRAMA_FUNC_AUX -> empty .)
    string          reduce using rule 10 (PROGRAMA_FUNC_AUX -> empty .)
    void            reduce using rule 10 (PROGRAMA_FUNC_AUX -> empty .)
    main            reduce using rule 10 (PROGRAMA_FUNC_AUX -> empty .)


state 31

    (30) TIPO -> string . nt_cambioTipoActual
    (31) nt_cambioTipoActual -> . empty
    (160) empty -> .

    id              reduce using rule 160 (empty -> .)

    nt_cambioTipoActual            shift and go to state 47
    empty                          shift and go to state 37

state 32

    (62) VOIDFUNC -> void . nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb
    (63) nt_hacerVoid -> . empty
    (160) empty -> .

    id              reduce using rule 160 (empty -> .)

    nt_hacerVoid                   shift and go to state 49
    empty                          shift and go to state 48

state 33

    (9) PROGRAMA_FUNC_AUX -> FUNC .

    int             reduce using rule 9 (PROGRAMA_FUNC_AUX -> FUNC .)
    float           reduce using rule 9 (PROGRAMA_FUNC_AUX -> FUNC .)
    bool            reduce using rule 9 (PROGRAMA_FUNC_AUX -> FUNC .)
    string          reduce using rule 9 (PROGRAMA_FUNC_AUX -> FUNC .)
    void            reduce using rule 9 (PROGRAMA_FUNC_AUX -> FUNC .)
    main            reduce using rule 9 (PROGRAMA_FUNC_AUX -> FUNC .)


state 34

    (23) VARS_VAR -> var nt_hacerVar TIPO . VARS_VAR_AUX semicolon
    (25) VARS_VAR_AUX -> . id nt_agregarId nt_agregarDicVar
    (26) VARS_VAR_AUX -> . VARS_VAR_AUX comma id nt_agregarId nt_agregarDicVar

    id              shift and go to state 51

    VARS_VAR_AUX                   shift and go to state 50

state 35

    (16) VARS_LIST -> list nt_hacerLista TIPO . VARS_LIST_AUX semicolon
    (18) VARS_LIST_AUX -> . id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar
    (19) VARS_LIST_AUX -> . VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    id              shift and go to state 53

    VARS_LIST_AUX                  shift and go to state 52

state 36

    (27) TIPO -> int nt_cambioTipoActual .

    id              reduce using rule 27 (TIPO -> int nt_cambioTipoActual .)


state 37

    (31) nt_cambioTipoActual -> empty .

    id              reduce using rule 31 (nt_cambioTipoActual -> empty .)


state 38

    (28) TIPO -> float nt_cambioTipoActual .

    id              reduce using rule 28 (TIPO -> float nt_cambioTipoActual .)


state 39

    (53) FUNC -> TIPO nt_cambioFuncActual . id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub

    id              shift and go to state 54


state 40

    (56) nt_cambioFuncActual -> empty .

    id              reduce using rule 56 (nt_cambioFuncActual -> empty .)


state 41

    (8) PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .

    int             reduce using rule 8 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)
    float           reduce using rule 8 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)
    bool            reduce using rule 8 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)
    string          reduce using rule 8 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)
    void            reduce using rule 8 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)
    main            reduce using rule 8 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)


state 42

    (2) nt_cambiarScope -> empty .
    (10) PROGRAMA_FUNC_AUX -> empty .

  ! reduce/reduce conflict for main resolved using rule 2 (nt_cambiarScope -> empty .)
    main            reduce using rule 2 (nt_cambiarScope -> empty .)
    int             reduce using rule 10 (PROGRAMA_FUNC_AUX -> empty .)
    float           reduce using rule 10 (PROGRAMA_FUNC_AUX -> empty .)
    bool            reduce using rule 10 (PROGRAMA_FUNC_AUX -> empty .)
    string          reduce using rule 10 (PROGRAMA_FUNC_AUX -> empty .)
    void            reduce using rule 10 (PROGRAMA_FUNC_AUX -> empty .)

  ! main            [ reduce using rule 10 (PROGRAMA_FUNC_AUX -> empty .) ]


state 43

    (1) PROGRAMA -> program id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope . main nt_ambienteMain CUERPO

    main            shift and go to state 55


state 44

    (29) TIPO -> bool nt_cambioTipoActual .

    id              reduce using rule 29 (TIPO -> bool nt_cambioTipoActual .)


state 45

    (54) FUNC -> VOIDFUNC nt_pushEndsub .

    int             reduce using rule 54 (FUNC -> VOIDFUNC nt_pushEndsub .)
    float           reduce using rule 54 (FUNC -> VOIDFUNC nt_pushEndsub .)
    bool            reduce using rule 54 (FUNC -> VOIDFUNC nt_pushEndsub .)
    string          reduce using rule 54 (FUNC -> VOIDFUNC nt_pushEndsub .)
    void            reduce using rule 54 (FUNC -> VOIDFUNC nt_pushEndsub .)
    main            reduce using rule 54 (FUNC -> VOIDFUNC nt_pushEndsub .)


state 46

    (55) nt_pushEndsub -> empty .

    int             reduce using rule 55 (nt_pushEndsub -> empty .)
    float           reduce using rule 55 (nt_pushEndsub -> empty .)
    bool            reduce using rule 55 (nt_pushEndsub -> empty .)
    string          reduce using rule 55 (nt_pushEndsub -> empty .)
    void            reduce using rule 55 (nt_pushEndsub -> empty .)
    main            reduce using rule 55 (nt_pushEndsub -> empty .)


state 47

    (30) TIPO -> string nt_cambioTipoActual .

    id              reduce using rule 30 (TIPO -> string nt_cambioTipoActual .)


state 48

    (63) nt_hacerVoid -> empty .

    id              reduce using rule 63 (nt_hacerVoid -> empty .)


state 49

    (62) VOIDFUNC -> void nt_hacerVoid . id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb

    id              shift and go to state 56


state 50

    (23) VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX . semicolon
    (26) VARS_VAR_AUX -> VARS_VAR_AUX . comma id nt_agregarId nt_agregarDicVar

    semicolon       shift and go to state 57
    comma           shift and go to state 58


state 51

    (25) VARS_VAR_AUX -> id . nt_agregarId nt_agregarDicVar
    (20) nt_agregarId -> . empty
    (160) empty -> .

    semicolon       reduce using rule 160 (empty -> .)
    comma           reduce using rule 160 (empty -> .)

    empty                          shift and go to state 59
    nt_agregarId                   shift and go to state 60

state 52

    (16) VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX . semicolon
    (19) VARS_LIST_AUX -> VARS_LIST_AUX . comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    semicolon       shift and go to state 61
    comma           shift and go to state 62


state 53

    (18) VARS_LIST_AUX -> id . nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar
    (20) nt_agregarId -> . empty
    (160) empty -> .

    left_sb         reduce using rule 160 (empty -> .)

    empty                          shift and go to state 59
    nt_agregarId                   shift and go to state 63

state 54

    (53) FUNC -> TIPO nt_cambioFuncActual id . nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub
    (57) nt_agregarIdFunc -> . empty
    (160) empty -> .

    left_par        reduce using rule 160 (empty -> .)

    nt_agregarIdFunc               shift and go to state 64
    empty                          shift and go to state 65

state 55

    (1) PROGRAMA -> program id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main . nt_ambienteMain CUERPO
    (3) nt_ambienteMain -> . nt_cambiarScope
    (2) nt_cambiarScope -> . empty
    (160) empty -> .

    left_cb         reduce using rule 160 (empty -> .)

    nt_ambienteMain                shift and go to state 66
    nt_cambiarScope                shift and go to state 67
    empty                          shift and go to state 17

state 56

    (62) VOIDFUNC -> void nt_hacerVoid id . nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb
    (57) nt_agregarIdFunc -> . empty
    (160) empty -> .

    left_par        reduce using rule 160 (empty -> .)

    nt_agregarIdFunc               shift and go to state 68
    empty                          shift and go to state 65

state 57

    (23) VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .

    list            reduce using rule 23 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    var             reduce using rule 23 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    if              reduce using rule 23 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    while           reduce using rule 23 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    cread           reduce using rule 23 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    cwrite          reduce using rule 23 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    id              reduce using rule 23 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    right_cb        reduce using rule 23 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    return          reduce using rule 23 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    int             reduce using rule 23 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    float           reduce using rule 23 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    bool            reduce using rule 23 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    string          reduce using rule 23 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    void            reduce using rule 23 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    main            reduce using rule 23 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)


state 58

    (26) VARS_VAR_AUX -> VARS_VAR_AUX comma . id nt_agregarId nt_agregarDicVar

    id              shift and go to state 69


state 59

    (20) nt_agregarId -> empty .

    semicolon       reduce using rule 20 (nt_agregarId -> empty .)
    comma           reduce using rule 20 (nt_agregarId -> empty .)
    left_sb         reduce using rule 20 (nt_agregarId -> empty .)


state 60

    (25) VARS_VAR_AUX -> id nt_agregarId . nt_agregarDicVar
    (22) nt_agregarDicVar -> . empty
    (160) empty -> .

    semicolon       reduce using rule 160 (empty -> .)
    comma           reduce using rule 160 (empty -> .)

    nt_agregarDicVar               shift and go to state 70
    empty                          shift and go to state 71

state 61

    (16) VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .

    list            reduce using rule 16 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    var             reduce using rule 16 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    if              reduce using rule 16 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    while           reduce using rule 16 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    cread           reduce using rule 16 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    cwrite          reduce using rule 16 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    id              reduce using rule 16 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    right_cb        reduce using rule 16 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    return          reduce using rule 16 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    int             reduce using rule 16 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    float           reduce using rule 16 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    bool            reduce using rule 16 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    string          reduce using rule 16 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    void            reduce using rule 16 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    main            reduce using rule 16 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)


state 62

    (19) VARS_LIST_AUX -> VARS_LIST_AUX comma . id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    id              shift and go to state 72


state 63

    (18) VARS_LIST_AUX -> id nt_agregarId . left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    left_sb         shift and go to state 73


state 64

    (53) FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc . left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub

    left_par        shift and go to state 74


state 65

    (57) nt_agregarIdFunc -> empty .

    left_par        reduce using rule 57 (nt_agregarIdFunc -> empty .)


state 66

    (1) PROGRAMA -> program id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain . CUERPO
    (32) CUERPO -> . left_cb CUERPO_AUX right_cb

    left_cb         shift and go to state 76

    CUERPO                         shift and go to state 75

state 67

    (3) nt_ambienteMain -> nt_cambiarScope .

    left_cb         reduce using rule 3 (nt_ambienteMain -> nt_cambiarScope .)


state 68

    (62) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc . left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb

    left_par        shift and go to state 77


state 69

    (26) VARS_VAR_AUX -> VARS_VAR_AUX comma id . nt_agregarId nt_agregarDicVar
    (20) nt_agregarId -> . empty
    (160) empty -> .

    semicolon       reduce using rule 160 (empty -> .)
    comma           reduce using rule 160 (empty -> .)

    nt_agregarId                   shift and go to state 78
    empty                          shift and go to state 59

state 70

    (25) VARS_VAR_AUX -> id nt_agregarId nt_agregarDicVar .

    semicolon       reduce using rule 25 (VARS_VAR_AUX -> id nt_agregarId nt_agregarDicVar .)
    comma           reduce using rule 25 (VARS_VAR_AUX -> id nt_agregarId nt_agregarDicVar .)


state 71

    (22) nt_agregarDicVar -> empty .

    semicolon       reduce using rule 22 (nt_agregarDicVar -> empty .)
    comma           reduce using rule 22 (nt_agregarDicVar -> empty .)


state 72

    (19) VARS_LIST_AUX -> VARS_LIST_AUX comma id . nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar
    (20) nt_agregarId -> . empty
    (160) empty -> .

    left_sb         reduce using rule 160 (empty -> .)

    empty                          shift and go to state 59
    nt_agregarId                   shift and go to state 79

state 73

    (18) VARS_LIST_AUX -> id nt_agregarId left_sb . cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    cteInt          shift and go to state 80


state 74

    (53) FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par . FUNC_PARA right_par CUERPORETORNO nt_pushEndsub
    (58) FUNC_PARA -> . TIPO id nt_agregarParametro
    (59) FUNC_PARA -> . FUNC_PARA comma TIPO id nt_agregarParametro
    (60) FUNC_PARA -> . empty
    (27) TIPO -> . int nt_cambioTipoActual
    (28) TIPO -> . float nt_cambioTipoActual
    (29) TIPO -> . bool nt_cambioTipoActual
    (30) TIPO -> . string nt_cambioTipoActual
    (160) empty -> .

    int             shift and go to state 23
    float           shift and go to state 24
    bool            shift and go to state 28
    string          shift and go to state 31
    right_par       reduce using rule 160 (empty -> .)
    comma           reduce using rule 160 (empty -> .)

    TIPO                           shift and go to state 81
    empty                          shift and go to state 82
    FUNC_PARA                      shift and go to state 83

state 75

    (1) PROGRAMA -> program id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO .

    $end            reduce using rule 1 (PROGRAMA -> program id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO .)


state 76

    (32) CUERPO -> left_cb . CUERPO_AUX right_cb
    (33) CUERPO_AUX -> . CUERPO_VARS CUERPO_ESTATUTO
    (34) CUERPO_AUX -> . CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO
    (35) CUERPO_VARS -> . VARS
    (36) CUERPO_VARS -> . empty
    (11) VARS -> . VARS_AUX
    (160) empty -> .
    (12) VARS_AUX -> . VARS_LIST_VAR
    (13) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (14) VARS_LIST_VAR -> . VARS_LIST
    (15) VARS_LIST_VAR -> . VARS_VAR
    (16) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (23) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    if              reduce using rule 160 (empty -> .)
    while           reduce using rule 160 (empty -> .)
    cread           reduce using rule 160 (empty -> .)
    cwrite          reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    right_cb        reduce using rule 160 (empty -> .)
    list            shift and go to state 14
    var             shift and go to state 10

  ! list            [ reduce using rule 160 (empty -> .) ]
  ! var             [ reduce using rule 160 (empty -> .) ]

    CUERPO_VARS                    shift and go to state 84
    VARS                           shift and go to state 85
    VARS_LIST                      shift and go to state 9
    VARS_LIST_VAR                  shift and go to state 12
    VARS_AUX                       shift and go to state 15
    CUERPO_AUX                     shift and go to state 87
    VARS_VAR                       shift and go to state 13
    empty                          shift and go to state 86

state 77

    (62) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par . VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb
    (64) VOIDFUNC_PARA -> . TIPO id nt_agregarParametro
    (65) VOIDFUNC_PARA -> . VOIDFUNC_PARA comma TIPO id nt_agregarParametro
    (27) TIPO -> . int nt_cambioTipoActual
    (28) TIPO -> . float nt_cambioTipoActual
    (29) TIPO -> . bool nt_cambioTipoActual
    (30) TIPO -> . string nt_cambioTipoActual

    int             shift and go to state 23
    float           shift and go to state 24
    bool            shift and go to state 28
    string          shift and go to state 31

    TIPO                           shift and go to state 89
    VOIDFUNC_PARA                  shift and go to state 88

state 78

    (26) VARS_VAR_AUX -> VARS_VAR_AUX comma id nt_agregarId . nt_agregarDicVar
    (22) nt_agregarDicVar -> . empty
    (160) empty -> .

    semicolon       reduce using rule 160 (empty -> .)
    comma           reduce using rule 160 (empty -> .)

    nt_agregarDicVar               shift and go to state 90
    empty                          shift and go to state 71

state 79

    (19) VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId . left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    left_sb         shift and go to state 91


state 80

    (18) VARS_LIST_AUX -> id nt_agregarId left_sb cteInt . nt_agregarCteLista right_sb nt_agregarDicVar
    (21) nt_agregarCteLista -> . empty
    (160) empty -> .

    right_sb        reduce using rule 160 (empty -> .)

    nt_agregarCteLista             shift and go to state 92
    empty                          shift and go to state 93

state 81

    (58) FUNC_PARA -> TIPO . id nt_agregarParametro

    id              shift and go to state 94


state 82

    (60) FUNC_PARA -> empty .

    right_par       reduce using rule 60 (FUNC_PARA -> empty .)
    comma           reduce using rule 60 (FUNC_PARA -> empty .)


state 83

    (53) FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA . right_par CUERPORETORNO nt_pushEndsub
    (59) FUNC_PARA -> FUNC_PARA . comma TIPO id nt_agregarParametro

    right_par       shift and go to state 95
    comma           shift and go to state 96


state 84

    (33) CUERPO_AUX -> CUERPO_VARS . CUERPO_ESTATUTO
    (37) CUERPO_ESTATUTO -> . ESTATUTO
    (38) CUERPO_ESTATUTO -> . empty
    (66) ESTATUTO -> . ASIGNACION
    (67) ESTATUTO -> . CONDICION
    (68) ESTATUTO -> . CICLO
    (69) ESTATUTO -> . LECTURA
    (70) ESTATUTO -> . ESCRITURA
    (71) ESTATUTO -> . LLAMADA
    (160) empty -> .
    (153) ASIGNACION -> . ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon
    (72) CONDICION -> . if CONDICION_AUX
    (82) CICLO -> . while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop
    (85) LECTURA -> . cread left_par id nt_leer right_par semicolon
    (87) ESCRITURA -> . cwrite left_par EXPRESION nt_escribir right_par semicolon
    (89) LLAMADA -> . id nt_verificaFuncId left_par nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par semicolon nt_pushGoSub
    (155) ASIGNACION_AUX -> . id nt_pushPilaO
    (156) ASIGNACION_AUX -> . LISTA
    (137) LISTA -> . id left_sb EXP right_sb

  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for cread resolved as shift
  ! shift/reduce conflict for cwrite resolved as shift
  ! shift/reduce conflict for id resolved as shift
    right_cb        reduce using rule 160 (empty -> .)
    list            reduce using rule 160 (empty -> .)
    var             reduce using rule 160 (empty -> .)
    if              shift and go to state 100
    while           shift and go to state 111
    cread           shift and go to state 98
    cwrite          shift and go to state 104
    id              shift and go to state 103

  ! if              [ reduce using rule 160 (empty -> .) ]
  ! while           [ reduce using rule 160 (empty -> .) ]
  ! cread           [ reduce using rule 160 (empty -> .) ]
  ! cwrite          [ reduce using rule 160 (empty -> .) ]
  ! id              [ reduce using rule 160 (empty -> .) ]

    CICLO                          shift and go to state 97
    LECTURA                        shift and go to state 99
    ESCRITURA                      shift and go to state 106
    ASIGNACION                     shift and go to state 101
    ESTATUTO                       shift and go to state 102
    ASIGNACION_AUX                 shift and go to state 105
    empty                          shift and go to state 107
    LLAMADA                        shift and go to state 108
    CONDICION                      shift and go to state 109
    CUERPO_ESTATUTO                shift and go to state 110
    LISTA                          shift and go to state 112

state 85

    (35) CUERPO_VARS -> VARS .

    if              reduce using rule 35 (CUERPO_VARS -> VARS .)
    while           reduce using rule 35 (CUERPO_VARS -> VARS .)
    cread           reduce using rule 35 (CUERPO_VARS -> VARS .)
    cwrite          reduce using rule 35 (CUERPO_VARS -> VARS .)
    id              reduce using rule 35 (CUERPO_VARS -> VARS .)
    right_cb        reduce using rule 35 (CUERPO_VARS -> VARS .)
    list            reduce using rule 35 (CUERPO_VARS -> VARS .)
    var             reduce using rule 35 (CUERPO_VARS -> VARS .)


state 86

    (36) CUERPO_VARS -> empty .

    if              reduce using rule 36 (CUERPO_VARS -> empty .)
    while           reduce using rule 36 (CUERPO_VARS -> empty .)
    cread           reduce using rule 36 (CUERPO_VARS -> empty .)
    cwrite          reduce using rule 36 (CUERPO_VARS -> empty .)
    id              reduce using rule 36 (CUERPO_VARS -> empty .)
    right_cb        reduce using rule 36 (CUERPO_VARS -> empty .)
    list            reduce using rule 36 (CUERPO_VARS -> empty .)
    var             reduce using rule 36 (CUERPO_VARS -> empty .)


state 87

    (32) CUERPO -> left_cb CUERPO_AUX . right_cb
    (34) CUERPO_AUX -> CUERPO_AUX . CUERPO_VARS CUERPO_ESTATUTO
    (35) CUERPO_VARS -> . VARS
    (36) CUERPO_VARS -> . empty
    (11) VARS -> . VARS_AUX
    (160) empty -> .
    (12) VARS_AUX -> . VARS_LIST_VAR
    (13) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (14) VARS_LIST_VAR -> . VARS_LIST
    (15) VARS_LIST_VAR -> . VARS_VAR
    (16) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (23) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for right_cb resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    right_cb        shift and go to state 114
    if              reduce using rule 160 (empty -> .)
    while           reduce using rule 160 (empty -> .)
    cread           reduce using rule 160 (empty -> .)
    cwrite          reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    list            shift and go to state 14
    var             shift and go to state 10

  ! right_cb        [ reduce using rule 160 (empty -> .) ]
  ! list            [ reduce using rule 160 (empty -> .) ]
  ! var             [ reduce using rule 160 (empty -> .) ]

    CUERPO_VARS                    shift and go to state 113
    VARS                           shift and go to state 85
    VARS_LIST                      shift and go to state 9
    VARS_LIST_VAR                  shift and go to state 12
    VARS_AUX                       shift and go to state 15
    VARS_VAR                       shift and go to state 13
    empty                          shift and go to state 86

state 88

    (62) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA . right_par left_cb CUERPOFUNC right_cb
    (65) VOIDFUNC_PARA -> VOIDFUNC_PARA . comma TIPO id nt_agregarParametro

    right_par       shift and go to state 115
    comma           shift and go to state 116


state 89

    (64) VOIDFUNC_PARA -> TIPO . id nt_agregarParametro

    id              shift and go to state 117


state 90

    (26) VARS_VAR_AUX -> VARS_VAR_AUX comma id nt_agregarId nt_agregarDicVar .

    semicolon       reduce using rule 26 (VARS_VAR_AUX -> VARS_VAR_AUX comma id nt_agregarId nt_agregarDicVar .)
    comma           reduce using rule 26 (VARS_VAR_AUX -> VARS_VAR_AUX comma id nt_agregarId nt_agregarDicVar .)


state 91

    (19) VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb . cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    cteInt          shift and go to state 118


state 92

    (18) VARS_LIST_AUX -> id nt_agregarId left_sb cteInt nt_agregarCteLista . right_sb nt_agregarDicVar

    right_sb        shift and go to state 119


state 93

    (21) nt_agregarCteLista -> empty .

    right_sb        reduce using rule 21 (nt_agregarCteLista -> empty .)


state 94

    (58) FUNC_PARA -> TIPO id . nt_agregarParametro
    (61) nt_agregarParametro -> . empty
    (160) empty -> .

    right_par       reduce using rule 160 (empty -> .)
    comma           reduce using rule 160 (empty -> .)

    empty                          shift and go to state 120
    nt_agregarParametro            shift and go to state 121

state 95

    (53) FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par . CUERPORETORNO nt_pushEndsub
    (47) CUERPORETORNO -> . left_cb CUERPORETORNO_AUX right_cb

    left_cb         shift and go to state 123

    CUERPORETORNO                  shift and go to state 122

state 96

    (59) FUNC_PARA -> FUNC_PARA comma . TIPO id nt_agregarParametro
    (27) TIPO -> . int nt_cambioTipoActual
    (28) TIPO -> . float nt_cambioTipoActual
    (29) TIPO -> . bool nt_cambioTipoActual
    (30) TIPO -> . string nt_cambioTipoActual

    int             shift and go to state 23
    float           shift and go to state 24
    bool            shift and go to state 28
    string          shift and go to state 31

    TIPO                           shift and go to state 124

state 97

    (68) ESTATUTO -> CICLO .

    list            reduce using rule 68 (ESTATUTO -> CICLO .)
    var             reduce using rule 68 (ESTATUTO -> CICLO .)
    if              reduce using rule 68 (ESTATUTO -> CICLO .)
    while           reduce using rule 68 (ESTATUTO -> CICLO .)
    cread           reduce using rule 68 (ESTATUTO -> CICLO .)
    cwrite          reduce using rule 68 (ESTATUTO -> CICLO .)
    id              reduce using rule 68 (ESTATUTO -> CICLO .)
    return          reduce using rule 68 (ESTATUTO -> CICLO .)
    right_cb        reduce using rule 68 (ESTATUTO -> CICLO .)


state 98

    (85) LECTURA -> cread . left_par id nt_leer right_par semicolon

    left_par        shift and go to state 125


state 99

    (69) ESTATUTO -> LECTURA .

    list            reduce using rule 69 (ESTATUTO -> LECTURA .)
    var             reduce using rule 69 (ESTATUTO -> LECTURA .)
    if              reduce using rule 69 (ESTATUTO -> LECTURA .)
    while           reduce using rule 69 (ESTATUTO -> LECTURA .)
    cread           reduce using rule 69 (ESTATUTO -> LECTURA .)
    cwrite          reduce using rule 69 (ESTATUTO -> LECTURA .)
    id              reduce using rule 69 (ESTATUTO -> LECTURA .)
    return          reduce using rule 69 (ESTATUTO -> LECTURA .)
    right_cb        reduce using rule 69 (ESTATUTO -> LECTURA .)


state 100

    (72) CONDICION -> if . CONDICION_AUX
    (73) CONDICION_AUX -> . left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto

    left_par        shift and go to state 126

    CONDICION_AUX                  shift and go to state 127

state 101

    (66) ESTATUTO -> ASIGNACION .

    list            reduce using rule 66 (ESTATUTO -> ASIGNACION .)
    var             reduce using rule 66 (ESTATUTO -> ASIGNACION .)
    if              reduce using rule 66 (ESTATUTO -> ASIGNACION .)
    while           reduce using rule 66 (ESTATUTO -> ASIGNACION .)
    cread           reduce using rule 66 (ESTATUTO -> ASIGNACION .)
    cwrite          reduce using rule 66 (ESTATUTO -> ASIGNACION .)
    id              reduce using rule 66 (ESTATUTO -> ASIGNACION .)
    return          reduce using rule 66 (ESTATUTO -> ASIGNACION .)
    right_cb        reduce using rule 66 (ESTATUTO -> ASIGNACION .)


state 102

    (37) CUERPO_ESTATUTO -> ESTATUTO .

    right_cb        reduce using rule 37 (CUERPO_ESTATUTO -> ESTATUTO .)
    list            reduce using rule 37 (CUERPO_ESTATUTO -> ESTATUTO .)
    var             reduce using rule 37 (CUERPO_ESTATUTO -> ESTATUTO .)
    if              reduce using rule 37 (CUERPO_ESTATUTO -> ESTATUTO .)
    while           reduce using rule 37 (CUERPO_ESTATUTO -> ESTATUTO .)
    cread           reduce using rule 37 (CUERPO_ESTATUTO -> ESTATUTO .)
    cwrite          reduce using rule 37 (CUERPO_ESTATUTO -> ESTATUTO .)
    id              reduce using rule 37 (CUERPO_ESTATUTO -> ESTATUTO .)


state 103

    (89) LLAMADA -> id . nt_verificaFuncId left_par nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par semicolon nt_pushGoSub
    (155) ASIGNACION_AUX -> id . nt_pushPilaO
    (137) LISTA -> id . left_sb EXP right_sb
    (126) nt_verificaFuncId -> . empty
    (157) nt_pushPilaO -> . empty
    (160) empty -> .

    left_sb         shift and go to state 130
    left_par        reduce using rule 160 (empty -> .)
    equals          reduce using rule 160 (empty -> .)

    nt_verificaFuncId              shift and go to state 128
    nt_pushPilaO                   shift and go to state 129
    empty                          shift and go to state 131

state 104

    (87) ESCRITURA -> cwrite . left_par EXPRESION nt_escribir right_par semicolon

    left_par        shift and go to state 132


state 105

    (153) ASIGNACION -> ASIGNACION_AUX . equals nt_pushPOper EXPRESION nt_checaEquals semicolon

    equals          shift and go to state 133


state 106

    (70) ESTATUTO -> ESCRITURA .

    list            reduce using rule 70 (ESTATUTO -> ESCRITURA .)
    var             reduce using rule 70 (ESTATUTO -> ESCRITURA .)
    if              reduce using rule 70 (ESTATUTO -> ESCRITURA .)
    while           reduce using rule 70 (ESTATUTO -> ESCRITURA .)
    cread           reduce using rule 70 (ESTATUTO -> ESCRITURA .)
    cwrite          reduce using rule 70 (ESTATUTO -> ESCRITURA .)
    id              reduce using rule 70 (ESTATUTO -> ESCRITURA .)
    return          reduce using rule 70 (ESTATUTO -> ESCRITURA .)
    right_cb        reduce using rule 70 (ESTATUTO -> ESCRITURA .)


state 107

    (38) CUERPO_ESTATUTO -> empty .

    right_cb        reduce using rule 38 (CUERPO_ESTATUTO -> empty .)
    list            reduce using rule 38 (CUERPO_ESTATUTO -> empty .)
    var             reduce using rule 38 (CUERPO_ESTATUTO -> empty .)
    if              reduce using rule 38 (CUERPO_ESTATUTO -> empty .)
    while           reduce using rule 38 (CUERPO_ESTATUTO -> empty .)
    cread           reduce using rule 38 (CUERPO_ESTATUTO -> empty .)
    cwrite          reduce using rule 38 (CUERPO_ESTATUTO -> empty .)
    id              reduce using rule 38 (CUERPO_ESTATUTO -> empty .)


state 108

    (71) ESTATUTO -> LLAMADA .

    list            reduce using rule 71 (ESTATUTO -> LLAMADA .)
    var             reduce using rule 71 (ESTATUTO -> LLAMADA .)
    if              reduce using rule 71 (ESTATUTO -> LLAMADA .)
    while           reduce using rule 71 (ESTATUTO -> LLAMADA .)
    cread           reduce using rule 71 (ESTATUTO -> LLAMADA .)
    cwrite          reduce using rule 71 (ESTATUTO -> LLAMADA .)
    id              reduce using rule 71 (ESTATUTO -> LLAMADA .)
    return          reduce using rule 71 (ESTATUTO -> LLAMADA .)
    right_cb        reduce using rule 71 (ESTATUTO -> LLAMADA .)


state 109

    (67) ESTATUTO -> CONDICION .

    list            reduce using rule 67 (ESTATUTO -> CONDICION .)
    var             reduce using rule 67 (ESTATUTO -> CONDICION .)
    if              reduce using rule 67 (ESTATUTO -> CONDICION .)
    while           reduce using rule 67 (ESTATUTO -> CONDICION .)
    cread           reduce using rule 67 (ESTATUTO -> CONDICION .)
    cwrite          reduce using rule 67 (ESTATUTO -> CONDICION .)
    id              reduce using rule 67 (ESTATUTO -> CONDICION .)
    return          reduce using rule 67 (ESTATUTO -> CONDICION .)
    right_cb        reduce using rule 67 (ESTATUTO -> CONDICION .)


state 110

    (33) CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .

    right_cb        reduce using rule 33 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    list            reduce using rule 33 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    var             reduce using rule 33 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    if              reduce using rule 33 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    while           reduce using rule 33 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    cread           reduce using rule 33 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    cwrite          reduce using rule 33 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    id              reduce using rule 33 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)


state 111

    (82) CICLO -> while . nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop
    (83) nt_saltoLoop -> . empty
    (160) empty -> .

    left_par        reduce using rule 160 (empty -> .)

    nt_saltoLoop                   shift and go to state 135
    empty                          shift and go to state 134

state 112

    (156) ASIGNACION_AUX -> LISTA .

    equals          reduce using rule 156 (ASIGNACION_AUX -> LISTA .)


state 113

    (34) CUERPO_AUX -> CUERPO_AUX CUERPO_VARS . CUERPO_ESTATUTO
    (37) CUERPO_ESTATUTO -> . ESTATUTO
    (38) CUERPO_ESTATUTO -> . empty
    (66) ESTATUTO -> . ASIGNACION
    (67) ESTATUTO -> . CONDICION
    (68) ESTATUTO -> . CICLO
    (69) ESTATUTO -> . LECTURA
    (70) ESTATUTO -> . ESCRITURA
    (71) ESTATUTO -> . LLAMADA
    (160) empty -> .
    (153) ASIGNACION -> . ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon
    (72) CONDICION -> . if CONDICION_AUX
    (82) CICLO -> . while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop
    (85) LECTURA -> . cread left_par id nt_leer right_par semicolon
    (87) ESCRITURA -> . cwrite left_par EXPRESION nt_escribir right_par semicolon
    (89) LLAMADA -> . id nt_verificaFuncId left_par nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par semicolon nt_pushGoSub
    (155) ASIGNACION_AUX -> . id nt_pushPilaO
    (156) ASIGNACION_AUX -> . LISTA
    (137) LISTA -> . id left_sb EXP right_sb

  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for cread resolved as shift
  ! shift/reduce conflict for cwrite resolved as shift
  ! shift/reduce conflict for id resolved as shift
    right_cb        reduce using rule 160 (empty -> .)
    list            reduce using rule 160 (empty -> .)
    var             reduce using rule 160 (empty -> .)
    if              shift and go to state 100
    while           shift and go to state 111
    cread           shift and go to state 98
    cwrite          shift and go to state 104
    id              shift and go to state 103

  ! if              [ reduce using rule 160 (empty -> .) ]
  ! while           [ reduce using rule 160 (empty -> .) ]
  ! cread           [ reduce using rule 160 (empty -> .) ]
  ! cwrite          [ reduce using rule 160 (empty -> .) ]
  ! id              [ reduce using rule 160 (empty -> .) ]

    CICLO                          shift and go to state 97
    LECTURA                        shift and go to state 99
    ESCRITURA                      shift and go to state 106
    ASIGNACION                     shift and go to state 101
    ESTATUTO                       shift and go to state 102
    ASIGNACION_AUX                 shift and go to state 105
    empty                          shift and go to state 107
    LLAMADA                        shift and go to state 108
    CONDICION                      shift and go to state 109
    CUERPO_ESTATUTO                shift and go to state 136
    LISTA                          shift and go to state 112

state 114

    (32) CUERPO -> left_cb CUERPO_AUX right_cb .

    right_cb        reduce using rule 32 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    list            reduce using rule 32 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    var             reduce using rule 32 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    if              reduce using rule 32 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    while           reduce using rule 32 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    cread           reduce using rule 32 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    cwrite          reduce using rule 32 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    id              reduce using rule 32 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    return          reduce using rule 32 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    else            reduce using rule 32 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    elseif          reduce using rule 32 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    $end            reduce using rule 32 (CUERPO -> left_cb CUERPO_AUX right_cb .)


state 115

    (62) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par . left_cb CUERPOFUNC right_cb

    left_cb         shift and go to state 137


state 116

    (65) VOIDFUNC_PARA -> VOIDFUNC_PARA comma . TIPO id nt_agregarParametro
    (27) TIPO -> . int nt_cambioTipoActual
    (28) TIPO -> . float nt_cambioTipoActual
    (29) TIPO -> . bool nt_cambioTipoActual
    (30) TIPO -> . string nt_cambioTipoActual

    int             shift and go to state 23
    float           shift and go to state 24
    bool            shift and go to state 28
    string          shift and go to state 31

    TIPO                           shift and go to state 138

state 117

    (64) VOIDFUNC_PARA -> TIPO id . nt_agregarParametro
    (61) nt_agregarParametro -> . empty
    (160) empty -> .

    right_par       reduce using rule 160 (empty -> .)
    comma           reduce using rule 160 (empty -> .)

    empty                          shift and go to state 120
    nt_agregarParametro            shift and go to state 139

state 118

    (19) VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt . nt_agregarCteLista right_sb nt_agregarDicVar
    (21) nt_agregarCteLista -> . empty
    (160) empty -> .

    right_sb        reduce using rule 160 (empty -> .)

    nt_agregarCteLista             shift and go to state 140
    empty                          shift and go to state 93

state 119

    (18) VARS_LIST_AUX -> id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb . nt_agregarDicVar
    (22) nt_agregarDicVar -> . empty
    (160) empty -> .

    semicolon       reduce using rule 160 (empty -> .)
    comma           reduce using rule 160 (empty -> .)

    nt_agregarDicVar               shift and go to state 141
    empty                          shift and go to state 71

state 120

    (61) nt_agregarParametro -> empty .

    right_par       reduce using rule 61 (nt_agregarParametro -> empty .)
    comma           reduce using rule 61 (nt_agregarParametro -> empty .)


state 121

    (58) FUNC_PARA -> TIPO id nt_agregarParametro .

    right_par       reduce using rule 58 (FUNC_PARA -> TIPO id nt_agregarParametro .)
    comma           reduce using rule 58 (FUNC_PARA -> TIPO id nt_agregarParametro .)


state 122

    (53) FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO . nt_pushEndsub
    (55) nt_pushEndsub -> . empty
    (160) empty -> .

    int             reduce using rule 160 (empty -> .)
    float           reduce using rule 160 (empty -> .)
    bool            reduce using rule 160 (empty -> .)
    string          reduce using rule 160 (empty -> .)
    void            reduce using rule 160 (empty -> .)
    main            reduce using rule 160 (empty -> .)

    nt_pushEndsub                  shift and go to state 142
    empty                          shift and go to state 46

state 123

    (47) CUERPORETORNO -> left_cb . CUERPORETORNO_AUX right_cb
    (48) CUERPORETORNO_AUX -> . CUERPORETORNO_CF_AUX RETORNO
    (49) CUERPORETORNO_AUX -> . CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO
    (50) CUERPORETORNO_CF_AUX -> . CUERPOFUNC
    (51) CUERPORETORNO_CF_AUX -> . empty
    (39) CUERPOFUNC -> . CUERPOFUNC_AUX
    (160) empty -> .
    (40) CUERPOFUNC_AUX -> . CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
    (41) CUERPOFUNC_AUX -> . CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
    (43) CUERPOFUNC_VARS -> . VARS
    (44) CUERPOFUNC_VARS -> . empty
    (11) VARS -> . VARS_AUX
    (12) VARS_AUX -> . VARS_LIST_VAR
    (13) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (14) VARS_LIST_VAR -> . VARS_LIST
    (15) VARS_LIST_VAR -> . VARS_VAR
    (16) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (23) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    return          reduce using rule 160 (empty -> .)
    if              reduce using rule 160 (empty -> .)
    while           reduce using rule 160 (empty -> .)
    cread           reduce using rule 160 (empty -> .)
    cwrite          reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    list            shift and go to state 14
    var             shift and go to state 10

  ! list            [ reduce using rule 160 (empty -> .) ]
  ! var             [ reduce using rule 160 (empty -> .) ]

    CUERPORETORNO_CF_AUX           shift and go to state 146
    VARS                           shift and go to state 147
    CUERPOFUNC                     shift and go to state 143
    VARS_LIST                      shift and go to state 9
    VARS_LIST_VAR                  shift and go to state 12
    VARS_VAR                       shift and go to state 13
    VARS_AUX                       shift and go to state 15
    CUERPORETORNO_AUX              shift and go to state 144
    CUERPOFUNC_VARS                shift and go to state 148
    CUERPOFUNC_AUX                 shift and go to state 145
    empty                          shift and go to state 149

state 124

    (59) FUNC_PARA -> FUNC_PARA comma TIPO . id nt_agregarParametro

    id              shift and go to state 150


state 125

    (85) LECTURA -> cread left_par . id nt_leer right_par semicolon

    id              shift and go to state 151


state 126

    (73) CONDICION_AUX -> left_par . EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto
    (94) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (96) EXPRESION_NOT -> . not nt_pushPOper
    (97) EXPRESION_NOT -> . empty
    (160) empty -> .

    not             shift and go to state 154
    left_par        reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    plus            reduce using rule 160 (empty -> .)
    minus           reduce using rule 160 (empty -> .)
    true            reduce using rule 160 (empty -> .)
    false           reduce using rule 160 (empty -> .)
    cteString       reduce using rule 160 (empty -> .)
    cteInt          reduce using rule 160 (empty -> .)
    cteFloat        reduce using rule 160 (empty -> .)

    EXPRESION                      shift and go to state 152
    EXPRESION_NOT                  shift and go to state 153
    empty                          shift and go to state 155

state 127

    (72) CONDICION -> if CONDICION_AUX .

    list            reduce using rule 72 (CONDICION -> if CONDICION_AUX .)
    var             reduce using rule 72 (CONDICION -> if CONDICION_AUX .)
    if              reduce using rule 72 (CONDICION -> if CONDICION_AUX .)
    while           reduce using rule 72 (CONDICION -> if CONDICION_AUX .)
    cread           reduce using rule 72 (CONDICION -> if CONDICION_AUX .)
    cwrite          reduce using rule 72 (CONDICION -> if CONDICION_AUX .)
    id              reduce using rule 72 (CONDICION -> if CONDICION_AUX .)
    return          reduce using rule 72 (CONDICION -> if CONDICION_AUX .)
    right_cb        reduce using rule 72 (CONDICION -> if CONDICION_AUX .)


state 128

    (89) LLAMADA -> id nt_verificaFuncId . left_par nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par semicolon nt_pushGoSub

    left_par        shift and go to state 156


state 129

    (155) ASIGNACION_AUX -> id nt_pushPilaO .

    equals          reduce using rule 155 (ASIGNACION_AUX -> id nt_pushPilaO .)


state 130

    (137) LISTA -> id left_sb . EXP right_sb
    (110) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (115) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (120) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (121) FACTOR -> . CONSTANTE
    (122) FACTOR -> . LISTA
    (123) FACTOR -> . FACTOR_AUX
    (138) CONSTANTE -> . NUMERICA
    (139) CONSTANTE -> . BOOLEANA
    (140) CONSTANTE -> . STRINGS
    (137) LISTA -> . id left_sb EXP right_sb
    (124) FACTOR_AUX -> . id nt_pushPilaO
    (125) FACTOR_AUX -> . id nt_verificaFuncId LLAMADA_F
    (141) NUMERICA -> . NUMERICA_AUX
    (142) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (143) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (150) BOOLEANA -> . true
    (151) BOOLEANA -> . false
    (152) STRINGS -> . cteString
    (146) NUMERICA_AUX -> . cteInt nt_pushInt
    (147) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 166
    id              shift and go to state 161
    plus            shift and go to state 162
    minus           shift and go to state 175
    true            shift and go to state 167
    false           shift and go to state 157
    cteString       shift and go to state 165
    cteInt          shift and go to state 170
    cteFloat        shift and go to state 159

    BOOLEANA                       shift and go to state 160
    EXP                            shift and go to state 158
    FACTOR_AUX                     shift and go to state 163
    NUMERICA_AUX                   shift and go to state 171
    TERMINO                        shift and go to state 164
    STRINGS                        shift and go to state 168
    CONSTANTE                      shift and go to state 169
    NUMERICA                       shift and go to state 172
    FACTOR                         shift and go to state 173
    LISTA                          shift and go to state 174

state 131

    (126) nt_verificaFuncId -> empty .
    (157) nt_pushPilaO -> empty .

    left_par        reduce using rule 126 (nt_verificaFuncId -> empty .)
    equals          reduce using rule 157 (nt_pushPilaO -> empty .)


state 132

    (87) ESCRITURA -> cwrite left_par . EXPRESION nt_escribir right_par semicolon
    (94) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (96) EXPRESION_NOT -> . not nt_pushPOper
    (97) EXPRESION_NOT -> . empty
    (160) empty -> .

    not             shift and go to state 154
    left_par        reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    plus            reduce using rule 160 (empty -> .)
    minus           reduce using rule 160 (empty -> .)
    true            reduce using rule 160 (empty -> .)
    false           reduce using rule 160 (empty -> .)
    cteString       reduce using rule 160 (empty -> .)
    cteInt          reduce using rule 160 (empty -> .)
    cteFloat        reduce using rule 160 (empty -> .)

    EXPRESION                      shift and go to state 176
    EXPRESION_NOT                  shift and go to state 153
    empty                          shift and go to state 155

state 133

    (153) ASIGNACION -> ASIGNACION_AUX equals . nt_pushPOper EXPRESION nt_checaEquals semicolon
    (158) nt_pushPOper -> . empty
    (160) empty -> .

    not             reduce using rule 160 (empty -> .)
    left_par        reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    plus            reduce using rule 160 (empty -> .)
    minus           reduce using rule 160 (empty -> .)
    true            reduce using rule 160 (empty -> .)
    false           reduce using rule 160 (empty -> .)
    cteString       reduce using rule 160 (empty -> .)
    cteInt          reduce using rule 160 (empty -> .)
    cteFloat        reduce using rule 160 (empty -> .)

    empty                          shift and go to state 177
    nt_pushPOper                   shift and go to state 178

state 134

    (83) nt_saltoLoop -> empty .

    left_par        reduce using rule 83 (nt_saltoLoop -> empty .)


state 135

    (82) CICLO -> while nt_saltoLoop . left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop

    left_par        shift and go to state 179


state 136

    (34) CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .

    right_cb        reduce using rule 34 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    list            reduce using rule 34 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    var             reduce using rule 34 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    if              reduce using rule 34 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    while           reduce using rule 34 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    cread           reduce using rule 34 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    cwrite          reduce using rule 34 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    id              reduce using rule 34 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)


state 137

    (62) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb . CUERPOFUNC right_cb
    (39) CUERPOFUNC -> . CUERPOFUNC_AUX
    (40) CUERPOFUNC_AUX -> . CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
    (41) CUERPOFUNC_AUX -> . CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
    (43) CUERPOFUNC_VARS -> . VARS
    (44) CUERPOFUNC_VARS -> . empty
    (11) VARS -> . VARS_AUX
    (160) empty -> .
    (12) VARS_AUX -> . VARS_LIST_VAR
    (13) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (14) VARS_LIST_VAR -> . VARS_LIST
    (15) VARS_LIST_VAR -> . VARS_VAR
    (16) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (23) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    if              reduce using rule 160 (empty -> .)
    while           reduce using rule 160 (empty -> .)
    cread           reduce using rule 160 (empty -> .)
    cwrite          reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    right_cb        reduce using rule 160 (empty -> .)
    list            shift and go to state 14
    var             shift and go to state 10

  ! list            [ reduce using rule 160 (empty -> .) ]
  ! var             [ reduce using rule 160 (empty -> .) ]

    VARS_LIST                      shift and go to state 9
    VARS                           shift and go to state 147
    CUERPOFUNC                     shift and go to state 180
    VARS_AUX                       shift and go to state 15
    VARS_LIST_VAR                  shift and go to state 12
    CUERPOFUNC_VARS                shift and go to state 148
    VARS_VAR                       shift and go to state 13
    CUERPOFUNC_AUX                 shift and go to state 145
    empty                          shift and go to state 181

state 138

    (65) VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO . id nt_agregarParametro

    id              shift and go to state 182


state 139

    (64) VOIDFUNC_PARA -> TIPO id nt_agregarParametro .

    right_par       reduce using rule 64 (VOIDFUNC_PARA -> TIPO id nt_agregarParametro .)
    comma           reduce using rule 64 (VOIDFUNC_PARA -> TIPO id nt_agregarParametro .)


state 140

    (19) VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista . right_sb nt_agregarDicVar

    right_sb        shift and go to state 183


state 141

    (18) VARS_LIST_AUX -> id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar .

    semicolon       reduce using rule 18 (VARS_LIST_AUX -> id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar .)
    comma           reduce using rule 18 (VARS_LIST_AUX -> id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar .)


state 142

    (53) FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub .

    int             reduce using rule 53 (FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub .)
    float           reduce using rule 53 (FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub .)
    bool            reduce using rule 53 (FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub .)
    string          reduce using rule 53 (FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub .)
    void            reduce using rule 53 (FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub .)
    main            reduce using rule 53 (FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub .)


state 143

    (50) CUERPORETORNO_CF_AUX -> CUERPOFUNC .

    return          reduce using rule 50 (CUERPORETORNO_CF_AUX -> CUERPOFUNC .)


state 144

    (47) CUERPORETORNO -> left_cb CUERPORETORNO_AUX . right_cb
    (49) CUERPORETORNO_AUX -> CUERPORETORNO_AUX . CUERPORETORNO_CF_AUX RETORNO
    (50) CUERPORETORNO_CF_AUX -> . CUERPOFUNC
    (51) CUERPORETORNO_CF_AUX -> . empty
    (39) CUERPOFUNC -> . CUERPOFUNC_AUX
    (160) empty -> .
    (40) CUERPOFUNC_AUX -> . CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
    (41) CUERPOFUNC_AUX -> . CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
    (43) CUERPOFUNC_VARS -> . VARS
    (44) CUERPOFUNC_VARS -> . empty
    (11) VARS -> . VARS_AUX
    (12) VARS_AUX -> . VARS_LIST_VAR
    (13) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (14) VARS_LIST_VAR -> . VARS_LIST
    (15) VARS_LIST_VAR -> . VARS_VAR
    (16) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (23) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    right_cb        shift and go to state 185
    return          reduce using rule 160 (empty -> .)
    if              reduce using rule 160 (empty -> .)
    while           reduce using rule 160 (empty -> .)
    cread           reduce using rule 160 (empty -> .)
    cwrite          reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    list            shift and go to state 14
    var             shift and go to state 10

  ! list            [ reduce using rule 160 (empty -> .) ]
  ! var             [ reduce using rule 160 (empty -> .) ]

    CUERPORETORNO_CF_AUX           shift and go to state 184
    VARS                           shift and go to state 147
    CUERPOFUNC                     shift and go to state 143
    VARS_LIST                      shift and go to state 9
    VARS_LIST_VAR                  shift and go to state 12
    VARS_VAR                       shift and go to state 13
    VARS_AUX                       shift and go to state 15
    CUERPOFUNC_VARS                shift and go to state 148
    CUERPOFUNC_AUX                 shift and go to state 145
    empty                          shift and go to state 149

state 145

    (39) CUERPOFUNC -> CUERPOFUNC_AUX .
    (41) CUERPOFUNC_AUX -> CUERPOFUNC_AUX . CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
    (43) CUERPOFUNC_VARS -> . VARS
    (44) CUERPOFUNC_VARS -> . empty
    (11) VARS -> . VARS_AUX
    (160) empty -> .
    (12) VARS_AUX -> . VARS_LIST_VAR
    (13) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (14) VARS_LIST_VAR -> . VARS_LIST
    (15) VARS_LIST_VAR -> . VARS_VAR
    (16) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (23) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! reduce/reduce conflict for return resolved using rule 39 (CUERPOFUNC -> CUERPOFUNC_AUX .)
  ! reduce/reduce conflict for right_cb resolved using rule 39 (CUERPOFUNC -> CUERPOFUNC_AUX .)
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    return          reduce using rule 39 (CUERPOFUNC -> CUERPOFUNC_AUX .)
    right_cb        reduce using rule 39 (CUERPOFUNC -> CUERPOFUNC_AUX .)
    if              reduce using rule 160 (empty -> .)
    while           reduce using rule 160 (empty -> .)
    cread           reduce using rule 160 (empty -> .)
    cwrite          reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    list            shift and go to state 14
    var             shift and go to state 10

  ! list            [ reduce using rule 160 (empty -> .) ]
  ! var             [ reduce using rule 160 (empty -> .) ]
  ! return          [ reduce using rule 160 (empty -> .) ]
  ! right_cb        [ reduce using rule 160 (empty -> .) ]

    VARS                           shift and go to state 147
    VARS_LIST                      shift and go to state 9
    VARS_LIST_VAR                  shift and go to state 12
    VARS_AUX                       shift and go to state 15
    CUERPOFUNC_VARS                shift and go to state 186
    VARS_VAR                       shift and go to state 13
    empty                          shift and go to state 181

state 146

    (48) CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX . RETORNO
    (52) RETORNO -> . return EXP semicolon

    return          shift and go to state 188

    RETORNO                        shift and go to state 187

state 147

    (43) CUERPOFUNC_VARS -> VARS .

    if              reduce using rule 43 (CUERPOFUNC_VARS -> VARS .)
    while           reduce using rule 43 (CUERPOFUNC_VARS -> VARS .)
    cread           reduce using rule 43 (CUERPOFUNC_VARS -> VARS .)
    cwrite          reduce using rule 43 (CUERPOFUNC_VARS -> VARS .)
    id              reduce using rule 43 (CUERPOFUNC_VARS -> VARS .)
    list            reduce using rule 43 (CUERPOFUNC_VARS -> VARS .)
    var             reduce using rule 43 (CUERPOFUNC_VARS -> VARS .)
    return          reduce using rule 43 (CUERPOFUNC_VARS -> VARS .)
    right_cb        reduce using rule 43 (CUERPOFUNC_VARS -> VARS .)


state 148

    (40) CUERPOFUNC_AUX -> CUERPOFUNC_VARS . nt_funcInicio CUERPOFUNC_ESTATUTO
    (42) nt_funcInicio -> . empty
    (160) empty -> .

    if              reduce using rule 160 (empty -> .)
    while           reduce using rule 160 (empty -> .)
    cread           reduce using rule 160 (empty -> .)
    cwrite          reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    list            reduce using rule 160 (empty -> .)
    var             reduce using rule 160 (empty -> .)
    return          reduce using rule 160 (empty -> .)
    right_cb        reduce using rule 160 (empty -> .)

    empty                          shift and go to state 189
    nt_funcInicio                  shift and go to state 190

state 149

    (51) CUERPORETORNO_CF_AUX -> empty .
    (44) CUERPOFUNC_VARS -> empty .

  ! reduce/reduce conflict for return resolved using rule 44 (CUERPOFUNC_VARS -> empty .)
    if              reduce using rule 44 (CUERPOFUNC_VARS -> empty .)
    while           reduce using rule 44 (CUERPOFUNC_VARS -> empty .)
    cread           reduce using rule 44 (CUERPOFUNC_VARS -> empty .)
    cwrite          reduce using rule 44 (CUERPOFUNC_VARS -> empty .)
    id              reduce using rule 44 (CUERPOFUNC_VARS -> empty .)
    list            reduce using rule 44 (CUERPOFUNC_VARS -> empty .)
    var             reduce using rule 44 (CUERPOFUNC_VARS -> empty .)
    return          reduce using rule 44 (CUERPOFUNC_VARS -> empty .)

  ! return          [ reduce using rule 51 (CUERPORETORNO_CF_AUX -> empty .) ]


state 150

    (59) FUNC_PARA -> FUNC_PARA comma TIPO id . nt_agregarParametro
    (61) nt_agregarParametro -> . empty
    (160) empty -> .

    right_par       reduce using rule 160 (empty -> .)
    comma           reduce using rule 160 (empty -> .)

    empty                          shift and go to state 120
    nt_agregarParametro            shift and go to state 191

state 151

    (85) LECTURA -> cread left_par id . nt_leer right_par semicolon
    (86) nt_leer -> . empty
    (160) empty -> .

    right_par       reduce using rule 160 (empty -> .)

    empty                          shift and go to state 193
    nt_leer                        shift and go to state 192

state 152

    (73) CONDICION_AUX -> left_par EXPRESION . nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto
    (79) nt_checarBool -> . empty
    (160) empty -> .

    right_par       reduce using rule 160 (empty -> .)

    nt_checarBool                  shift and go to state 194
    empty                          shift and go to state 195

state 153

    (94) EXPRESION -> EXPRESION_NOT . EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (101) EXPRESIONLOGICA -> . EXP EXPRESIONLOGICA_AUX
    (110) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (115) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (120) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (121) FACTOR -> . CONSTANTE
    (122) FACTOR -> . LISTA
    (123) FACTOR -> . FACTOR_AUX
    (138) CONSTANTE -> . NUMERICA
    (139) CONSTANTE -> . BOOLEANA
    (140) CONSTANTE -> . STRINGS
    (137) LISTA -> . id left_sb EXP right_sb
    (124) FACTOR_AUX -> . id nt_pushPilaO
    (125) FACTOR_AUX -> . id nt_verificaFuncId LLAMADA_F
    (141) NUMERICA -> . NUMERICA_AUX
    (142) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (143) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (150) BOOLEANA -> . true
    (151) BOOLEANA -> . false
    (152) STRINGS -> . cteString
    (146) NUMERICA_AUX -> . cteInt nt_pushInt
    (147) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 166
    id              shift and go to state 161
    plus            shift and go to state 162
    minus           shift and go to state 175
    true            shift and go to state 167
    false           shift and go to state 157
    cteString       shift and go to state 165
    cteInt          shift and go to state 170
    cteFloat        shift and go to state 159

    EXPRESIONLOGICA                shift and go to state 196
    BOOLEANA                       shift and go to state 160
    EXP                            shift and go to state 197
    FACTOR_AUX                     shift and go to state 163
    TERMINO                        shift and go to state 164
    STRINGS                        shift and go to state 168
    CONSTANTE                      shift and go to state 169
    NUMERICA_AUX                   shift and go to state 171
    NUMERICA                       shift and go to state 172
    FACTOR                         shift and go to state 173
    LISTA                          shift and go to state 174

state 154

    (96) EXPRESION_NOT -> not . nt_pushPOper
    (158) nt_pushPOper -> . empty
    (160) empty -> .

    left_par        reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    plus            reduce using rule 160 (empty -> .)
    minus           reduce using rule 160 (empty -> .)
    true            reduce using rule 160 (empty -> .)
    false           reduce using rule 160 (empty -> .)
    cteString       reduce using rule 160 (empty -> .)
    cteInt          reduce using rule 160 (empty -> .)
    cteFloat        reduce using rule 160 (empty -> .)

    empty                          shift and go to state 177
    nt_pushPOper                   shift and go to state 198

state 155

    (97) EXPRESION_NOT -> empty .

    left_par        reduce using rule 97 (EXPRESION_NOT -> empty .)
    id              reduce using rule 97 (EXPRESION_NOT -> empty .)
    plus            reduce using rule 97 (EXPRESION_NOT -> empty .)
    minus           reduce using rule 97 (EXPRESION_NOT -> empty .)
    true            reduce using rule 97 (EXPRESION_NOT -> empty .)
    false           reduce using rule 97 (EXPRESION_NOT -> empty .)
    cteString       reduce using rule 97 (EXPRESION_NOT -> empty .)
    cteInt          reduce using rule 97 (EXPRESION_NOT -> empty .)
    cteFloat        reduce using rule 97 (EXPRESION_NOT -> empty .)


state 156

    (89) LLAMADA -> id nt_verificaFuncId left_par . nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par semicolon nt_pushGoSub
    (133) nt_startERA -> . empty
    (160) empty -> .

    not             reduce using rule 160 (empty -> .)
    right_par       reduce using rule 160 (empty -> .)
    left_par        reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    plus            reduce using rule 160 (empty -> .)
    minus           reduce using rule 160 (empty -> .)
    true            reduce using rule 160 (empty -> .)
    false           reduce using rule 160 (empty -> .)
    cteString       reduce using rule 160 (empty -> .)
    cteInt          reduce using rule 160 (empty -> .)
    cteFloat        reduce using rule 160 (empty -> .)

    nt_startERA                    shift and go to state 199
    empty                          shift and go to state 200

state 157

    (151) BOOLEANA -> false .

    multiply        reduce using rule 151 (BOOLEANA -> false .)
    divide          reduce using rule 151 (BOOLEANA -> false .)
    plus            reduce using rule 151 (BOOLEANA -> false .)
    minus           reduce using rule 151 (BOOLEANA -> false .)
    right_sb        reduce using rule 151 (BOOLEANA -> false .)
    lt              reduce using rule 151 (BOOLEANA -> false .)
    gt              reduce using rule 151 (BOOLEANA -> false .)
    ne              reduce using rule 151 (BOOLEANA -> false .)
    ge              reduce using rule 151 (BOOLEANA -> false .)
    le              reduce using rule 151 (BOOLEANA -> false .)
    et              reduce using rule 151 (BOOLEANA -> false .)
    and             reduce using rule 151 (BOOLEANA -> false .)
    or              reduce using rule 151 (BOOLEANA -> false .)
    right_par       reduce using rule 151 (BOOLEANA -> false .)
    semicolon       reduce using rule 151 (BOOLEANA -> false .)
    comma           reduce using rule 151 (BOOLEANA -> false .)


state 158

    (137) LISTA -> id left_sb EXP . right_sb

    right_sb        shift and go to state 201


state 159

    (147) NUMERICA_AUX -> cteFloat . nt_pushFloat
    (149) nt_pushFloat -> . empty
    (160) empty -> .

    multiply        reduce using rule 160 (empty -> .)
    divide          reduce using rule 160 (empty -> .)
    plus            reduce using rule 160 (empty -> .)
    minus           reduce using rule 160 (empty -> .)
    right_sb        reduce using rule 160 (empty -> .)
    lt              reduce using rule 160 (empty -> .)
    gt              reduce using rule 160 (empty -> .)
    ne              reduce using rule 160 (empty -> .)
    ge              reduce using rule 160 (empty -> .)
    le              reduce using rule 160 (empty -> .)
    et              reduce using rule 160 (empty -> .)
    and             reduce using rule 160 (empty -> .)
    or              reduce using rule 160 (empty -> .)
    right_par       reduce using rule 160 (empty -> .)
    semicolon       reduce using rule 160 (empty -> .)
    comma           reduce using rule 160 (empty -> .)

    nt_pushFloat                   shift and go to state 202
    empty                          shift and go to state 203

state 160

    (139) CONSTANTE -> BOOLEANA .

    multiply        reduce using rule 139 (CONSTANTE -> BOOLEANA .)
    divide          reduce using rule 139 (CONSTANTE -> BOOLEANA .)
    plus            reduce using rule 139 (CONSTANTE -> BOOLEANA .)
    minus           reduce using rule 139 (CONSTANTE -> BOOLEANA .)
    right_sb        reduce using rule 139 (CONSTANTE -> BOOLEANA .)
    and             reduce using rule 139 (CONSTANTE -> BOOLEANA .)
    or              reduce using rule 139 (CONSTANTE -> BOOLEANA .)
    right_par       reduce using rule 139 (CONSTANTE -> BOOLEANA .)
    semicolon       reduce using rule 139 (CONSTANTE -> BOOLEANA .)
    comma           reduce using rule 139 (CONSTANTE -> BOOLEANA .)
    lt              reduce using rule 139 (CONSTANTE -> BOOLEANA .)
    gt              reduce using rule 139 (CONSTANTE -> BOOLEANA .)
    ne              reduce using rule 139 (CONSTANTE -> BOOLEANA .)
    ge              reduce using rule 139 (CONSTANTE -> BOOLEANA .)
    le              reduce using rule 139 (CONSTANTE -> BOOLEANA .)
    et              reduce using rule 139 (CONSTANTE -> BOOLEANA .)


state 161

    (137) LISTA -> id . left_sb EXP right_sb
    (124) FACTOR_AUX -> id . nt_pushPilaO
    (125) FACTOR_AUX -> id . nt_verificaFuncId LLAMADA_F
    (157) nt_pushPilaO -> . empty
    (126) nt_verificaFuncId -> . empty
    (160) empty -> .

    left_sb         shift and go to state 130
    multiply        reduce using rule 160 (empty -> .)
    divide          reduce using rule 160 (empty -> .)
    plus            reduce using rule 160 (empty -> .)
    minus           reduce using rule 160 (empty -> .)
    right_sb        reduce using rule 160 (empty -> .)
    lt              reduce using rule 160 (empty -> .)
    gt              reduce using rule 160 (empty -> .)
    ne              reduce using rule 160 (empty -> .)
    ge              reduce using rule 160 (empty -> .)
    le              reduce using rule 160 (empty -> .)
    et              reduce using rule 160 (empty -> .)
    and             reduce using rule 160 (empty -> .)
    or              reduce using rule 160 (empty -> .)
    right_par       reduce using rule 160 (empty -> .)
    semicolon       reduce using rule 160 (empty -> .)
    comma           reduce using rule 160 (empty -> .)
    left_par        reduce using rule 160 (empty -> .)

    empty                          shift and go to state 206
    nt_pushPilaO                   shift and go to state 205
    nt_verificaFuncId              shift and go to state 204

state 162

    (142) NUMERICA -> plus . nt_sigMas NUMERICA_AUX
    (144) nt_sigMas -> . empty
    (160) empty -> .

    cteInt          reduce using rule 160 (empty -> .)
    cteFloat        reduce using rule 160 (empty -> .)

    nt_sigMas                      shift and go to state 207
    empty                          shift and go to state 208

state 163

    (123) FACTOR -> FACTOR_AUX .

    multiply        reduce using rule 123 (FACTOR -> FACTOR_AUX .)
    divide          reduce using rule 123 (FACTOR -> FACTOR_AUX .)
    plus            reduce using rule 123 (FACTOR -> FACTOR_AUX .)
    minus           reduce using rule 123 (FACTOR -> FACTOR_AUX .)
    semicolon       reduce using rule 123 (FACTOR -> FACTOR_AUX .)
    and             reduce using rule 123 (FACTOR -> FACTOR_AUX .)
    or              reduce using rule 123 (FACTOR -> FACTOR_AUX .)
    right_par       reduce using rule 123 (FACTOR -> FACTOR_AUX .)
    comma           reduce using rule 123 (FACTOR -> FACTOR_AUX .)
    right_sb        reduce using rule 123 (FACTOR -> FACTOR_AUX .)
    lt              reduce using rule 123 (FACTOR -> FACTOR_AUX .)
    gt              reduce using rule 123 (FACTOR -> FACTOR_AUX .)
    ne              reduce using rule 123 (FACTOR -> FACTOR_AUX .)
    ge              reduce using rule 123 (FACTOR -> FACTOR_AUX .)
    le              reduce using rule 123 (FACTOR -> FACTOR_AUX .)
    et              reduce using rule 123 (FACTOR -> FACTOR_AUX .)


state 164

    (110) EXP -> TERMINO . nt_checar_sumas EXP_AUX
    (111) nt_checar_sumas -> . empty
    (160) empty -> .

    plus            reduce using rule 160 (empty -> .)
    minus           reduce using rule 160 (empty -> .)
    right_sb        reduce using rule 160 (empty -> .)
    lt              reduce using rule 160 (empty -> .)
    gt              reduce using rule 160 (empty -> .)
    ne              reduce using rule 160 (empty -> .)
    ge              reduce using rule 160 (empty -> .)
    le              reduce using rule 160 (empty -> .)
    et              reduce using rule 160 (empty -> .)
    and             reduce using rule 160 (empty -> .)
    or              reduce using rule 160 (empty -> .)
    right_par       reduce using rule 160 (empty -> .)
    semicolon       reduce using rule 160 (empty -> .)
    comma           reduce using rule 160 (empty -> .)

    empty                          shift and go to state 209
    nt_checar_sumas                shift and go to state 210

state 165

    (152) STRINGS -> cteString .

    multiply        reduce using rule 152 (STRINGS -> cteString .)
    divide          reduce using rule 152 (STRINGS -> cteString .)
    plus            reduce using rule 152 (STRINGS -> cteString .)
    minus           reduce using rule 152 (STRINGS -> cteString .)
    and             reduce using rule 152 (STRINGS -> cteString .)
    or              reduce using rule 152 (STRINGS -> cteString .)
    right_par       reduce using rule 152 (STRINGS -> cteString .)
    semicolon       reduce using rule 152 (STRINGS -> cteString .)
    comma           reduce using rule 152 (STRINGS -> cteString .)
    right_sb        reduce using rule 152 (STRINGS -> cteString .)
    lt              reduce using rule 152 (STRINGS -> cteString .)
    gt              reduce using rule 152 (STRINGS -> cteString .)
    ne              reduce using rule 152 (STRINGS -> cteString .)
    ge              reduce using rule 152 (STRINGS -> cteString .)
    le              reduce using rule 152 (STRINGS -> cteString .)
    et              reduce using rule 152 (STRINGS -> cteString .)


state 166

    (120) FACTOR -> left_par . nt_pushPOper EXPRESION right_par nt_popPOper
    (158) nt_pushPOper -> . empty
    (160) empty -> .

    not             reduce using rule 160 (empty -> .)
    left_par        reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    plus            reduce using rule 160 (empty -> .)
    minus           reduce using rule 160 (empty -> .)
    true            reduce using rule 160 (empty -> .)
    false           reduce using rule 160 (empty -> .)
    cteString       reduce using rule 160 (empty -> .)
    cteInt          reduce using rule 160 (empty -> .)
    cteFloat        reduce using rule 160 (empty -> .)

    empty                          shift and go to state 177
    nt_pushPOper                   shift and go to state 211

state 167

    (150) BOOLEANA -> true .

    multiply        reduce using rule 150 (BOOLEANA -> true .)
    divide          reduce using rule 150 (BOOLEANA -> true .)
    plus            reduce using rule 150 (BOOLEANA -> true .)
    minus           reduce using rule 150 (BOOLEANA -> true .)
    right_sb        reduce using rule 150 (BOOLEANA -> true .)
    lt              reduce using rule 150 (BOOLEANA -> true .)
    gt              reduce using rule 150 (BOOLEANA -> true .)
    ne              reduce using rule 150 (BOOLEANA -> true .)
    ge              reduce using rule 150 (BOOLEANA -> true .)
    le              reduce using rule 150 (BOOLEANA -> true .)
    et              reduce using rule 150 (BOOLEANA -> true .)
    and             reduce using rule 150 (BOOLEANA -> true .)
    or              reduce using rule 150 (BOOLEANA -> true .)
    right_par       reduce using rule 150 (BOOLEANA -> true .)
    semicolon       reduce using rule 150 (BOOLEANA -> true .)
    comma           reduce using rule 150 (BOOLEANA -> true .)


state 168

    (140) CONSTANTE -> STRINGS .

    multiply        reduce using rule 140 (CONSTANTE -> STRINGS .)
    divide          reduce using rule 140 (CONSTANTE -> STRINGS .)
    plus            reduce using rule 140 (CONSTANTE -> STRINGS .)
    minus           reduce using rule 140 (CONSTANTE -> STRINGS .)
    right_sb        reduce using rule 140 (CONSTANTE -> STRINGS .)
    and             reduce using rule 140 (CONSTANTE -> STRINGS .)
    or              reduce using rule 140 (CONSTANTE -> STRINGS .)
    right_par       reduce using rule 140 (CONSTANTE -> STRINGS .)
    semicolon       reduce using rule 140 (CONSTANTE -> STRINGS .)
    comma           reduce using rule 140 (CONSTANTE -> STRINGS .)
    lt              reduce using rule 140 (CONSTANTE -> STRINGS .)
    gt              reduce using rule 140 (CONSTANTE -> STRINGS .)
    ne              reduce using rule 140 (CONSTANTE -> STRINGS .)
    ge              reduce using rule 140 (CONSTANTE -> STRINGS .)
    le              reduce using rule 140 (CONSTANTE -> STRINGS .)
    et              reduce using rule 140 (CONSTANTE -> STRINGS .)


state 169

    (121) FACTOR -> CONSTANTE .

    multiply        reduce using rule 121 (FACTOR -> CONSTANTE .)
    divide          reduce using rule 121 (FACTOR -> CONSTANTE .)
    plus            reduce using rule 121 (FACTOR -> CONSTANTE .)
    minus           reduce using rule 121 (FACTOR -> CONSTANTE .)
    semicolon       reduce using rule 121 (FACTOR -> CONSTANTE .)
    and             reduce using rule 121 (FACTOR -> CONSTANTE .)
    or              reduce using rule 121 (FACTOR -> CONSTANTE .)
    right_par       reduce using rule 121 (FACTOR -> CONSTANTE .)
    comma           reduce using rule 121 (FACTOR -> CONSTANTE .)
    right_sb        reduce using rule 121 (FACTOR -> CONSTANTE .)
    lt              reduce using rule 121 (FACTOR -> CONSTANTE .)
    gt              reduce using rule 121 (FACTOR -> CONSTANTE .)
    ne              reduce using rule 121 (FACTOR -> CONSTANTE .)
    ge              reduce using rule 121 (FACTOR -> CONSTANTE .)
    le              reduce using rule 121 (FACTOR -> CONSTANTE .)
    et              reduce using rule 121 (FACTOR -> CONSTANTE .)


state 170

    (146) NUMERICA_AUX -> cteInt . nt_pushInt
    (148) nt_pushInt -> . empty
    (160) empty -> .

    multiply        reduce using rule 160 (empty -> .)
    divide          reduce using rule 160 (empty -> .)
    plus            reduce using rule 160 (empty -> .)
    minus           reduce using rule 160 (empty -> .)
    right_sb        reduce using rule 160 (empty -> .)
    lt              reduce using rule 160 (empty -> .)
    gt              reduce using rule 160 (empty -> .)
    ne              reduce using rule 160 (empty -> .)
    ge              reduce using rule 160 (empty -> .)
    le              reduce using rule 160 (empty -> .)
    et              reduce using rule 160 (empty -> .)
    and             reduce using rule 160 (empty -> .)
    or              reduce using rule 160 (empty -> .)
    right_par       reduce using rule 160 (empty -> .)
    semicolon       reduce using rule 160 (empty -> .)
    comma           reduce using rule 160 (empty -> .)

    empty                          shift and go to state 212
    nt_pushInt                     shift and go to state 213

state 171

    (141) NUMERICA -> NUMERICA_AUX .

    multiply        reduce using rule 141 (NUMERICA -> NUMERICA_AUX .)
    divide          reduce using rule 141 (NUMERICA -> NUMERICA_AUX .)
    plus            reduce using rule 141 (NUMERICA -> NUMERICA_AUX .)
    minus           reduce using rule 141 (NUMERICA -> NUMERICA_AUX .)
    lt              reduce using rule 141 (NUMERICA -> NUMERICA_AUX .)
    gt              reduce using rule 141 (NUMERICA -> NUMERICA_AUX .)
    ne              reduce using rule 141 (NUMERICA -> NUMERICA_AUX .)
    ge              reduce using rule 141 (NUMERICA -> NUMERICA_AUX .)
    le              reduce using rule 141 (NUMERICA -> NUMERICA_AUX .)
    et              reduce using rule 141 (NUMERICA -> NUMERICA_AUX .)
    and             reduce using rule 141 (NUMERICA -> NUMERICA_AUX .)
    or              reduce using rule 141 (NUMERICA -> NUMERICA_AUX .)
    right_par       reduce using rule 141 (NUMERICA -> NUMERICA_AUX .)
    semicolon       reduce using rule 141 (NUMERICA -> NUMERICA_AUX .)
    comma           reduce using rule 141 (NUMERICA -> NUMERICA_AUX .)
    right_sb        reduce using rule 141 (NUMERICA -> NUMERICA_AUX .)


state 172

    (138) CONSTANTE -> NUMERICA .

    multiply        reduce using rule 138 (CONSTANTE -> NUMERICA .)
    divide          reduce using rule 138 (CONSTANTE -> NUMERICA .)
    plus            reduce using rule 138 (CONSTANTE -> NUMERICA .)
    minus           reduce using rule 138 (CONSTANTE -> NUMERICA .)
    right_sb        reduce using rule 138 (CONSTANTE -> NUMERICA .)
    and             reduce using rule 138 (CONSTANTE -> NUMERICA .)
    or              reduce using rule 138 (CONSTANTE -> NUMERICA .)
    right_par       reduce using rule 138 (CONSTANTE -> NUMERICA .)
    semicolon       reduce using rule 138 (CONSTANTE -> NUMERICA .)
    comma           reduce using rule 138 (CONSTANTE -> NUMERICA .)
    lt              reduce using rule 138 (CONSTANTE -> NUMERICA .)
    gt              reduce using rule 138 (CONSTANTE -> NUMERICA .)
    ne              reduce using rule 138 (CONSTANTE -> NUMERICA .)
    ge              reduce using rule 138 (CONSTANTE -> NUMERICA .)
    le              reduce using rule 138 (CONSTANTE -> NUMERICA .)
    et              reduce using rule 138 (CONSTANTE -> NUMERICA .)


state 173

    (115) TERMINO -> FACTOR . nt_checar_multis TERMINO_AUX
    (116) nt_checar_multis -> . empty
    (160) empty -> .

    multiply        reduce using rule 160 (empty -> .)
    divide          reduce using rule 160 (empty -> .)
    plus            reduce using rule 160 (empty -> .)
    minus           reduce using rule 160 (empty -> .)
    right_sb        reduce using rule 160 (empty -> .)
    lt              reduce using rule 160 (empty -> .)
    gt              reduce using rule 160 (empty -> .)
    ne              reduce using rule 160 (empty -> .)
    ge              reduce using rule 160 (empty -> .)
    le              reduce using rule 160 (empty -> .)
    et              reduce using rule 160 (empty -> .)
    and             reduce using rule 160 (empty -> .)
    or              reduce using rule 160 (empty -> .)
    right_par       reduce using rule 160 (empty -> .)
    semicolon       reduce using rule 160 (empty -> .)
    comma           reduce using rule 160 (empty -> .)

    nt_checar_multis               shift and go to state 214
    empty                          shift and go to state 215

state 174

    (122) FACTOR -> LISTA .

    multiply        reduce using rule 122 (FACTOR -> LISTA .)
    divide          reduce using rule 122 (FACTOR -> LISTA .)
    plus            reduce using rule 122 (FACTOR -> LISTA .)
    minus           reduce using rule 122 (FACTOR -> LISTA .)
    semicolon       reduce using rule 122 (FACTOR -> LISTA .)
    and             reduce using rule 122 (FACTOR -> LISTA .)
    or              reduce using rule 122 (FACTOR -> LISTA .)
    right_par       reduce using rule 122 (FACTOR -> LISTA .)
    comma           reduce using rule 122 (FACTOR -> LISTA .)
    right_sb        reduce using rule 122 (FACTOR -> LISTA .)
    lt              reduce using rule 122 (FACTOR -> LISTA .)
    gt              reduce using rule 122 (FACTOR -> LISTA .)
    ne              reduce using rule 122 (FACTOR -> LISTA .)
    ge              reduce using rule 122 (FACTOR -> LISTA .)
    le              reduce using rule 122 (FACTOR -> LISTA .)
    et              reduce using rule 122 (FACTOR -> LISTA .)


state 175

    (143) NUMERICA -> minus . nt_sigMenos NUMERICA_AUX
    (145) nt_sigMenos -> . empty
    (160) empty -> .

    cteInt          reduce using rule 160 (empty -> .)
    cteFloat        reduce using rule 160 (empty -> .)

    nt_sigMenos                    shift and go to state 217
    empty                          shift and go to state 216

state 176

    (87) ESCRITURA -> cwrite left_par EXPRESION . nt_escribir right_par semicolon
    (88) nt_escribir -> . empty
    (160) empty -> .

    right_par       reduce using rule 160 (empty -> .)

    nt_escribir                    shift and go to state 218
    empty                          shift and go to state 219

state 177

    (158) nt_pushPOper -> empty .

    left_par        reduce using rule 158 (nt_pushPOper -> empty .)
    id              reduce using rule 158 (nt_pushPOper -> empty .)
    plus            reduce using rule 158 (nt_pushPOper -> empty .)
    minus           reduce using rule 158 (nt_pushPOper -> empty .)
    true            reduce using rule 158 (nt_pushPOper -> empty .)
    false           reduce using rule 158 (nt_pushPOper -> empty .)
    cteString       reduce using rule 158 (nt_pushPOper -> empty .)
    cteInt          reduce using rule 158 (nt_pushPOper -> empty .)
    cteFloat        reduce using rule 158 (nt_pushPOper -> empty .)
    not             reduce using rule 158 (nt_pushPOper -> empty .)


state 178

    (153) ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper . EXPRESION nt_checaEquals semicolon
    (94) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (96) EXPRESION_NOT -> . not nt_pushPOper
    (97) EXPRESION_NOT -> . empty
    (160) empty -> .

    not             shift and go to state 154
    left_par        reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    plus            reduce using rule 160 (empty -> .)
    minus           reduce using rule 160 (empty -> .)
    true            reduce using rule 160 (empty -> .)
    false           reduce using rule 160 (empty -> .)
    cteString       reduce using rule 160 (empty -> .)
    cteInt          reduce using rule 160 (empty -> .)
    cteFloat        reduce using rule 160 (empty -> .)

    EXPRESION                      shift and go to state 220
    EXPRESION_NOT                  shift and go to state 153
    empty                          shift and go to state 155

state 179

    (82) CICLO -> while nt_saltoLoop left_par . EXPRESION nt_checarBool right_par CUERPO nt_pushLoop
    (94) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (96) EXPRESION_NOT -> . not nt_pushPOper
    (97) EXPRESION_NOT -> . empty
    (160) empty -> .

    not             shift and go to state 154
    left_par        reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    plus            reduce using rule 160 (empty -> .)
    minus           reduce using rule 160 (empty -> .)
    true            reduce using rule 160 (empty -> .)
    false           reduce using rule 160 (empty -> .)
    cteString       reduce using rule 160 (empty -> .)
    cteInt          reduce using rule 160 (empty -> .)
    cteFloat        reduce using rule 160 (empty -> .)

    EXPRESION                      shift and go to state 221
    EXPRESION_NOT                  shift and go to state 153
    empty                          shift and go to state 155

state 180

    (62) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC . right_cb

    right_cb        shift and go to state 222


state 181

    (44) CUERPOFUNC_VARS -> empty .

    if              reduce using rule 44 (CUERPOFUNC_VARS -> empty .)
    while           reduce using rule 44 (CUERPOFUNC_VARS -> empty .)
    cread           reduce using rule 44 (CUERPOFUNC_VARS -> empty .)
    cwrite          reduce using rule 44 (CUERPOFUNC_VARS -> empty .)
    id              reduce using rule 44 (CUERPOFUNC_VARS -> empty .)
    list            reduce using rule 44 (CUERPOFUNC_VARS -> empty .)
    var             reduce using rule 44 (CUERPOFUNC_VARS -> empty .)
    return          reduce using rule 44 (CUERPOFUNC_VARS -> empty .)
    right_cb        reduce using rule 44 (CUERPOFUNC_VARS -> empty .)


state 182

    (65) VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO id . nt_agregarParametro
    (61) nt_agregarParametro -> . empty
    (160) empty -> .

    right_par       reduce using rule 160 (empty -> .)
    comma           reduce using rule 160 (empty -> .)

    empty                          shift and go to state 120
    nt_agregarParametro            shift and go to state 223

state 183

    (19) VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb . nt_agregarDicVar
    (22) nt_agregarDicVar -> . empty
    (160) empty -> .

    semicolon       reduce using rule 160 (empty -> .)
    comma           reduce using rule 160 (empty -> .)

    nt_agregarDicVar               shift and go to state 224
    empty                          shift and go to state 71

state 184

    (49) CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX . RETORNO
    (52) RETORNO -> . return EXP semicolon

    return          shift and go to state 188

    RETORNO                        shift and go to state 225

state 185

    (47) CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .

    int             reduce using rule 47 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)
    float           reduce using rule 47 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)
    bool            reduce using rule 47 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)
    string          reduce using rule 47 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)
    void            reduce using rule 47 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)
    main            reduce using rule 47 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)


state 186

    (41) CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS . nt_funcInicio CUERPOFUNC_ESTATUTO
    (42) nt_funcInicio -> . empty
    (160) empty -> .

    if              reduce using rule 160 (empty -> .)
    while           reduce using rule 160 (empty -> .)
    cread           reduce using rule 160 (empty -> .)
    cwrite          reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    list            reduce using rule 160 (empty -> .)
    var             reduce using rule 160 (empty -> .)
    return          reduce using rule 160 (empty -> .)
    right_cb        reduce using rule 160 (empty -> .)

    empty                          shift and go to state 189
    nt_funcInicio                  shift and go to state 226

state 187

    (48) CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .

    right_cb        reduce using rule 48 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    list            reduce using rule 48 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    var             reduce using rule 48 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    return          reduce using rule 48 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    if              reduce using rule 48 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    while           reduce using rule 48 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    cread           reduce using rule 48 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    cwrite          reduce using rule 48 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    id              reduce using rule 48 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)


state 188

    (52) RETORNO -> return . EXP semicolon
    (110) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (115) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (120) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (121) FACTOR -> . CONSTANTE
    (122) FACTOR -> . LISTA
    (123) FACTOR -> . FACTOR_AUX
    (138) CONSTANTE -> . NUMERICA
    (139) CONSTANTE -> . BOOLEANA
    (140) CONSTANTE -> . STRINGS
    (137) LISTA -> . id left_sb EXP right_sb
    (124) FACTOR_AUX -> . id nt_pushPilaO
    (125) FACTOR_AUX -> . id nt_verificaFuncId LLAMADA_F
    (141) NUMERICA -> . NUMERICA_AUX
    (142) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (143) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (150) BOOLEANA -> . true
    (151) BOOLEANA -> . false
    (152) STRINGS -> . cteString
    (146) NUMERICA_AUX -> . cteInt nt_pushInt
    (147) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 166
    id              shift and go to state 161
    plus            shift and go to state 162
    minus           shift and go to state 175
    true            shift and go to state 167
    false           shift and go to state 157
    cteString       shift and go to state 165
    cteInt          shift and go to state 170
    cteFloat        shift and go to state 159

    BOOLEANA                       shift and go to state 160
    EXP                            shift and go to state 227
    FACTOR_AUX                     shift and go to state 163
    NUMERICA_AUX                   shift and go to state 171
    TERMINO                        shift and go to state 164
    STRINGS                        shift and go to state 168
    CONSTANTE                      shift and go to state 169
    NUMERICA                       shift and go to state 172
    FACTOR                         shift and go to state 173
    LISTA                          shift and go to state 174

state 189

    (42) nt_funcInicio -> empty .

    if              reduce using rule 42 (nt_funcInicio -> empty .)
    while           reduce using rule 42 (nt_funcInicio -> empty .)
    cread           reduce using rule 42 (nt_funcInicio -> empty .)
    cwrite          reduce using rule 42 (nt_funcInicio -> empty .)
    id              reduce using rule 42 (nt_funcInicio -> empty .)
    list            reduce using rule 42 (nt_funcInicio -> empty .)
    var             reduce using rule 42 (nt_funcInicio -> empty .)
    return          reduce using rule 42 (nt_funcInicio -> empty .)
    right_cb        reduce using rule 42 (nt_funcInicio -> empty .)


state 190

    (40) CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio . CUERPOFUNC_ESTATUTO
    (45) CUERPOFUNC_ESTATUTO -> . ESTATUTO
    (46) CUERPOFUNC_ESTATUTO -> . empty
    (66) ESTATUTO -> . ASIGNACION
    (67) ESTATUTO -> . CONDICION
    (68) ESTATUTO -> . CICLO
    (69) ESTATUTO -> . LECTURA
    (70) ESTATUTO -> . ESCRITURA
    (71) ESTATUTO -> . LLAMADA
    (160) empty -> .
    (153) ASIGNACION -> . ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon
    (72) CONDICION -> . if CONDICION_AUX
    (82) CICLO -> . while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop
    (85) LECTURA -> . cread left_par id nt_leer right_par semicolon
    (87) ESCRITURA -> . cwrite left_par EXPRESION nt_escribir right_par semicolon
    (89) LLAMADA -> . id nt_verificaFuncId left_par nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par semicolon nt_pushGoSub
    (155) ASIGNACION_AUX -> . id nt_pushPilaO
    (156) ASIGNACION_AUX -> . LISTA
    (137) LISTA -> . id left_sb EXP right_sb

  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for cread resolved as shift
  ! shift/reduce conflict for cwrite resolved as shift
  ! shift/reduce conflict for id resolved as shift
    list            reduce using rule 160 (empty -> .)
    var             reduce using rule 160 (empty -> .)
    return          reduce using rule 160 (empty -> .)
    right_cb        reduce using rule 160 (empty -> .)
    if              shift and go to state 100
    while           shift and go to state 111
    cread           shift and go to state 98
    cwrite          shift and go to state 104
    id              shift and go to state 103

  ! if              [ reduce using rule 160 (empty -> .) ]
  ! while           [ reduce using rule 160 (empty -> .) ]
  ! cread           [ reduce using rule 160 (empty -> .) ]
  ! cwrite          [ reduce using rule 160 (empty -> .) ]
  ! id              [ reduce using rule 160 (empty -> .) ]

    CICLO                          shift and go to state 97
    LECTURA                        shift and go to state 99
    ESCRITURA                      shift and go to state 106
    CUERPOFUNC_ESTATUTO            shift and go to state 228
    ASIGNACION                     shift and go to state 101
    ESTATUTO                       shift and go to state 229
    ASIGNACION_AUX                 shift and go to state 105
    empty                          shift and go to state 230
    LLAMADA                        shift and go to state 108
    CONDICION                      shift and go to state 109
    LISTA                          shift and go to state 112

state 191

    (59) FUNC_PARA -> FUNC_PARA comma TIPO id nt_agregarParametro .

    right_par       reduce using rule 59 (FUNC_PARA -> FUNC_PARA comma TIPO id nt_agregarParametro .)
    comma           reduce using rule 59 (FUNC_PARA -> FUNC_PARA comma TIPO id nt_agregarParametro .)


state 192

    (85) LECTURA -> cread left_par id nt_leer . right_par semicolon

    right_par       shift and go to state 231


state 193

    (86) nt_leer -> empty .

    right_par       reduce using rule 86 (nt_leer -> empty .)


state 194

    (73) CONDICION_AUX -> left_par EXPRESION nt_checarBool . right_par CUERPO ELSE_ELIF nt_pushSalto

    right_par       shift and go to state 232


state 195

    (79) nt_checarBool -> empty .

    right_par       reduce using rule 79 (nt_checarBool -> empty .)


state 196

    (94) EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA . nt_checaAndOrNot EXPRESION_B
    (95) nt_checaAndOrNot -> . empty
    (160) empty -> .

    and             reduce using rule 160 (empty -> .)
    or              reduce using rule 160 (empty -> .)
    right_par       reduce using rule 160 (empty -> .)
    semicolon       reduce using rule 160 (empty -> .)
    comma           reduce using rule 160 (empty -> .)

    nt_checaAndOrNot               shift and go to state 233
    empty                          shift and go to state 234

state 197

    (101) EXPRESIONLOGICA -> EXP . EXPRESIONLOGICA_AUX
    (102) EXPRESIONLOGICA_AUX -> . lt nt_pushPOper EXP nt_checarRelop
    (103) EXPRESIONLOGICA_AUX -> . gt nt_pushPOper EXP nt_checarRelop
    (104) EXPRESIONLOGICA_AUX -> . ne nt_pushPOper EXP nt_checarRelop
    (105) EXPRESIONLOGICA_AUX -> . ge nt_pushPOper EXP nt_checarRelop
    (106) EXPRESIONLOGICA_AUX -> . le nt_pushPOper EXP nt_checarRelop
    (107) EXPRESIONLOGICA_AUX -> . et nt_pushPOper EXP nt_checarRelop
    (108) EXPRESIONLOGICA_AUX -> . empty
    (160) empty -> .

    lt              shift and go to state 239
    gt              shift and go to state 236
    ne              shift and go to state 238
    ge              shift and go to state 235
    le              shift and go to state 240
    et              shift and go to state 241
    and             reduce using rule 160 (empty -> .)
    or              reduce using rule 160 (empty -> .)
    right_par       reduce using rule 160 (empty -> .)
    semicolon       reduce using rule 160 (empty -> .)
    comma           reduce using rule 160 (empty -> .)

    empty                          shift and go to state 242
    EXPRESIONLOGICA_AUX            shift and go to state 237

state 198

    (96) EXPRESION_NOT -> not nt_pushPOper .

    left_par        reduce using rule 96 (EXPRESION_NOT -> not nt_pushPOper .)
    id              reduce using rule 96 (EXPRESION_NOT -> not nt_pushPOper .)
    plus            reduce using rule 96 (EXPRESION_NOT -> not nt_pushPOper .)
    minus           reduce using rule 96 (EXPRESION_NOT -> not nt_pushPOper .)
    true            reduce using rule 96 (EXPRESION_NOT -> not nt_pushPOper .)
    false           reduce using rule 96 (EXPRESION_NOT -> not nt_pushPOper .)
    cteString       reduce using rule 96 (EXPRESION_NOT -> not nt_pushPOper .)
    cteInt          reduce using rule 96 (EXPRESION_NOT -> not nt_pushPOper .)
    cteFloat        reduce using rule 96 (EXPRESION_NOT -> not nt_pushPOper .)


state 199

    (89) LLAMADA -> id nt_verificaFuncId left_par nt_startERA . LLAMADA_EXPRESION nt_verificaUltimo right_par semicolon nt_pushGoSub
    (90) LLAMADA_EXPRESION -> . LLAMADA_EXPRESION_AUX
    (91) LLAMADA_EXPRESION -> . empty
    (92) LLAMADA_EXPRESION_AUX -> . EXPRESION nt_verifyArgType
    (93) LLAMADA_EXPRESION_AUX -> . LLAMADA_EXPRESION_AUX comma nt_paramPP EXPRESION nt_verifyArgType
    (160) empty -> .
    (94) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (96) EXPRESION_NOT -> . not nt_pushPOper
    (97) EXPRESION_NOT -> . empty

    right_par       reduce using rule 160 (empty -> .)
    left_par        reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    plus            reduce using rule 160 (empty -> .)
    minus           reduce using rule 160 (empty -> .)
    true            reduce using rule 160 (empty -> .)
    false           reduce using rule 160 (empty -> .)
    cteString       reduce using rule 160 (empty -> .)
    cteInt          reduce using rule 160 (empty -> .)
    cteFloat        reduce using rule 160 (empty -> .)
    not             shift and go to state 154

    EXPRESION                      shift and go to state 243
    EXPRESION_NOT                  shift and go to state 153
    LLAMADA_EXPRESION              shift and go to state 244
    LLAMADA_EXPRESION_AUX          shift and go to state 245
    empty                          shift and go to state 246

state 200

    (133) nt_startERA -> empty .

    not             reduce using rule 133 (nt_startERA -> empty .)
    right_par       reduce using rule 133 (nt_startERA -> empty .)
    left_par        reduce using rule 133 (nt_startERA -> empty .)
    id              reduce using rule 133 (nt_startERA -> empty .)
    plus            reduce using rule 133 (nt_startERA -> empty .)
    minus           reduce using rule 133 (nt_startERA -> empty .)
    true            reduce using rule 133 (nt_startERA -> empty .)
    false           reduce using rule 133 (nt_startERA -> empty .)
    cteString       reduce using rule 133 (nt_startERA -> empty .)
    cteInt          reduce using rule 133 (nt_startERA -> empty .)
    cteFloat        reduce using rule 133 (nt_startERA -> empty .)


state 201

    (137) LISTA -> id left_sb EXP right_sb .

    equals          reduce using rule 137 (LISTA -> id left_sb EXP right_sb .)
    multiply        reduce using rule 137 (LISTA -> id left_sb EXP right_sb .)
    divide          reduce using rule 137 (LISTA -> id left_sb EXP right_sb .)
    plus            reduce using rule 137 (LISTA -> id left_sb EXP right_sb .)
    minus           reduce using rule 137 (LISTA -> id left_sb EXP right_sb .)
    and             reduce using rule 137 (LISTA -> id left_sb EXP right_sb .)
    or              reduce using rule 137 (LISTA -> id left_sb EXP right_sb .)
    right_par       reduce using rule 137 (LISTA -> id left_sb EXP right_sb .)
    semicolon       reduce using rule 137 (LISTA -> id left_sb EXP right_sb .)
    comma           reduce using rule 137 (LISTA -> id left_sb EXP right_sb .)
    right_sb        reduce using rule 137 (LISTA -> id left_sb EXP right_sb .)
    lt              reduce using rule 137 (LISTA -> id left_sb EXP right_sb .)
    gt              reduce using rule 137 (LISTA -> id left_sb EXP right_sb .)
    ne              reduce using rule 137 (LISTA -> id left_sb EXP right_sb .)
    ge              reduce using rule 137 (LISTA -> id left_sb EXP right_sb .)
    le              reduce using rule 137 (LISTA -> id left_sb EXP right_sb .)
    et              reduce using rule 137 (LISTA -> id left_sb EXP right_sb .)


state 202

    (147) NUMERICA_AUX -> cteFloat nt_pushFloat .

    multiply        reduce using rule 147 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    divide          reduce using rule 147 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    plus            reduce using rule 147 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    minus           reduce using rule 147 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    right_sb        reduce using rule 147 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    lt              reduce using rule 147 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    gt              reduce using rule 147 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    ne              reduce using rule 147 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    ge              reduce using rule 147 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    le              reduce using rule 147 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    et              reduce using rule 147 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    and             reduce using rule 147 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    or              reduce using rule 147 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    right_par       reduce using rule 147 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    semicolon       reduce using rule 147 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    comma           reduce using rule 147 (NUMERICA_AUX -> cteFloat nt_pushFloat .)


state 203

    (149) nt_pushFloat -> empty .

    multiply        reduce using rule 149 (nt_pushFloat -> empty .)
    divide          reduce using rule 149 (nt_pushFloat -> empty .)
    plus            reduce using rule 149 (nt_pushFloat -> empty .)
    minus           reduce using rule 149 (nt_pushFloat -> empty .)
    right_sb        reduce using rule 149 (nt_pushFloat -> empty .)
    lt              reduce using rule 149 (nt_pushFloat -> empty .)
    gt              reduce using rule 149 (nt_pushFloat -> empty .)
    ne              reduce using rule 149 (nt_pushFloat -> empty .)
    ge              reduce using rule 149 (nt_pushFloat -> empty .)
    le              reduce using rule 149 (nt_pushFloat -> empty .)
    et              reduce using rule 149 (nt_pushFloat -> empty .)
    and             reduce using rule 149 (nt_pushFloat -> empty .)
    or              reduce using rule 149 (nt_pushFloat -> empty .)
    right_par       reduce using rule 149 (nt_pushFloat -> empty .)
    semicolon       reduce using rule 149 (nt_pushFloat -> empty .)
    comma           reduce using rule 149 (nt_pushFloat -> empty .)


state 204

    (125) FACTOR_AUX -> id nt_verificaFuncId . LLAMADA_F
    (127) LLAMADA_F -> . left_par nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_pushGoSub

    left_par        shift and go to state 247

    LLAMADA_F                      shift and go to state 248

state 205

    (124) FACTOR_AUX -> id nt_pushPilaO .

    multiply        reduce using rule 124 (FACTOR_AUX -> id nt_pushPilaO .)
    divide          reduce using rule 124 (FACTOR_AUX -> id nt_pushPilaO .)
    plus            reduce using rule 124 (FACTOR_AUX -> id nt_pushPilaO .)
    minus           reduce using rule 124 (FACTOR_AUX -> id nt_pushPilaO .)
    and             reduce using rule 124 (FACTOR_AUX -> id nt_pushPilaO .)
    or              reduce using rule 124 (FACTOR_AUX -> id nt_pushPilaO .)
    right_par       reduce using rule 124 (FACTOR_AUX -> id nt_pushPilaO .)
    semicolon       reduce using rule 124 (FACTOR_AUX -> id nt_pushPilaO .)
    comma           reduce using rule 124 (FACTOR_AUX -> id nt_pushPilaO .)
    right_sb        reduce using rule 124 (FACTOR_AUX -> id nt_pushPilaO .)
    lt              reduce using rule 124 (FACTOR_AUX -> id nt_pushPilaO .)
    gt              reduce using rule 124 (FACTOR_AUX -> id nt_pushPilaO .)
    ne              reduce using rule 124 (FACTOR_AUX -> id nt_pushPilaO .)
    ge              reduce using rule 124 (FACTOR_AUX -> id nt_pushPilaO .)
    le              reduce using rule 124 (FACTOR_AUX -> id nt_pushPilaO .)
    et              reduce using rule 124 (FACTOR_AUX -> id nt_pushPilaO .)


state 206

    (157) nt_pushPilaO -> empty .
    (126) nt_verificaFuncId -> empty .

    multiply        reduce using rule 157 (nt_pushPilaO -> empty .)
    divide          reduce using rule 157 (nt_pushPilaO -> empty .)
    plus            reduce using rule 157 (nt_pushPilaO -> empty .)
    minus           reduce using rule 157 (nt_pushPilaO -> empty .)
    right_sb        reduce using rule 157 (nt_pushPilaO -> empty .)
    lt              reduce using rule 157 (nt_pushPilaO -> empty .)
    gt              reduce using rule 157 (nt_pushPilaO -> empty .)
    ne              reduce using rule 157 (nt_pushPilaO -> empty .)
    ge              reduce using rule 157 (nt_pushPilaO -> empty .)
    le              reduce using rule 157 (nt_pushPilaO -> empty .)
    et              reduce using rule 157 (nt_pushPilaO -> empty .)
    and             reduce using rule 157 (nt_pushPilaO -> empty .)
    or              reduce using rule 157 (nt_pushPilaO -> empty .)
    right_par       reduce using rule 157 (nt_pushPilaO -> empty .)
    semicolon       reduce using rule 157 (nt_pushPilaO -> empty .)
    comma           reduce using rule 157 (nt_pushPilaO -> empty .)
    left_par        reduce using rule 126 (nt_verificaFuncId -> empty .)


state 207

    (142) NUMERICA -> plus nt_sigMas . NUMERICA_AUX
    (146) NUMERICA_AUX -> . cteInt nt_pushInt
    (147) NUMERICA_AUX -> . cteFloat nt_pushFloat

    cteInt          shift and go to state 170
    cteFloat        shift and go to state 159

    NUMERICA_AUX                   shift and go to state 249

state 208

    (144) nt_sigMas -> empty .

    cteInt          reduce using rule 144 (nt_sigMas -> empty .)
    cteFloat        reduce using rule 144 (nt_sigMas -> empty .)


state 209

    (111) nt_checar_sumas -> empty .

    plus            reduce using rule 111 (nt_checar_sumas -> empty .)
    minus           reduce using rule 111 (nt_checar_sumas -> empty .)
    right_sb        reduce using rule 111 (nt_checar_sumas -> empty .)
    lt              reduce using rule 111 (nt_checar_sumas -> empty .)
    gt              reduce using rule 111 (nt_checar_sumas -> empty .)
    ne              reduce using rule 111 (nt_checar_sumas -> empty .)
    ge              reduce using rule 111 (nt_checar_sumas -> empty .)
    le              reduce using rule 111 (nt_checar_sumas -> empty .)
    et              reduce using rule 111 (nt_checar_sumas -> empty .)
    and             reduce using rule 111 (nt_checar_sumas -> empty .)
    or              reduce using rule 111 (nt_checar_sumas -> empty .)
    right_par       reduce using rule 111 (nt_checar_sumas -> empty .)
    semicolon       reduce using rule 111 (nt_checar_sumas -> empty .)
    comma           reduce using rule 111 (nt_checar_sumas -> empty .)


state 210

    (110) EXP -> TERMINO nt_checar_sumas . EXP_AUX
    (112) EXP_AUX -> . plus nt_pushPOper EXP
    (113) EXP_AUX -> . minus nt_pushPOper EXP
    (114) EXP_AUX -> . empty
    (160) empty -> .

    plus            shift and go to state 252
    minus           shift and go to state 250
    right_sb        reduce using rule 160 (empty -> .)
    lt              reduce using rule 160 (empty -> .)
    gt              reduce using rule 160 (empty -> .)
    ne              reduce using rule 160 (empty -> .)
    ge              reduce using rule 160 (empty -> .)
    le              reduce using rule 160 (empty -> .)
    et              reduce using rule 160 (empty -> .)
    and             reduce using rule 160 (empty -> .)
    or              reduce using rule 160 (empty -> .)
    right_par       reduce using rule 160 (empty -> .)
    semicolon       reduce using rule 160 (empty -> .)
    comma           reduce using rule 160 (empty -> .)

    EXP_AUX                        shift and go to state 253
    empty                          shift and go to state 251

state 211

    (120) FACTOR -> left_par nt_pushPOper . EXPRESION right_par nt_popPOper
    (94) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (96) EXPRESION_NOT -> . not nt_pushPOper
    (97) EXPRESION_NOT -> . empty
    (160) empty -> .

    not             shift and go to state 154
    left_par        reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    plus            reduce using rule 160 (empty -> .)
    minus           reduce using rule 160 (empty -> .)
    true            reduce using rule 160 (empty -> .)
    false           reduce using rule 160 (empty -> .)
    cteString       reduce using rule 160 (empty -> .)
    cteInt          reduce using rule 160 (empty -> .)
    cteFloat        reduce using rule 160 (empty -> .)

    EXPRESION                      shift and go to state 254
    EXPRESION_NOT                  shift and go to state 153
    empty                          shift and go to state 155

state 212

    (148) nt_pushInt -> empty .

    multiply        reduce using rule 148 (nt_pushInt -> empty .)
    divide          reduce using rule 148 (nt_pushInt -> empty .)
    plus            reduce using rule 148 (nt_pushInt -> empty .)
    minus           reduce using rule 148 (nt_pushInt -> empty .)
    right_sb        reduce using rule 148 (nt_pushInt -> empty .)
    lt              reduce using rule 148 (nt_pushInt -> empty .)
    gt              reduce using rule 148 (nt_pushInt -> empty .)
    ne              reduce using rule 148 (nt_pushInt -> empty .)
    ge              reduce using rule 148 (nt_pushInt -> empty .)
    le              reduce using rule 148 (nt_pushInt -> empty .)
    et              reduce using rule 148 (nt_pushInt -> empty .)
    and             reduce using rule 148 (nt_pushInt -> empty .)
    or              reduce using rule 148 (nt_pushInt -> empty .)
    right_par       reduce using rule 148 (nt_pushInt -> empty .)
    semicolon       reduce using rule 148 (nt_pushInt -> empty .)
    comma           reduce using rule 148 (nt_pushInt -> empty .)


state 213

    (146) NUMERICA_AUX -> cteInt nt_pushInt .

    multiply        reduce using rule 146 (NUMERICA_AUX -> cteInt nt_pushInt .)
    divide          reduce using rule 146 (NUMERICA_AUX -> cteInt nt_pushInt .)
    plus            reduce using rule 146 (NUMERICA_AUX -> cteInt nt_pushInt .)
    minus           reduce using rule 146 (NUMERICA_AUX -> cteInt nt_pushInt .)
    right_sb        reduce using rule 146 (NUMERICA_AUX -> cteInt nt_pushInt .)
    lt              reduce using rule 146 (NUMERICA_AUX -> cteInt nt_pushInt .)
    gt              reduce using rule 146 (NUMERICA_AUX -> cteInt nt_pushInt .)
    ne              reduce using rule 146 (NUMERICA_AUX -> cteInt nt_pushInt .)
    ge              reduce using rule 146 (NUMERICA_AUX -> cteInt nt_pushInt .)
    le              reduce using rule 146 (NUMERICA_AUX -> cteInt nt_pushInt .)
    et              reduce using rule 146 (NUMERICA_AUX -> cteInt nt_pushInt .)
    and             reduce using rule 146 (NUMERICA_AUX -> cteInt nt_pushInt .)
    or              reduce using rule 146 (NUMERICA_AUX -> cteInt nt_pushInt .)
    right_par       reduce using rule 146 (NUMERICA_AUX -> cteInt nt_pushInt .)
    semicolon       reduce using rule 146 (NUMERICA_AUX -> cteInt nt_pushInt .)
    comma           reduce using rule 146 (NUMERICA_AUX -> cteInt nt_pushInt .)


state 214

    (115) TERMINO -> FACTOR nt_checar_multis . TERMINO_AUX
    (117) TERMINO_AUX -> . multiply nt_pushPOper TERMINO
    (118) TERMINO_AUX -> . divide nt_pushPOper TERMINO
    (119) TERMINO_AUX -> . empty
    (160) empty -> .

    multiply        shift and go to state 257
    divide          shift and go to state 256
    plus            reduce using rule 160 (empty -> .)
    minus           reduce using rule 160 (empty -> .)
    right_sb        reduce using rule 160 (empty -> .)
    lt              reduce using rule 160 (empty -> .)
    gt              reduce using rule 160 (empty -> .)
    ne              reduce using rule 160 (empty -> .)
    ge              reduce using rule 160 (empty -> .)
    le              reduce using rule 160 (empty -> .)
    et              reduce using rule 160 (empty -> .)
    and             reduce using rule 160 (empty -> .)
    or              reduce using rule 160 (empty -> .)
    right_par       reduce using rule 160 (empty -> .)
    semicolon       reduce using rule 160 (empty -> .)
    comma           reduce using rule 160 (empty -> .)

    TERMINO_AUX                    shift and go to state 255
    empty                          shift and go to state 258

state 215

    (116) nt_checar_multis -> empty .

    multiply        reduce using rule 116 (nt_checar_multis -> empty .)
    divide          reduce using rule 116 (nt_checar_multis -> empty .)
    plus            reduce using rule 116 (nt_checar_multis -> empty .)
    minus           reduce using rule 116 (nt_checar_multis -> empty .)
    right_sb        reduce using rule 116 (nt_checar_multis -> empty .)
    lt              reduce using rule 116 (nt_checar_multis -> empty .)
    gt              reduce using rule 116 (nt_checar_multis -> empty .)
    ne              reduce using rule 116 (nt_checar_multis -> empty .)
    ge              reduce using rule 116 (nt_checar_multis -> empty .)
    le              reduce using rule 116 (nt_checar_multis -> empty .)
    et              reduce using rule 116 (nt_checar_multis -> empty .)
    and             reduce using rule 116 (nt_checar_multis -> empty .)
    or              reduce using rule 116 (nt_checar_multis -> empty .)
    right_par       reduce using rule 116 (nt_checar_multis -> empty .)
    semicolon       reduce using rule 116 (nt_checar_multis -> empty .)
    comma           reduce using rule 116 (nt_checar_multis -> empty .)


state 216

    (145) nt_sigMenos -> empty .

    cteInt          reduce using rule 145 (nt_sigMenos -> empty .)
    cteFloat        reduce using rule 145 (nt_sigMenos -> empty .)


state 217

    (143) NUMERICA -> minus nt_sigMenos . NUMERICA_AUX
    (146) NUMERICA_AUX -> . cteInt nt_pushInt
    (147) NUMERICA_AUX -> . cteFloat nt_pushFloat

    cteInt          shift and go to state 170
    cteFloat        shift and go to state 159

    NUMERICA_AUX                   shift and go to state 259

state 218

    (87) ESCRITURA -> cwrite left_par EXPRESION nt_escribir . right_par semicolon

    right_par       shift and go to state 260


state 219

    (88) nt_escribir -> empty .

    right_par       reduce using rule 88 (nt_escribir -> empty .)


state 220

    (153) ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION . nt_checaEquals semicolon
    (154) nt_checaEquals -> . empty
    (160) empty -> .

    semicolon       reduce using rule 160 (empty -> .)

    nt_checaEquals                 shift and go to state 261
    empty                          shift and go to state 262

state 221

    (82) CICLO -> while nt_saltoLoop left_par EXPRESION . nt_checarBool right_par CUERPO nt_pushLoop
    (79) nt_checarBool -> . empty
    (160) empty -> .

    right_par       reduce using rule 160 (empty -> .)

    nt_checarBool                  shift and go to state 263
    empty                          shift and go to state 195

state 222

    (62) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .

    int             reduce using rule 62 (VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)
    float           reduce using rule 62 (VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)
    bool            reduce using rule 62 (VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)
    string          reduce using rule 62 (VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)
    void            reduce using rule 62 (VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)
    main            reduce using rule 62 (VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)


state 223

    (65) VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO id nt_agregarParametro .

    right_par       reduce using rule 65 (VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO id nt_agregarParametro .)
    comma           reduce using rule 65 (VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO id nt_agregarParametro .)


state 224

    (19) VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar .

    semicolon       reduce using rule 19 (VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar .)
    comma           reduce using rule 19 (VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar .)


state 225

    (49) CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .

    right_cb        reduce using rule 49 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    list            reduce using rule 49 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    var             reduce using rule 49 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    return          reduce using rule 49 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    if              reduce using rule 49 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    while           reduce using rule 49 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    cread           reduce using rule 49 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    cwrite          reduce using rule 49 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    id              reduce using rule 49 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)


state 226

    (41) CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio . CUERPOFUNC_ESTATUTO
    (45) CUERPOFUNC_ESTATUTO -> . ESTATUTO
    (46) CUERPOFUNC_ESTATUTO -> . empty
    (66) ESTATUTO -> . ASIGNACION
    (67) ESTATUTO -> . CONDICION
    (68) ESTATUTO -> . CICLO
    (69) ESTATUTO -> . LECTURA
    (70) ESTATUTO -> . ESCRITURA
    (71) ESTATUTO -> . LLAMADA
    (160) empty -> .
    (153) ASIGNACION -> . ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon
    (72) CONDICION -> . if CONDICION_AUX
    (82) CICLO -> . while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop
    (85) LECTURA -> . cread left_par id nt_leer right_par semicolon
    (87) ESCRITURA -> . cwrite left_par EXPRESION nt_escribir right_par semicolon
    (89) LLAMADA -> . id nt_verificaFuncId left_par nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par semicolon nt_pushGoSub
    (155) ASIGNACION_AUX -> . id nt_pushPilaO
    (156) ASIGNACION_AUX -> . LISTA
    (137) LISTA -> . id left_sb EXP right_sb

  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for cread resolved as shift
  ! shift/reduce conflict for cwrite resolved as shift
  ! shift/reduce conflict for id resolved as shift
    list            reduce using rule 160 (empty -> .)
    var             reduce using rule 160 (empty -> .)
    return          reduce using rule 160 (empty -> .)
    right_cb        reduce using rule 160 (empty -> .)
    if              shift and go to state 100
    while           shift and go to state 111
    cread           shift and go to state 98
    cwrite          shift and go to state 104
    id              shift and go to state 103

  ! if              [ reduce using rule 160 (empty -> .) ]
  ! while           [ reduce using rule 160 (empty -> .) ]
  ! cread           [ reduce using rule 160 (empty -> .) ]
  ! cwrite          [ reduce using rule 160 (empty -> .) ]
  ! id              [ reduce using rule 160 (empty -> .) ]

    CICLO                          shift and go to state 97
    LECTURA                        shift and go to state 99
    ESCRITURA                      shift and go to state 106
    CUERPOFUNC_ESTATUTO            shift and go to state 264
    ASIGNACION                     shift and go to state 101
    ESTATUTO                       shift and go to state 229
    ASIGNACION_AUX                 shift and go to state 105
    empty                          shift and go to state 230
    LLAMADA                        shift and go to state 108
    CONDICION                      shift and go to state 109
    LISTA                          shift and go to state 112

state 227

    (52) RETORNO -> return EXP . semicolon

    semicolon       shift and go to state 265


state 228

    (40) CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .

    list            reduce using rule 40 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    var             reduce using rule 40 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    if              reduce using rule 40 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    while           reduce using rule 40 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    cread           reduce using rule 40 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    cwrite          reduce using rule 40 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    id              reduce using rule 40 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    right_cb        reduce using rule 40 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    return          reduce using rule 40 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)


state 229

    (45) CUERPOFUNC_ESTATUTO -> ESTATUTO .

    list            reduce using rule 45 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    var             reduce using rule 45 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    if              reduce using rule 45 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    while           reduce using rule 45 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    cread           reduce using rule 45 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    cwrite          reduce using rule 45 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    id              reduce using rule 45 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    return          reduce using rule 45 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    right_cb        reduce using rule 45 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)


state 230

    (46) CUERPOFUNC_ESTATUTO -> empty .

    list            reduce using rule 46 (CUERPOFUNC_ESTATUTO -> empty .)
    var             reduce using rule 46 (CUERPOFUNC_ESTATUTO -> empty .)
    if              reduce using rule 46 (CUERPOFUNC_ESTATUTO -> empty .)
    while           reduce using rule 46 (CUERPOFUNC_ESTATUTO -> empty .)
    cread           reduce using rule 46 (CUERPOFUNC_ESTATUTO -> empty .)
    cwrite          reduce using rule 46 (CUERPOFUNC_ESTATUTO -> empty .)
    id              reduce using rule 46 (CUERPOFUNC_ESTATUTO -> empty .)
    return          reduce using rule 46 (CUERPOFUNC_ESTATUTO -> empty .)
    right_cb        reduce using rule 46 (CUERPOFUNC_ESTATUTO -> empty .)


state 231

    (85) LECTURA -> cread left_par id nt_leer right_par . semicolon

    semicolon       shift and go to state 266


state 232

    (73) CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par . CUERPO ELSE_ELIF nt_pushSalto
    (32) CUERPO -> . left_cb CUERPO_AUX right_cb

    left_cb         shift and go to state 76

    CUERPO                         shift and go to state 267

state 233

    (94) EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot . EXPRESION_B
    (98) EXPRESION_B -> . and nt_pushPOper EXPRESION
    (99) EXPRESION_B -> . or nt_pushPOper EXPRESION
    (100) EXPRESION_B -> . empty
    (160) empty -> .

    and             shift and go to state 268
    or              shift and go to state 270
    right_par       reduce using rule 160 (empty -> .)
    semicolon       reduce using rule 160 (empty -> .)
    comma           reduce using rule 160 (empty -> .)

    EXPRESION_B                    shift and go to state 269
    empty                          shift and go to state 271

state 234

    (95) nt_checaAndOrNot -> empty .

    and             reduce using rule 95 (nt_checaAndOrNot -> empty .)
    or              reduce using rule 95 (nt_checaAndOrNot -> empty .)
    right_par       reduce using rule 95 (nt_checaAndOrNot -> empty .)
    semicolon       reduce using rule 95 (nt_checaAndOrNot -> empty .)
    comma           reduce using rule 95 (nt_checaAndOrNot -> empty .)


state 235

    (105) EXPRESIONLOGICA_AUX -> ge . nt_pushPOper EXP nt_checarRelop
    (158) nt_pushPOper -> . empty
    (160) empty -> .

    left_par        reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    plus            reduce using rule 160 (empty -> .)
    minus           reduce using rule 160 (empty -> .)
    true            reduce using rule 160 (empty -> .)
    false           reduce using rule 160 (empty -> .)
    cteString       reduce using rule 160 (empty -> .)
    cteInt          reduce using rule 160 (empty -> .)
    cteFloat        reduce using rule 160 (empty -> .)

    empty                          shift and go to state 177
    nt_pushPOper                   shift and go to state 272

state 236

    (103) EXPRESIONLOGICA_AUX -> gt . nt_pushPOper EXP nt_checarRelop
    (158) nt_pushPOper -> . empty
    (160) empty -> .

    left_par        reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    plus            reduce using rule 160 (empty -> .)
    minus           reduce using rule 160 (empty -> .)
    true            reduce using rule 160 (empty -> .)
    false           reduce using rule 160 (empty -> .)
    cteString       reduce using rule 160 (empty -> .)
    cteInt          reduce using rule 160 (empty -> .)
    cteFloat        reduce using rule 160 (empty -> .)

    empty                          shift and go to state 177
    nt_pushPOper                   shift and go to state 273

state 237

    (101) EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .

    and             reduce using rule 101 (EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .)
    or              reduce using rule 101 (EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .)
    right_par       reduce using rule 101 (EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .)
    semicolon       reduce using rule 101 (EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .)
    comma           reduce using rule 101 (EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .)


state 238

    (104) EXPRESIONLOGICA_AUX -> ne . nt_pushPOper EXP nt_checarRelop
    (158) nt_pushPOper -> . empty
    (160) empty -> .

    left_par        reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    plus            reduce using rule 160 (empty -> .)
    minus           reduce using rule 160 (empty -> .)
    true            reduce using rule 160 (empty -> .)
    false           reduce using rule 160 (empty -> .)
    cteString       reduce using rule 160 (empty -> .)
    cteInt          reduce using rule 160 (empty -> .)
    cteFloat        reduce using rule 160 (empty -> .)

    empty                          shift and go to state 177
    nt_pushPOper                   shift and go to state 274

state 239

    (102) EXPRESIONLOGICA_AUX -> lt . nt_pushPOper EXP nt_checarRelop
    (158) nt_pushPOper -> . empty
    (160) empty -> .

    left_par        reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    plus            reduce using rule 160 (empty -> .)
    minus           reduce using rule 160 (empty -> .)
    true            reduce using rule 160 (empty -> .)
    false           reduce using rule 160 (empty -> .)
    cteString       reduce using rule 160 (empty -> .)
    cteInt          reduce using rule 160 (empty -> .)
    cteFloat        reduce using rule 160 (empty -> .)

    empty                          shift and go to state 177
    nt_pushPOper                   shift and go to state 275

state 240

    (106) EXPRESIONLOGICA_AUX -> le . nt_pushPOper EXP nt_checarRelop
    (158) nt_pushPOper -> . empty
    (160) empty -> .

    left_par        reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    plus            reduce using rule 160 (empty -> .)
    minus           reduce using rule 160 (empty -> .)
    true            reduce using rule 160 (empty -> .)
    false           reduce using rule 160 (empty -> .)
    cteString       reduce using rule 160 (empty -> .)
    cteInt          reduce using rule 160 (empty -> .)
    cteFloat        reduce using rule 160 (empty -> .)

    empty                          shift and go to state 177
    nt_pushPOper                   shift and go to state 276

state 241

    (107) EXPRESIONLOGICA_AUX -> et . nt_pushPOper EXP nt_checarRelop
    (158) nt_pushPOper -> . empty
    (160) empty -> .

    left_par        reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    plus            reduce using rule 160 (empty -> .)
    minus           reduce using rule 160 (empty -> .)
    true            reduce using rule 160 (empty -> .)
    false           reduce using rule 160 (empty -> .)
    cteString       reduce using rule 160 (empty -> .)
    cteInt          reduce using rule 160 (empty -> .)
    cteFloat        reduce using rule 160 (empty -> .)

    empty                          shift and go to state 177
    nt_pushPOper                   shift and go to state 277

state 242

    (108) EXPRESIONLOGICA_AUX -> empty .

    and             reduce using rule 108 (EXPRESIONLOGICA_AUX -> empty .)
    or              reduce using rule 108 (EXPRESIONLOGICA_AUX -> empty .)
    right_par       reduce using rule 108 (EXPRESIONLOGICA_AUX -> empty .)
    semicolon       reduce using rule 108 (EXPRESIONLOGICA_AUX -> empty .)
    comma           reduce using rule 108 (EXPRESIONLOGICA_AUX -> empty .)


state 243

    (92) LLAMADA_EXPRESION_AUX -> EXPRESION . nt_verifyArgType
    (134) nt_verifyArgType -> . empty
    (160) empty -> .

    comma           reduce using rule 160 (empty -> .)
    right_par       reduce using rule 160 (empty -> .)

    empty                          shift and go to state 278
    nt_verifyArgType               shift and go to state 279

state 244

    (89) LLAMADA -> id nt_verificaFuncId left_par nt_startERA LLAMADA_EXPRESION . nt_verificaUltimo right_par semicolon nt_pushGoSub
    (135) nt_verificaUltimo -> . empty
    (160) empty -> .

    right_par       reduce using rule 160 (empty -> .)

    nt_verificaUltimo              shift and go to state 280
    empty                          shift and go to state 281

state 245

    (90) LLAMADA_EXPRESION -> LLAMADA_EXPRESION_AUX .
    (93) LLAMADA_EXPRESION_AUX -> LLAMADA_EXPRESION_AUX . comma nt_paramPP EXPRESION nt_verifyArgType

    right_par       reduce using rule 90 (LLAMADA_EXPRESION -> LLAMADA_EXPRESION_AUX .)
    comma           shift and go to state 282


state 246

    (91) LLAMADA_EXPRESION -> empty .
    (97) EXPRESION_NOT -> empty .

    right_par       reduce using rule 91 (LLAMADA_EXPRESION -> empty .)
    left_par        reduce using rule 97 (EXPRESION_NOT -> empty .)
    id              reduce using rule 97 (EXPRESION_NOT -> empty .)
    plus            reduce using rule 97 (EXPRESION_NOT -> empty .)
    minus           reduce using rule 97 (EXPRESION_NOT -> empty .)
    true            reduce using rule 97 (EXPRESION_NOT -> empty .)
    false           reduce using rule 97 (EXPRESION_NOT -> empty .)
    cteString       reduce using rule 97 (EXPRESION_NOT -> empty .)
    cteInt          reduce using rule 97 (EXPRESION_NOT -> empty .)
    cteFloat        reduce using rule 97 (EXPRESION_NOT -> empty .)


state 247

    (127) LLAMADA_F -> left_par . nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_pushGoSub
    (133) nt_startERA -> . empty
    (160) empty -> .

    not             reduce using rule 160 (empty -> .)
    right_par       reduce using rule 160 (empty -> .)
    left_par        reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    plus            reduce using rule 160 (empty -> .)
    minus           reduce using rule 160 (empty -> .)
    true            reduce using rule 160 (empty -> .)
    false           reduce using rule 160 (empty -> .)
    cteString       reduce using rule 160 (empty -> .)
    cteInt          reduce using rule 160 (empty -> .)
    cteFloat        reduce using rule 160 (empty -> .)

    nt_startERA                    shift and go to state 283
    empty                          shift and go to state 200

state 248

    (125) FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .

    multiply        reduce using rule 125 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    divide          reduce using rule 125 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    plus            reduce using rule 125 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    minus           reduce using rule 125 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    and             reduce using rule 125 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    or              reduce using rule 125 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    right_par       reduce using rule 125 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    semicolon       reduce using rule 125 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    comma           reduce using rule 125 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    right_sb        reduce using rule 125 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    lt              reduce using rule 125 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    gt              reduce using rule 125 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    ne              reduce using rule 125 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    ge              reduce using rule 125 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    le              reduce using rule 125 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    et              reduce using rule 125 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)


state 249

    (142) NUMERICA -> plus nt_sigMas NUMERICA_AUX .

    multiply        reduce using rule 142 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    divide          reduce using rule 142 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    plus            reduce using rule 142 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    minus           reduce using rule 142 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    lt              reduce using rule 142 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    gt              reduce using rule 142 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    ne              reduce using rule 142 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    ge              reduce using rule 142 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    le              reduce using rule 142 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    et              reduce using rule 142 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    and             reduce using rule 142 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    or              reduce using rule 142 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    right_par       reduce using rule 142 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    semicolon       reduce using rule 142 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    comma           reduce using rule 142 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    right_sb        reduce using rule 142 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)


state 250

    (113) EXP_AUX -> minus . nt_pushPOper EXP
    (158) nt_pushPOper -> . empty
    (160) empty -> .

    left_par        reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    plus            reduce using rule 160 (empty -> .)
    minus           reduce using rule 160 (empty -> .)
    true            reduce using rule 160 (empty -> .)
    false           reduce using rule 160 (empty -> .)
    cteString       reduce using rule 160 (empty -> .)
    cteInt          reduce using rule 160 (empty -> .)
    cteFloat        reduce using rule 160 (empty -> .)

    empty                          shift and go to state 177
    nt_pushPOper                   shift and go to state 284

state 251

    (114) EXP_AUX -> empty .

    right_sb        reduce using rule 114 (EXP_AUX -> empty .)
    lt              reduce using rule 114 (EXP_AUX -> empty .)
    gt              reduce using rule 114 (EXP_AUX -> empty .)
    ne              reduce using rule 114 (EXP_AUX -> empty .)
    ge              reduce using rule 114 (EXP_AUX -> empty .)
    le              reduce using rule 114 (EXP_AUX -> empty .)
    et              reduce using rule 114 (EXP_AUX -> empty .)
    and             reduce using rule 114 (EXP_AUX -> empty .)
    or              reduce using rule 114 (EXP_AUX -> empty .)
    right_par       reduce using rule 114 (EXP_AUX -> empty .)
    semicolon       reduce using rule 114 (EXP_AUX -> empty .)
    comma           reduce using rule 114 (EXP_AUX -> empty .)


state 252

    (112) EXP_AUX -> plus . nt_pushPOper EXP
    (158) nt_pushPOper -> . empty
    (160) empty -> .

    left_par        reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    plus            reduce using rule 160 (empty -> .)
    minus           reduce using rule 160 (empty -> .)
    true            reduce using rule 160 (empty -> .)
    false           reduce using rule 160 (empty -> .)
    cteString       reduce using rule 160 (empty -> .)
    cteInt          reduce using rule 160 (empty -> .)
    cteFloat        reduce using rule 160 (empty -> .)

    empty                          shift and go to state 177
    nt_pushPOper                   shift and go to state 285

state 253

    (110) EXP -> TERMINO nt_checar_sumas EXP_AUX .

    and             reduce using rule 110 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    or              reduce using rule 110 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    right_par       reduce using rule 110 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    semicolon       reduce using rule 110 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    comma           reduce using rule 110 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    lt              reduce using rule 110 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    gt              reduce using rule 110 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    ne              reduce using rule 110 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    ge              reduce using rule 110 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    le              reduce using rule 110 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    et              reduce using rule 110 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    right_sb        reduce using rule 110 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)


state 254

    (120) FACTOR -> left_par nt_pushPOper EXPRESION . right_par nt_popPOper

    right_par       shift and go to state 286


state 255

    (115) TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .

    plus            reduce using rule 115 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    minus           reduce using rule 115 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    and             reduce using rule 115 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    or              reduce using rule 115 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    right_par       reduce using rule 115 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    semicolon       reduce using rule 115 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    comma           reduce using rule 115 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    right_sb        reduce using rule 115 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    lt              reduce using rule 115 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    gt              reduce using rule 115 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    ne              reduce using rule 115 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    ge              reduce using rule 115 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    le              reduce using rule 115 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    et              reduce using rule 115 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)


state 256

    (118) TERMINO_AUX -> divide . nt_pushPOper TERMINO
    (158) nt_pushPOper -> . empty
    (160) empty -> .

    left_par        reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    plus            reduce using rule 160 (empty -> .)
    minus           reduce using rule 160 (empty -> .)
    true            reduce using rule 160 (empty -> .)
    false           reduce using rule 160 (empty -> .)
    cteString       reduce using rule 160 (empty -> .)
    cteInt          reduce using rule 160 (empty -> .)
    cteFloat        reduce using rule 160 (empty -> .)

    empty                          shift and go to state 177
    nt_pushPOper                   shift and go to state 287

state 257

    (117) TERMINO_AUX -> multiply . nt_pushPOper TERMINO
    (158) nt_pushPOper -> . empty
    (160) empty -> .

    left_par        reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    plus            reduce using rule 160 (empty -> .)
    minus           reduce using rule 160 (empty -> .)
    true            reduce using rule 160 (empty -> .)
    false           reduce using rule 160 (empty -> .)
    cteString       reduce using rule 160 (empty -> .)
    cteInt          reduce using rule 160 (empty -> .)
    cteFloat        reduce using rule 160 (empty -> .)

    empty                          shift and go to state 177
    nt_pushPOper                   shift and go to state 288

state 258

    (119) TERMINO_AUX -> empty .

    plus            reduce using rule 119 (TERMINO_AUX -> empty .)
    minus           reduce using rule 119 (TERMINO_AUX -> empty .)
    right_sb        reduce using rule 119 (TERMINO_AUX -> empty .)
    lt              reduce using rule 119 (TERMINO_AUX -> empty .)
    gt              reduce using rule 119 (TERMINO_AUX -> empty .)
    ne              reduce using rule 119 (TERMINO_AUX -> empty .)
    ge              reduce using rule 119 (TERMINO_AUX -> empty .)
    le              reduce using rule 119 (TERMINO_AUX -> empty .)
    et              reduce using rule 119 (TERMINO_AUX -> empty .)
    and             reduce using rule 119 (TERMINO_AUX -> empty .)
    or              reduce using rule 119 (TERMINO_AUX -> empty .)
    right_par       reduce using rule 119 (TERMINO_AUX -> empty .)
    semicolon       reduce using rule 119 (TERMINO_AUX -> empty .)
    comma           reduce using rule 119 (TERMINO_AUX -> empty .)


state 259

    (143) NUMERICA -> minus nt_sigMenos NUMERICA_AUX .

    multiply        reduce using rule 143 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    divide          reduce using rule 143 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    plus            reduce using rule 143 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    minus           reduce using rule 143 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    lt              reduce using rule 143 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    gt              reduce using rule 143 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    ne              reduce using rule 143 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    ge              reduce using rule 143 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    le              reduce using rule 143 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    et              reduce using rule 143 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    and             reduce using rule 143 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    or              reduce using rule 143 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    right_par       reduce using rule 143 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    semicolon       reduce using rule 143 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    comma           reduce using rule 143 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    right_sb        reduce using rule 143 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)


state 260

    (87) ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par . semicolon

    semicolon       shift and go to state 289


state 261

    (153) ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals . semicolon

    semicolon       shift and go to state 290


state 262

    (154) nt_checaEquals -> empty .

    semicolon       reduce using rule 154 (nt_checaEquals -> empty .)


state 263

    (82) CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool . right_par CUERPO nt_pushLoop

    right_par       shift and go to state 291


state 264

    (41) CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .

    list            reduce using rule 41 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    var             reduce using rule 41 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    if              reduce using rule 41 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    while           reduce using rule 41 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    cread           reduce using rule 41 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    cwrite          reduce using rule 41 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    id              reduce using rule 41 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    right_cb        reduce using rule 41 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    return          reduce using rule 41 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)


state 265

    (52) RETORNO -> return EXP semicolon .

    right_cb        reduce using rule 52 (RETORNO -> return EXP semicolon .)
    list            reduce using rule 52 (RETORNO -> return EXP semicolon .)
    var             reduce using rule 52 (RETORNO -> return EXP semicolon .)
    return          reduce using rule 52 (RETORNO -> return EXP semicolon .)
    if              reduce using rule 52 (RETORNO -> return EXP semicolon .)
    while           reduce using rule 52 (RETORNO -> return EXP semicolon .)
    cread           reduce using rule 52 (RETORNO -> return EXP semicolon .)
    cwrite          reduce using rule 52 (RETORNO -> return EXP semicolon .)
    id              reduce using rule 52 (RETORNO -> return EXP semicolon .)


state 266

    (85) LECTURA -> cread left_par id nt_leer right_par semicolon .

    list            reduce using rule 85 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    var             reduce using rule 85 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    if              reduce using rule 85 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    while           reduce using rule 85 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    cread           reduce using rule 85 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    cwrite          reduce using rule 85 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    id              reduce using rule 85 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    return          reduce using rule 85 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    right_cb        reduce using rule 85 (LECTURA -> cread left_par id nt_leer right_par semicolon .)


state 267

    (73) CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO . ELSE_ELIF nt_pushSalto
    (74) ELSE_ELIF -> . ELSE
    (75) ELSE_ELIF -> . ELIF
    (76) ELSE_ELIF -> . empty
    (77) ELSE -> . else nt_pushElse CUERPO
    (78) ELIF -> . elseif nt_pushElse CONDICION_AUX
    (160) empty -> .

    else            shift and go to state 296
    elseif          shift and go to state 295
    right_cb        reduce using rule 160 (empty -> .)
    list            reduce using rule 160 (empty -> .)
    var             reduce using rule 160 (empty -> .)
    if              reduce using rule 160 (empty -> .)
    while           reduce using rule 160 (empty -> .)
    cread           reduce using rule 160 (empty -> .)
    cwrite          reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    return          reduce using rule 160 (empty -> .)

    ELIF                           shift and go to state 293
    ELSE_ELIF                      shift and go to state 292
    ELSE                           shift and go to state 294
    empty                          shift and go to state 297

state 268

    (98) EXPRESION_B -> and . nt_pushPOper EXPRESION
    (158) nt_pushPOper -> . empty
    (160) empty -> .

    not             reduce using rule 160 (empty -> .)
    left_par        reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    plus            reduce using rule 160 (empty -> .)
    minus           reduce using rule 160 (empty -> .)
    true            reduce using rule 160 (empty -> .)
    false           reduce using rule 160 (empty -> .)
    cteString       reduce using rule 160 (empty -> .)
    cteInt          reduce using rule 160 (empty -> .)
    cteFloat        reduce using rule 160 (empty -> .)

    empty                          shift and go to state 177
    nt_pushPOper                   shift and go to state 298

state 269

    (94) EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B .

    semicolon       reduce using rule 94 (EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B .)
    comma           reduce using rule 94 (EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B .)
    right_par       reduce using rule 94 (EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B .)


state 270

    (99) EXPRESION_B -> or . nt_pushPOper EXPRESION
    (158) nt_pushPOper -> . empty
    (160) empty -> .

    not             reduce using rule 160 (empty -> .)
    left_par        reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    plus            reduce using rule 160 (empty -> .)
    minus           reduce using rule 160 (empty -> .)
    true            reduce using rule 160 (empty -> .)
    false           reduce using rule 160 (empty -> .)
    cteString       reduce using rule 160 (empty -> .)
    cteInt          reduce using rule 160 (empty -> .)
    cteFloat        reduce using rule 160 (empty -> .)

    empty                          shift and go to state 177
    nt_pushPOper                   shift and go to state 299

state 271

    (100) EXPRESION_B -> empty .

    right_par       reduce using rule 100 (EXPRESION_B -> empty .)
    semicolon       reduce using rule 100 (EXPRESION_B -> empty .)
    comma           reduce using rule 100 (EXPRESION_B -> empty .)


state 272

    (105) EXPRESIONLOGICA_AUX -> ge nt_pushPOper . EXP nt_checarRelop
    (110) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (115) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (120) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (121) FACTOR -> . CONSTANTE
    (122) FACTOR -> . LISTA
    (123) FACTOR -> . FACTOR_AUX
    (138) CONSTANTE -> . NUMERICA
    (139) CONSTANTE -> . BOOLEANA
    (140) CONSTANTE -> . STRINGS
    (137) LISTA -> . id left_sb EXP right_sb
    (124) FACTOR_AUX -> . id nt_pushPilaO
    (125) FACTOR_AUX -> . id nt_verificaFuncId LLAMADA_F
    (141) NUMERICA -> . NUMERICA_AUX
    (142) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (143) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (150) BOOLEANA -> . true
    (151) BOOLEANA -> . false
    (152) STRINGS -> . cteString
    (146) NUMERICA_AUX -> . cteInt nt_pushInt
    (147) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 166
    id              shift and go to state 161
    plus            shift and go to state 162
    minus           shift and go to state 175
    true            shift and go to state 167
    false           shift and go to state 157
    cteString       shift and go to state 165
    cteInt          shift and go to state 170
    cteFloat        shift and go to state 159

    BOOLEANA                       shift and go to state 160
    EXP                            shift and go to state 300
    FACTOR_AUX                     shift and go to state 163
    NUMERICA_AUX                   shift and go to state 171
    TERMINO                        shift and go to state 164
    STRINGS                        shift and go to state 168
    CONSTANTE                      shift and go to state 169
    NUMERICA                       shift and go to state 172
    FACTOR                         shift and go to state 173
    LISTA                          shift and go to state 174

state 273

    (103) EXPRESIONLOGICA_AUX -> gt nt_pushPOper . EXP nt_checarRelop
    (110) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (115) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (120) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (121) FACTOR -> . CONSTANTE
    (122) FACTOR -> . LISTA
    (123) FACTOR -> . FACTOR_AUX
    (138) CONSTANTE -> . NUMERICA
    (139) CONSTANTE -> . BOOLEANA
    (140) CONSTANTE -> . STRINGS
    (137) LISTA -> . id left_sb EXP right_sb
    (124) FACTOR_AUX -> . id nt_pushPilaO
    (125) FACTOR_AUX -> . id nt_verificaFuncId LLAMADA_F
    (141) NUMERICA -> . NUMERICA_AUX
    (142) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (143) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (150) BOOLEANA -> . true
    (151) BOOLEANA -> . false
    (152) STRINGS -> . cteString
    (146) NUMERICA_AUX -> . cteInt nt_pushInt
    (147) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 166
    id              shift and go to state 161
    plus            shift and go to state 162
    minus           shift and go to state 175
    true            shift and go to state 167
    false           shift and go to state 157
    cteString       shift and go to state 165
    cteInt          shift and go to state 170
    cteFloat        shift and go to state 159

    BOOLEANA                       shift and go to state 160
    EXP                            shift and go to state 301
    FACTOR_AUX                     shift and go to state 163
    NUMERICA_AUX                   shift and go to state 171
    TERMINO                        shift and go to state 164
    STRINGS                        shift and go to state 168
    CONSTANTE                      shift and go to state 169
    NUMERICA                       shift and go to state 172
    FACTOR                         shift and go to state 173
    LISTA                          shift and go to state 174

state 274

    (104) EXPRESIONLOGICA_AUX -> ne nt_pushPOper . EXP nt_checarRelop
    (110) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (115) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (120) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (121) FACTOR -> . CONSTANTE
    (122) FACTOR -> . LISTA
    (123) FACTOR -> . FACTOR_AUX
    (138) CONSTANTE -> . NUMERICA
    (139) CONSTANTE -> . BOOLEANA
    (140) CONSTANTE -> . STRINGS
    (137) LISTA -> . id left_sb EXP right_sb
    (124) FACTOR_AUX -> . id nt_pushPilaO
    (125) FACTOR_AUX -> . id nt_verificaFuncId LLAMADA_F
    (141) NUMERICA -> . NUMERICA_AUX
    (142) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (143) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (150) BOOLEANA -> . true
    (151) BOOLEANA -> . false
    (152) STRINGS -> . cteString
    (146) NUMERICA_AUX -> . cteInt nt_pushInt
    (147) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 166
    id              shift and go to state 161
    plus            shift and go to state 162
    minus           shift and go to state 175
    true            shift and go to state 167
    false           shift and go to state 157
    cteString       shift and go to state 165
    cteInt          shift and go to state 170
    cteFloat        shift and go to state 159

    BOOLEANA                       shift and go to state 160
    EXP                            shift and go to state 302
    FACTOR_AUX                     shift and go to state 163
    NUMERICA_AUX                   shift and go to state 171
    TERMINO                        shift and go to state 164
    STRINGS                        shift and go to state 168
    CONSTANTE                      shift and go to state 169
    NUMERICA                       shift and go to state 172
    FACTOR                         shift and go to state 173
    LISTA                          shift and go to state 174

state 275

    (102) EXPRESIONLOGICA_AUX -> lt nt_pushPOper . EXP nt_checarRelop
    (110) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (115) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (120) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (121) FACTOR -> . CONSTANTE
    (122) FACTOR -> . LISTA
    (123) FACTOR -> . FACTOR_AUX
    (138) CONSTANTE -> . NUMERICA
    (139) CONSTANTE -> . BOOLEANA
    (140) CONSTANTE -> . STRINGS
    (137) LISTA -> . id left_sb EXP right_sb
    (124) FACTOR_AUX -> . id nt_pushPilaO
    (125) FACTOR_AUX -> . id nt_verificaFuncId LLAMADA_F
    (141) NUMERICA -> . NUMERICA_AUX
    (142) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (143) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (150) BOOLEANA -> . true
    (151) BOOLEANA -> . false
    (152) STRINGS -> . cteString
    (146) NUMERICA_AUX -> . cteInt nt_pushInt
    (147) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 166
    id              shift and go to state 161
    plus            shift and go to state 162
    minus           shift and go to state 175
    true            shift and go to state 167
    false           shift and go to state 157
    cteString       shift and go to state 165
    cteInt          shift and go to state 170
    cteFloat        shift and go to state 159

    BOOLEANA                       shift and go to state 160
    EXP                            shift and go to state 303
    FACTOR_AUX                     shift and go to state 163
    NUMERICA_AUX                   shift and go to state 171
    TERMINO                        shift and go to state 164
    STRINGS                        shift and go to state 168
    CONSTANTE                      shift and go to state 169
    NUMERICA                       shift and go to state 172
    FACTOR                         shift and go to state 173
    LISTA                          shift and go to state 174

state 276

    (106) EXPRESIONLOGICA_AUX -> le nt_pushPOper . EXP nt_checarRelop
    (110) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (115) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (120) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (121) FACTOR -> . CONSTANTE
    (122) FACTOR -> . LISTA
    (123) FACTOR -> . FACTOR_AUX
    (138) CONSTANTE -> . NUMERICA
    (139) CONSTANTE -> . BOOLEANA
    (140) CONSTANTE -> . STRINGS
    (137) LISTA -> . id left_sb EXP right_sb
    (124) FACTOR_AUX -> . id nt_pushPilaO
    (125) FACTOR_AUX -> . id nt_verificaFuncId LLAMADA_F
    (141) NUMERICA -> . NUMERICA_AUX
    (142) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (143) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (150) BOOLEANA -> . true
    (151) BOOLEANA -> . false
    (152) STRINGS -> . cteString
    (146) NUMERICA_AUX -> . cteInt nt_pushInt
    (147) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 166
    id              shift and go to state 161
    plus            shift and go to state 162
    minus           shift and go to state 175
    true            shift and go to state 167
    false           shift and go to state 157
    cteString       shift and go to state 165
    cteInt          shift and go to state 170
    cteFloat        shift and go to state 159

    BOOLEANA                       shift and go to state 160
    EXP                            shift and go to state 304
    FACTOR_AUX                     shift and go to state 163
    NUMERICA_AUX                   shift and go to state 171
    TERMINO                        shift and go to state 164
    STRINGS                        shift and go to state 168
    CONSTANTE                      shift and go to state 169
    NUMERICA                       shift and go to state 172
    FACTOR                         shift and go to state 173
    LISTA                          shift and go to state 174

state 277

    (107) EXPRESIONLOGICA_AUX -> et nt_pushPOper . EXP nt_checarRelop
    (110) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (115) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (120) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (121) FACTOR -> . CONSTANTE
    (122) FACTOR -> . LISTA
    (123) FACTOR -> . FACTOR_AUX
    (138) CONSTANTE -> . NUMERICA
    (139) CONSTANTE -> . BOOLEANA
    (140) CONSTANTE -> . STRINGS
    (137) LISTA -> . id left_sb EXP right_sb
    (124) FACTOR_AUX -> . id nt_pushPilaO
    (125) FACTOR_AUX -> . id nt_verificaFuncId LLAMADA_F
    (141) NUMERICA -> . NUMERICA_AUX
    (142) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (143) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (150) BOOLEANA -> . true
    (151) BOOLEANA -> . false
    (152) STRINGS -> . cteString
    (146) NUMERICA_AUX -> . cteInt nt_pushInt
    (147) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 166
    id              shift and go to state 161
    plus            shift and go to state 162
    minus           shift and go to state 175
    true            shift and go to state 167
    false           shift and go to state 157
    cteString       shift and go to state 165
    cteInt          shift and go to state 170
    cteFloat        shift and go to state 159

    BOOLEANA                       shift and go to state 160
    EXP                            shift and go to state 305
    FACTOR_AUX                     shift and go to state 163
    NUMERICA_AUX                   shift and go to state 171
    TERMINO                        shift and go to state 164
    STRINGS                        shift and go to state 168
    CONSTANTE                      shift and go to state 169
    NUMERICA                       shift and go to state 172
    FACTOR                         shift and go to state 173
    LISTA                          shift and go to state 174

state 278

    (134) nt_verifyArgType -> empty .

    comma           reduce using rule 134 (nt_verifyArgType -> empty .)
    right_par       reduce using rule 134 (nt_verifyArgType -> empty .)


state 279

    (92) LLAMADA_EXPRESION_AUX -> EXPRESION nt_verifyArgType .

    comma           reduce using rule 92 (LLAMADA_EXPRESION_AUX -> EXPRESION nt_verifyArgType .)
    right_par       reduce using rule 92 (LLAMADA_EXPRESION_AUX -> EXPRESION nt_verifyArgType .)


state 280

    (89) LLAMADA -> id nt_verificaFuncId left_par nt_startERA LLAMADA_EXPRESION nt_verificaUltimo . right_par semicolon nt_pushGoSub

    right_par       shift and go to state 306


state 281

    (135) nt_verificaUltimo -> empty .

    right_par       reduce using rule 135 (nt_verificaUltimo -> empty .)


state 282

    (93) LLAMADA_EXPRESION_AUX -> LLAMADA_EXPRESION_AUX comma . nt_paramPP EXPRESION nt_verifyArgType
    (132) nt_paramPP -> . empty
    (160) empty -> .

    not             reduce using rule 160 (empty -> .)
    left_par        reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    plus            reduce using rule 160 (empty -> .)
    minus           reduce using rule 160 (empty -> .)
    true            reduce using rule 160 (empty -> .)
    false           reduce using rule 160 (empty -> .)
    cteString       reduce using rule 160 (empty -> .)
    cteInt          reduce using rule 160 (empty -> .)
    cteFloat        reduce using rule 160 (empty -> .)

    empty                          shift and go to state 308
    nt_paramPP                     shift and go to state 307

state 283

    (127) LLAMADA_F -> left_par nt_startERA . LLAMADAF_AUX nt_verificaUltimo right_par nt_pushGoSub
    (128) LLAMADAF_AUX -> . LLAMADAF_AUX2
    (129) LLAMADAF_AUX -> . empty
    (130) LLAMADAF_AUX2 -> . EXPRESION nt_verifyArgType
    (131) LLAMADAF_AUX2 -> . LLAMADAF_AUX2 comma nt_paramPP EXPRESION nt_verifyArgType
    (160) empty -> .
    (94) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (96) EXPRESION_NOT -> . not nt_pushPOper
    (97) EXPRESION_NOT -> . empty

    right_par       reduce using rule 160 (empty -> .)
    left_par        reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    plus            reduce using rule 160 (empty -> .)
    minus           reduce using rule 160 (empty -> .)
    true            reduce using rule 160 (empty -> .)
    false           reduce using rule 160 (empty -> .)
    cteString       reduce using rule 160 (empty -> .)
    cteInt          reduce using rule 160 (empty -> .)
    cteFloat        reduce using rule 160 (empty -> .)
    not             shift and go to state 154

    EXPRESION                      shift and go to state 309
    EXPRESION_NOT                  shift and go to state 153
    LLAMADAF_AUX                   shift and go to state 310
    LLAMADAF_AUX2                  shift and go to state 311
    empty                          shift and go to state 312

state 284

    (113) EXP_AUX -> minus nt_pushPOper . EXP
    (110) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (115) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (120) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (121) FACTOR -> . CONSTANTE
    (122) FACTOR -> . LISTA
    (123) FACTOR -> . FACTOR_AUX
    (138) CONSTANTE -> . NUMERICA
    (139) CONSTANTE -> . BOOLEANA
    (140) CONSTANTE -> . STRINGS
    (137) LISTA -> . id left_sb EXP right_sb
    (124) FACTOR_AUX -> . id nt_pushPilaO
    (125) FACTOR_AUX -> . id nt_verificaFuncId LLAMADA_F
    (141) NUMERICA -> . NUMERICA_AUX
    (142) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (143) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (150) BOOLEANA -> . true
    (151) BOOLEANA -> . false
    (152) STRINGS -> . cteString
    (146) NUMERICA_AUX -> . cteInt nt_pushInt
    (147) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 166
    id              shift and go to state 161
    plus            shift and go to state 162
    minus           shift and go to state 175
    true            shift and go to state 167
    false           shift and go to state 157
    cteString       shift and go to state 165
    cteInt          shift and go to state 170
    cteFloat        shift and go to state 159

    BOOLEANA                       shift and go to state 160
    EXP                            shift and go to state 313
    FACTOR_AUX                     shift and go to state 163
    NUMERICA_AUX                   shift and go to state 171
    TERMINO                        shift and go to state 164
    STRINGS                        shift and go to state 168
    CONSTANTE                      shift and go to state 169
    NUMERICA                       shift and go to state 172
    FACTOR                         shift and go to state 173
    LISTA                          shift and go to state 174

state 285

    (112) EXP_AUX -> plus nt_pushPOper . EXP
    (110) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (115) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (120) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (121) FACTOR -> . CONSTANTE
    (122) FACTOR -> . LISTA
    (123) FACTOR -> . FACTOR_AUX
    (138) CONSTANTE -> . NUMERICA
    (139) CONSTANTE -> . BOOLEANA
    (140) CONSTANTE -> . STRINGS
    (137) LISTA -> . id left_sb EXP right_sb
    (124) FACTOR_AUX -> . id nt_pushPilaO
    (125) FACTOR_AUX -> . id nt_verificaFuncId LLAMADA_F
    (141) NUMERICA -> . NUMERICA_AUX
    (142) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (143) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (150) BOOLEANA -> . true
    (151) BOOLEANA -> . false
    (152) STRINGS -> . cteString
    (146) NUMERICA_AUX -> . cteInt nt_pushInt
    (147) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 166
    id              shift and go to state 161
    plus            shift and go to state 162
    minus           shift and go to state 175
    true            shift and go to state 167
    false           shift and go to state 157
    cteString       shift and go to state 165
    cteInt          shift and go to state 170
    cteFloat        shift and go to state 159

    BOOLEANA                       shift and go to state 160
    EXP                            shift and go to state 314
    FACTOR_AUX                     shift and go to state 163
    NUMERICA_AUX                   shift and go to state 171
    TERMINO                        shift and go to state 164
    STRINGS                        shift and go to state 168
    CONSTANTE                      shift and go to state 169
    NUMERICA                       shift and go to state 172
    FACTOR                         shift and go to state 173
    LISTA                          shift and go to state 174

state 286

    (120) FACTOR -> left_par nt_pushPOper EXPRESION right_par . nt_popPOper
    (159) nt_popPOper -> . empty
    (160) empty -> .

    multiply        reduce using rule 160 (empty -> .)
    divide          reduce using rule 160 (empty -> .)
    plus            reduce using rule 160 (empty -> .)
    minus           reduce using rule 160 (empty -> .)
    right_sb        reduce using rule 160 (empty -> .)
    lt              reduce using rule 160 (empty -> .)
    gt              reduce using rule 160 (empty -> .)
    ne              reduce using rule 160 (empty -> .)
    ge              reduce using rule 160 (empty -> .)
    le              reduce using rule 160 (empty -> .)
    et              reduce using rule 160 (empty -> .)
    and             reduce using rule 160 (empty -> .)
    or              reduce using rule 160 (empty -> .)
    right_par       reduce using rule 160 (empty -> .)
    semicolon       reduce using rule 160 (empty -> .)
    comma           reduce using rule 160 (empty -> .)

    nt_popPOper                    shift and go to state 315
    empty                          shift and go to state 316

state 287

    (118) TERMINO_AUX -> divide nt_pushPOper . TERMINO
    (115) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (120) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (121) FACTOR -> . CONSTANTE
    (122) FACTOR -> . LISTA
    (123) FACTOR -> . FACTOR_AUX
    (138) CONSTANTE -> . NUMERICA
    (139) CONSTANTE -> . BOOLEANA
    (140) CONSTANTE -> . STRINGS
    (137) LISTA -> . id left_sb EXP right_sb
    (124) FACTOR_AUX -> . id nt_pushPilaO
    (125) FACTOR_AUX -> . id nt_verificaFuncId LLAMADA_F
    (141) NUMERICA -> . NUMERICA_AUX
    (142) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (143) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (150) BOOLEANA -> . true
    (151) BOOLEANA -> . false
    (152) STRINGS -> . cteString
    (146) NUMERICA_AUX -> . cteInt nt_pushInt
    (147) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 166
    id              shift and go to state 161
    plus            shift and go to state 162
    minus           shift and go to state 175
    true            shift and go to state 167
    false           shift and go to state 157
    cteString       shift and go to state 165
    cteInt          shift and go to state 170
    cteFloat        shift and go to state 159

    BOOLEANA                       shift and go to state 160
    FACTOR_AUX                     shift and go to state 163
    NUMERICA_AUX                   shift and go to state 171
    TERMINO                        shift and go to state 317
    STRINGS                        shift and go to state 168
    CONSTANTE                      shift and go to state 169
    NUMERICA                       shift and go to state 172
    FACTOR                         shift and go to state 173
    LISTA                          shift and go to state 174

state 288

    (117) TERMINO_AUX -> multiply nt_pushPOper . TERMINO
    (115) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (120) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (121) FACTOR -> . CONSTANTE
    (122) FACTOR -> . LISTA
    (123) FACTOR -> . FACTOR_AUX
    (138) CONSTANTE -> . NUMERICA
    (139) CONSTANTE -> . BOOLEANA
    (140) CONSTANTE -> . STRINGS
    (137) LISTA -> . id left_sb EXP right_sb
    (124) FACTOR_AUX -> . id nt_pushPilaO
    (125) FACTOR_AUX -> . id nt_verificaFuncId LLAMADA_F
    (141) NUMERICA -> . NUMERICA_AUX
    (142) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (143) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (150) BOOLEANA -> . true
    (151) BOOLEANA -> . false
    (152) STRINGS -> . cteString
    (146) NUMERICA_AUX -> . cteInt nt_pushInt
    (147) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 166
    id              shift and go to state 161
    plus            shift and go to state 162
    minus           shift and go to state 175
    true            shift and go to state 167
    false           shift and go to state 157
    cteString       shift and go to state 165
    cteInt          shift and go to state 170
    cteFloat        shift and go to state 159

    BOOLEANA                       shift and go to state 160
    FACTOR_AUX                     shift and go to state 163
    NUMERICA_AUX                   shift and go to state 171
    TERMINO                        shift and go to state 318
    STRINGS                        shift and go to state 168
    CONSTANTE                      shift and go to state 169
    NUMERICA                       shift and go to state 172
    FACTOR                         shift and go to state 173
    LISTA                          shift and go to state 174

state 289

    (87) ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .

    right_cb        reduce using rule 87 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    list            reduce using rule 87 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    var             reduce using rule 87 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    if              reduce using rule 87 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    while           reduce using rule 87 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    cread           reduce using rule 87 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    cwrite          reduce using rule 87 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    id              reduce using rule 87 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    return          reduce using rule 87 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)


state 290

    (153) ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .

    right_cb        reduce using rule 153 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    list            reduce using rule 153 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    var             reduce using rule 153 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    if              reduce using rule 153 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    while           reduce using rule 153 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    cread           reduce using rule 153 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    cwrite          reduce using rule 153 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    id              reduce using rule 153 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    return          reduce using rule 153 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)


state 291

    (82) CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par . CUERPO nt_pushLoop
    (32) CUERPO -> . left_cb CUERPO_AUX right_cb

    left_cb         shift and go to state 76

    CUERPO                         shift and go to state 319

state 292

    (73) CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF . nt_pushSalto
    (80) nt_pushSalto -> . empty
    (160) empty -> .

    right_cb        reduce using rule 160 (empty -> .)
    list            reduce using rule 160 (empty -> .)
    var             reduce using rule 160 (empty -> .)
    if              reduce using rule 160 (empty -> .)
    while           reduce using rule 160 (empty -> .)
    cread           reduce using rule 160 (empty -> .)
    cwrite          reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    return          reduce using rule 160 (empty -> .)

    nt_pushSalto                   shift and go to state 320
    empty                          shift and go to state 321

state 293

    (75) ELSE_ELIF -> ELIF .

    right_cb        reduce using rule 75 (ELSE_ELIF -> ELIF .)
    list            reduce using rule 75 (ELSE_ELIF -> ELIF .)
    var             reduce using rule 75 (ELSE_ELIF -> ELIF .)
    if              reduce using rule 75 (ELSE_ELIF -> ELIF .)
    while           reduce using rule 75 (ELSE_ELIF -> ELIF .)
    cread           reduce using rule 75 (ELSE_ELIF -> ELIF .)
    cwrite          reduce using rule 75 (ELSE_ELIF -> ELIF .)
    id              reduce using rule 75 (ELSE_ELIF -> ELIF .)
    return          reduce using rule 75 (ELSE_ELIF -> ELIF .)


state 294

    (74) ELSE_ELIF -> ELSE .

    right_cb        reduce using rule 74 (ELSE_ELIF -> ELSE .)
    list            reduce using rule 74 (ELSE_ELIF -> ELSE .)
    var             reduce using rule 74 (ELSE_ELIF -> ELSE .)
    if              reduce using rule 74 (ELSE_ELIF -> ELSE .)
    while           reduce using rule 74 (ELSE_ELIF -> ELSE .)
    cread           reduce using rule 74 (ELSE_ELIF -> ELSE .)
    cwrite          reduce using rule 74 (ELSE_ELIF -> ELSE .)
    id              reduce using rule 74 (ELSE_ELIF -> ELSE .)
    return          reduce using rule 74 (ELSE_ELIF -> ELSE .)


state 295

    (78) ELIF -> elseif . nt_pushElse CONDICION_AUX
    (81) nt_pushElse -> . empty
    (160) empty -> .

    left_par        reduce using rule 160 (empty -> .)

    nt_pushElse                    shift and go to state 322
    empty                          shift and go to state 323

state 296

    (77) ELSE -> else . nt_pushElse CUERPO
    (81) nt_pushElse -> . empty
    (160) empty -> .

    left_cb         reduce using rule 160 (empty -> .)

    nt_pushElse                    shift and go to state 324
    empty                          shift and go to state 323

state 297

    (76) ELSE_ELIF -> empty .

    right_cb        reduce using rule 76 (ELSE_ELIF -> empty .)
    list            reduce using rule 76 (ELSE_ELIF -> empty .)
    var             reduce using rule 76 (ELSE_ELIF -> empty .)
    if              reduce using rule 76 (ELSE_ELIF -> empty .)
    while           reduce using rule 76 (ELSE_ELIF -> empty .)
    cread           reduce using rule 76 (ELSE_ELIF -> empty .)
    cwrite          reduce using rule 76 (ELSE_ELIF -> empty .)
    id              reduce using rule 76 (ELSE_ELIF -> empty .)
    return          reduce using rule 76 (ELSE_ELIF -> empty .)


state 298

    (98) EXPRESION_B -> and nt_pushPOper . EXPRESION
    (94) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (96) EXPRESION_NOT -> . not nt_pushPOper
    (97) EXPRESION_NOT -> . empty
    (160) empty -> .

    not             shift and go to state 154
    left_par        reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    plus            reduce using rule 160 (empty -> .)
    minus           reduce using rule 160 (empty -> .)
    true            reduce using rule 160 (empty -> .)
    false           reduce using rule 160 (empty -> .)
    cteString       reduce using rule 160 (empty -> .)
    cteInt          reduce using rule 160 (empty -> .)
    cteFloat        reduce using rule 160 (empty -> .)

    EXPRESION                      shift and go to state 325
    EXPRESION_NOT                  shift and go to state 153
    empty                          shift and go to state 155

state 299

    (99) EXPRESION_B -> or nt_pushPOper . EXPRESION
    (94) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (96) EXPRESION_NOT -> . not nt_pushPOper
    (97) EXPRESION_NOT -> . empty
    (160) empty -> .

    not             shift and go to state 154
    left_par        reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    plus            reduce using rule 160 (empty -> .)
    minus           reduce using rule 160 (empty -> .)
    true            reduce using rule 160 (empty -> .)
    false           reduce using rule 160 (empty -> .)
    cteString       reduce using rule 160 (empty -> .)
    cteInt          reduce using rule 160 (empty -> .)
    cteFloat        reduce using rule 160 (empty -> .)

    EXPRESION                      shift and go to state 326
    EXPRESION_NOT                  shift and go to state 153
    empty                          shift and go to state 155

state 300

    (105) EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP . nt_checarRelop
    (109) nt_checarRelop -> . empty
    (160) empty -> .

    and             reduce using rule 160 (empty -> .)
    or              reduce using rule 160 (empty -> .)
    right_par       reduce using rule 160 (empty -> .)
    semicolon       reduce using rule 160 (empty -> .)
    comma           reduce using rule 160 (empty -> .)

    nt_checarRelop                 shift and go to state 327
    empty                          shift and go to state 328

state 301

    (103) EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP . nt_checarRelop
    (109) nt_checarRelop -> . empty
    (160) empty -> .

    and             reduce using rule 160 (empty -> .)
    or              reduce using rule 160 (empty -> .)
    right_par       reduce using rule 160 (empty -> .)
    semicolon       reduce using rule 160 (empty -> .)
    comma           reduce using rule 160 (empty -> .)

    nt_checarRelop                 shift and go to state 329
    empty                          shift and go to state 328

state 302

    (104) EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP . nt_checarRelop
    (109) nt_checarRelop -> . empty
    (160) empty -> .

    and             reduce using rule 160 (empty -> .)
    or              reduce using rule 160 (empty -> .)
    right_par       reduce using rule 160 (empty -> .)
    semicolon       reduce using rule 160 (empty -> .)
    comma           reduce using rule 160 (empty -> .)

    nt_checarRelop                 shift and go to state 330
    empty                          shift and go to state 328

state 303

    (102) EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP . nt_checarRelop
    (109) nt_checarRelop -> . empty
    (160) empty -> .

    and             reduce using rule 160 (empty -> .)
    or              reduce using rule 160 (empty -> .)
    right_par       reduce using rule 160 (empty -> .)
    semicolon       reduce using rule 160 (empty -> .)
    comma           reduce using rule 160 (empty -> .)

    nt_checarRelop                 shift and go to state 331
    empty                          shift and go to state 328

state 304

    (106) EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP . nt_checarRelop
    (109) nt_checarRelop -> . empty
    (160) empty -> .

    and             reduce using rule 160 (empty -> .)
    or              reduce using rule 160 (empty -> .)
    right_par       reduce using rule 160 (empty -> .)
    semicolon       reduce using rule 160 (empty -> .)
    comma           reduce using rule 160 (empty -> .)

    nt_checarRelop                 shift and go to state 332
    empty                          shift and go to state 328

state 305

    (107) EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP . nt_checarRelop
    (109) nt_checarRelop -> . empty
    (160) empty -> .

    and             reduce using rule 160 (empty -> .)
    or              reduce using rule 160 (empty -> .)
    right_par       reduce using rule 160 (empty -> .)
    semicolon       reduce using rule 160 (empty -> .)
    comma           reduce using rule 160 (empty -> .)

    nt_checarRelop                 shift and go to state 333
    empty                          shift and go to state 328

state 306

    (89) LLAMADA -> id nt_verificaFuncId left_par nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par . semicolon nt_pushGoSub

    semicolon       shift and go to state 334


state 307

    (93) LLAMADA_EXPRESION_AUX -> LLAMADA_EXPRESION_AUX comma nt_paramPP . EXPRESION nt_verifyArgType
    (94) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (96) EXPRESION_NOT -> . not nt_pushPOper
    (97) EXPRESION_NOT -> . empty
    (160) empty -> .

    not             shift and go to state 154
    left_par        reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    plus            reduce using rule 160 (empty -> .)
    minus           reduce using rule 160 (empty -> .)
    true            reduce using rule 160 (empty -> .)
    false           reduce using rule 160 (empty -> .)
    cteString       reduce using rule 160 (empty -> .)
    cteInt          reduce using rule 160 (empty -> .)
    cteFloat        reduce using rule 160 (empty -> .)

    EXPRESION                      shift and go to state 335
    EXPRESION_NOT                  shift and go to state 153
    empty                          shift and go to state 155

state 308

    (132) nt_paramPP -> empty .

    not             reduce using rule 132 (nt_paramPP -> empty .)
    left_par        reduce using rule 132 (nt_paramPP -> empty .)
    id              reduce using rule 132 (nt_paramPP -> empty .)
    plus            reduce using rule 132 (nt_paramPP -> empty .)
    minus           reduce using rule 132 (nt_paramPP -> empty .)
    true            reduce using rule 132 (nt_paramPP -> empty .)
    false           reduce using rule 132 (nt_paramPP -> empty .)
    cteString       reduce using rule 132 (nt_paramPP -> empty .)
    cteInt          reduce using rule 132 (nt_paramPP -> empty .)
    cteFloat        reduce using rule 132 (nt_paramPP -> empty .)


state 309

    (130) LLAMADAF_AUX2 -> EXPRESION . nt_verifyArgType
    (134) nt_verifyArgType -> . empty
    (160) empty -> .

    comma           reduce using rule 160 (empty -> .)
    right_par       reduce using rule 160 (empty -> .)

    empty                          shift and go to state 278
    nt_verifyArgType               shift and go to state 336

state 310

    (127) LLAMADA_F -> left_par nt_startERA LLAMADAF_AUX . nt_verificaUltimo right_par nt_pushGoSub
    (135) nt_verificaUltimo -> . empty
    (160) empty -> .

    right_par       reduce using rule 160 (empty -> .)

    nt_verificaUltimo              shift and go to state 337
    empty                          shift and go to state 281

state 311

    (128) LLAMADAF_AUX -> LLAMADAF_AUX2 .
    (131) LLAMADAF_AUX2 -> LLAMADAF_AUX2 . comma nt_paramPP EXPRESION nt_verifyArgType

    right_par       reduce using rule 128 (LLAMADAF_AUX -> LLAMADAF_AUX2 .)
    comma           shift and go to state 338


state 312

    (129) LLAMADAF_AUX -> empty .
    (97) EXPRESION_NOT -> empty .

    right_par       reduce using rule 129 (LLAMADAF_AUX -> empty .)
    left_par        reduce using rule 97 (EXPRESION_NOT -> empty .)
    id              reduce using rule 97 (EXPRESION_NOT -> empty .)
    plus            reduce using rule 97 (EXPRESION_NOT -> empty .)
    minus           reduce using rule 97 (EXPRESION_NOT -> empty .)
    true            reduce using rule 97 (EXPRESION_NOT -> empty .)
    false           reduce using rule 97 (EXPRESION_NOT -> empty .)
    cteString       reduce using rule 97 (EXPRESION_NOT -> empty .)
    cteInt          reduce using rule 97 (EXPRESION_NOT -> empty .)
    cteFloat        reduce using rule 97 (EXPRESION_NOT -> empty .)


state 313

    (113) EXP_AUX -> minus nt_pushPOper EXP .

    right_sb        reduce using rule 113 (EXP_AUX -> minus nt_pushPOper EXP .)
    lt              reduce using rule 113 (EXP_AUX -> minus nt_pushPOper EXP .)
    gt              reduce using rule 113 (EXP_AUX -> minus nt_pushPOper EXP .)
    ne              reduce using rule 113 (EXP_AUX -> minus nt_pushPOper EXP .)
    ge              reduce using rule 113 (EXP_AUX -> minus nt_pushPOper EXP .)
    le              reduce using rule 113 (EXP_AUX -> minus nt_pushPOper EXP .)
    et              reduce using rule 113 (EXP_AUX -> minus nt_pushPOper EXP .)
    and             reduce using rule 113 (EXP_AUX -> minus nt_pushPOper EXP .)
    or              reduce using rule 113 (EXP_AUX -> minus nt_pushPOper EXP .)
    right_par       reduce using rule 113 (EXP_AUX -> minus nt_pushPOper EXP .)
    semicolon       reduce using rule 113 (EXP_AUX -> minus nt_pushPOper EXP .)
    comma           reduce using rule 113 (EXP_AUX -> minus nt_pushPOper EXP .)


state 314

    (112) EXP_AUX -> plus nt_pushPOper EXP .

    right_sb        reduce using rule 112 (EXP_AUX -> plus nt_pushPOper EXP .)
    lt              reduce using rule 112 (EXP_AUX -> plus nt_pushPOper EXP .)
    gt              reduce using rule 112 (EXP_AUX -> plus nt_pushPOper EXP .)
    ne              reduce using rule 112 (EXP_AUX -> plus nt_pushPOper EXP .)
    ge              reduce using rule 112 (EXP_AUX -> plus nt_pushPOper EXP .)
    le              reduce using rule 112 (EXP_AUX -> plus nt_pushPOper EXP .)
    et              reduce using rule 112 (EXP_AUX -> plus nt_pushPOper EXP .)
    and             reduce using rule 112 (EXP_AUX -> plus nt_pushPOper EXP .)
    or              reduce using rule 112 (EXP_AUX -> plus nt_pushPOper EXP .)
    right_par       reduce using rule 112 (EXP_AUX -> plus nt_pushPOper EXP .)
    semicolon       reduce using rule 112 (EXP_AUX -> plus nt_pushPOper EXP .)
    comma           reduce using rule 112 (EXP_AUX -> plus nt_pushPOper EXP .)


state 315

    (120) FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .

    multiply        reduce using rule 120 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    divide          reduce using rule 120 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    plus            reduce using rule 120 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    minus           reduce using rule 120 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    semicolon       reduce using rule 120 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    and             reduce using rule 120 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    or              reduce using rule 120 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    right_par       reduce using rule 120 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    comma           reduce using rule 120 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    right_sb        reduce using rule 120 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    lt              reduce using rule 120 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    gt              reduce using rule 120 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    ne              reduce using rule 120 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    ge              reduce using rule 120 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    le              reduce using rule 120 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    et              reduce using rule 120 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)


state 316

    (159) nt_popPOper -> empty .

    multiply        reduce using rule 159 (nt_popPOper -> empty .)
    divide          reduce using rule 159 (nt_popPOper -> empty .)
    plus            reduce using rule 159 (nt_popPOper -> empty .)
    minus           reduce using rule 159 (nt_popPOper -> empty .)
    right_sb        reduce using rule 159 (nt_popPOper -> empty .)
    lt              reduce using rule 159 (nt_popPOper -> empty .)
    gt              reduce using rule 159 (nt_popPOper -> empty .)
    ne              reduce using rule 159 (nt_popPOper -> empty .)
    ge              reduce using rule 159 (nt_popPOper -> empty .)
    le              reduce using rule 159 (nt_popPOper -> empty .)
    et              reduce using rule 159 (nt_popPOper -> empty .)
    and             reduce using rule 159 (nt_popPOper -> empty .)
    or              reduce using rule 159 (nt_popPOper -> empty .)
    right_par       reduce using rule 159 (nt_popPOper -> empty .)
    semicolon       reduce using rule 159 (nt_popPOper -> empty .)
    comma           reduce using rule 159 (nt_popPOper -> empty .)


state 317

    (118) TERMINO_AUX -> divide nt_pushPOper TERMINO .

    plus            reduce using rule 118 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    minus           reduce using rule 118 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    right_sb        reduce using rule 118 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    lt              reduce using rule 118 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    gt              reduce using rule 118 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    ne              reduce using rule 118 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    ge              reduce using rule 118 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    le              reduce using rule 118 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    et              reduce using rule 118 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    and             reduce using rule 118 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    or              reduce using rule 118 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    right_par       reduce using rule 118 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    semicolon       reduce using rule 118 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    comma           reduce using rule 118 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)


state 318

    (117) TERMINO_AUX -> multiply nt_pushPOper TERMINO .

    plus            reduce using rule 117 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    minus           reduce using rule 117 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    right_sb        reduce using rule 117 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    lt              reduce using rule 117 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    gt              reduce using rule 117 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    ne              reduce using rule 117 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    ge              reduce using rule 117 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    le              reduce using rule 117 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    et              reduce using rule 117 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    and             reduce using rule 117 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    or              reduce using rule 117 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    right_par       reduce using rule 117 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    semicolon       reduce using rule 117 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    comma           reduce using rule 117 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)


state 319

    (82) CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO . nt_pushLoop
    (84) nt_pushLoop -> . empty
    (160) empty -> .

    right_cb        reduce using rule 160 (empty -> .)
    list            reduce using rule 160 (empty -> .)
    var             reduce using rule 160 (empty -> .)
    if              reduce using rule 160 (empty -> .)
    while           reduce using rule 160 (empty -> .)
    cread           reduce using rule 160 (empty -> .)
    cwrite          reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    return          reduce using rule 160 (empty -> .)

    nt_pushLoop                    shift and go to state 339
    empty                          shift and go to state 340

state 320

    (73) CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .

    right_cb        reduce using rule 73 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    list            reduce using rule 73 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    var             reduce using rule 73 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    if              reduce using rule 73 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    while           reduce using rule 73 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    cread           reduce using rule 73 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    cwrite          reduce using rule 73 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    id              reduce using rule 73 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    return          reduce using rule 73 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)


state 321

    (80) nt_pushSalto -> empty .

    right_cb        reduce using rule 80 (nt_pushSalto -> empty .)
    list            reduce using rule 80 (nt_pushSalto -> empty .)
    var             reduce using rule 80 (nt_pushSalto -> empty .)
    if              reduce using rule 80 (nt_pushSalto -> empty .)
    while           reduce using rule 80 (nt_pushSalto -> empty .)
    cread           reduce using rule 80 (nt_pushSalto -> empty .)
    cwrite          reduce using rule 80 (nt_pushSalto -> empty .)
    id              reduce using rule 80 (nt_pushSalto -> empty .)
    return          reduce using rule 80 (nt_pushSalto -> empty .)


state 322

    (78) ELIF -> elseif nt_pushElse . CONDICION_AUX
    (73) CONDICION_AUX -> . left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto

    left_par        shift and go to state 126

    CONDICION_AUX                  shift and go to state 341

state 323

    (81) nt_pushElse -> empty .

    left_par        reduce using rule 81 (nt_pushElse -> empty .)
    left_cb         reduce using rule 81 (nt_pushElse -> empty .)


state 324

    (77) ELSE -> else nt_pushElse . CUERPO
    (32) CUERPO -> . left_cb CUERPO_AUX right_cb

    left_cb         shift and go to state 76

    CUERPO                         shift and go to state 342

state 325

    (98) EXPRESION_B -> and nt_pushPOper EXPRESION .

    right_par       reduce using rule 98 (EXPRESION_B -> and nt_pushPOper EXPRESION .)
    semicolon       reduce using rule 98 (EXPRESION_B -> and nt_pushPOper EXPRESION .)
    comma           reduce using rule 98 (EXPRESION_B -> and nt_pushPOper EXPRESION .)


state 326

    (99) EXPRESION_B -> or nt_pushPOper EXPRESION .

    right_par       reduce using rule 99 (EXPRESION_B -> or nt_pushPOper EXPRESION .)
    semicolon       reduce using rule 99 (EXPRESION_B -> or nt_pushPOper EXPRESION .)
    comma           reduce using rule 99 (EXPRESION_B -> or nt_pushPOper EXPRESION .)


state 327

    (105) EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop .

    and             reduce using rule 105 (EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop .)
    or              reduce using rule 105 (EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop .)
    right_par       reduce using rule 105 (EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop .)
    semicolon       reduce using rule 105 (EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop .)
    comma           reduce using rule 105 (EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop .)


state 328

    (109) nt_checarRelop -> empty .

    and             reduce using rule 109 (nt_checarRelop -> empty .)
    or              reduce using rule 109 (nt_checarRelop -> empty .)
    right_par       reduce using rule 109 (nt_checarRelop -> empty .)
    semicolon       reduce using rule 109 (nt_checarRelop -> empty .)
    comma           reduce using rule 109 (nt_checarRelop -> empty .)


state 329

    (103) EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop .

    and             reduce using rule 103 (EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop .)
    or              reduce using rule 103 (EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop .)
    right_par       reduce using rule 103 (EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop .)
    semicolon       reduce using rule 103 (EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop .)
    comma           reduce using rule 103 (EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop .)


state 330

    (104) EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop .

    and             reduce using rule 104 (EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop .)
    or              reduce using rule 104 (EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop .)
    right_par       reduce using rule 104 (EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop .)
    semicolon       reduce using rule 104 (EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop .)
    comma           reduce using rule 104 (EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop .)


state 331

    (102) EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop .

    and             reduce using rule 102 (EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop .)
    or              reduce using rule 102 (EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop .)
    right_par       reduce using rule 102 (EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop .)
    semicolon       reduce using rule 102 (EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop .)
    comma           reduce using rule 102 (EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop .)


state 332

    (106) EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop .

    and             reduce using rule 106 (EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop .)
    or              reduce using rule 106 (EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop .)
    right_par       reduce using rule 106 (EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop .)
    semicolon       reduce using rule 106 (EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop .)
    comma           reduce using rule 106 (EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop .)


state 333

    (107) EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop .

    and             reduce using rule 107 (EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop .)
    or              reduce using rule 107 (EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop .)
    right_par       reduce using rule 107 (EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop .)
    semicolon       reduce using rule 107 (EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop .)
    comma           reduce using rule 107 (EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop .)


state 334

    (89) LLAMADA -> id nt_verificaFuncId left_par nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par semicolon . nt_pushGoSub
    (136) nt_pushGoSub -> . empty
    (160) empty -> .

    right_cb        reduce using rule 160 (empty -> .)
    list            reduce using rule 160 (empty -> .)
    var             reduce using rule 160 (empty -> .)
    if              reduce using rule 160 (empty -> .)
    while           reduce using rule 160 (empty -> .)
    cread           reduce using rule 160 (empty -> .)
    cwrite          reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    return          reduce using rule 160 (empty -> .)

    nt_pushGoSub                   shift and go to state 343
    empty                          shift and go to state 344

state 335

    (93) LLAMADA_EXPRESION_AUX -> LLAMADA_EXPRESION_AUX comma nt_paramPP EXPRESION . nt_verifyArgType
    (134) nt_verifyArgType -> . empty
    (160) empty -> .

    comma           reduce using rule 160 (empty -> .)
    right_par       reduce using rule 160 (empty -> .)

    empty                          shift and go to state 278
    nt_verifyArgType               shift and go to state 345

state 336

    (130) LLAMADAF_AUX2 -> EXPRESION nt_verifyArgType .

    comma           reduce using rule 130 (LLAMADAF_AUX2 -> EXPRESION nt_verifyArgType .)
    right_par       reduce using rule 130 (LLAMADAF_AUX2 -> EXPRESION nt_verifyArgType .)


state 337

    (127) LLAMADA_F -> left_par nt_startERA LLAMADAF_AUX nt_verificaUltimo . right_par nt_pushGoSub

    right_par       shift and go to state 346


state 338

    (131) LLAMADAF_AUX2 -> LLAMADAF_AUX2 comma . nt_paramPP EXPRESION nt_verifyArgType
    (132) nt_paramPP -> . empty
    (160) empty -> .

    not             reduce using rule 160 (empty -> .)
    left_par        reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    plus            reduce using rule 160 (empty -> .)
    minus           reduce using rule 160 (empty -> .)
    true            reduce using rule 160 (empty -> .)
    false           reduce using rule 160 (empty -> .)
    cteString       reduce using rule 160 (empty -> .)
    cteInt          reduce using rule 160 (empty -> .)
    cteFloat        reduce using rule 160 (empty -> .)

    empty                          shift and go to state 308
    nt_paramPP                     shift and go to state 347

state 339

    (82) CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .

    list            reduce using rule 82 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    var             reduce using rule 82 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    if              reduce using rule 82 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    while           reduce using rule 82 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    cread           reduce using rule 82 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    cwrite          reduce using rule 82 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    id              reduce using rule 82 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    return          reduce using rule 82 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    right_cb        reduce using rule 82 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)


state 340

    (84) nt_pushLoop -> empty .

    right_cb        reduce using rule 84 (nt_pushLoop -> empty .)
    list            reduce using rule 84 (nt_pushLoop -> empty .)
    var             reduce using rule 84 (nt_pushLoop -> empty .)
    if              reduce using rule 84 (nt_pushLoop -> empty .)
    while           reduce using rule 84 (nt_pushLoop -> empty .)
    cread           reduce using rule 84 (nt_pushLoop -> empty .)
    cwrite          reduce using rule 84 (nt_pushLoop -> empty .)
    id              reduce using rule 84 (nt_pushLoop -> empty .)
    return          reduce using rule 84 (nt_pushLoop -> empty .)


state 341

    (78) ELIF -> elseif nt_pushElse CONDICION_AUX .

    right_cb        reduce using rule 78 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    list            reduce using rule 78 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    var             reduce using rule 78 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    if              reduce using rule 78 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    while           reduce using rule 78 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    cread           reduce using rule 78 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    cwrite          reduce using rule 78 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    id              reduce using rule 78 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    return          reduce using rule 78 (ELIF -> elseif nt_pushElse CONDICION_AUX .)


state 342

    (77) ELSE -> else nt_pushElse CUERPO .

    right_cb        reduce using rule 77 (ELSE -> else nt_pushElse CUERPO .)
    list            reduce using rule 77 (ELSE -> else nt_pushElse CUERPO .)
    var             reduce using rule 77 (ELSE -> else nt_pushElse CUERPO .)
    if              reduce using rule 77 (ELSE -> else nt_pushElse CUERPO .)
    while           reduce using rule 77 (ELSE -> else nt_pushElse CUERPO .)
    cread           reduce using rule 77 (ELSE -> else nt_pushElse CUERPO .)
    cwrite          reduce using rule 77 (ELSE -> else nt_pushElse CUERPO .)
    id              reduce using rule 77 (ELSE -> else nt_pushElse CUERPO .)
    return          reduce using rule 77 (ELSE -> else nt_pushElse CUERPO .)


state 343

    (89) LLAMADA -> id nt_verificaFuncId left_par nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par semicolon nt_pushGoSub .

    right_cb        reduce using rule 89 (LLAMADA -> id nt_verificaFuncId left_par nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par semicolon nt_pushGoSub .)
    list            reduce using rule 89 (LLAMADA -> id nt_verificaFuncId left_par nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par semicolon nt_pushGoSub .)
    var             reduce using rule 89 (LLAMADA -> id nt_verificaFuncId left_par nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par semicolon nt_pushGoSub .)
    if              reduce using rule 89 (LLAMADA -> id nt_verificaFuncId left_par nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par semicolon nt_pushGoSub .)
    while           reduce using rule 89 (LLAMADA -> id nt_verificaFuncId left_par nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par semicolon nt_pushGoSub .)
    cread           reduce using rule 89 (LLAMADA -> id nt_verificaFuncId left_par nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par semicolon nt_pushGoSub .)
    cwrite          reduce using rule 89 (LLAMADA -> id nt_verificaFuncId left_par nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par semicolon nt_pushGoSub .)
    id              reduce using rule 89 (LLAMADA -> id nt_verificaFuncId left_par nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par semicolon nt_pushGoSub .)
    return          reduce using rule 89 (LLAMADA -> id nt_verificaFuncId left_par nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par semicolon nt_pushGoSub .)


state 344

    (136) nt_pushGoSub -> empty .

    multiply        reduce using rule 136 (nt_pushGoSub -> empty .)
    divide          reduce using rule 136 (nt_pushGoSub -> empty .)
    plus            reduce using rule 136 (nt_pushGoSub -> empty .)
    minus           reduce using rule 136 (nt_pushGoSub -> empty .)
    right_sb        reduce using rule 136 (nt_pushGoSub -> empty .)
    lt              reduce using rule 136 (nt_pushGoSub -> empty .)
    gt              reduce using rule 136 (nt_pushGoSub -> empty .)
    ne              reduce using rule 136 (nt_pushGoSub -> empty .)
    ge              reduce using rule 136 (nt_pushGoSub -> empty .)
    le              reduce using rule 136 (nt_pushGoSub -> empty .)
    et              reduce using rule 136 (nt_pushGoSub -> empty .)
    and             reduce using rule 136 (nt_pushGoSub -> empty .)
    or              reduce using rule 136 (nt_pushGoSub -> empty .)
    right_par       reduce using rule 136 (nt_pushGoSub -> empty .)
    semicolon       reduce using rule 136 (nt_pushGoSub -> empty .)
    comma           reduce using rule 136 (nt_pushGoSub -> empty .)
    right_cb        reduce using rule 136 (nt_pushGoSub -> empty .)
    list            reduce using rule 136 (nt_pushGoSub -> empty .)
    var             reduce using rule 136 (nt_pushGoSub -> empty .)
    if              reduce using rule 136 (nt_pushGoSub -> empty .)
    while           reduce using rule 136 (nt_pushGoSub -> empty .)
    cread           reduce using rule 136 (nt_pushGoSub -> empty .)
    cwrite          reduce using rule 136 (nt_pushGoSub -> empty .)
    id              reduce using rule 136 (nt_pushGoSub -> empty .)
    return          reduce using rule 136 (nt_pushGoSub -> empty .)


state 345

    (93) LLAMADA_EXPRESION_AUX -> LLAMADA_EXPRESION_AUX comma nt_paramPP EXPRESION nt_verifyArgType .

    comma           reduce using rule 93 (LLAMADA_EXPRESION_AUX -> LLAMADA_EXPRESION_AUX comma nt_paramPP EXPRESION nt_verifyArgType .)
    right_par       reduce using rule 93 (LLAMADA_EXPRESION_AUX -> LLAMADA_EXPRESION_AUX comma nt_paramPP EXPRESION nt_verifyArgType .)


state 346

    (127) LLAMADA_F -> left_par nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par . nt_pushGoSub
    (136) nt_pushGoSub -> . empty
    (160) empty -> .

    multiply        reduce using rule 160 (empty -> .)
    divide          reduce using rule 160 (empty -> .)
    plus            reduce using rule 160 (empty -> .)
    minus           reduce using rule 160 (empty -> .)
    right_sb        reduce using rule 160 (empty -> .)
    lt              reduce using rule 160 (empty -> .)
    gt              reduce using rule 160 (empty -> .)
    ne              reduce using rule 160 (empty -> .)
    ge              reduce using rule 160 (empty -> .)
    le              reduce using rule 160 (empty -> .)
    et              reduce using rule 160 (empty -> .)
    and             reduce using rule 160 (empty -> .)
    or              reduce using rule 160 (empty -> .)
    right_par       reduce using rule 160 (empty -> .)
    semicolon       reduce using rule 160 (empty -> .)
    comma           reduce using rule 160 (empty -> .)

    empty                          shift and go to state 344
    nt_pushGoSub                   shift and go to state 348

state 347

    (131) LLAMADAF_AUX2 -> LLAMADAF_AUX2 comma nt_paramPP . EXPRESION nt_verifyArgType
    (94) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (96) EXPRESION_NOT -> . not nt_pushPOper
    (97) EXPRESION_NOT -> . empty
    (160) empty -> .

    not             shift and go to state 154
    left_par        reduce using rule 160 (empty -> .)
    id              reduce using rule 160 (empty -> .)
    plus            reduce using rule 160 (empty -> .)
    minus           reduce using rule 160 (empty -> .)
    true            reduce using rule 160 (empty -> .)
    false           reduce using rule 160 (empty -> .)
    cteString       reduce using rule 160 (empty -> .)
    cteInt          reduce using rule 160 (empty -> .)
    cteFloat        reduce using rule 160 (empty -> .)

    EXPRESION                      shift and go to state 349
    EXPRESION_NOT                  shift and go to state 153
    empty                          shift and go to state 155

state 348

    (127) LLAMADA_F -> left_par nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_pushGoSub .

    multiply        reduce using rule 127 (LLAMADA_F -> left_par nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_pushGoSub .)
    divide          reduce using rule 127 (LLAMADA_F -> left_par nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_pushGoSub .)
    plus            reduce using rule 127 (LLAMADA_F -> left_par nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_pushGoSub .)
    minus           reduce using rule 127 (LLAMADA_F -> left_par nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_pushGoSub .)
    right_sb        reduce using rule 127 (LLAMADA_F -> left_par nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_pushGoSub .)
    lt              reduce using rule 127 (LLAMADA_F -> left_par nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_pushGoSub .)
    gt              reduce using rule 127 (LLAMADA_F -> left_par nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_pushGoSub .)
    ne              reduce using rule 127 (LLAMADA_F -> left_par nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_pushGoSub .)
    ge              reduce using rule 127 (LLAMADA_F -> left_par nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_pushGoSub .)
    le              reduce using rule 127 (LLAMADA_F -> left_par nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_pushGoSub .)
    et              reduce using rule 127 (LLAMADA_F -> left_par nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_pushGoSub .)
    and             reduce using rule 127 (LLAMADA_F -> left_par nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_pushGoSub .)
    or              reduce using rule 127 (LLAMADA_F -> left_par nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_pushGoSub .)
    right_par       reduce using rule 127 (LLAMADA_F -> left_par nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_pushGoSub .)
    semicolon       reduce using rule 127 (LLAMADA_F -> left_par nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_pushGoSub .)
    comma           reduce using rule 127 (LLAMADA_F -> left_par nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_pushGoSub .)


state 349

    (131) LLAMADAF_AUX2 -> LLAMADAF_AUX2 comma nt_paramPP EXPRESION . nt_verifyArgType
    (134) nt_verifyArgType -> . empty
    (160) empty -> .

    comma           reduce using rule 160 (empty -> .)
    right_par       reduce using rule 160 (empty -> .)

    empty                          shift and go to state 278
    nt_verifyArgType               shift and go to state 350

state 350

    (131) LLAMADAF_AUX2 -> LLAMADAF_AUX2 comma nt_paramPP EXPRESION nt_verifyArgType .

    comma           reduce using rule 131 (LLAMADAF_AUX2 -> LLAMADAF_AUX2 comma nt_paramPP EXPRESION nt_verifyArgType .)
    right_par       reduce using rule 131 (LLAMADAF_AUX2 -> LLAMADAF_AUX2 comma nt_paramPP EXPRESION nt_verifyArgType .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for list in state 15 resolved as shift
WARNING: shift/reduce conflict for var in state 15 resolved as shift
WARNING: shift/reduce conflict for int in state 16 resolved as shift
WARNING: shift/reduce conflict for float in state 16 resolved as shift
WARNING: shift/reduce conflict for bool in state 16 resolved as shift
WARNING: shift/reduce conflict for string in state 16 resolved as shift
WARNING: shift/reduce conflict for void in state 16 resolved as shift
WARNING: shift/reduce conflict for int in state 26 resolved as shift
WARNING: shift/reduce conflict for float in state 26 resolved as shift
WARNING: shift/reduce conflict for bool in state 26 resolved as shift
WARNING: shift/reduce conflict for string in state 26 resolved as shift
WARNING: shift/reduce conflict for void in state 26 resolved as shift
WARNING: shift/reduce conflict for list in state 76 resolved as shift
WARNING: shift/reduce conflict for var in state 76 resolved as shift
WARNING: shift/reduce conflict for if in state 84 resolved as shift
WARNING: shift/reduce conflict for while in state 84 resolved as shift
WARNING: shift/reduce conflict for cread in state 84 resolved as shift
WARNING: shift/reduce conflict for cwrite in state 84 resolved as shift
WARNING: shift/reduce conflict for id in state 84 resolved as shift
WARNING: shift/reduce conflict for right_cb in state 87 resolved as shift
WARNING: shift/reduce conflict for list in state 87 resolved as shift
WARNING: shift/reduce conflict for var in state 87 resolved as shift
WARNING: shift/reduce conflict for if in state 113 resolved as shift
WARNING: shift/reduce conflict for while in state 113 resolved as shift
WARNING: shift/reduce conflict for cread in state 113 resolved as shift
WARNING: shift/reduce conflict for cwrite in state 113 resolved as shift
WARNING: shift/reduce conflict for id in state 113 resolved as shift
WARNING: shift/reduce conflict for list in state 123 resolved as shift
WARNING: shift/reduce conflict for var in state 123 resolved as shift
WARNING: shift/reduce conflict for list in state 137 resolved as shift
WARNING: shift/reduce conflict for var in state 137 resolved as shift
WARNING: shift/reduce conflict for list in state 144 resolved as shift
WARNING: shift/reduce conflict for var in state 144 resolved as shift
WARNING: shift/reduce conflict for list in state 145 resolved as shift
WARNING: shift/reduce conflict for var in state 145 resolved as shift
WARNING: shift/reduce conflict for if in state 190 resolved as shift
WARNING: shift/reduce conflict for while in state 190 resolved as shift
WARNING: shift/reduce conflict for cread in state 190 resolved as shift
WARNING: shift/reduce conflict for cwrite in state 190 resolved as shift
WARNING: shift/reduce conflict for id in state 190 resolved as shift
WARNING: shift/reduce conflict for if in state 226 resolved as shift
WARNING: shift/reduce conflict for while in state 226 resolved as shift
WARNING: shift/reduce conflict for cread in state 226 resolved as shift
WARNING: shift/reduce conflict for cwrite in state 226 resolved as shift
WARNING: shift/reduce conflict for id in state 226 resolved as shift
WARNING: reduce/reduce conflict in state 42 resolved using rule (nt_cambiarScope -> empty)
WARNING: rejected rule (PROGRAMA_FUNC_AUX -> empty) in state 42
WARNING: reduce/reduce conflict in state 145 resolved using rule (CUERPOFUNC -> CUERPOFUNC_AUX)
WARNING: rejected rule (empty -> <empty>) in state 145
WARNING: reduce/reduce conflict in state 149 resolved using rule (CUERPOFUNC_VARS -> empty)
WARNING: rejected rule (CUERPORETORNO_CF_AUX -> empty) in state 149
WARNING: Rule (CUERPORETORNO_CF_AUX -> empty) is never reduced
