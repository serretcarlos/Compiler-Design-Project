Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    right_dblquotes
    left_dblquotes

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> program id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO nt_endQuad
Rule 2     nt_cambiarScope -> empty
Rule 3     nt_ambienteMain -> nt_cambiarScope
Rule 4     nt_endQuad -> empty
Rule 5     nt_pushJmpMain -> empty
Rule 6     PROGRAMA_VARS -> VARS
Rule 7     PROGRAMA_VARS -> empty
Rule 8     PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX
Rule 9     PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX
Rule 10    PROGRAMA_FUNC_AUX -> FUNC
Rule 11    PROGRAMA_FUNC_AUX -> empty
Rule 12    VARS -> VARS_AUX
Rule 13    VARS_AUX -> VARS_LIST_VAR
Rule 14    VARS_AUX -> VARS_AUX VARS_LIST_VAR
Rule 15    VARS_LIST_VAR -> VARS_LIST
Rule 16    VARS_LIST_VAR -> VARS_VAR
Rule 17    VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon
Rule 18    nt_hacerLista -> empty
Rule 19    VARS_LIST_AUX -> id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar
Rule 20    VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar
Rule 21    nt_agregarId -> empty
Rule 22    nt_agregarCteLista -> empty
Rule 23    nt_agregarDicVar -> empty
Rule 24    VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon
Rule 25    nt_hacerVar -> empty
Rule 26    VARS_VAR_AUX -> id nt_agregarId nt_agregarDicVar
Rule 27    VARS_VAR_AUX -> VARS_VAR_AUX comma id nt_agregarId nt_agregarDicVar
Rule 28    TIPO -> int nt_cambioTipoActual
Rule 29    TIPO -> float nt_cambioTipoActual
Rule 30    TIPO -> bool nt_cambioTipoActual
Rule 31    TIPO -> string nt_cambioTipoActual
Rule 32    nt_cambioTipoActual -> empty
Rule 33    CUERPO -> left_cb CUERPO_AUX right_cb
Rule 34    CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO
Rule 35    CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO
Rule 36    CUERPO_VARS -> VARS
Rule 37    CUERPO_VARS -> empty
Rule 38    CUERPO_ESTATUTO -> ESTATUTO
Rule 39    CUERPO_ESTATUTO -> empty
Rule 40    CUERPOFUNC -> CUERPOFUNC_AUX
Rule 41    CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
Rule 42    CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
Rule 43    nt_funcInicio -> empty
Rule 44    CUERPOFUNC_VARS -> VARS
Rule 45    CUERPOFUNC_VARS -> empty
Rule 46    CUERPOFUNC_ESTATUTO -> ESTATUTO
Rule 47    CUERPOFUNC_ESTATUTO -> empty
Rule 48    CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb
Rule 49    CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO
Rule 50    CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO
Rule 51    CUERPORETORNO_CF_AUX -> CUERPOFUNC
Rule 52    CUERPORETORNO_CF_AUX -> empty
Rule 53    RETORNO -> return EXP nt_checaRet semicolon
Rule 54    nt_checaRet -> empty
Rule 55    FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub
Rule 56    FUNC -> VOIDFUNC nt_pushEndsub
Rule 57    nt_pushEndsub -> empty
Rule 58    nt_cambioFuncActual -> empty
Rule 59    nt_agregarIdFunc -> empty
Rule 60    FUNC_PARA -> TIPO id nt_agregarParametro
Rule 61    FUNC_PARA -> FUNC_PARA comma TIPO id nt_agregarParametro
Rule 62    FUNC_PARA -> empty
Rule 63    nt_agregarParametro -> empty
Rule 64    VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb
Rule 65    nt_hacerVoid -> empty
Rule 66    VOIDFUNC_PARA -> TIPO id nt_agregarParametro
Rule 67    VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO id nt_agregarParametro
Rule 68    VOIDFUNC_PARA -> empty
Rule 69    ESTATUTO -> ASIGNACION
Rule 70    ESTATUTO -> CONDICION
Rule 71    ESTATUTO -> CICLO
Rule 72    ESTATUTO -> LECTURA
Rule 73    ESTATUTO -> ESCRITURA
Rule 74    ESTATUTO -> LLAMADA
Rule 75    CONDICION -> if CONDICION_AUX
Rule 76    CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto
Rule 77    ELSE_ELIF -> ELSE
Rule 78    ELSE_ELIF -> ELIF
Rule 79    ELSE_ELIF -> empty
Rule 80    ELSE -> else nt_pushElse CUERPO
Rule 81    ELIF -> elseif nt_pushElse CONDICION_AUX
Rule 82    nt_checarBool -> empty
Rule 83    nt_pushSalto -> empty
Rule 84    nt_pushElse -> empty
Rule 85    CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop
Rule 86    nt_saltoLoop -> empty
Rule 87    nt_pushLoop -> empty
Rule 88    LECTURA -> cread left_par id nt_leer right_par semicolon
Rule 89    nt_leer -> empty
Rule 90    ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon
Rule 91    nt_escribir -> empty
Rule 92    LLAMADA -> id nt_verificaFuncId left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub
Rule 93    LLAMADA_EXPRESION -> LLAMADA_EXPRESION_AUX
Rule 94    LLAMADA_EXPRESION -> empty
Rule 95    LLAMADA_EXPRESION_AUX -> EXPRESION nt_verifyArgType
Rule 96    LLAMADA_EXPRESION_AUX -> LLAMADA_EXPRESION_AUX comma nt_paramPP EXPRESION nt_verifyArgType
Rule 97    EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
Rule 98    nt_checaAndOrNot -> empty
Rule 99    EXPRESION_NOT -> not nt_pushPOper
Rule 100   EXPRESION_NOT -> empty
Rule 101   EXPRESION_B -> and nt_pushPOper EXPRESION
Rule 102   EXPRESION_B -> or nt_pushPOper EXPRESION
Rule 103   EXPRESION_B -> empty
Rule 104   EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX
Rule 105   EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop
Rule 106   EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop
Rule 107   EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop
Rule 108   EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop
Rule 109   EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop
Rule 110   EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop
Rule 111   EXPRESIONLOGICA_AUX -> empty
Rule 112   nt_checarRelop -> empty
Rule 113   EXP -> TERMINO nt_checar_sumas EXP_AUX
Rule 114   nt_checar_sumas -> empty
Rule 115   EXP_AUX -> plus nt_pushPOper EXP
Rule 116   EXP_AUX -> minus nt_pushPOper EXP
Rule 117   EXP_AUX -> empty
Rule 118   TERMINO -> FACTOR nt_checar_multis TERMINO_AUX
Rule 119   nt_checar_multis -> empty
Rule 120   TERMINO_AUX -> multiply nt_pushPOper TERMINO
Rule 121   TERMINO_AUX -> divide nt_pushPOper TERMINO
Rule 122   TERMINO_AUX -> empty
Rule 123   FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper
Rule 124   FACTOR -> CONSTANTE
Rule 125   FACTOR -> LISTA
Rule 126   FACTOR -> FACTOR_AUX
Rule 127   FACTOR_AUX -> id nt_pushPilaO
Rule 128   FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F
Rule 129   nt_verificaFuncId -> empty
Rule 130   LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet
Rule 131   LLAMADAF_AUX -> LLAMADAF_AUX2
Rule 132   LLAMADAF_AUX -> empty
Rule 133   LLAMADAF_AUX2 -> EXPRESION nt_verifyArgType
Rule 134   LLAMADAF_AUX2 -> LLAMADAF_AUX2 comma nt_paramPP EXPRESION nt_verifyArgType
Rule 135   nt_paramPP -> empty
Rule 136   nt_startERA -> empty
Rule 137   nt_verifyArgType -> empty
Rule 138   nt_verificaUltimo -> empty
Rule 139   nt_pushGoSub -> empty
Rule 140   nt_asignarRet -> empty
Rule 141   LISTA -> id left_sb EXP right_sb
Rule 142   CONSTANTE -> NUMERICA
Rule 143   CONSTANTE -> BOOLEANA
Rule 144   CONSTANTE -> STRINGS
Rule 145   NUMERICA -> NUMERICA_AUX
Rule 146   NUMERICA -> plus nt_sigMas NUMERICA_AUX
Rule 147   NUMERICA -> minus nt_sigMenos NUMERICA_AUX
Rule 148   nt_sigMas -> empty
Rule 149   nt_sigMenos -> empty
Rule 150   NUMERICA_AUX -> cteInt nt_pushInt
Rule 151   NUMERICA_AUX -> cteFloat nt_pushFloat
Rule 152   nt_pushInt -> empty
Rule 153   nt_pushFloat -> empty
Rule 154   BOOLEANA -> true
Rule 155   BOOLEANA -> false
Rule 156   STRINGS -> cteString
Rule 157   ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon
Rule 158   nt_checaEquals -> empty
Rule 159   ASIGNACION_AUX -> id nt_pushPilaO
Rule 160   ASIGNACION_AUX -> LISTA
Rule 161   nt_pushPilaO -> empty
Rule 162   nt_pushPOper -> empty
Rule 163   nt_popPOper -> empty
Rule 164   empty -> <empty>

Terminals, with rules where they appear

and                  : 101
bool                 : 30
comma                : 20 27 61 67 96 134
cread                : 88
cteFloat             : 151
cteInt               : 19 20 150
cteString            : 156
cwrite               : 90
divide               : 121
else                 : 80
elseif               : 81
equals               : 157
error                : 
et                   : 110
false                : 155
float                : 29
ge                   : 108
gt                   : 106
id                   : 1 19 20 26 27 55 60 61 64 66 67 88 92 127 128 141 159
if                   : 75
int                  : 28
le                   : 109
left_cb              : 33 48 64
left_dblquotes       : 
left_par             : 55 64 76 85 88 90 92 123 130
left_sb              : 19 20 141
list                 : 17
lt                   : 105
main                 : 1
minus                : 116 147
multiply             : 120
ne                   : 107
not                  : 99
or                   : 102
plus                 : 115 146
program              : 1
return               : 53
right_cb             : 33 48 64
right_dblquotes      : 
right_par            : 55 64 76 85 88 90 92 123 130
right_sb             : 19 20 141
semicolon            : 1 17 24 53 88 90 92 157
string               : 31
true                 : 154
var                  : 24
void                 : 64
while                : 85

Nonterminals, with rules where they appear

ASIGNACION           : 69
ASIGNACION_AUX       : 157
BOOLEANA             : 143
CICLO                : 71
CONDICION            : 70
CONDICION_AUX        : 75 81
CONSTANTE            : 124
CUERPO               : 1 76 80 85
CUERPOFUNC           : 51 64
CUERPOFUNC_AUX       : 40 42
CUERPOFUNC_ESTATUTO  : 41 42
CUERPOFUNC_VARS      : 41 42
CUERPORETORNO        : 55
CUERPORETORNO_AUX    : 48 50
CUERPORETORNO_CF_AUX : 49 50
CUERPO_AUX           : 33 35
CUERPO_ESTATUTO      : 34 35
CUERPO_VARS          : 34 35
ELIF                 : 78
ELSE                 : 77
ELSE_ELIF            : 76
ESCRITURA            : 73
ESTATUTO             : 38 46
EXP                  : 53 104 105 106 107 108 109 110 115 116 141
EXPRESION            : 76 85 90 95 96 101 102 123 133 134 157
EXPRESIONLOGICA      : 97
EXPRESIONLOGICA_AUX  : 104
EXPRESION_B          : 97
EXPRESION_NOT        : 97
EXP_AUX              : 113
FACTOR               : 118
FACTOR_AUX           : 126
FUNC                 : 10
FUNC_PARA            : 55 61
LECTURA              : 72
LISTA                : 125 160
LLAMADA              : 74
LLAMADAF_AUX         : 130
LLAMADAF_AUX2        : 131 134
LLAMADA_EXPRESION    : 92
LLAMADA_EXPRESION_AUX : 93 96
LLAMADA_F            : 128
NUMERICA             : 142
NUMERICA_AUX         : 145 146 147
PROGRAMA             : 0
PROGRAMA_FUNC        : 1 9
PROGRAMA_FUNC_AUX    : 8 9
PROGRAMA_VARS        : 1
RETORNO              : 49 50
STRINGS              : 144
TERMINO              : 113 120 121
TERMINO_AUX          : 118
TIPO                 : 17 24 55 60 61 66 67
VARS                 : 6 36 44
VARS_AUX             : 12 14
VARS_LIST            : 15
VARS_LIST_AUX        : 17 20
VARS_LIST_VAR        : 13 14
VARS_VAR             : 16
VARS_VAR_AUX         : 24 27
VOIDFUNC             : 56
VOIDFUNC_PARA        : 64 67
empty                : 2 4 5 7 11 18 21 22 23 25 32 37 39 43 45 47 52 54 57 58 59 62 63 65 68 79 82 83 84 86 87 89 91 94 98 100 103 111 112 114 117 119 122 129 132 135 136 137 138 139 140 148 149 152 153 158 161 162 163
nt_agregarCteLista   : 19 20
nt_agregarDicVar     : 19 20 26 27
nt_agregarId         : 19 20 26 27
nt_agregarIdFunc     : 55 64
nt_agregarParametro  : 60 61 66 67
nt_ambienteMain      : 1
nt_asignarRet        : 130
nt_cambiarScope      : 1 1 3
nt_cambioFuncActual  : 55
nt_cambioTipoActual  : 28 29 30 31
nt_checaAndOrNot     : 97
nt_checaEquals       : 157
nt_checaRet          : 53
nt_checarBool        : 76 85
nt_checarRelop       : 105 106 107 108 109 110
nt_checar_multis     : 118
nt_checar_sumas      : 113
nt_endQuad           : 1
nt_escribir          : 90
nt_funcInicio        : 41 42
nt_hacerLista        : 17
nt_hacerVar          : 24
nt_hacerVoid         : 64
nt_leer              : 88
nt_paramPP           : 96 134
nt_popPOper          : 92 123 130
nt_pushElse          : 80 81
nt_pushEndsub        : 55 56
nt_pushFloat         : 151
nt_pushGoSub         : 92 130
nt_pushInt           : 150
nt_pushJmpMain       : 1
nt_pushLoop          : 85
nt_pushPOper         : 92 99 101 102 105 106 107 108 109 110 115 116 120 121 123 130 157
nt_pushPilaO         : 127 159
nt_pushSalto         : 76
nt_saltoLoop         : 85
nt_sigMas            : 146
nt_sigMenos          : 147
nt_startERA          : 92 130
nt_verificaFuncId    : 92 128
nt_verificaUltimo    : 92 130
nt_verifyArgType     : 95 96 133 134

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . program id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO nt_endQuad

    program         shift and go to state 1

    PROGRAMA                       shift and go to state 2

state 1

    (1) PROGRAMA -> program . id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO nt_endQuad

    id              shift and go to state 3


state 2

    (0) S' -> PROGRAMA .



state 3

    (1) PROGRAMA -> program id . nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO nt_endQuad
    (5) nt_pushJmpMain -> . empty
    (164) empty -> .

    semicolon       reduce using rule 164 (empty -> .)

    nt_pushJmpMain                 shift and go to state 4
    empty                          shift and go to state 5

state 4

    (1) PROGRAMA -> program id nt_pushJmpMain . semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO nt_endQuad

    semicolon       shift and go to state 6


state 5

    (5) nt_pushJmpMain -> empty .

    semicolon       reduce using rule 5 (nt_pushJmpMain -> empty .)


state 6

    (1) PROGRAMA -> program id nt_pushJmpMain semicolon . PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO nt_endQuad
    (6) PROGRAMA_VARS -> . VARS
    (7) PROGRAMA_VARS -> . empty
    (12) VARS -> . VARS_AUX
    (164) empty -> .
    (13) VARS_AUX -> . VARS_LIST_VAR
    (14) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (15) VARS_LIST_VAR -> . VARS_LIST
    (16) VARS_LIST_VAR -> . VARS_VAR
    (17) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (24) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

    int             reduce using rule 164 (empty -> .)
    float           reduce using rule 164 (empty -> .)
    bool            reduce using rule 164 (empty -> .)
    string          reduce using rule 164 (empty -> .)
    void            reduce using rule 164 (empty -> .)
    main            reduce using rule 164 (empty -> .)
    list            shift and go to state 14
    var             shift and go to state 10

    VARS                           shift and go to state 7
    VARS_LIST                      shift and go to state 9
    VARS_LIST_VAR                  shift and go to state 12
    PROGRAMA_VARS                  shift and go to state 8
    VARS_AUX                       shift and go to state 15
    VARS_VAR                       shift and go to state 13
    empty                          shift and go to state 11

state 7

    (6) PROGRAMA_VARS -> VARS .

    int             reduce using rule 6 (PROGRAMA_VARS -> VARS .)
    float           reduce using rule 6 (PROGRAMA_VARS -> VARS .)
    bool            reduce using rule 6 (PROGRAMA_VARS -> VARS .)
    string          reduce using rule 6 (PROGRAMA_VARS -> VARS .)
    void            reduce using rule 6 (PROGRAMA_VARS -> VARS .)
    main            reduce using rule 6 (PROGRAMA_VARS -> VARS .)


state 8

    (1) PROGRAMA -> program id nt_pushJmpMain semicolon PROGRAMA_VARS . nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO nt_endQuad
    (2) nt_cambiarScope -> . empty
    (164) empty -> .

    int             reduce using rule 164 (empty -> .)
    float           reduce using rule 164 (empty -> .)
    bool            reduce using rule 164 (empty -> .)
    string          reduce using rule 164 (empty -> .)
    void            reduce using rule 164 (empty -> .)
    main            reduce using rule 164 (empty -> .)

    nt_cambiarScope                shift and go to state 16
    empty                          shift and go to state 17

state 9

    (15) VARS_LIST_VAR -> VARS_LIST .

    list            reduce using rule 15 (VARS_LIST_VAR -> VARS_LIST .)
    var             reduce using rule 15 (VARS_LIST_VAR -> VARS_LIST .)
    if              reduce using rule 15 (VARS_LIST_VAR -> VARS_LIST .)
    while           reduce using rule 15 (VARS_LIST_VAR -> VARS_LIST .)
    cread           reduce using rule 15 (VARS_LIST_VAR -> VARS_LIST .)
    cwrite          reduce using rule 15 (VARS_LIST_VAR -> VARS_LIST .)
    id              reduce using rule 15 (VARS_LIST_VAR -> VARS_LIST .)
    return          reduce using rule 15 (VARS_LIST_VAR -> VARS_LIST .)
    right_cb        reduce using rule 15 (VARS_LIST_VAR -> VARS_LIST .)
    int             reduce using rule 15 (VARS_LIST_VAR -> VARS_LIST .)
    float           reduce using rule 15 (VARS_LIST_VAR -> VARS_LIST .)
    bool            reduce using rule 15 (VARS_LIST_VAR -> VARS_LIST .)
    string          reduce using rule 15 (VARS_LIST_VAR -> VARS_LIST .)
    void            reduce using rule 15 (VARS_LIST_VAR -> VARS_LIST .)
    main            reduce using rule 15 (VARS_LIST_VAR -> VARS_LIST .)


state 10

    (24) VARS_VAR -> var . nt_hacerVar TIPO VARS_VAR_AUX semicolon
    (25) nt_hacerVar -> . empty
    (164) empty -> .

    int             reduce using rule 164 (empty -> .)
    float           reduce using rule 164 (empty -> .)
    bool            reduce using rule 164 (empty -> .)
    string          reduce using rule 164 (empty -> .)

    nt_hacerVar                    shift and go to state 18
    empty                          shift and go to state 19

state 11

    (7) PROGRAMA_VARS -> empty .

    int             reduce using rule 7 (PROGRAMA_VARS -> empty .)
    float           reduce using rule 7 (PROGRAMA_VARS -> empty .)
    bool            reduce using rule 7 (PROGRAMA_VARS -> empty .)
    string          reduce using rule 7 (PROGRAMA_VARS -> empty .)
    void            reduce using rule 7 (PROGRAMA_VARS -> empty .)
    main            reduce using rule 7 (PROGRAMA_VARS -> empty .)


state 12

    (13) VARS_AUX -> VARS_LIST_VAR .

    list            reduce using rule 13 (VARS_AUX -> VARS_LIST_VAR .)
    var             reduce using rule 13 (VARS_AUX -> VARS_LIST_VAR .)
    if              reduce using rule 13 (VARS_AUX -> VARS_LIST_VAR .)
    while           reduce using rule 13 (VARS_AUX -> VARS_LIST_VAR .)
    cread           reduce using rule 13 (VARS_AUX -> VARS_LIST_VAR .)
    cwrite          reduce using rule 13 (VARS_AUX -> VARS_LIST_VAR .)
    id              reduce using rule 13 (VARS_AUX -> VARS_LIST_VAR .)
    return          reduce using rule 13 (VARS_AUX -> VARS_LIST_VAR .)
    right_cb        reduce using rule 13 (VARS_AUX -> VARS_LIST_VAR .)
    int             reduce using rule 13 (VARS_AUX -> VARS_LIST_VAR .)
    float           reduce using rule 13 (VARS_AUX -> VARS_LIST_VAR .)
    bool            reduce using rule 13 (VARS_AUX -> VARS_LIST_VAR .)
    string          reduce using rule 13 (VARS_AUX -> VARS_LIST_VAR .)
    void            reduce using rule 13 (VARS_AUX -> VARS_LIST_VAR .)
    main            reduce using rule 13 (VARS_AUX -> VARS_LIST_VAR .)


state 13

    (16) VARS_LIST_VAR -> VARS_VAR .

    list            reduce using rule 16 (VARS_LIST_VAR -> VARS_VAR .)
    var             reduce using rule 16 (VARS_LIST_VAR -> VARS_VAR .)
    if              reduce using rule 16 (VARS_LIST_VAR -> VARS_VAR .)
    while           reduce using rule 16 (VARS_LIST_VAR -> VARS_VAR .)
    cread           reduce using rule 16 (VARS_LIST_VAR -> VARS_VAR .)
    cwrite          reduce using rule 16 (VARS_LIST_VAR -> VARS_VAR .)
    id              reduce using rule 16 (VARS_LIST_VAR -> VARS_VAR .)
    return          reduce using rule 16 (VARS_LIST_VAR -> VARS_VAR .)
    right_cb        reduce using rule 16 (VARS_LIST_VAR -> VARS_VAR .)
    int             reduce using rule 16 (VARS_LIST_VAR -> VARS_VAR .)
    float           reduce using rule 16 (VARS_LIST_VAR -> VARS_VAR .)
    bool            reduce using rule 16 (VARS_LIST_VAR -> VARS_VAR .)
    string          reduce using rule 16 (VARS_LIST_VAR -> VARS_VAR .)
    void            reduce using rule 16 (VARS_LIST_VAR -> VARS_VAR .)
    main            reduce using rule 16 (VARS_LIST_VAR -> VARS_VAR .)


state 14

    (17) VARS_LIST -> list . nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (18) nt_hacerLista -> . empty
    (164) empty -> .

    int             reduce using rule 164 (empty -> .)
    float           reduce using rule 164 (empty -> .)
    bool            reduce using rule 164 (empty -> .)
    string          reduce using rule 164 (empty -> .)

    empty                          shift and go to state 21
    nt_hacerLista                  shift and go to state 20

state 15

    (12) VARS -> VARS_AUX .
    (14) VARS_AUX -> VARS_AUX . VARS_LIST_VAR
    (15) VARS_LIST_VAR -> . VARS_LIST
    (16) VARS_LIST_VAR -> . VARS_VAR
    (17) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (24) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    int             reduce using rule 12 (VARS -> VARS_AUX .)
    float           reduce using rule 12 (VARS -> VARS_AUX .)
    bool            reduce using rule 12 (VARS -> VARS_AUX .)
    string          reduce using rule 12 (VARS -> VARS_AUX .)
    void            reduce using rule 12 (VARS -> VARS_AUX .)
    main            reduce using rule 12 (VARS -> VARS_AUX .)
    if              reduce using rule 12 (VARS -> VARS_AUX .)
    while           reduce using rule 12 (VARS -> VARS_AUX .)
    cread           reduce using rule 12 (VARS -> VARS_AUX .)
    cwrite          reduce using rule 12 (VARS -> VARS_AUX .)
    id              reduce using rule 12 (VARS -> VARS_AUX .)
    right_cb        reduce using rule 12 (VARS -> VARS_AUX .)
    return          reduce using rule 12 (VARS -> VARS_AUX .)
    list            shift and go to state 14
    var             shift and go to state 10

  ! list            [ reduce using rule 12 (VARS -> VARS_AUX .) ]
  ! var             [ reduce using rule 12 (VARS -> VARS_AUX .) ]

    VARS_LIST                      shift and go to state 9
    VARS_LIST_VAR                  shift and go to state 22
    VARS_VAR                       shift and go to state 13

state 16

    (1) PROGRAMA -> program id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope . PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO nt_endQuad
    (8) PROGRAMA_FUNC -> . PROGRAMA_FUNC_AUX
    (9) PROGRAMA_FUNC -> . PROGRAMA_FUNC PROGRAMA_FUNC_AUX
    (10) PROGRAMA_FUNC_AUX -> . FUNC
    (11) PROGRAMA_FUNC_AUX -> . empty
    (55) FUNC -> . TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub
    (56) FUNC -> . VOIDFUNC nt_pushEndsub
    (164) empty -> .
    (28) TIPO -> . int nt_cambioTipoActual
    (29) TIPO -> . float nt_cambioTipoActual
    (30) TIPO -> . bool nt_cambioTipoActual
    (31) TIPO -> . string nt_cambioTipoActual
    (64) VOIDFUNC -> . void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb

  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for bool resolved as shift
  ! shift/reduce conflict for string resolved as shift
  ! shift/reduce conflict for void resolved as shift
    main            reduce using rule 164 (empty -> .)
    int             shift and go to state 23
    float           shift and go to state 24
    bool            shift and go to state 28
    string          shift and go to state 31
    void            shift and go to state 32

  ! int             [ reduce using rule 164 (empty -> .) ]
  ! float           [ reduce using rule 164 (empty -> .) ]
  ! bool            [ reduce using rule 164 (empty -> .) ]
  ! string          [ reduce using rule 164 (empty -> .) ]
  ! void            [ reduce using rule 164 (empty -> .) ]

    PROGRAMA_FUNC_AUX              shift and go to state 27
    TIPO                           shift and go to state 25
    PROGRAMA_FUNC                  shift and go to state 26
    VOIDFUNC                       shift and go to state 29
    FUNC                           shift and go to state 33
    empty                          shift and go to state 30

state 17

    (2) nt_cambiarScope -> empty .

    left_cb         reduce using rule 2 (nt_cambiarScope -> empty .)
    int             reduce using rule 2 (nt_cambiarScope -> empty .)
    float           reduce using rule 2 (nt_cambiarScope -> empty .)
    bool            reduce using rule 2 (nt_cambiarScope -> empty .)
    string          reduce using rule 2 (nt_cambiarScope -> empty .)
    void            reduce using rule 2 (nt_cambiarScope -> empty .)
    main            reduce using rule 2 (nt_cambiarScope -> empty .)


state 18

    (24) VARS_VAR -> var nt_hacerVar . TIPO VARS_VAR_AUX semicolon
    (28) TIPO -> . int nt_cambioTipoActual
    (29) TIPO -> . float nt_cambioTipoActual
    (30) TIPO -> . bool nt_cambioTipoActual
    (31) TIPO -> . string nt_cambioTipoActual

    int             shift and go to state 23
    float           shift and go to state 24
    bool            shift and go to state 28
    string          shift and go to state 31

    TIPO                           shift and go to state 34

state 19

    (25) nt_hacerVar -> empty .

    int             reduce using rule 25 (nt_hacerVar -> empty .)
    float           reduce using rule 25 (nt_hacerVar -> empty .)
    bool            reduce using rule 25 (nt_hacerVar -> empty .)
    string          reduce using rule 25 (nt_hacerVar -> empty .)


state 20

    (17) VARS_LIST -> list nt_hacerLista . TIPO VARS_LIST_AUX semicolon
    (28) TIPO -> . int nt_cambioTipoActual
    (29) TIPO -> . float nt_cambioTipoActual
    (30) TIPO -> . bool nt_cambioTipoActual
    (31) TIPO -> . string nt_cambioTipoActual

    int             shift and go to state 23
    float           shift and go to state 24
    bool            shift and go to state 28
    string          shift and go to state 31

    TIPO                           shift and go to state 35

state 21

    (18) nt_hacerLista -> empty .

    int             reduce using rule 18 (nt_hacerLista -> empty .)
    float           reduce using rule 18 (nt_hacerLista -> empty .)
    bool            reduce using rule 18 (nt_hacerLista -> empty .)
    string          reduce using rule 18 (nt_hacerLista -> empty .)


state 22

    (14) VARS_AUX -> VARS_AUX VARS_LIST_VAR .

    list            reduce using rule 14 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    var             reduce using rule 14 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    if              reduce using rule 14 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    while           reduce using rule 14 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    cread           reduce using rule 14 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    cwrite          reduce using rule 14 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    id              reduce using rule 14 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    return          reduce using rule 14 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    right_cb        reduce using rule 14 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    int             reduce using rule 14 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    float           reduce using rule 14 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    bool            reduce using rule 14 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    string          reduce using rule 14 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    void            reduce using rule 14 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)
    main            reduce using rule 14 (VARS_AUX -> VARS_AUX VARS_LIST_VAR .)


state 23

    (28) TIPO -> int . nt_cambioTipoActual
    (32) nt_cambioTipoActual -> . empty
    (164) empty -> .

    id              reduce using rule 164 (empty -> .)

    nt_cambioTipoActual            shift and go to state 36
    empty                          shift and go to state 37

state 24

    (29) TIPO -> float . nt_cambioTipoActual
    (32) nt_cambioTipoActual -> . empty
    (164) empty -> .

    id              reduce using rule 164 (empty -> .)

    nt_cambioTipoActual            shift and go to state 38
    empty                          shift and go to state 37

state 25

    (55) FUNC -> TIPO . nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub
    (58) nt_cambioFuncActual -> . empty
    (164) empty -> .

    id              reduce using rule 164 (empty -> .)

    nt_cambioFuncActual            shift and go to state 39
    empty                          shift and go to state 40

state 26

    (1) PROGRAMA -> program id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC . nt_cambiarScope main nt_ambienteMain CUERPO nt_endQuad
    (9) PROGRAMA_FUNC -> PROGRAMA_FUNC . PROGRAMA_FUNC_AUX
    (2) nt_cambiarScope -> . empty
    (10) PROGRAMA_FUNC_AUX -> . FUNC
    (11) PROGRAMA_FUNC_AUX -> . empty
    (164) empty -> .
    (55) FUNC -> . TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub
    (56) FUNC -> . VOIDFUNC nt_pushEndsub
    (28) TIPO -> . int nt_cambioTipoActual
    (29) TIPO -> . float nt_cambioTipoActual
    (30) TIPO -> . bool nt_cambioTipoActual
    (31) TIPO -> . string nt_cambioTipoActual
    (64) VOIDFUNC -> . void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb

  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for bool resolved as shift
  ! shift/reduce conflict for string resolved as shift
  ! shift/reduce conflict for void resolved as shift
    main            reduce using rule 164 (empty -> .)
    int             shift and go to state 23
    float           shift and go to state 24
    bool            shift and go to state 28
    string          shift and go to state 31
    void            shift and go to state 32

  ! int             [ reduce using rule 164 (empty -> .) ]
  ! float           [ reduce using rule 164 (empty -> .) ]
  ! bool            [ reduce using rule 164 (empty -> .) ]
  ! string          [ reduce using rule 164 (empty -> .) ]
  ! void            [ reduce using rule 164 (empty -> .) ]

    PROGRAMA_FUNC_AUX              shift and go to state 41
    TIPO                           shift and go to state 25
    VOIDFUNC                       shift and go to state 29
    FUNC                           shift and go to state 33
    nt_cambiarScope                shift and go to state 43
    empty                          shift and go to state 42

state 27

    (8) PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .

    int             reduce using rule 8 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)
    float           reduce using rule 8 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)
    bool            reduce using rule 8 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)
    string          reduce using rule 8 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)
    void            reduce using rule 8 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)
    main            reduce using rule 8 (PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX .)


state 28

    (30) TIPO -> bool . nt_cambioTipoActual
    (32) nt_cambioTipoActual -> . empty
    (164) empty -> .

    id              reduce using rule 164 (empty -> .)

    nt_cambioTipoActual            shift and go to state 44
    empty                          shift and go to state 37

state 29

    (56) FUNC -> VOIDFUNC . nt_pushEndsub
    (57) nt_pushEndsub -> . empty
    (164) empty -> .

    int             reduce using rule 164 (empty -> .)
    float           reduce using rule 164 (empty -> .)
    bool            reduce using rule 164 (empty -> .)
    string          reduce using rule 164 (empty -> .)
    void            reduce using rule 164 (empty -> .)
    main            reduce using rule 164 (empty -> .)

    nt_pushEndsub                  shift and go to state 45
    empty                          shift and go to state 46

state 30

    (11) PROGRAMA_FUNC_AUX -> empty .

    int             reduce using rule 11 (PROGRAMA_FUNC_AUX -> empty .)
    float           reduce using rule 11 (PROGRAMA_FUNC_AUX -> empty .)
    bool            reduce using rule 11 (PROGRAMA_FUNC_AUX -> empty .)
    string          reduce using rule 11 (PROGRAMA_FUNC_AUX -> empty .)
    void            reduce using rule 11 (PROGRAMA_FUNC_AUX -> empty .)
    main            reduce using rule 11 (PROGRAMA_FUNC_AUX -> empty .)


state 31

    (31) TIPO -> string . nt_cambioTipoActual
    (32) nt_cambioTipoActual -> . empty
    (164) empty -> .

    id              reduce using rule 164 (empty -> .)

    nt_cambioTipoActual            shift and go to state 47
    empty                          shift and go to state 37

state 32

    (64) VOIDFUNC -> void . nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb
    (65) nt_hacerVoid -> . empty
    (164) empty -> .

    id              reduce using rule 164 (empty -> .)

    nt_hacerVoid                   shift and go to state 49
    empty                          shift and go to state 48

state 33

    (10) PROGRAMA_FUNC_AUX -> FUNC .

    int             reduce using rule 10 (PROGRAMA_FUNC_AUX -> FUNC .)
    float           reduce using rule 10 (PROGRAMA_FUNC_AUX -> FUNC .)
    bool            reduce using rule 10 (PROGRAMA_FUNC_AUX -> FUNC .)
    string          reduce using rule 10 (PROGRAMA_FUNC_AUX -> FUNC .)
    void            reduce using rule 10 (PROGRAMA_FUNC_AUX -> FUNC .)
    main            reduce using rule 10 (PROGRAMA_FUNC_AUX -> FUNC .)


state 34

    (24) VARS_VAR -> var nt_hacerVar TIPO . VARS_VAR_AUX semicolon
    (26) VARS_VAR_AUX -> . id nt_agregarId nt_agregarDicVar
    (27) VARS_VAR_AUX -> . VARS_VAR_AUX comma id nt_agregarId nt_agregarDicVar

    id              shift and go to state 51

    VARS_VAR_AUX                   shift and go to state 50

state 35

    (17) VARS_LIST -> list nt_hacerLista TIPO . VARS_LIST_AUX semicolon
    (19) VARS_LIST_AUX -> . id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar
    (20) VARS_LIST_AUX -> . VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    id              shift and go to state 53

    VARS_LIST_AUX                  shift and go to state 52

state 36

    (28) TIPO -> int nt_cambioTipoActual .

    id              reduce using rule 28 (TIPO -> int nt_cambioTipoActual .)


state 37

    (32) nt_cambioTipoActual -> empty .

    id              reduce using rule 32 (nt_cambioTipoActual -> empty .)


state 38

    (29) TIPO -> float nt_cambioTipoActual .

    id              reduce using rule 29 (TIPO -> float nt_cambioTipoActual .)


state 39

    (55) FUNC -> TIPO nt_cambioFuncActual . id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub

    id              shift and go to state 54


state 40

    (58) nt_cambioFuncActual -> empty .

    id              reduce using rule 58 (nt_cambioFuncActual -> empty .)


state 41

    (9) PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .

    int             reduce using rule 9 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)
    float           reduce using rule 9 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)
    bool            reduce using rule 9 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)
    string          reduce using rule 9 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)
    void            reduce using rule 9 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)
    main            reduce using rule 9 (PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX .)


state 42

    (2) nt_cambiarScope -> empty .
    (11) PROGRAMA_FUNC_AUX -> empty .

  ! reduce/reduce conflict for main resolved using rule 2 (nt_cambiarScope -> empty .)
    main            reduce using rule 2 (nt_cambiarScope -> empty .)
    int             reduce using rule 11 (PROGRAMA_FUNC_AUX -> empty .)
    float           reduce using rule 11 (PROGRAMA_FUNC_AUX -> empty .)
    bool            reduce using rule 11 (PROGRAMA_FUNC_AUX -> empty .)
    string          reduce using rule 11 (PROGRAMA_FUNC_AUX -> empty .)
    void            reduce using rule 11 (PROGRAMA_FUNC_AUX -> empty .)

  ! main            [ reduce using rule 11 (PROGRAMA_FUNC_AUX -> empty .) ]


state 43

    (1) PROGRAMA -> program id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope . main nt_ambienteMain CUERPO nt_endQuad

    main            shift and go to state 55


state 44

    (30) TIPO -> bool nt_cambioTipoActual .

    id              reduce using rule 30 (TIPO -> bool nt_cambioTipoActual .)


state 45

    (56) FUNC -> VOIDFUNC nt_pushEndsub .

    int             reduce using rule 56 (FUNC -> VOIDFUNC nt_pushEndsub .)
    float           reduce using rule 56 (FUNC -> VOIDFUNC nt_pushEndsub .)
    bool            reduce using rule 56 (FUNC -> VOIDFUNC nt_pushEndsub .)
    string          reduce using rule 56 (FUNC -> VOIDFUNC nt_pushEndsub .)
    void            reduce using rule 56 (FUNC -> VOIDFUNC nt_pushEndsub .)
    main            reduce using rule 56 (FUNC -> VOIDFUNC nt_pushEndsub .)


state 46

    (57) nt_pushEndsub -> empty .

    int             reduce using rule 57 (nt_pushEndsub -> empty .)
    float           reduce using rule 57 (nt_pushEndsub -> empty .)
    bool            reduce using rule 57 (nt_pushEndsub -> empty .)
    string          reduce using rule 57 (nt_pushEndsub -> empty .)
    void            reduce using rule 57 (nt_pushEndsub -> empty .)
    main            reduce using rule 57 (nt_pushEndsub -> empty .)


state 47

    (31) TIPO -> string nt_cambioTipoActual .

    id              reduce using rule 31 (TIPO -> string nt_cambioTipoActual .)


state 48

    (65) nt_hacerVoid -> empty .

    id              reduce using rule 65 (nt_hacerVoid -> empty .)


state 49

    (64) VOIDFUNC -> void nt_hacerVoid . id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb

    id              shift and go to state 56


state 50

    (24) VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX . semicolon
    (27) VARS_VAR_AUX -> VARS_VAR_AUX . comma id nt_agregarId nt_agregarDicVar

    semicolon       shift and go to state 57
    comma           shift and go to state 58


state 51

    (26) VARS_VAR_AUX -> id . nt_agregarId nt_agregarDicVar
    (21) nt_agregarId -> . empty
    (164) empty -> .

    semicolon       reduce using rule 164 (empty -> .)
    comma           reduce using rule 164 (empty -> .)

    empty                          shift and go to state 59
    nt_agregarId                   shift and go to state 60

state 52

    (17) VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX . semicolon
    (20) VARS_LIST_AUX -> VARS_LIST_AUX . comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    semicolon       shift and go to state 61
    comma           shift and go to state 62


state 53

    (19) VARS_LIST_AUX -> id . nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar
    (21) nt_agregarId -> . empty
    (164) empty -> .

    left_sb         reduce using rule 164 (empty -> .)

    empty                          shift and go to state 59
    nt_agregarId                   shift and go to state 63

state 54

    (55) FUNC -> TIPO nt_cambioFuncActual id . nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub
    (59) nt_agregarIdFunc -> . empty
    (164) empty -> .

    left_par        reduce using rule 164 (empty -> .)

    nt_agregarIdFunc               shift and go to state 64
    empty                          shift and go to state 65

state 55

    (1) PROGRAMA -> program id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main . nt_ambienteMain CUERPO nt_endQuad
    (3) nt_ambienteMain -> . nt_cambiarScope
    (2) nt_cambiarScope -> . empty
    (164) empty -> .

    left_cb         reduce using rule 164 (empty -> .)

    nt_ambienteMain                shift and go to state 66
    nt_cambiarScope                shift and go to state 67
    empty                          shift and go to state 17

state 56

    (64) VOIDFUNC -> void nt_hacerVoid id . nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb
    (59) nt_agregarIdFunc -> . empty
    (164) empty -> .

    left_par        reduce using rule 164 (empty -> .)

    nt_agregarIdFunc               shift and go to state 68
    empty                          shift and go to state 65

state 57

    (24) VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .

    list            reduce using rule 24 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    var             reduce using rule 24 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    if              reduce using rule 24 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    while           reduce using rule 24 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    cread           reduce using rule 24 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    cwrite          reduce using rule 24 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    id              reduce using rule 24 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    return          reduce using rule 24 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    right_cb        reduce using rule 24 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    int             reduce using rule 24 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    float           reduce using rule 24 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    bool            reduce using rule 24 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    string          reduce using rule 24 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    void            reduce using rule 24 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)
    main            reduce using rule 24 (VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon .)


state 58

    (27) VARS_VAR_AUX -> VARS_VAR_AUX comma . id nt_agregarId nt_agregarDicVar

    id              shift and go to state 69


state 59

    (21) nt_agregarId -> empty .

    semicolon       reduce using rule 21 (nt_agregarId -> empty .)
    comma           reduce using rule 21 (nt_agregarId -> empty .)
    left_sb         reduce using rule 21 (nt_agregarId -> empty .)


state 60

    (26) VARS_VAR_AUX -> id nt_agregarId . nt_agregarDicVar
    (23) nt_agregarDicVar -> . empty
    (164) empty -> .

    semicolon       reduce using rule 164 (empty -> .)
    comma           reduce using rule 164 (empty -> .)

    nt_agregarDicVar               shift and go to state 70
    empty                          shift and go to state 71

state 61

    (17) VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .

    list            reduce using rule 17 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    var             reduce using rule 17 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    if              reduce using rule 17 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    while           reduce using rule 17 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    cread           reduce using rule 17 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    cwrite          reduce using rule 17 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    id              reduce using rule 17 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    right_cb        reduce using rule 17 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    return          reduce using rule 17 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    int             reduce using rule 17 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    float           reduce using rule 17 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    bool            reduce using rule 17 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    string          reduce using rule 17 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    void            reduce using rule 17 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)
    main            reduce using rule 17 (VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon .)


state 62

    (20) VARS_LIST_AUX -> VARS_LIST_AUX comma . id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    id              shift and go to state 72


state 63

    (19) VARS_LIST_AUX -> id nt_agregarId . left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    left_sb         shift and go to state 73


state 64

    (55) FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc . left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub

    left_par        shift and go to state 74


state 65

    (59) nt_agregarIdFunc -> empty .

    left_par        reduce using rule 59 (nt_agregarIdFunc -> empty .)


state 66

    (1) PROGRAMA -> program id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain . CUERPO nt_endQuad
    (33) CUERPO -> . left_cb CUERPO_AUX right_cb

    left_cb         shift and go to state 76

    CUERPO                         shift and go to state 75

state 67

    (3) nt_ambienteMain -> nt_cambiarScope .

    left_cb         reduce using rule 3 (nt_ambienteMain -> nt_cambiarScope .)


state 68

    (64) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc . left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb

    left_par        shift and go to state 77


state 69

    (27) VARS_VAR_AUX -> VARS_VAR_AUX comma id . nt_agregarId nt_agregarDicVar
    (21) nt_agregarId -> . empty
    (164) empty -> .

    semicolon       reduce using rule 164 (empty -> .)
    comma           reduce using rule 164 (empty -> .)

    nt_agregarId                   shift and go to state 78
    empty                          shift and go to state 59

state 70

    (26) VARS_VAR_AUX -> id nt_agregarId nt_agregarDicVar .

    semicolon       reduce using rule 26 (VARS_VAR_AUX -> id nt_agregarId nt_agregarDicVar .)
    comma           reduce using rule 26 (VARS_VAR_AUX -> id nt_agregarId nt_agregarDicVar .)


state 71

    (23) nt_agregarDicVar -> empty .

    semicolon       reduce using rule 23 (nt_agregarDicVar -> empty .)
    comma           reduce using rule 23 (nt_agregarDicVar -> empty .)


state 72

    (20) VARS_LIST_AUX -> VARS_LIST_AUX comma id . nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar
    (21) nt_agregarId -> . empty
    (164) empty -> .

    left_sb         reduce using rule 164 (empty -> .)

    empty                          shift and go to state 59
    nt_agregarId                   shift and go to state 79

state 73

    (19) VARS_LIST_AUX -> id nt_agregarId left_sb . cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    cteInt          shift and go to state 80


state 74

    (55) FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par . FUNC_PARA right_par CUERPORETORNO nt_pushEndsub
    (60) FUNC_PARA -> . TIPO id nt_agregarParametro
    (61) FUNC_PARA -> . FUNC_PARA comma TIPO id nt_agregarParametro
    (62) FUNC_PARA -> . empty
    (28) TIPO -> . int nt_cambioTipoActual
    (29) TIPO -> . float nt_cambioTipoActual
    (30) TIPO -> . bool nt_cambioTipoActual
    (31) TIPO -> . string nt_cambioTipoActual
    (164) empty -> .

    int             shift and go to state 23
    float           shift and go to state 24
    bool            shift and go to state 28
    string          shift and go to state 31
    right_par       reduce using rule 164 (empty -> .)
    comma           reduce using rule 164 (empty -> .)

    TIPO                           shift and go to state 81
    empty                          shift and go to state 82
    FUNC_PARA                      shift and go to state 83

state 75

    (1) PROGRAMA -> program id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO . nt_endQuad
    (4) nt_endQuad -> . empty
    (164) empty -> .

    $end            reduce using rule 164 (empty -> .)

    empty                          shift and go to state 84
    nt_endQuad                     shift and go to state 85

state 76

    (33) CUERPO -> left_cb . CUERPO_AUX right_cb
    (34) CUERPO_AUX -> . CUERPO_VARS CUERPO_ESTATUTO
    (35) CUERPO_AUX -> . CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO
    (36) CUERPO_VARS -> . VARS
    (37) CUERPO_VARS -> . empty
    (12) VARS -> . VARS_AUX
    (164) empty -> .
    (13) VARS_AUX -> . VARS_LIST_VAR
    (14) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (15) VARS_LIST_VAR -> . VARS_LIST
    (16) VARS_LIST_VAR -> . VARS_VAR
    (17) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (24) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    if              reduce using rule 164 (empty -> .)
    while           reduce using rule 164 (empty -> .)
    cread           reduce using rule 164 (empty -> .)
    cwrite          reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    right_cb        reduce using rule 164 (empty -> .)
    list            shift and go to state 14
    var             shift and go to state 10

  ! list            [ reduce using rule 164 (empty -> .) ]
  ! var             [ reduce using rule 164 (empty -> .) ]

    CUERPO_VARS                    shift and go to state 86
    VARS                           shift and go to state 87
    VARS_LIST                      shift and go to state 9
    VARS_LIST_VAR                  shift and go to state 12
    VARS_AUX                       shift and go to state 15
    CUERPO_AUX                     shift and go to state 89
    VARS_VAR                       shift and go to state 13
    empty                          shift and go to state 88

state 77

    (64) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par . VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb
    (66) VOIDFUNC_PARA -> . TIPO id nt_agregarParametro
    (67) VOIDFUNC_PARA -> . VOIDFUNC_PARA comma TIPO id nt_agregarParametro
    (68) VOIDFUNC_PARA -> . empty
    (28) TIPO -> . int nt_cambioTipoActual
    (29) TIPO -> . float nt_cambioTipoActual
    (30) TIPO -> . bool nt_cambioTipoActual
    (31) TIPO -> . string nt_cambioTipoActual
    (164) empty -> .

    int             shift and go to state 23
    float           shift and go to state 24
    bool            shift and go to state 28
    string          shift and go to state 31
    right_par       reduce using rule 164 (empty -> .)
    comma           reduce using rule 164 (empty -> .)

    TIPO                           shift and go to state 92
    VOIDFUNC_PARA                  shift and go to state 90
    empty                          shift and go to state 91

state 78

    (27) VARS_VAR_AUX -> VARS_VAR_AUX comma id nt_agregarId . nt_agregarDicVar
    (23) nt_agregarDicVar -> . empty
    (164) empty -> .

    semicolon       reduce using rule 164 (empty -> .)
    comma           reduce using rule 164 (empty -> .)

    nt_agregarDicVar               shift and go to state 93
    empty                          shift and go to state 71

state 79

    (20) VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId . left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    left_sb         shift and go to state 94


state 80

    (19) VARS_LIST_AUX -> id nt_agregarId left_sb cteInt . nt_agregarCteLista right_sb nt_agregarDicVar
    (22) nt_agregarCteLista -> . empty
    (164) empty -> .

    right_sb        reduce using rule 164 (empty -> .)

    nt_agregarCteLista             shift and go to state 95
    empty                          shift and go to state 96

state 81

    (60) FUNC_PARA -> TIPO . id nt_agregarParametro

    id              shift and go to state 97


state 82

    (62) FUNC_PARA -> empty .

    right_par       reduce using rule 62 (FUNC_PARA -> empty .)
    comma           reduce using rule 62 (FUNC_PARA -> empty .)


state 83

    (55) FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA . right_par CUERPORETORNO nt_pushEndsub
    (61) FUNC_PARA -> FUNC_PARA . comma TIPO id nt_agregarParametro

    right_par       shift and go to state 98
    comma           shift and go to state 99


state 84

    (4) nt_endQuad -> empty .

    $end            reduce using rule 4 (nt_endQuad -> empty .)


state 85

    (1) PROGRAMA -> program id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO nt_endQuad .

    $end            reduce using rule 1 (PROGRAMA -> program id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO nt_endQuad .)


state 86

    (34) CUERPO_AUX -> CUERPO_VARS . CUERPO_ESTATUTO
    (38) CUERPO_ESTATUTO -> . ESTATUTO
    (39) CUERPO_ESTATUTO -> . empty
    (69) ESTATUTO -> . ASIGNACION
    (70) ESTATUTO -> . CONDICION
    (71) ESTATUTO -> . CICLO
    (72) ESTATUTO -> . LECTURA
    (73) ESTATUTO -> . ESCRITURA
    (74) ESTATUTO -> . LLAMADA
    (164) empty -> .
    (157) ASIGNACION -> . ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon
    (75) CONDICION -> . if CONDICION_AUX
    (85) CICLO -> . while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop
    (88) LECTURA -> . cread left_par id nt_leer right_par semicolon
    (90) ESCRITURA -> . cwrite left_par EXPRESION nt_escribir right_par semicolon
    (92) LLAMADA -> . id nt_verificaFuncId left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub
    (159) ASIGNACION_AUX -> . id nt_pushPilaO
    (160) ASIGNACION_AUX -> . LISTA
    (141) LISTA -> . id left_sb EXP right_sb

  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for cread resolved as shift
  ! shift/reduce conflict for cwrite resolved as shift
  ! shift/reduce conflict for id resolved as shift
    right_cb        reduce using rule 164 (empty -> .)
    list            reduce using rule 164 (empty -> .)
    var             reduce using rule 164 (empty -> .)
    if              shift and go to state 103
    while           shift and go to state 114
    cread           shift and go to state 101
    cwrite          shift and go to state 107
    id              shift and go to state 106

  ! if              [ reduce using rule 164 (empty -> .) ]
  ! while           [ reduce using rule 164 (empty -> .) ]
  ! cread           [ reduce using rule 164 (empty -> .) ]
  ! cwrite          [ reduce using rule 164 (empty -> .) ]
  ! id              [ reduce using rule 164 (empty -> .) ]

    CICLO                          shift and go to state 100
    LECTURA                        shift and go to state 102
    ESCRITURA                      shift and go to state 109
    ASIGNACION                     shift and go to state 104
    ESTATUTO                       shift and go to state 105
    ASIGNACION_AUX                 shift and go to state 108
    empty                          shift and go to state 110
    LLAMADA                        shift and go to state 111
    CONDICION                      shift and go to state 112
    CUERPO_ESTATUTO                shift and go to state 113
    LISTA                          shift and go to state 115

state 87

    (36) CUERPO_VARS -> VARS .

    if              reduce using rule 36 (CUERPO_VARS -> VARS .)
    while           reduce using rule 36 (CUERPO_VARS -> VARS .)
    cread           reduce using rule 36 (CUERPO_VARS -> VARS .)
    cwrite          reduce using rule 36 (CUERPO_VARS -> VARS .)
    id              reduce using rule 36 (CUERPO_VARS -> VARS .)
    right_cb        reduce using rule 36 (CUERPO_VARS -> VARS .)
    list            reduce using rule 36 (CUERPO_VARS -> VARS .)
    var             reduce using rule 36 (CUERPO_VARS -> VARS .)


state 88

    (37) CUERPO_VARS -> empty .

    if              reduce using rule 37 (CUERPO_VARS -> empty .)
    while           reduce using rule 37 (CUERPO_VARS -> empty .)
    cread           reduce using rule 37 (CUERPO_VARS -> empty .)
    cwrite          reduce using rule 37 (CUERPO_VARS -> empty .)
    id              reduce using rule 37 (CUERPO_VARS -> empty .)
    right_cb        reduce using rule 37 (CUERPO_VARS -> empty .)
    list            reduce using rule 37 (CUERPO_VARS -> empty .)
    var             reduce using rule 37 (CUERPO_VARS -> empty .)


state 89

    (33) CUERPO -> left_cb CUERPO_AUX . right_cb
    (35) CUERPO_AUX -> CUERPO_AUX . CUERPO_VARS CUERPO_ESTATUTO
    (36) CUERPO_VARS -> . VARS
    (37) CUERPO_VARS -> . empty
    (12) VARS -> . VARS_AUX
    (164) empty -> .
    (13) VARS_AUX -> . VARS_LIST_VAR
    (14) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (15) VARS_LIST_VAR -> . VARS_LIST
    (16) VARS_LIST_VAR -> . VARS_VAR
    (17) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (24) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for right_cb resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    right_cb        shift and go to state 117
    if              reduce using rule 164 (empty -> .)
    while           reduce using rule 164 (empty -> .)
    cread           reduce using rule 164 (empty -> .)
    cwrite          reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    list            shift and go to state 14
    var             shift and go to state 10

  ! right_cb        [ reduce using rule 164 (empty -> .) ]
  ! list            [ reduce using rule 164 (empty -> .) ]
  ! var             [ reduce using rule 164 (empty -> .) ]

    CUERPO_VARS                    shift and go to state 116
    VARS                           shift and go to state 87
    VARS_LIST                      shift and go to state 9
    VARS_LIST_VAR                  shift and go to state 12
    VARS_AUX                       shift and go to state 15
    VARS_VAR                       shift and go to state 13
    empty                          shift and go to state 88

state 90

    (64) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA . right_par left_cb CUERPOFUNC right_cb
    (67) VOIDFUNC_PARA -> VOIDFUNC_PARA . comma TIPO id nt_agregarParametro

    right_par       shift and go to state 118
    comma           shift and go to state 119


state 91

    (68) VOIDFUNC_PARA -> empty .

    right_par       reduce using rule 68 (VOIDFUNC_PARA -> empty .)
    comma           reduce using rule 68 (VOIDFUNC_PARA -> empty .)


state 92

    (66) VOIDFUNC_PARA -> TIPO . id nt_agregarParametro

    id              shift and go to state 120


state 93

    (27) VARS_VAR_AUX -> VARS_VAR_AUX comma id nt_agregarId nt_agregarDicVar .

    semicolon       reduce using rule 27 (VARS_VAR_AUX -> VARS_VAR_AUX comma id nt_agregarId nt_agregarDicVar .)
    comma           reduce using rule 27 (VARS_VAR_AUX -> VARS_VAR_AUX comma id nt_agregarId nt_agregarDicVar .)


state 94

    (20) VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb . cteInt nt_agregarCteLista right_sb nt_agregarDicVar

    cteInt          shift and go to state 121


state 95

    (19) VARS_LIST_AUX -> id nt_agregarId left_sb cteInt nt_agregarCteLista . right_sb nt_agregarDicVar

    right_sb        shift and go to state 122


state 96

    (22) nt_agregarCteLista -> empty .

    right_sb        reduce using rule 22 (nt_agregarCteLista -> empty .)


state 97

    (60) FUNC_PARA -> TIPO id . nt_agregarParametro
    (63) nt_agregarParametro -> . empty
    (164) empty -> .

    right_par       reduce using rule 164 (empty -> .)
    comma           reduce using rule 164 (empty -> .)

    empty                          shift and go to state 123
    nt_agregarParametro            shift and go to state 124

state 98

    (55) FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par . CUERPORETORNO nt_pushEndsub
    (48) CUERPORETORNO -> . left_cb CUERPORETORNO_AUX right_cb

    left_cb         shift and go to state 126

    CUERPORETORNO                  shift and go to state 125

state 99

    (61) FUNC_PARA -> FUNC_PARA comma . TIPO id nt_agregarParametro
    (28) TIPO -> . int nt_cambioTipoActual
    (29) TIPO -> . float nt_cambioTipoActual
    (30) TIPO -> . bool nt_cambioTipoActual
    (31) TIPO -> . string nt_cambioTipoActual

    int             shift and go to state 23
    float           shift and go to state 24
    bool            shift and go to state 28
    string          shift and go to state 31

    TIPO                           shift and go to state 127

state 100

    (71) ESTATUTO -> CICLO .

    list            reduce using rule 71 (ESTATUTO -> CICLO .)
    var             reduce using rule 71 (ESTATUTO -> CICLO .)
    if              reduce using rule 71 (ESTATUTO -> CICLO .)
    while           reduce using rule 71 (ESTATUTO -> CICLO .)
    cread           reduce using rule 71 (ESTATUTO -> CICLO .)
    cwrite          reduce using rule 71 (ESTATUTO -> CICLO .)
    id              reduce using rule 71 (ESTATUTO -> CICLO .)
    return          reduce using rule 71 (ESTATUTO -> CICLO .)
    right_cb        reduce using rule 71 (ESTATUTO -> CICLO .)


state 101

    (88) LECTURA -> cread . left_par id nt_leer right_par semicolon

    left_par        shift and go to state 128


state 102

    (72) ESTATUTO -> LECTURA .

    list            reduce using rule 72 (ESTATUTO -> LECTURA .)
    var             reduce using rule 72 (ESTATUTO -> LECTURA .)
    if              reduce using rule 72 (ESTATUTO -> LECTURA .)
    while           reduce using rule 72 (ESTATUTO -> LECTURA .)
    cread           reduce using rule 72 (ESTATUTO -> LECTURA .)
    cwrite          reduce using rule 72 (ESTATUTO -> LECTURA .)
    id              reduce using rule 72 (ESTATUTO -> LECTURA .)
    return          reduce using rule 72 (ESTATUTO -> LECTURA .)
    right_cb        reduce using rule 72 (ESTATUTO -> LECTURA .)


state 103

    (75) CONDICION -> if . CONDICION_AUX
    (76) CONDICION_AUX -> . left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto

    left_par        shift and go to state 129

    CONDICION_AUX                  shift and go to state 130

state 104

    (69) ESTATUTO -> ASIGNACION .

    list            reduce using rule 69 (ESTATUTO -> ASIGNACION .)
    var             reduce using rule 69 (ESTATUTO -> ASIGNACION .)
    if              reduce using rule 69 (ESTATUTO -> ASIGNACION .)
    while           reduce using rule 69 (ESTATUTO -> ASIGNACION .)
    cread           reduce using rule 69 (ESTATUTO -> ASIGNACION .)
    cwrite          reduce using rule 69 (ESTATUTO -> ASIGNACION .)
    id              reduce using rule 69 (ESTATUTO -> ASIGNACION .)
    return          reduce using rule 69 (ESTATUTO -> ASIGNACION .)
    right_cb        reduce using rule 69 (ESTATUTO -> ASIGNACION .)


state 105

    (38) CUERPO_ESTATUTO -> ESTATUTO .

    right_cb        reduce using rule 38 (CUERPO_ESTATUTO -> ESTATUTO .)
    list            reduce using rule 38 (CUERPO_ESTATUTO -> ESTATUTO .)
    var             reduce using rule 38 (CUERPO_ESTATUTO -> ESTATUTO .)
    if              reduce using rule 38 (CUERPO_ESTATUTO -> ESTATUTO .)
    while           reduce using rule 38 (CUERPO_ESTATUTO -> ESTATUTO .)
    cread           reduce using rule 38 (CUERPO_ESTATUTO -> ESTATUTO .)
    cwrite          reduce using rule 38 (CUERPO_ESTATUTO -> ESTATUTO .)
    id              reduce using rule 38 (CUERPO_ESTATUTO -> ESTATUTO .)


state 106

    (92) LLAMADA -> id . nt_verificaFuncId left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub
    (159) ASIGNACION_AUX -> id . nt_pushPilaO
    (141) LISTA -> id . left_sb EXP right_sb
    (129) nt_verificaFuncId -> . empty
    (161) nt_pushPilaO -> . empty
    (164) empty -> .

    left_sb         shift and go to state 133
    left_par        reduce using rule 164 (empty -> .)
    equals          reduce using rule 164 (empty -> .)

    nt_verificaFuncId              shift and go to state 131
    nt_pushPilaO                   shift and go to state 132
    empty                          shift and go to state 134

state 107

    (90) ESCRITURA -> cwrite . left_par EXPRESION nt_escribir right_par semicolon

    left_par        shift and go to state 135


state 108

    (157) ASIGNACION -> ASIGNACION_AUX . equals nt_pushPOper EXPRESION nt_checaEquals semicolon

    equals          shift and go to state 136


state 109

    (73) ESTATUTO -> ESCRITURA .

    list            reduce using rule 73 (ESTATUTO -> ESCRITURA .)
    var             reduce using rule 73 (ESTATUTO -> ESCRITURA .)
    if              reduce using rule 73 (ESTATUTO -> ESCRITURA .)
    while           reduce using rule 73 (ESTATUTO -> ESCRITURA .)
    cread           reduce using rule 73 (ESTATUTO -> ESCRITURA .)
    cwrite          reduce using rule 73 (ESTATUTO -> ESCRITURA .)
    id              reduce using rule 73 (ESTATUTO -> ESCRITURA .)
    return          reduce using rule 73 (ESTATUTO -> ESCRITURA .)
    right_cb        reduce using rule 73 (ESTATUTO -> ESCRITURA .)


state 110

    (39) CUERPO_ESTATUTO -> empty .

    right_cb        reduce using rule 39 (CUERPO_ESTATUTO -> empty .)
    list            reduce using rule 39 (CUERPO_ESTATUTO -> empty .)
    var             reduce using rule 39 (CUERPO_ESTATUTO -> empty .)
    if              reduce using rule 39 (CUERPO_ESTATUTO -> empty .)
    while           reduce using rule 39 (CUERPO_ESTATUTO -> empty .)
    cread           reduce using rule 39 (CUERPO_ESTATUTO -> empty .)
    cwrite          reduce using rule 39 (CUERPO_ESTATUTO -> empty .)
    id              reduce using rule 39 (CUERPO_ESTATUTO -> empty .)


state 111

    (74) ESTATUTO -> LLAMADA .

    list            reduce using rule 74 (ESTATUTO -> LLAMADA .)
    var             reduce using rule 74 (ESTATUTO -> LLAMADA .)
    if              reduce using rule 74 (ESTATUTO -> LLAMADA .)
    while           reduce using rule 74 (ESTATUTO -> LLAMADA .)
    cread           reduce using rule 74 (ESTATUTO -> LLAMADA .)
    cwrite          reduce using rule 74 (ESTATUTO -> LLAMADA .)
    id              reduce using rule 74 (ESTATUTO -> LLAMADA .)
    return          reduce using rule 74 (ESTATUTO -> LLAMADA .)
    right_cb        reduce using rule 74 (ESTATUTO -> LLAMADA .)


state 112

    (70) ESTATUTO -> CONDICION .

    list            reduce using rule 70 (ESTATUTO -> CONDICION .)
    var             reduce using rule 70 (ESTATUTO -> CONDICION .)
    if              reduce using rule 70 (ESTATUTO -> CONDICION .)
    while           reduce using rule 70 (ESTATUTO -> CONDICION .)
    cread           reduce using rule 70 (ESTATUTO -> CONDICION .)
    cwrite          reduce using rule 70 (ESTATUTO -> CONDICION .)
    id              reduce using rule 70 (ESTATUTO -> CONDICION .)
    return          reduce using rule 70 (ESTATUTO -> CONDICION .)
    right_cb        reduce using rule 70 (ESTATUTO -> CONDICION .)


state 113

    (34) CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .

    right_cb        reduce using rule 34 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    list            reduce using rule 34 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    var             reduce using rule 34 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    if              reduce using rule 34 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    while           reduce using rule 34 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    cread           reduce using rule 34 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    cwrite          reduce using rule 34 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)
    id              reduce using rule 34 (CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO .)


state 114

    (85) CICLO -> while . nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop
    (86) nt_saltoLoop -> . empty
    (164) empty -> .

    left_par        reduce using rule 164 (empty -> .)

    nt_saltoLoop                   shift and go to state 138
    empty                          shift and go to state 137

state 115

    (160) ASIGNACION_AUX -> LISTA .

    equals          reduce using rule 160 (ASIGNACION_AUX -> LISTA .)


state 116

    (35) CUERPO_AUX -> CUERPO_AUX CUERPO_VARS . CUERPO_ESTATUTO
    (38) CUERPO_ESTATUTO -> . ESTATUTO
    (39) CUERPO_ESTATUTO -> . empty
    (69) ESTATUTO -> . ASIGNACION
    (70) ESTATUTO -> . CONDICION
    (71) ESTATUTO -> . CICLO
    (72) ESTATUTO -> . LECTURA
    (73) ESTATUTO -> . ESCRITURA
    (74) ESTATUTO -> . LLAMADA
    (164) empty -> .
    (157) ASIGNACION -> . ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon
    (75) CONDICION -> . if CONDICION_AUX
    (85) CICLO -> . while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop
    (88) LECTURA -> . cread left_par id nt_leer right_par semicolon
    (90) ESCRITURA -> . cwrite left_par EXPRESION nt_escribir right_par semicolon
    (92) LLAMADA -> . id nt_verificaFuncId left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub
    (159) ASIGNACION_AUX -> . id nt_pushPilaO
    (160) ASIGNACION_AUX -> . LISTA
    (141) LISTA -> . id left_sb EXP right_sb

  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for cread resolved as shift
  ! shift/reduce conflict for cwrite resolved as shift
  ! shift/reduce conflict for id resolved as shift
    right_cb        reduce using rule 164 (empty -> .)
    list            reduce using rule 164 (empty -> .)
    var             reduce using rule 164 (empty -> .)
    if              shift and go to state 103
    while           shift and go to state 114
    cread           shift and go to state 101
    cwrite          shift and go to state 107
    id              shift and go to state 106

  ! if              [ reduce using rule 164 (empty -> .) ]
  ! while           [ reduce using rule 164 (empty -> .) ]
  ! cread           [ reduce using rule 164 (empty -> .) ]
  ! cwrite          [ reduce using rule 164 (empty -> .) ]
  ! id              [ reduce using rule 164 (empty -> .) ]

    CICLO                          shift and go to state 100
    LECTURA                        shift and go to state 102
    ESCRITURA                      shift and go to state 109
    ASIGNACION                     shift and go to state 104
    ESTATUTO                       shift and go to state 105
    ASIGNACION_AUX                 shift and go to state 108
    empty                          shift and go to state 110
    LLAMADA                        shift and go to state 111
    CONDICION                      shift and go to state 112
    CUERPO_ESTATUTO                shift and go to state 139
    LISTA                          shift and go to state 115

state 117

    (33) CUERPO -> left_cb CUERPO_AUX right_cb .

    else            reduce using rule 33 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    elseif          reduce using rule 33 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    right_cb        reduce using rule 33 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    list            reduce using rule 33 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    var             reduce using rule 33 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    if              reduce using rule 33 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    while           reduce using rule 33 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    cread           reduce using rule 33 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    cwrite          reduce using rule 33 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    id              reduce using rule 33 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    return          reduce using rule 33 (CUERPO -> left_cb CUERPO_AUX right_cb .)
    $end            reduce using rule 33 (CUERPO -> left_cb CUERPO_AUX right_cb .)


state 118

    (64) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par . left_cb CUERPOFUNC right_cb

    left_cb         shift and go to state 140


state 119

    (67) VOIDFUNC_PARA -> VOIDFUNC_PARA comma . TIPO id nt_agregarParametro
    (28) TIPO -> . int nt_cambioTipoActual
    (29) TIPO -> . float nt_cambioTipoActual
    (30) TIPO -> . bool nt_cambioTipoActual
    (31) TIPO -> . string nt_cambioTipoActual

    int             shift and go to state 23
    float           shift and go to state 24
    bool            shift and go to state 28
    string          shift and go to state 31

    TIPO                           shift and go to state 141

state 120

    (66) VOIDFUNC_PARA -> TIPO id . nt_agregarParametro
    (63) nt_agregarParametro -> . empty
    (164) empty -> .

    right_par       reduce using rule 164 (empty -> .)
    comma           reduce using rule 164 (empty -> .)

    empty                          shift and go to state 123
    nt_agregarParametro            shift and go to state 142

state 121

    (20) VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt . nt_agregarCteLista right_sb nt_agregarDicVar
    (22) nt_agregarCteLista -> . empty
    (164) empty -> .

    right_sb        reduce using rule 164 (empty -> .)

    nt_agregarCteLista             shift and go to state 143
    empty                          shift and go to state 96

state 122

    (19) VARS_LIST_AUX -> id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb . nt_agregarDicVar
    (23) nt_agregarDicVar -> . empty
    (164) empty -> .

    semicolon       reduce using rule 164 (empty -> .)
    comma           reduce using rule 164 (empty -> .)

    nt_agregarDicVar               shift and go to state 144
    empty                          shift and go to state 71

state 123

    (63) nt_agregarParametro -> empty .

    right_par       reduce using rule 63 (nt_agregarParametro -> empty .)
    comma           reduce using rule 63 (nt_agregarParametro -> empty .)


state 124

    (60) FUNC_PARA -> TIPO id nt_agregarParametro .

    right_par       reduce using rule 60 (FUNC_PARA -> TIPO id nt_agregarParametro .)
    comma           reduce using rule 60 (FUNC_PARA -> TIPO id nt_agregarParametro .)


state 125

    (55) FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO . nt_pushEndsub
    (57) nt_pushEndsub -> . empty
    (164) empty -> .

    int             reduce using rule 164 (empty -> .)
    float           reduce using rule 164 (empty -> .)
    bool            reduce using rule 164 (empty -> .)
    string          reduce using rule 164 (empty -> .)
    void            reduce using rule 164 (empty -> .)
    main            reduce using rule 164 (empty -> .)

    nt_pushEndsub                  shift and go to state 145
    empty                          shift and go to state 46

state 126

    (48) CUERPORETORNO -> left_cb . CUERPORETORNO_AUX right_cb
    (49) CUERPORETORNO_AUX -> . CUERPORETORNO_CF_AUX RETORNO
    (50) CUERPORETORNO_AUX -> . CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO
    (51) CUERPORETORNO_CF_AUX -> . CUERPOFUNC
    (52) CUERPORETORNO_CF_AUX -> . empty
    (40) CUERPOFUNC -> . CUERPOFUNC_AUX
    (164) empty -> .
    (41) CUERPOFUNC_AUX -> . CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
    (42) CUERPOFUNC_AUX -> . CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
    (44) CUERPOFUNC_VARS -> . VARS
    (45) CUERPOFUNC_VARS -> . empty
    (12) VARS -> . VARS_AUX
    (13) VARS_AUX -> . VARS_LIST_VAR
    (14) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (15) VARS_LIST_VAR -> . VARS_LIST
    (16) VARS_LIST_VAR -> . VARS_VAR
    (17) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (24) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    return          reduce using rule 164 (empty -> .)
    if              reduce using rule 164 (empty -> .)
    while           reduce using rule 164 (empty -> .)
    cread           reduce using rule 164 (empty -> .)
    cwrite          reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    list            shift and go to state 14
    var             shift and go to state 10

  ! list            [ reduce using rule 164 (empty -> .) ]
  ! var             [ reduce using rule 164 (empty -> .) ]

    CUERPORETORNO_CF_AUX           shift and go to state 149
    VARS                           shift and go to state 150
    CUERPOFUNC                     shift and go to state 146
    VARS_LIST                      shift and go to state 9
    VARS_LIST_VAR                  shift and go to state 12
    VARS_VAR                       shift and go to state 13
    VARS_AUX                       shift and go to state 15
    CUERPORETORNO_AUX              shift and go to state 147
    CUERPOFUNC_VARS                shift and go to state 151
    CUERPOFUNC_AUX                 shift and go to state 148
    empty                          shift and go to state 152

state 127

    (61) FUNC_PARA -> FUNC_PARA comma TIPO . id nt_agregarParametro

    id              shift and go to state 153


state 128

    (88) LECTURA -> cread left_par . id nt_leer right_par semicolon

    id              shift and go to state 154


state 129

    (76) CONDICION_AUX -> left_par . EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto
    (97) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (99) EXPRESION_NOT -> . not nt_pushPOper
    (100) EXPRESION_NOT -> . empty
    (164) empty -> .

    not             shift and go to state 157
    left_par        reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    true            reduce using rule 164 (empty -> .)
    false           reduce using rule 164 (empty -> .)
    cteString       reduce using rule 164 (empty -> .)
    cteInt          reduce using rule 164 (empty -> .)
    cteFloat        reduce using rule 164 (empty -> .)

    EXPRESION                      shift and go to state 155
    EXPRESION_NOT                  shift and go to state 156
    empty                          shift and go to state 158

state 130

    (75) CONDICION -> if CONDICION_AUX .

    right_cb        reduce using rule 75 (CONDICION -> if CONDICION_AUX .)
    list            reduce using rule 75 (CONDICION -> if CONDICION_AUX .)
    var             reduce using rule 75 (CONDICION -> if CONDICION_AUX .)
    if              reduce using rule 75 (CONDICION -> if CONDICION_AUX .)
    while           reduce using rule 75 (CONDICION -> if CONDICION_AUX .)
    cread           reduce using rule 75 (CONDICION -> if CONDICION_AUX .)
    cwrite          reduce using rule 75 (CONDICION -> if CONDICION_AUX .)
    id              reduce using rule 75 (CONDICION -> if CONDICION_AUX .)
    return          reduce using rule 75 (CONDICION -> if CONDICION_AUX .)


state 131

    (92) LLAMADA -> id nt_verificaFuncId . left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub

    left_par        shift and go to state 159


state 132

    (159) ASIGNACION_AUX -> id nt_pushPilaO .

    equals          reduce using rule 159 (ASIGNACION_AUX -> id nt_pushPilaO .)


state 133

    (141) LISTA -> id left_sb . EXP right_sb
    (113) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (118) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (123) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (124) FACTOR -> . CONSTANTE
    (125) FACTOR -> . LISTA
    (126) FACTOR -> . FACTOR_AUX
    (142) CONSTANTE -> . NUMERICA
    (143) CONSTANTE -> . BOOLEANA
    (144) CONSTANTE -> . STRINGS
    (141) LISTA -> . id left_sb EXP right_sb
    (127) FACTOR_AUX -> . id nt_pushPilaO
    (128) FACTOR_AUX -> . id nt_verificaFuncId LLAMADA_F
    (145) NUMERICA -> . NUMERICA_AUX
    (146) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (147) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (154) BOOLEANA -> . true
    (155) BOOLEANA -> . false
    (156) STRINGS -> . cteString
    (150) NUMERICA_AUX -> . cteInt nt_pushInt
    (151) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 169
    id              shift and go to state 164
    plus            shift and go to state 165
    minus           shift and go to state 178
    true            shift and go to state 170
    false           shift and go to state 160
    cteString       shift and go to state 168
    cteInt          shift and go to state 173
    cteFloat        shift and go to state 162

    BOOLEANA                       shift and go to state 163
    EXP                            shift and go to state 161
    FACTOR_AUX                     shift and go to state 166
    NUMERICA_AUX                   shift and go to state 174
    TERMINO                        shift and go to state 167
    STRINGS                        shift and go to state 171
    CONSTANTE                      shift and go to state 172
    NUMERICA                       shift and go to state 175
    FACTOR                         shift and go to state 176
    LISTA                          shift and go to state 177

state 134

    (129) nt_verificaFuncId -> empty .
    (161) nt_pushPilaO -> empty .

    left_par        reduce using rule 129 (nt_verificaFuncId -> empty .)
    equals          reduce using rule 161 (nt_pushPilaO -> empty .)


state 135

    (90) ESCRITURA -> cwrite left_par . EXPRESION nt_escribir right_par semicolon
    (97) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (99) EXPRESION_NOT -> . not nt_pushPOper
    (100) EXPRESION_NOT -> . empty
    (164) empty -> .

    not             shift and go to state 157
    left_par        reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    true            reduce using rule 164 (empty -> .)
    false           reduce using rule 164 (empty -> .)
    cteString       reduce using rule 164 (empty -> .)
    cteInt          reduce using rule 164 (empty -> .)
    cteFloat        reduce using rule 164 (empty -> .)

    EXPRESION                      shift and go to state 179
    EXPRESION_NOT                  shift and go to state 156
    empty                          shift and go to state 158

state 136

    (157) ASIGNACION -> ASIGNACION_AUX equals . nt_pushPOper EXPRESION nt_checaEquals semicolon
    (162) nt_pushPOper -> . empty
    (164) empty -> .

    not             reduce using rule 164 (empty -> .)
    left_par        reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    true            reduce using rule 164 (empty -> .)
    false           reduce using rule 164 (empty -> .)
    cteString       reduce using rule 164 (empty -> .)
    cteInt          reduce using rule 164 (empty -> .)
    cteFloat        reduce using rule 164 (empty -> .)

    empty                          shift and go to state 180
    nt_pushPOper                   shift and go to state 181

state 137

    (86) nt_saltoLoop -> empty .

    left_par        reduce using rule 86 (nt_saltoLoop -> empty .)


state 138

    (85) CICLO -> while nt_saltoLoop . left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop

    left_par        shift and go to state 182


state 139

    (35) CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .

    right_cb        reduce using rule 35 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    list            reduce using rule 35 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    var             reduce using rule 35 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    if              reduce using rule 35 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    while           reduce using rule 35 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    cread           reduce using rule 35 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    cwrite          reduce using rule 35 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)
    id              reduce using rule 35 (CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO .)


state 140

    (64) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb . CUERPOFUNC right_cb
    (40) CUERPOFUNC -> . CUERPOFUNC_AUX
    (41) CUERPOFUNC_AUX -> . CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
    (42) CUERPOFUNC_AUX -> . CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
    (44) CUERPOFUNC_VARS -> . VARS
    (45) CUERPOFUNC_VARS -> . empty
    (12) VARS -> . VARS_AUX
    (164) empty -> .
    (13) VARS_AUX -> . VARS_LIST_VAR
    (14) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (15) VARS_LIST_VAR -> . VARS_LIST
    (16) VARS_LIST_VAR -> . VARS_VAR
    (17) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (24) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    if              reduce using rule 164 (empty -> .)
    while           reduce using rule 164 (empty -> .)
    cread           reduce using rule 164 (empty -> .)
    cwrite          reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    right_cb        reduce using rule 164 (empty -> .)
    list            shift and go to state 14
    var             shift and go to state 10

  ! list            [ reduce using rule 164 (empty -> .) ]
  ! var             [ reduce using rule 164 (empty -> .) ]

    VARS_LIST                      shift and go to state 9
    VARS                           shift and go to state 150
    CUERPOFUNC                     shift and go to state 183
    VARS_AUX                       shift and go to state 15
    VARS_LIST_VAR                  shift and go to state 12
    CUERPOFUNC_VARS                shift and go to state 151
    VARS_VAR                       shift and go to state 13
    CUERPOFUNC_AUX                 shift and go to state 148
    empty                          shift and go to state 184

state 141

    (67) VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO . id nt_agregarParametro

    id              shift and go to state 185


state 142

    (66) VOIDFUNC_PARA -> TIPO id nt_agregarParametro .

    right_par       reduce using rule 66 (VOIDFUNC_PARA -> TIPO id nt_agregarParametro .)
    comma           reduce using rule 66 (VOIDFUNC_PARA -> TIPO id nt_agregarParametro .)


state 143

    (20) VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista . right_sb nt_agregarDicVar

    right_sb        shift and go to state 186


state 144

    (19) VARS_LIST_AUX -> id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar .

    semicolon       reduce using rule 19 (VARS_LIST_AUX -> id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar .)
    comma           reduce using rule 19 (VARS_LIST_AUX -> id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar .)


state 145

    (55) FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub .

    int             reduce using rule 55 (FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub .)
    float           reduce using rule 55 (FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub .)
    bool            reduce using rule 55 (FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub .)
    string          reduce using rule 55 (FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub .)
    void            reduce using rule 55 (FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub .)
    main            reduce using rule 55 (FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub .)


state 146

    (51) CUERPORETORNO_CF_AUX -> CUERPOFUNC .

    return          reduce using rule 51 (CUERPORETORNO_CF_AUX -> CUERPOFUNC .)


state 147

    (48) CUERPORETORNO -> left_cb CUERPORETORNO_AUX . right_cb
    (50) CUERPORETORNO_AUX -> CUERPORETORNO_AUX . CUERPORETORNO_CF_AUX RETORNO
    (51) CUERPORETORNO_CF_AUX -> . CUERPOFUNC
    (52) CUERPORETORNO_CF_AUX -> . empty
    (40) CUERPOFUNC -> . CUERPOFUNC_AUX
    (164) empty -> .
    (41) CUERPOFUNC_AUX -> . CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
    (42) CUERPOFUNC_AUX -> . CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
    (44) CUERPOFUNC_VARS -> . VARS
    (45) CUERPOFUNC_VARS -> . empty
    (12) VARS -> . VARS_AUX
    (13) VARS_AUX -> . VARS_LIST_VAR
    (14) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (15) VARS_LIST_VAR -> . VARS_LIST
    (16) VARS_LIST_VAR -> . VARS_VAR
    (17) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (24) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    right_cb        shift and go to state 188
    return          reduce using rule 164 (empty -> .)
    if              reduce using rule 164 (empty -> .)
    while           reduce using rule 164 (empty -> .)
    cread           reduce using rule 164 (empty -> .)
    cwrite          reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    list            shift and go to state 14
    var             shift and go to state 10

  ! list            [ reduce using rule 164 (empty -> .) ]
  ! var             [ reduce using rule 164 (empty -> .) ]

    CUERPORETORNO_CF_AUX           shift and go to state 187
    VARS                           shift and go to state 150
    CUERPOFUNC                     shift and go to state 146
    VARS_LIST                      shift and go to state 9
    VARS_LIST_VAR                  shift and go to state 12
    VARS_VAR                       shift and go to state 13
    VARS_AUX                       shift and go to state 15
    CUERPOFUNC_VARS                shift and go to state 151
    CUERPOFUNC_AUX                 shift and go to state 148
    empty                          shift and go to state 152

state 148

    (40) CUERPOFUNC -> CUERPOFUNC_AUX .
    (42) CUERPOFUNC_AUX -> CUERPOFUNC_AUX . CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO
    (44) CUERPOFUNC_VARS -> . VARS
    (45) CUERPOFUNC_VARS -> . empty
    (12) VARS -> . VARS_AUX
    (164) empty -> .
    (13) VARS_AUX -> . VARS_LIST_VAR
    (14) VARS_AUX -> . VARS_AUX VARS_LIST_VAR
    (15) VARS_LIST_VAR -> . VARS_LIST
    (16) VARS_LIST_VAR -> . VARS_VAR
    (17) VARS_LIST -> . list nt_hacerLista TIPO VARS_LIST_AUX semicolon
    (24) VARS_VAR -> . var nt_hacerVar TIPO VARS_VAR_AUX semicolon

  ! reduce/reduce conflict for return resolved using rule 40 (CUERPOFUNC -> CUERPOFUNC_AUX .)
  ! reduce/reduce conflict for right_cb resolved using rule 40 (CUERPOFUNC -> CUERPOFUNC_AUX .)
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for var resolved as shift
    return          reduce using rule 40 (CUERPOFUNC -> CUERPOFUNC_AUX .)
    right_cb        reduce using rule 40 (CUERPOFUNC -> CUERPOFUNC_AUX .)
    if              reduce using rule 164 (empty -> .)
    while           reduce using rule 164 (empty -> .)
    cread           reduce using rule 164 (empty -> .)
    cwrite          reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    list            shift and go to state 14
    var             shift and go to state 10

  ! list            [ reduce using rule 164 (empty -> .) ]
  ! var             [ reduce using rule 164 (empty -> .) ]
  ! return          [ reduce using rule 164 (empty -> .) ]
  ! right_cb        [ reduce using rule 164 (empty -> .) ]

    VARS                           shift and go to state 150
    VARS_LIST                      shift and go to state 9
    VARS_LIST_VAR                  shift and go to state 12
    VARS_AUX                       shift and go to state 15
    CUERPOFUNC_VARS                shift and go to state 189
    VARS_VAR                       shift and go to state 13
    empty                          shift and go to state 184

state 149

    (49) CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX . RETORNO
    (53) RETORNO -> . return EXP nt_checaRet semicolon

    return          shift and go to state 190

    RETORNO                        shift and go to state 191

state 150

    (44) CUERPOFUNC_VARS -> VARS .

    if              reduce using rule 44 (CUERPOFUNC_VARS -> VARS .)
    while           reduce using rule 44 (CUERPOFUNC_VARS -> VARS .)
    cread           reduce using rule 44 (CUERPOFUNC_VARS -> VARS .)
    cwrite          reduce using rule 44 (CUERPOFUNC_VARS -> VARS .)
    id              reduce using rule 44 (CUERPOFUNC_VARS -> VARS .)
    list            reduce using rule 44 (CUERPOFUNC_VARS -> VARS .)
    var             reduce using rule 44 (CUERPOFUNC_VARS -> VARS .)
    right_cb        reduce using rule 44 (CUERPOFUNC_VARS -> VARS .)
    return          reduce using rule 44 (CUERPOFUNC_VARS -> VARS .)


state 151

    (41) CUERPOFUNC_AUX -> CUERPOFUNC_VARS . nt_funcInicio CUERPOFUNC_ESTATUTO
    (43) nt_funcInicio -> . empty
    (164) empty -> .

    if              reduce using rule 164 (empty -> .)
    while           reduce using rule 164 (empty -> .)
    cread           reduce using rule 164 (empty -> .)
    cwrite          reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    list            reduce using rule 164 (empty -> .)
    var             reduce using rule 164 (empty -> .)
    return          reduce using rule 164 (empty -> .)
    right_cb        reduce using rule 164 (empty -> .)

    empty                          shift and go to state 192
    nt_funcInicio                  shift and go to state 193

state 152

    (52) CUERPORETORNO_CF_AUX -> empty .
    (45) CUERPOFUNC_VARS -> empty .

  ! reduce/reduce conflict for return resolved using rule 45 (CUERPOFUNC_VARS -> empty .)
    if              reduce using rule 45 (CUERPOFUNC_VARS -> empty .)
    while           reduce using rule 45 (CUERPOFUNC_VARS -> empty .)
    cread           reduce using rule 45 (CUERPOFUNC_VARS -> empty .)
    cwrite          reduce using rule 45 (CUERPOFUNC_VARS -> empty .)
    id              reduce using rule 45 (CUERPOFUNC_VARS -> empty .)
    list            reduce using rule 45 (CUERPOFUNC_VARS -> empty .)
    var             reduce using rule 45 (CUERPOFUNC_VARS -> empty .)
    return          reduce using rule 45 (CUERPOFUNC_VARS -> empty .)

  ! return          [ reduce using rule 52 (CUERPORETORNO_CF_AUX -> empty .) ]


state 153

    (61) FUNC_PARA -> FUNC_PARA comma TIPO id . nt_agregarParametro
    (63) nt_agregarParametro -> . empty
    (164) empty -> .

    right_par       reduce using rule 164 (empty -> .)
    comma           reduce using rule 164 (empty -> .)

    empty                          shift and go to state 123
    nt_agregarParametro            shift and go to state 194

state 154

    (88) LECTURA -> cread left_par id . nt_leer right_par semicolon
    (89) nt_leer -> . empty
    (164) empty -> .

    right_par       reduce using rule 164 (empty -> .)

    empty                          shift and go to state 196
    nt_leer                        shift and go to state 195

state 155

    (76) CONDICION_AUX -> left_par EXPRESION . nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto
    (82) nt_checarBool -> . empty
    (164) empty -> .

    right_par       reduce using rule 164 (empty -> .)

    nt_checarBool                  shift and go to state 197
    empty                          shift and go to state 198

state 156

    (97) EXPRESION -> EXPRESION_NOT . EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (104) EXPRESIONLOGICA -> . EXP EXPRESIONLOGICA_AUX
    (113) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (118) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (123) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (124) FACTOR -> . CONSTANTE
    (125) FACTOR -> . LISTA
    (126) FACTOR -> . FACTOR_AUX
    (142) CONSTANTE -> . NUMERICA
    (143) CONSTANTE -> . BOOLEANA
    (144) CONSTANTE -> . STRINGS
    (141) LISTA -> . id left_sb EXP right_sb
    (127) FACTOR_AUX -> . id nt_pushPilaO
    (128) FACTOR_AUX -> . id nt_verificaFuncId LLAMADA_F
    (145) NUMERICA -> . NUMERICA_AUX
    (146) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (147) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (154) BOOLEANA -> . true
    (155) BOOLEANA -> . false
    (156) STRINGS -> . cteString
    (150) NUMERICA_AUX -> . cteInt nt_pushInt
    (151) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 169
    id              shift and go to state 164
    plus            shift and go to state 165
    minus           shift and go to state 178
    true            shift and go to state 170
    false           shift and go to state 160
    cteString       shift and go to state 168
    cteInt          shift and go to state 173
    cteFloat        shift and go to state 162

    EXPRESIONLOGICA                shift and go to state 199
    BOOLEANA                       shift and go to state 163
    EXP                            shift and go to state 200
    FACTOR_AUX                     shift and go to state 166
    TERMINO                        shift and go to state 167
    STRINGS                        shift and go to state 171
    CONSTANTE                      shift and go to state 172
    NUMERICA_AUX                   shift and go to state 174
    NUMERICA                       shift and go to state 175
    FACTOR                         shift and go to state 176
    LISTA                          shift and go to state 177

state 157

    (99) EXPRESION_NOT -> not . nt_pushPOper
    (162) nt_pushPOper -> . empty
    (164) empty -> .

    left_par        reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    true            reduce using rule 164 (empty -> .)
    false           reduce using rule 164 (empty -> .)
    cteString       reduce using rule 164 (empty -> .)
    cteInt          reduce using rule 164 (empty -> .)
    cteFloat        reduce using rule 164 (empty -> .)

    empty                          shift and go to state 180
    nt_pushPOper                   shift and go to state 201

state 158

    (100) EXPRESION_NOT -> empty .

    left_par        reduce using rule 100 (EXPRESION_NOT -> empty .)
    id              reduce using rule 100 (EXPRESION_NOT -> empty .)
    plus            reduce using rule 100 (EXPRESION_NOT -> empty .)
    minus           reduce using rule 100 (EXPRESION_NOT -> empty .)
    true            reduce using rule 100 (EXPRESION_NOT -> empty .)
    false           reduce using rule 100 (EXPRESION_NOT -> empty .)
    cteString       reduce using rule 100 (EXPRESION_NOT -> empty .)
    cteInt          reduce using rule 100 (EXPRESION_NOT -> empty .)
    cteFloat        reduce using rule 100 (EXPRESION_NOT -> empty .)


state 159

    (92) LLAMADA -> id nt_verificaFuncId left_par . nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub
    (162) nt_pushPOper -> . empty
    (164) empty -> .

    not             reduce using rule 164 (empty -> .)
    right_par       reduce using rule 164 (empty -> .)
    left_par        reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    true            reduce using rule 164 (empty -> .)
    false           reduce using rule 164 (empty -> .)
    cteString       reduce using rule 164 (empty -> .)
    cteInt          reduce using rule 164 (empty -> .)
    cteFloat        reduce using rule 164 (empty -> .)

    empty                          shift and go to state 180
    nt_pushPOper                   shift and go to state 202

state 160

    (155) BOOLEANA -> false .

    multiply        reduce using rule 155 (BOOLEANA -> false .)
    divide          reduce using rule 155 (BOOLEANA -> false .)
    plus            reduce using rule 155 (BOOLEANA -> false .)
    minus           reduce using rule 155 (BOOLEANA -> false .)
    right_sb        reduce using rule 155 (BOOLEANA -> false .)
    lt              reduce using rule 155 (BOOLEANA -> false .)
    gt              reduce using rule 155 (BOOLEANA -> false .)
    ne              reduce using rule 155 (BOOLEANA -> false .)
    ge              reduce using rule 155 (BOOLEANA -> false .)
    le              reduce using rule 155 (BOOLEANA -> false .)
    et              reduce using rule 155 (BOOLEANA -> false .)
    and             reduce using rule 155 (BOOLEANA -> false .)
    or              reduce using rule 155 (BOOLEANA -> false .)
    right_par       reduce using rule 155 (BOOLEANA -> false .)
    semicolon       reduce using rule 155 (BOOLEANA -> false .)
    comma           reduce using rule 155 (BOOLEANA -> false .)


state 161

    (141) LISTA -> id left_sb EXP . right_sb

    right_sb        shift and go to state 203


state 162

    (151) NUMERICA_AUX -> cteFloat . nt_pushFloat
    (153) nt_pushFloat -> . empty
    (164) empty -> .

    multiply        reduce using rule 164 (empty -> .)
    divide          reduce using rule 164 (empty -> .)
    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    right_sb        reduce using rule 164 (empty -> .)
    lt              reduce using rule 164 (empty -> .)
    gt              reduce using rule 164 (empty -> .)
    ne              reduce using rule 164 (empty -> .)
    ge              reduce using rule 164 (empty -> .)
    le              reduce using rule 164 (empty -> .)
    et              reduce using rule 164 (empty -> .)
    and             reduce using rule 164 (empty -> .)
    or              reduce using rule 164 (empty -> .)
    right_par       reduce using rule 164 (empty -> .)
    semicolon       reduce using rule 164 (empty -> .)
    comma           reduce using rule 164 (empty -> .)

    nt_pushFloat                   shift and go to state 204
    empty                          shift and go to state 205

state 163

    (143) CONSTANTE -> BOOLEANA .

    multiply        reduce using rule 143 (CONSTANTE -> BOOLEANA .)
    divide          reduce using rule 143 (CONSTANTE -> BOOLEANA .)
    plus            reduce using rule 143 (CONSTANTE -> BOOLEANA .)
    minus           reduce using rule 143 (CONSTANTE -> BOOLEANA .)
    right_sb        reduce using rule 143 (CONSTANTE -> BOOLEANA .)
    lt              reduce using rule 143 (CONSTANTE -> BOOLEANA .)
    gt              reduce using rule 143 (CONSTANTE -> BOOLEANA .)
    ne              reduce using rule 143 (CONSTANTE -> BOOLEANA .)
    ge              reduce using rule 143 (CONSTANTE -> BOOLEANA .)
    le              reduce using rule 143 (CONSTANTE -> BOOLEANA .)
    et              reduce using rule 143 (CONSTANTE -> BOOLEANA .)
    and             reduce using rule 143 (CONSTANTE -> BOOLEANA .)
    or              reduce using rule 143 (CONSTANTE -> BOOLEANA .)
    right_par       reduce using rule 143 (CONSTANTE -> BOOLEANA .)
    semicolon       reduce using rule 143 (CONSTANTE -> BOOLEANA .)
    comma           reduce using rule 143 (CONSTANTE -> BOOLEANA .)


state 164

    (141) LISTA -> id . left_sb EXP right_sb
    (127) FACTOR_AUX -> id . nt_pushPilaO
    (128) FACTOR_AUX -> id . nt_verificaFuncId LLAMADA_F
    (161) nt_pushPilaO -> . empty
    (129) nt_verificaFuncId -> . empty
    (164) empty -> .

    left_sb         shift and go to state 133
    multiply        reduce using rule 164 (empty -> .)
    divide          reduce using rule 164 (empty -> .)
    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    right_sb        reduce using rule 164 (empty -> .)
    lt              reduce using rule 164 (empty -> .)
    gt              reduce using rule 164 (empty -> .)
    ne              reduce using rule 164 (empty -> .)
    ge              reduce using rule 164 (empty -> .)
    le              reduce using rule 164 (empty -> .)
    et              reduce using rule 164 (empty -> .)
    and             reduce using rule 164 (empty -> .)
    or              reduce using rule 164 (empty -> .)
    right_par       reduce using rule 164 (empty -> .)
    semicolon       reduce using rule 164 (empty -> .)
    comma           reduce using rule 164 (empty -> .)
    left_par        reduce using rule 164 (empty -> .)

    empty                          shift and go to state 208
    nt_pushPilaO                   shift and go to state 207
    nt_verificaFuncId              shift and go to state 206

state 165

    (146) NUMERICA -> plus . nt_sigMas NUMERICA_AUX
    (148) nt_sigMas -> . empty
    (164) empty -> .

    cteInt          reduce using rule 164 (empty -> .)
    cteFloat        reduce using rule 164 (empty -> .)

    nt_sigMas                      shift and go to state 209
    empty                          shift and go to state 210

state 166

    (126) FACTOR -> FACTOR_AUX .

    multiply        reduce using rule 126 (FACTOR -> FACTOR_AUX .)
    divide          reduce using rule 126 (FACTOR -> FACTOR_AUX .)
    plus            reduce using rule 126 (FACTOR -> FACTOR_AUX .)
    minus           reduce using rule 126 (FACTOR -> FACTOR_AUX .)
    right_sb        reduce using rule 126 (FACTOR -> FACTOR_AUX .)
    lt              reduce using rule 126 (FACTOR -> FACTOR_AUX .)
    gt              reduce using rule 126 (FACTOR -> FACTOR_AUX .)
    ne              reduce using rule 126 (FACTOR -> FACTOR_AUX .)
    ge              reduce using rule 126 (FACTOR -> FACTOR_AUX .)
    le              reduce using rule 126 (FACTOR -> FACTOR_AUX .)
    et              reduce using rule 126 (FACTOR -> FACTOR_AUX .)
    and             reduce using rule 126 (FACTOR -> FACTOR_AUX .)
    or              reduce using rule 126 (FACTOR -> FACTOR_AUX .)
    right_par       reduce using rule 126 (FACTOR -> FACTOR_AUX .)
    semicolon       reduce using rule 126 (FACTOR -> FACTOR_AUX .)
    comma           reduce using rule 126 (FACTOR -> FACTOR_AUX .)


state 167

    (113) EXP -> TERMINO . nt_checar_sumas EXP_AUX
    (114) nt_checar_sumas -> . empty
    (164) empty -> .

    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    right_sb        reduce using rule 164 (empty -> .)
    lt              reduce using rule 164 (empty -> .)
    gt              reduce using rule 164 (empty -> .)
    ne              reduce using rule 164 (empty -> .)
    ge              reduce using rule 164 (empty -> .)
    le              reduce using rule 164 (empty -> .)
    et              reduce using rule 164 (empty -> .)
    and             reduce using rule 164 (empty -> .)
    or              reduce using rule 164 (empty -> .)
    right_par       reduce using rule 164 (empty -> .)
    semicolon       reduce using rule 164 (empty -> .)
    comma           reduce using rule 164 (empty -> .)

    empty                          shift and go to state 211
    nt_checar_sumas                shift and go to state 212

state 168

    (156) STRINGS -> cteString .

    multiply        reduce using rule 156 (STRINGS -> cteString .)
    divide          reduce using rule 156 (STRINGS -> cteString .)
    plus            reduce using rule 156 (STRINGS -> cteString .)
    minus           reduce using rule 156 (STRINGS -> cteString .)
    and             reduce using rule 156 (STRINGS -> cteString .)
    or              reduce using rule 156 (STRINGS -> cteString .)
    right_par       reduce using rule 156 (STRINGS -> cteString .)
    semicolon       reduce using rule 156 (STRINGS -> cteString .)
    comma           reduce using rule 156 (STRINGS -> cteString .)
    right_sb        reduce using rule 156 (STRINGS -> cteString .)
    lt              reduce using rule 156 (STRINGS -> cteString .)
    gt              reduce using rule 156 (STRINGS -> cteString .)
    ne              reduce using rule 156 (STRINGS -> cteString .)
    ge              reduce using rule 156 (STRINGS -> cteString .)
    le              reduce using rule 156 (STRINGS -> cteString .)
    et              reduce using rule 156 (STRINGS -> cteString .)


state 169

    (123) FACTOR -> left_par . nt_pushPOper EXPRESION right_par nt_popPOper
    (162) nt_pushPOper -> . empty
    (164) empty -> .

    not             reduce using rule 164 (empty -> .)
    left_par        reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    true            reduce using rule 164 (empty -> .)
    false           reduce using rule 164 (empty -> .)
    cteString       reduce using rule 164 (empty -> .)
    cteInt          reduce using rule 164 (empty -> .)
    cteFloat        reduce using rule 164 (empty -> .)

    empty                          shift and go to state 180
    nt_pushPOper                   shift and go to state 213

state 170

    (154) BOOLEANA -> true .

    multiply        reduce using rule 154 (BOOLEANA -> true .)
    divide          reduce using rule 154 (BOOLEANA -> true .)
    plus            reduce using rule 154 (BOOLEANA -> true .)
    minus           reduce using rule 154 (BOOLEANA -> true .)
    right_sb        reduce using rule 154 (BOOLEANA -> true .)
    lt              reduce using rule 154 (BOOLEANA -> true .)
    gt              reduce using rule 154 (BOOLEANA -> true .)
    ne              reduce using rule 154 (BOOLEANA -> true .)
    ge              reduce using rule 154 (BOOLEANA -> true .)
    le              reduce using rule 154 (BOOLEANA -> true .)
    et              reduce using rule 154 (BOOLEANA -> true .)
    and             reduce using rule 154 (BOOLEANA -> true .)
    or              reduce using rule 154 (BOOLEANA -> true .)
    right_par       reduce using rule 154 (BOOLEANA -> true .)
    semicolon       reduce using rule 154 (BOOLEANA -> true .)
    comma           reduce using rule 154 (BOOLEANA -> true .)


state 171

    (144) CONSTANTE -> STRINGS .

    multiply        reduce using rule 144 (CONSTANTE -> STRINGS .)
    divide          reduce using rule 144 (CONSTANTE -> STRINGS .)
    plus            reduce using rule 144 (CONSTANTE -> STRINGS .)
    minus           reduce using rule 144 (CONSTANTE -> STRINGS .)
    right_sb        reduce using rule 144 (CONSTANTE -> STRINGS .)
    lt              reduce using rule 144 (CONSTANTE -> STRINGS .)
    gt              reduce using rule 144 (CONSTANTE -> STRINGS .)
    ne              reduce using rule 144 (CONSTANTE -> STRINGS .)
    ge              reduce using rule 144 (CONSTANTE -> STRINGS .)
    le              reduce using rule 144 (CONSTANTE -> STRINGS .)
    et              reduce using rule 144 (CONSTANTE -> STRINGS .)
    and             reduce using rule 144 (CONSTANTE -> STRINGS .)
    or              reduce using rule 144 (CONSTANTE -> STRINGS .)
    right_par       reduce using rule 144 (CONSTANTE -> STRINGS .)
    semicolon       reduce using rule 144 (CONSTANTE -> STRINGS .)
    comma           reduce using rule 144 (CONSTANTE -> STRINGS .)


state 172

    (124) FACTOR -> CONSTANTE .

    multiply        reduce using rule 124 (FACTOR -> CONSTANTE .)
    divide          reduce using rule 124 (FACTOR -> CONSTANTE .)
    plus            reduce using rule 124 (FACTOR -> CONSTANTE .)
    minus           reduce using rule 124 (FACTOR -> CONSTANTE .)
    right_sb        reduce using rule 124 (FACTOR -> CONSTANTE .)
    lt              reduce using rule 124 (FACTOR -> CONSTANTE .)
    gt              reduce using rule 124 (FACTOR -> CONSTANTE .)
    ne              reduce using rule 124 (FACTOR -> CONSTANTE .)
    ge              reduce using rule 124 (FACTOR -> CONSTANTE .)
    le              reduce using rule 124 (FACTOR -> CONSTANTE .)
    et              reduce using rule 124 (FACTOR -> CONSTANTE .)
    and             reduce using rule 124 (FACTOR -> CONSTANTE .)
    or              reduce using rule 124 (FACTOR -> CONSTANTE .)
    right_par       reduce using rule 124 (FACTOR -> CONSTANTE .)
    semicolon       reduce using rule 124 (FACTOR -> CONSTANTE .)
    comma           reduce using rule 124 (FACTOR -> CONSTANTE .)


state 173

    (150) NUMERICA_AUX -> cteInt . nt_pushInt
    (152) nt_pushInt -> . empty
    (164) empty -> .

    multiply        reduce using rule 164 (empty -> .)
    divide          reduce using rule 164 (empty -> .)
    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    right_sb        reduce using rule 164 (empty -> .)
    lt              reduce using rule 164 (empty -> .)
    gt              reduce using rule 164 (empty -> .)
    ne              reduce using rule 164 (empty -> .)
    ge              reduce using rule 164 (empty -> .)
    le              reduce using rule 164 (empty -> .)
    et              reduce using rule 164 (empty -> .)
    and             reduce using rule 164 (empty -> .)
    or              reduce using rule 164 (empty -> .)
    right_par       reduce using rule 164 (empty -> .)
    semicolon       reduce using rule 164 (empty -> .)
    comma           reduce using rule 164 (empty -> .)

    empty                          shift and go to state 214
    nt_pushInt                     shift and go to state 215

state 174

    (145) NUMERICA -> NUMERICA_AUX .

    multiply        reduce using rule 145 (NUMERICA -> NUMERICA_AUX .)
    divide          reduce using rule 145 (NUMERICA -> NUMERICA_AUX .)
    plus            reduce using rule 145 (NUMERICA -> NUMERICA_AUX .)
    minus           reduce using rule 145 (NUMERICA -> NUMERICA_AUX .)
    semicolon       reduce using rule 145 (NUMERICA -> NUMERICA_AUX .)
    right_sb        reduce using rule 145 (NUMERICA -> NUMERICA_AUX .)
    lt              reduce using rule 145 (NUMERICA -> NUMERICA_AUX .)
    gt              reduce using rule 145 (NUMERICA -> NUMERICA_AUX .)
    ne              reduce using rule 145 (NUMERICA -> NUMERICA_AUX .)
    ge              reduce using rule 145 (NUMERICA -> NUMERICA_AUX .)
    le              reduce using rule 145 (NUMERICA -> NUMERICA_AUX .)
    et              reduce using rule 145 (NUMERICA -> NUMERICA_AUX .)
    and             reduce using rule 145 (NUMERICA -> NUMERICA_AUX .)
    or              reduce using rule 145 (NUMERICA -> NUMERICA_AUX .)
    right_par       reduce using rule 145 (NUMERICA -> NUMERICA_AUX .)
    comma           reduce using rule 145 (NUMERICA -> NUMERICA_AUX .)


state 175

    (142) CONSTANTE -> NUMERICA .

    multiply        reduce using rule 142 (CONSTANTE -> NUMERICA .)
    divide          reduce using rule 142 (CONSTANTE -> NUMERICA .)
    plus            reduce using rule 142 (CONSTANTE -> NUMERICA .)
    minus           reduce using rule 142 (CONSTANTE -> NUMERICA .)
    right_sb        reduce using rule 142 (CONSTANTE -> NUMERICA .)
    lt              reduce using rule 142 (CONSTANTE -> NUMERICA .)
    gt              reduce using rule 142 (CONSTANTE -> NUMERICA .)
    ne              reduce using rule 142 (CONSTANTE -> NUMERICA .)
    ge              reduce using rule 142 (CONSTANTE -> NUMERICA .)
    le              reduce using rule 142 (CONSTANTE -> NUMERICA .)
    et              reduce using rule 142 (CONSTANTE -> NUMERICA .)
    and             reduce using rule 142 (CONSTANTE -> NUMERICA .)
    or              reduce using rule 142 (CONSTANTE -> NUMERICA .)
    right_par       reduce using rule 142 (CONSTANTE -> NUMERICA .)
    semicolon       reduce using rule 142 (CONSTANTE -> NUMERICA .)
    comma           reduce using rule 142 (CONSTANTE -> NUMERICA .)


state 176

    (118) TERMINO -> FACTOR . nt_checar_multis TERMINO_AUX
    (119) nt_checar_multis -> . empty
    (164) empty -> .

    multiply        reduce using rule 164 (empty -> .)
    divide          reduce using rule 164 (empty -> .)
    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    right_sb        reduce using rule 164 (empty -> .)
    lt              reduce using rule 164 (empty -> .)
    gt              reduce using rule 164 (empty -> .)
    ne              reduce using rule 164 (empty -> .)
    ge              reduce using rule 164 (empty -> .)
    le              reduce using rule 164 (empty -> .)
    et              reduce using rule 164 (empty -> .)
    and             reduce using rule 164 (empty -> .)
    or              reduce using rule 164 (empty -> .)
    right_par       reduce using rule 164 (empty -> .)
    semicolon       reduce using rule 164 (empty -> .)
    comma           reduce using rule 164 (empty -> .)

    nt_checar_multis               shift and go to state 216
    empty                          shift and go to state 217

state 177

    (125) FACTOR -> LISTA .

    multiply        reduce using rule 125 (FACTOR -> LISTA .)
    divide          reduce using rule 125 (FACTOR -> LISTA .)
    plus            reduce using rule 125 (FACTOR -> LISTA .)
    minus           reduce using rule 125 (FACTOR -> LISTA .)
    right_sb        reduce using rule 125 (FACTOR -> LISTA .)
    lt              reduce using rule 125 (FACTOR -> LISTA .)
    gt              reduce using rule 125 (FACTOR -> LISTA .)
    ne              reduce using rule 125 (FACTOR -> LISTA .)
    ge              reduce using rule 125 (FACTOR -> LISTA .)
    le              reduce using rule 125 (FACTOR -> LISTA .)
    et              reduce using rule 125 (FACTOR -> LISTA .)
    and             reduce using rule 125 (FACTOR -> LISTA .)
    or              reduce using rule 125 (FACTOR -> LISTA .)
    right_par       reduce using rule 125 (FACTOR -> LISTA .)
    semicolon       reduce using rule 125 (FACTOR -> LISTA .)
    comma           reduce using rule 125 (FACTOR -> LISTA .)


state 178

    (147) NUMERICA -> minus . nt_sigMenos NUMERICA_AUX
    (149) nt_sigMenos -> . empty
    (164) empty -> .

    cteInt          reduce using rule 164 (empty -> .)
    cteFloat        reduce using rule 164 (empty -> .)

    nt_sigMenos                    shift and go to state 219
    empty                          shift and go to state 218

state 179

    (90) ESCRITURA -> cwrite left_par EXPRESION . nt_escribir right_par semicolon
    (91) nt_escribir -> . empty
    (164) empty -> .

    right_par       reduce using rule 164 (empty -> .)

    nt_escribir                    shift and go to state 220
    empty                          shift and go to state 221

state 180

    (162) nt_pushPOper -> empty .

    not             reduce using rule 162 (nt_pushPOper -> empty .)
    left_par        reduce using rule 162 (nt_pushPOper -> empty .)
    id              reduce using rule 162 (nt_pushPOper -> empty .)
    plus            reduce using rule 162 (nt_pushPOper -> empty .)
    minus           reduce using rule 162 (nt_pushPOper -> empty .)
    true            reduce using rule 162 (nt_pushPOper -> empty .)
    false           reduce using rule 162 (nt_pushPOper -> empty .)
    cteString       reduce using rule 162 (nt_pushPOper -> empty .)
    cteInt          reduce using rule 162 (nt_pushPOper -> empty .)
    cteFloat        reduce using rule 162 (nt_pushPOper -> empty .)
    right_par       reduce using rule 162 (nt_pushPOper -> empty .)


state 181

    (157) ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper . EXPRESION nt_checaEquals semicolon
    (97) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (99) EXPRESION_NOT -> . not nt_pushPOper
    (100) EXPRESION_NOT -> . empty
    (164) empty -> .

    not             shift and go to state 157
    left_par        reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    true            reduce using rule 164 (empty -> .)
    false           reduce using rule 164 (empty -> .)
    cteString       reduce using rule 164 (empty -> .)
    cteInt          reduce using rule 164 (empty -> .)
    cteFloat        reduce using rule 164 (empty -> .)

    EXPRESION                      shift and go to state 222
    EXPRESION_NOT                  shift and go to state 156
    empty                          shift and go to state 158

state 182

    (85) CICLO -> while nt_saltoLoop left_par . EXPRESION nt_checarBool right_par CUERPO nt_pushLoop
    (97) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (99) EXPRESION_NOT -> . not nt_pushPOper
    (100) EXPRESION_NOT -> . empty
    (164) empty -> .

    not             shift and go to state 157
    left_par        reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    true            reduce using rule 164 (empty -> .)
    false           reduce using rule 164 (empty -> .)
    cteString       reduce using rule 164 (empty -> .)
    cteInt          reduce using rule 164 (empty -> .)
    cteFloat        reduce using rule 164 (empty -> .)

    EXPRESION                      shift and go to state 223
    EXPRESION_NOT                  shift and go to state 156
    empty                          shift and go to state 158

state 183

    (64) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC . right_cb

    right_cb        shift and go to state 224


state 184

    (45) CUERPOFUNC_VARS -> empty .

    if              reduce using rule 45 (CUERPOFUNC_VARS -> empty .)
    while           reduce using rule 45 (CUERPOFUNC_VARS -> empty .)
    cread           reduce using rule 45 (CUERPOFUNC_VARS -> empty .)
    cwrite          reduce using rule 45 (CUERPOFUNC_VARS -> empty .)
    id              reduce using rule 45 (CUERPOFUNC_VARS -> empty .)
    list            reduce using rule 45 (CUERPOFUNC_VARS -> empty .)
    var             reduce using rule 45 (CUERPOFUNC_VARS -> empty .)
    right_cb        reduce using rule 45 (CUERPOFUNC_VARS -> empty .)
    return          reduce using rule 45 (CUERPOFUNC_VARS -> empty .)


state 185

    (67) VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO id . nt_agregarParametro
    (63) nt_agregarParametro -> . empty
    (164) empty -> .

    right_par       reduce using rule 164 (empty -> .)
    comma           reduce using rule 164 (empty -> .)

    empty                          shift and go to state 123
    nt_agregarParametro            shift and go to state 225

state 186

    (20) VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb . nt_agregarDicVar
    (23) nt_agregarDicVar -> . empty
    (164) empty -> .

    semicolon       reduce using rule 164 (empty -> .)
    comma           reduce using rule 164 (empty -> .)

    nt_agregarDicVar               shift and go to state 226
    empty                          shift and go to state 71

state 187

    (50) CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX . RETORNO
    (53) RETORNO -> . return EXP nt_checaRet semicolon

    return          shift and go to state 190

    RETORNO                        shift and go to state 227

state 188

    (48) CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .

    int             reduce using rule 48 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)
    float           reduce using rule 48 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)
    bool            reduce using rule 48 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)
    string          reduce using rule 48 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)
    void            reduce using rule 48 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)
    main            reduce using rule 48 (CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb .)


state 189

    (42) CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS . nt_funcInicio CUERPOFUNC_ESTATUTO
    (43) nt_funcInicio -> . empty
    (164) empty -> .

    if              reduce using rule 164 (empty -> .)
    while           reduce using rule 164 (empty -> .)
    cread           reduce using rule 164 (empty -> .)
    cwrite          reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    list            reduce using rule 164 (empty -> .)
    var             reduce using rule 164 (empty -> .)
    return          reduce using rule 164 (empty -> .)
    right_cb        reduce using rule 164 (empty -> .)

    empty                          shift and go to state 192
    nt_funcInicio                  shift and go to state 228

state 190

    (53) RETORNO -> return . EXP nt_checaRet semicolon
    (113) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (118) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (123) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (124) FACTOR -> . CONSTANTE
    (125) FACTOR -> . LISTA
    (126) FACTOR -> . FACTOR_AUX
    (142) CONSTANTE -> . NUMERICA
    (143) CONSTANTE -> . BOOLEANA
    (144) CONSTANTE -> . STRINGS
    (141) LISTA -> . id left_sb EXP right_sb
    (127) FACTOR_AUX -> . id nt_pushPilaO
    (128) FACTOR_AUX -> . id nt_verificaFuncId LLAMADA_F
    (145) NUMERICA -> . NUMERICA_AUX
    (146) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (147) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (154) BOOLEANA -> . true
    (155) BOOLEANA -> . false
    (156) STRINGS -> . cteString
    (150) NUMERICA_AUX -> . cteInt nt_pushInt
    (151) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 169
    id              shift and go to state 164
    plus            shift and go to state 165
    minus           shift and go to state 178
    true            shift and go to state 170
    false           shift and go to state 160
    cteString       shift and go to state 168
    cteInt          shift and go to state 173
    cteFloat        shift and go to state 162

    BOOLEANA                       shift and go to state 163
    EXP                            shift and go to state 229
    FACTOR_AUX                     shift and go to state 166
    NUMERICA_AUX                   shift and go to state 174
    TERMINO                        shift and go to state 167
    STRINGS                        shift and go to state 171
    CONSTANTE                      shift and go to state 172
    NUMERICA                       shift and go to state 175
    FACTOR                         shift and go to state 176
    LISTA                          shift and go to state 177

state 191

    (49) CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .

    right_cb        reduce using rule 49 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    list            reduce using rule 49 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    var             reduce using rule 49 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    return          reduce using rule 49 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    if              reduce using rule 49 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    while           reduce using rule 49 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    cread           reduce using rule 49 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    cwrite          reduce using rule 49 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)
    id              reduce using rule 49 (CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO .)


state 192

    (43) nt_funcInicio -> empty .

    if              reduce using rule 43 (nt_funcInicio -> empty .)
    while           reduce using rule 43 (nt_funcInicio -> empty .)
    cread           reduce using rule 43 (nt_funcInicio -> empty .)
    cwrite          reduce using rule 43 (nt_funcInicio -> empty .)
    id              reduce using rule 43 (nt_funcInicio -> empty .)
    list            reduce using rule 43 (nt_funcInicio -> empty .)
    var             reduce using rule 43 (nt_funcInicio -> empty .)
    return          reduce using rule 43 (nt_funcInicio -> empty .)
    right_cb        reduce using rule 43 (nt_funcInicio -> empty .)


state 193

    (41) CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio . CUERPOFUNC_ESTATUTO
    (46) CUERPOFUNC_ESTATUTO -> . ESTATUTO
    (47) CUERPOFUNC_ESTATUTO -> . empty
    (69) ESTATUTO -> . ASIGNACION
    (70) ESTATUTO -> . CONDICION
    (71) ESTATUTO -> . CICLO
    (72) ESTATUTO -> . LECTURA
    (73) ESTATUTO -> . ESCRITURA
    (74) ESTATUTO -> . LLAMADA
    (164) empty -> .
    (157) ASIGNACION -> . ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon
    (75) CONDICION -> . if CONDICION_AUX
    (85) CICLO -> . while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop
    (88) LECTURA -> . cread left_par id nt_leer right_par semicolon
    (90) ESCRITURA -> . cwrite left_par EXPRESION nt_escribir right_par semicolon
    (92) LLAMADA -> . id nt_verificaFuncId left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub
    (159) ASIGNACION_AUX -> . id nt_pushPilaO
    (160) ASIGNACION_AUX -> . LISTA
    (141) LISTA -> . id left_sb EXP right_sb

  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for cread resolved as shift
  ! shift/reduce conflict for cwrite resolved as shift
  ! shift/reduce conflict for id resolved as shift
    list            reduce using rule 164 (empty -> .)
    var             reduce using rule 164 (empty -> .)
    return          reduce using rule 164 (empty -> .)
    right_cb        reduce using rule 164 (empty -> .)
    if              shift and go to state 103
    while           shift and go to state 114
    cread           shift and go to state 101
    cwrite          shift and go to state 107
    id              shift and go to state 106

  ! if              [ reduce using rule 164 (empty -> .) ]
  ! while           [ reduce using rule 164 (empty -> .) ]
  ! cread           [ reduce using rule 164 (empty -> .) ]
  ! cwrite          [ reduce using rule 164 (empty -> .) ]
  ! id              [ reduce using rule 164 (empty -> .) ]

    CICLO                          shift and go to state 100
    LECTURA                        shift and go to state 102
    ESCRITURA                      shift and go to state 109
    CUERPOFUNC_ESTATUTO            shift and go to state 230
    ASIGNACION                     shift and go to state 104
    ESTATUTO                       shift and go to state 231
    ASIGNACION_AUX                 shift and go to state 108
    empty                          shift and go to state 232
    LLAMADA                        shift and go to state 111
    CONDICION                      shift and go to state 112
    LISTA                          shift and go to state 115

state 194

    (61) FUNC_PARA -> FUNC_PARA comma TIPO id nt_agregarParametro .

    right_par       reduce using rule 61 (FUNC_PARA -> FUNC_PARA comma TIPO id nt_agregarParametro .)
    comma           reduce using rule 61 (FUNC_PARA -> FUNC_PARA comma TIPO id nt_agregarParametro .)


state 195

    (88) LECTURA -> cread left_par id nt_leer . right_par semicolon

    right_par       shift and go to state 233


state 196

    (89) nt_leer -> empty .

    right_par       reduce using rule 89 (nt_leer -> empty .)


state 197

    (76) CONDICION_AUX -> left_par EXPRESION nt_checarBool . right_par CUERPO ELSE_ELIF nt_pushSalto

    right_par       shift and go to state 234


state 198

    (82) nt_checarBool -> empty .

    right_par       reduce using rule 82 (nt_checarBool -> empty .)


state 199

    (97) EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA . nt_checaAndOrNot EXPRESION_B
    (98) nt_checaAndOrNot -> . empty
    (164) empty -> .

    and             reduce using rule 164 (empty -> .)
    or              reduce using rule 164 (empty -> .)
    right_par       reduce using rule 164 (empty -> .)
    semicolon       reduce using rule 164 (empty -> .)
    comma           reduce using rule 164 (empty -> .)

    nt_checaAndOrNot               shift and go to state 235
    empty                          shift and go to state 236

state 200

    (104) EXPRESIONLOGICA -> EXP . EXPRESIONLOGICA_AUX
    (105) EXPRESIONLOGICA_AUX -> . lt nt_pushPOper EXP nt_checarRelop
    (106) EXPRESIONLOGICA_AUX -> . gt nt_pushPOper EXP nt_checarRelop
    (107) EXPRESIONLOGICA_AUX -> . ne nt_pushPOper EXP nt_checarRelop
    (108) EXPRESIONLOGICA_AUX -> . ge nt_pushPOper EXP nt_checarRelop
    (109) EXPRESIONLOGICA_AUX -> . le nt_pushPOper EXP nt_checarRelop
    (110) EXPRESIONLOGICA_AUX -> . et nt_pushPOper EXP nt_checarRelop
    (111) EXPRESIONLOGICA_AUX -> . empty
    (164) empty -> .

    lt              shift and go to state 241
    gt              shift and go to state 238
    ne              shift and go to state 240
    ge              shift and go to state 237
    le              shift and go to state 242
    et              shift and go to state 243
    and             reduce using rule 164 (empty -> .)
    or              reduce using rule 164 (empty -> .)
    right_par       reduce using rule 164 (empty -> .)
    semicolon       reduce using rule 164 (empty -> .)
    comma           reduce using rule 164 (empty -> .)

    empty                          shift and go to state 244
    EXPRESIONLOGICA_AUX            shift and go to state 239

state 201

    (99) EXPRESION_NOT -> not nt_pushPOper .

    left_par        reduce using rule 99 (EXPRESION_NOT -> not nt_pushPOper .)
    id              reduce using rule 99 (EXPRESION_NOT -> not nt_pushPOper .)
    plus            reduce using rule 99 (EXPRESION_NOT -> not nt_pushPOper .)
    minus           reduce using rule 99 (EXPRESION_NOT -> not nt_pushPOper .)
    true            reduce using rule 99 (EXPRESION_NOT -> not nt_pushPOper .)
    false           reduce using rule 99 (EXPRESION_NOT -> not nt_pushPOper .)
    cteString       reduce using rule 99 (EXPRESION_NOT -> not nt_pushPOper .)
    cteInt          reduce using rule 99 (EXPRESION_NOT -> not nt_pushPOper .)
    cteFloat        reduce using rule 99 (EXPRESION_NOT -> not nt_pushPOper .)


state 202

    (92) LLAMADA -> id nt_verificaFuncId left_par nt_pushPOper . nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub
    (136) nt_startERA -> . empty
    (164) empty -> .

    not             reduce using rule 164 (empty -> .)
    right_par       reduce using rule 164 (empty -> .)
    left_par        reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    true            reduce using rule 164 (empty -> .)
    false           reduce using rule 164 (empty -> .)
    cteString       reduce using rule 164 (empty -> .)
    cteInt          reduce using rule 164 (empty -> .)
    cteFloat        reduce using rule 164 (empty -> .)

    nt_startERA                    shift and go to state 245
    empty                          shift and go to state 246

state 203

    (141) LISTA -> id left_sb EXP right_sb .

    multiply        reduce using rule 141 (LISTA -> id left_sb EXP right_sb .)
    divide          reduce using rule 141 (LISTA -> id left_sb EXP right_sb .)
    plus            reduce using rule 141 (LISTA -> id left_sb EXP right_sb .)
    minus           reduce using rule 141 (LISTA -> id left_sb EXP right_sb .)
    semicolon       reduce using rule 141 (LISTA -> id left_sb EXP right_sb .)
    right_sb        reduce using rule 141 (LISTA -> id left_sb EXP right_sb .)
    lt              reduce using rule 141 (LISTA -> id left_sb EXP right_sb .)
    gt              reduce using rule 141 (LISTA -> id left_sb EXP right_sb .)
    ne              reduce using rule 141 (LISTA -> id left_sb EXP right_sb .)
    ge              reduce using rule 141 (LISTA -> id left_sb EXP right_sb .)
    le              reduce using rule 141 (LISTA -> id left_sb EXP right_sb .)
    et              reduce using rule 141 (LISTA -> id left_sb EXP right_sb .)
    and             reduce using rule 141 (LISTA -> id left_sb EXP right_sb .)
    or              reduce using rule 141 (LISTA -> id left_sb EXP right_sb .)
    right_par       reduce using rule 141 (LISTA -> id left_sb EXP right_sb .)
    comma           reduce using rule 141 (LISTA -> id left_sb EXP right_sb .)
    equals          reduce using rule 141 (LISTA -> id left_sb EXP right_sb .)


state 204

    (151) NUMERICA_AUX -> cteFloat nt_pushFloat .

    multiply        reduce using rule 151 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    divide          reduce using rule 151 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    plus            reduce using rule 151 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    minus           reduce using rule 151 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    semicolon       reduce using rule 151 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    right_sb        reduce using rule 151 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    lt              reduce using rule 151 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    gt              reduce using rule 151 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    ne              reduce using rule 151 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    ge              reduce using rule 151 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    le              reduce using rule 151 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    et              reduce using rule 151 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    and             reduce using rule 151 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    or              reduce using rule 151 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    right_par       reduce using rule 151 (NUMERICA_AUX -> cteFloat nt_pushFloat .)
    comma           reduce using rule 151 (NUMERICA_AUX -> cteFloat nt_pushFloat .)


state 205

    (153) nt_pushFloat -> empty .

    multiply        reduce using rule 153 (nt_pushFloat -> empty .)
    divide          reduce using rule 153 (nt_pushFloat -> empty .)
    plus            reduce using rule 153 (nt_pushFloat -> empty .)
    minus           reduce using rule 153 (nt_pushFloat -> empty .)
    right_sb        reduce using rule 153 (nt_pushFloat -> empty .)
    lt              reduce using rule 153 (nt_pushFloat -> empty .)
    gt              reduce using rule 153 (nt_pushFloat -> empty .)
    ne              reduce using rule 153 (nt_pushFloat -> empty .)
    ge              reduce using rule 153 (nt_pushFloat -> empty .)
    le              reduce using rule 153 (nt_pushFloat -> empty .)
    et              reduce using rule 153 (nt_pushFloat -> empty .)
    and             reduce using rule 153 (nt_pushFloat -> empty .)
    or              reduce using rule 153 (nt_pushFloat -> empty .)
    right_par       reduce using rule 153 (nt_pushFloat -> empty .)
    semicolon       reduce using rule 153 (nt_pushFloat -> empty .)
    comma           reduce using rule 153 (nt_pushFloat -> empty .)


state 206

    (128) FACTOR_AUX -> id nt_verificaFuncId . LLAMADA_F
    (130) LLAMADA_F -> . left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet

    left_par        shift and go to state 247

    LLAMADA_F                      shift and go to state 248

state 207

    (127) FACTOR_AUX -> id nt_pushPilaO .

    multiply        reduce using rule 127 (FACTOR_AUX -> id nt_pushPilaO .)
    divide          reduce using rule 127 (FACTOR_AUX -> id nt_pushPilaO .)
    plus            reduce using rule 127 (FACTOR_AUX -> id nt_pushPilaO .)
    minus           reduce using rule 127 (FACTOR_AUX -> id nt_pushPilaO .)
    right_sb        reduce using rule 127 (FACTOR_AUX -> id nt_pushPilaO .)
    semicolon       reduce using rule 127 (FACTOR_AUX -> id nt_pushPilaO .)
    and             reduce using rule 127 (FACTOR_AUX -> id nt_pushPilaO .)
    or              reduce using rule 127 (FACTOR_AUX -> id nt_pushPilaO .)
    right_par       reduce using rule 127 (FACTOR_AUX -> id nt_pushPilaO .)
    comma           reduce using rule 127 (FACTOR_AUX -> id nt_pushPilaO .)
    lt              reduce using rule 127 (FACTOR_AUX -> id nt_pushPilaO .)
    gt              reduce using rule 127 (FACTOR_AUX -> id nt_pushPilaO .)
    ne              reduce using rule 127 (FACTOR_AUX -> id nt_pushPilaO .)
    ge              reduce using rule 127 (FACTOR_AUX -> id nt_pushPilaO .)
    le              reduce using rule 127 (FACTOR_AUX -> id nt_pushPilaO .)
    et              reduce using rule 127 (FACTOR_AUX -> id nt_pushPilaO .)


state 208

    (161) nt_pushPilaO -> empty .
    (129) nt_verificaFuncId -> empty .

    multiply        reduce using rule 161 (nt_pushPilaO -> empty .)
    divide          reduce using rule 161 (nt_pushPilaO -> empty .)
    plus            reduce using rule 161 (nt_pushPilaO -> empty .)
    minus           reduce using rule 161 (nt_pushPilaO -> empty .)
    right_sb        reduce using rule 161 (nt_pushPilaO -> empty .)
    lt              reduce using rule 161 (nt_pushPilaO -> empty .)
    gt              reduce using rule 161 (nt_pushPilaO -> empty .)
    ne              reduce using rule 161 (nt_pushPilaO -> empty .)
    ge              reduce using rule 161 (nt_pushPilaO -> empty .)
    le              reduce using rule 161 (nt_pushPilaO -> empty .)
    et              reduce using rule 161 (nt_pushPilaO -> empty .)
    and             reduce using rule 161 (nt_pushPilaO -> empty .)
    or              reduce using rule 161 (nt_pushPilaO -> empty .)
    right_par       reduce using rule 161 (nt_pushPilaO -> empty .)
    semicolon       reduce using rule 161 (nt_pushPilaO -> empty .)
    comma           reduce using rule 161 (nt_pushPilaO -> empty .)
    left_par        reduce using rule 129 (nt_verificaFuncId -> empty .)


state 209

    (146) NUMERICA -> plus nt_sigMas . NUMERICA_AUX
    (150) NUMERICA_AUX -> . cteInt nt_pushInt
    (151) NUMERICA_AUX -> . cteFloat nt_pushFloat

    cteInt          shift and go to state 173
    cteFloat        shift and go to state 162

    NUMERICA_AUX                   shift and go to state 249

state 210

    (148) nt_sigMas -> empty .

    cteInt          reduce using rule 148 (nt_sigMas -> empty .)
    cteFloat        reduce using rule 148 (nt_sigMas -> empty .)


state 211

    (114) nt_checar_sumas -> empty .

    plus            reduce using rule 114 (nt_checar_sumas -> empty .)
    minus           reduce using rule 114 (nt_checar_sumas -> empty .)
    right_sb        reduce using rule 114 (nt_checar_sumas -> empty .)
    lt              reduce using rule 114 (nt_checar_sumas -> empty .)
    gt              reduce using rule 114 (nt_checar_sumas -> empty .)
    ne              reduce using rule 114 (nt_checar_sumas -> empty .)
    ge              reduce using rule 114 (nt_checar_sumas -> empty .)
    le              reduce using rule 114 (nt_checar_sumas -> empty .)
    et              reduce using rule 114 (nt_checar_sumas -> empty .)
    and             reduce using rule 114 (nt_checar_sumas -> empty .)
    or              reduce using rule 114 (nt_checar_sumas -> empty .)
    right_par       reduce using rule 114 (nt_checar_sumas -> empty .)
    semicolon       reduce using rule 114 (nt_checar_sumas -> empty .)
    comma           reduce using rule 114 (nt_checar_sumas -> empty .)


state 212

    (113) EXP -> TERMINO nt_checar_sumas . EXP_AUX
    (115) EXP_AUX -> . plus nt_pushPOper EXP
    (116) EXP_AUX -> . minus nt_pushPOper EXP
    (117) EXP_AUX -> . empty
    (164) empty -> .

    plus            shift and go to state 252
    minus           shift and go to state 250
    right_sb        reduce using rule 164 (empty -> .)
    lt              reduce using rule 164 (empty -> .)
    gt              reduce using rule 164 (empty -> .)
    ne              reduce using rule 164 (empty -> .)
    ge              reduce using rule 164 (empty -> .)
    le              reduce using rule 164 (empty -> .)
    et              reduce using rule 164 (empty -> .)
    and             reduce using rule 164 (empty -> .)
    or              reduce using rule 164 (empty -> .)
    right_par       reduce using rule 164 (empty -> .)
    semicolon       reduce using rule 164 (empty -> .)
    comma           reduce using rule 164 (empty -> .)

    EXP_AUX                        shift and go to state 253
    empty                          shift and go to state 251

state 213

    (123) FACTOR -> left_par nt_pushPOper . EXPRESION right_par nt_popPOper
    (97) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (99) EXPRESION_NOT -> . not nt_pushPOper
    (100) EXPRESION_NOT -> . empty
    (164) empty -> .

    not             shift and go to state 157
    left_par        reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    true            reduce using rule 164 (empty -> .)
    false           reduce using rule 164 (empty -> .)
    cteString       reduce using rule 164 (empty -> .)
    cteInt          reduce using rule 164 (empty -> .)
    cteFloat        reduce using rule 164 (empty -> .)

    EXPRESION                      shift and go to state 254
    EXPRESION_NOT                  shift and go to state 156
    empty                          shift and go to state 158

state 214

    (152) nt_pushInt -> empty .

    multiply        reduce using rule 152 (nt_pushInt -> empty .)
    divide          reduce using rule 152 (nt_pushInt -> empty .)
    plus            reduce using rule 152 (nt_pushInt -> empty .)
    minus           reduce using rule 152 (nt_pushInt -> empty .)
    right_sb        reduce using rule 152 (nt_pushInt -> empty .)
    lt              reduce using rule 152 (nt_pushInt -> empty .)
    gt              reduce using rule 152 (nt_pushInt -> empty .)
    ne              reduce using rule 152 (nt_pushInt -> empty .)
    ge              reduce using rule 152 (nt_pushInt -> empty .)
    le              reduce using rule 152 (nt_pushInt -> empty .)
    et              reduce using rule 152 (nt_pushInt -> empty .)
    and             reduce using rule 152 (nt_pushInt -> empty .)
    or              reduce using rule 152 (nt_pushInt -> empty .)
    right_par       reduce using rule 152 (nt_pushInt -> empty .)
    semicolon       reduce using rule 152 (nt_pushInt -> empty .)
    comma           reduce using rule 152 (nt_pushInt -> empty .)


state 215

    (150) NUMERICA_AUX -> cteInt nt_pushInt .

    multiply        reduce using rule 150 (NUMERICA_AUX -> cteInt nt_pushInt .)
    divide          reduce using rule 150 (NUMERICA_AUX -> cteInt nt_pushInt .)
    plus            reduce using rule 150 (NUMERICA_AUX -> cteInt nt_pushInt .)
    minus           reduce using rule 150 (NUMERICA_AUX -> cteInt nt_pushInt .)
    semicolon       reduce using rule 150 (NUMERICA_AUX -> cteInt nt_pushInt .)
    right_sb        reduce using rule 150 (NUMERICA_AUX -> cteInt nt_pushInt .)
    lt              reduce using rule 150 (NUMERICA_AUX -> cteInt nt_pushInt .)
    gt              reduce using rule 150 (NUMERICA_AUX -> cteInt nt_pushInt .)
    ne              reduce using rule 150 (NUMERICA_AUX -> cteInt nt_pushInt .)
    ge              reduce using rule 150 (NUMERICA_AUX -> cteInt nt_pushInt .)
    le              reduce using rule 150 (NUMERICA_AUX -> cteInt nt_pushInt .)
    et              reduce using rule 150 (NUMERICA_AUX -> cteInt nt_pushInt .)
    and             reduce using rule 150 (NUMERICA_AUX -> cteInt nt_pushInt .)
    or              reduce using rule 150 (NUMERICA_AUX -> cteInt nt_pushInt .)
    right_par       reduce using rule 150 (NUMERICA_AUX -> cteInt nt_pushInt .)
    comma           reduce using rule 150 (NUMERICA_AUX -> cteInt nt_pushInt .)


state 216

    (118) TERMINO -> FACTOR nt_checar_multis . TERMINO_AUX
    (120) TERMINO_AUX -> . multiply nt_pushPOper TERMINO
    (121) TERMINO_AUX -> . divide nt_pushPOper TERMINO
    (122) TERMINO_AUX -> . empty
    (164) empty -> .

    multiply        shift and go to state 257
    divide          shift and go to state 256
    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    right_sb        reduce using rule 164 (empty -> .)
    lt              reduce using rule 164 (empty -> .)
    gt              reduce using rule 164 (empty -> .)
    ne              reduce using rule 164 (empty -> .)
    ge              reduce using rule 164 (empty -> .)
    le              reduce using rule 164 (empty -> .)
    et              reduce using rule 164 (empty -> .)
    and             reduce using rule 164 (empty -> .)
    or              reduce using rule 164 (empty -> .)
    right_par       reduce using rule 164 (empty -> .)
    semicolon       reduce using rule 164 (empty -> .)
    comma           reduce using rule 164 (empty -> .)

    TERMINO_AUX                    shift and go to state 255
    empty                          shift and go to state 258

state 217

    (119) nt_checar_multis -> empty .

    multiply        reduce using rule 119 (nt_checar_multis -> empty .)
    divide          reduce using rule 119 (nt_checar_multis -> empty .)
    plus            reduce using rule 119 (nt_checar_multis -> empty .)
    minus           reduce using rule 119 (nt_checar_multis -> empty .)
    right_sb        reduce using rule 119 (nt_checar_multis -> empty .)
    lt              reduce using rule 119 (nt_checar_multis -> empty .)
    gt              reduce using rule 119 (nt_checar_multis -> empty .)
    ne              reduce using rule 119 (nt_checar_multis -> empty .)
    ge              reduce using rule 119 (nt_checar_multis -> empty .)
    le              reduce using rule 119 (nt_checar_multis -> empty .)
    et              reduce using rule 119 (nt_checar_multis -> empty .)
    and             reduce using rule 119 (nt_checar_multis -> empty .)
    or              reduce using rule 119 (nt_checar_multis -> empty .)
    right_par       reduce using rule 119 (nt_checar_multis -> empty .)
    semicolon       reduce using rule 119 (nt_checar_multis -> empty .)
    comma           reduce using rule 119 (nt_checar_multis -> empty .)


state 218

    (149) nt_sigMenos -> empty .

    cteInt          reduce using rule 149 (nt_sigMenos -> empty .)
    cteFloat        reduce using rule 149 (nt_sigMenos -> empty .)


state 219

    (147) NUMERICA -> minus nt_sigMenos . NUMERICA_AUX
    (150) NUMERICA_AUX -> . cteInt nt_pushInt
    (151) NUMERICA_AUX -> . cteFloat nt_pushFloat

    cteInt          shift and go to state 173
    cteFloat        shift and go to state 162

    NUMERICA_AUX                   shift and go to state 259

state 220

    (90) ESCRITURA -> cwrite left_par EXPRESION nt_escribir . right_par semicolon

    right_par       shift and go to state 260


state 221

    (91) nt_escribir -> empty .

    right_par       reduce using rule 91 (nt_escribir -> empty .)


state 222

    (157) ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION . nt_checaEquals semicolon
    (158) nt_checaEquals -> . empty
    (164) empty -> .

    semicolon       reduce using rule 164 (empty -> .)

    nt_checaEquals                 shift and go to state 261
    empty                          shift and go to state 262

state 223

    (85) CICLO -> while nt_saltoLoop left_par EXPRESION . nt_checarBool right_par CUERPO nt_pushLoop
    (82) nt_checarBool -> . empty
    (164) empty -> .

    right_par       reduce using rule 164 (empty -> .)

    nt_checarBool                  shift and go to state 263
    empty                          shift and go to state 198

state 224

    (64) VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .

    int             reduce using rule 64 (VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)
    float           reduce using rule 64 (VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)
    bool            reduce using rule 64 (VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)
    string          reduce using rule 64 (VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)
    void            reduce using rule 64 (VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)
    main            reduce using rule 64 (VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb .)


state 225

    (67) VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO id nt_agregarParametro .

    right_par       reduce using rule 67 (VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO id nt_agregarParametro .)
    comma           reduce using rule 67 (VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO id nt_agregarParametro .)


state 226

    (20) VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar .

    semicolon       reduce using rule 20 (VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar .)
    comma           reduce using rule 20 (VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar .)


state 227

    (50) CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .

    right_cb        reduce using rule 50 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    list            reduce using rule 50 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    var             reduce using rule 50 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    return          reduce using rule 50 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    if              reduce using rule 50 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    while           reduce using rule 50 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    cread           reduce using rule 50 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    cwrite          reduce using rule 50 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)
    id              reduce using rule 50 (CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO .)


state 228

    (42) CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio . CUERPOFUNC_ESTATUTO
    (46) CUERPOFUNC_ESTATUTO -> . ESTATUTO
    (47) CUERPOFUNC_ESTATUTO -> . empty
    (69) ESTATUTO -> . ASIGNACION
    (70) ESTATUTO -> . CONDICION
    (71) ESTATUTO -> . CICLO
    (72) ESTATUTO -> . LECTURA
    (73) ESTATUTO -> . ESCRITURA
    (74) ESTATUTO -> . LLAMADA
    (164) empty -> .
    (157) ASIGNACION -> . ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon
    (75) CONDICION -> . if CONDICION_AUX
    (85) CICLO -> . while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop
    (88) LECTURA -> . cread left_par id nt_leer right_par semicolon
    (90) ESCRITURA -> . cwrite left_par EXPRESION nt_escribir right_par semicolon
    (92) LLAMADA -> . id nt_verificaFuncId left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub
    (159) ASIGNACION_AUX -> . id nt_pushPilaO
    (160) ASIGNACION_AUX -> . LISTA
    (141) LISTA -> . id left_sb EXP right_sb

  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for cread resolved as shift
  ! shift/reduce conflict for cwrite resolved as shift
  ! shift/reduce conflict for id resolved as shift
    list            reduce using rule 164 (empty -> .)
    var             reduce using rule 164 (empty -> .)
    return          reduce using rule 164 (empty -> .)
    right_cb        reduce using rule 164 (empty -> .)
    if              shift and go to state 103
    while           shift and go to state 114
    cread           shift and go to state 101
    cwrite          shift and go to state 107
    id              shift and go to state 106

  ! if              [ reduce using rule 164 (empty -> .) ]
  ! while           [ reduce using rule 164 (empty -> .) ]
  ! cread           [ reduce using rule 164 (empty -> .) ]
  ! cwrite          [ reduce using rule 164 (empty -> .) ]
  ! id              [ reduce using rule 164 (empty -> .) ]

    CICLO                          shift and go to state 100
    LECTURA                        shift and go to state 102
    ESCRITURA                      shift and go to state 109
    CUERPOFUNC_ESTATUTO            shift and go to state 264
    ASIGNACION                     shift and go to state 104
    ESTATUTO                       shift and go to state 231
    ASIGNACION_AUX                 shift and go to state 108
    empty                          shift and go to state 232
    LLAMADA                        shift and go to state 111
    CONDICION                      shift and go to state 112
    LISTA                          shift and go to state 115

state 229

    (53) RETORNO -> return EXP . nt_checaRet semicolon
    (54) nt_checaRet -> . empty
    (164) empty -> .

    semicolon       reduce using rule 164 (empty -> .)

    empty                          shift and go to state 265
    nt_checaRet                    shift and go to state 266

state 230

    (41) CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .

    list            reduce using rule 41 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    var             reduce using rule 41 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    if              reduce using rule 41 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    while           reduce using rule 41 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    cread           reduce using rule 41 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    cwrite          reduce using rule 41 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    id              reduce using rule 41 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    right_cb        reduce using rule 41 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    return          reduce using rule 41 (CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)


state 231

    (46) CUERPOFUNC_ESTATUTO -> ESTATUTO .

    list            reduce using rule 46 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    var             reduce using rule 46 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    if              reduce using rule 46 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    while           reduce using rule 46 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    cread           reduce using rule 46 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    cwrite          reduce using rule 46 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    id              reduce using rule 46 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    return          reduce using rule 46 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)
    right_cb        reduce using rule 46 (CUERPOFUNC_ESTATUTO -> ESTATUTO .)


state 232

    (47) CUERPOFUNC_ESTATUTO -> empty .

    list            reduce using rule 47 (CUERPOFUNC_ESTATUTO -> empty .)
    var             reduce using rule 47 (CUERPOFUNC_ESTATUTO -> empty .)
    if              reduce using rule 47 (CUERPOFUNC_ESTATUTO -> empty .)
    while           reduce using rule 47 (CUERPOFUNC_ESTATUTO -> empty .)
    cread           reduce using rule 47 (CUERPOFUNC_ESTATUTO -> empty .)
    cwrite          reduce using rule 47 (CUERPOFUNC_ESTATUTO -> empty .)
    id              reduce using rule 47 (CUERPOFUNC_ESTATUTO -> empty .)
    return          reduce using rule 47 (CUERPOFUNC_ESTATUTO -> empty .)
    right_cb        reduce using rule 47 (CUERPOFUNC_ESTATUTO -> empty .)


state 233

    (88) LECTURA -> cread left_par id nt_leer right_par . semicolon

    semicolon       shift and go to state 267


state 234

    (76) CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par . CUERPO ELSE_ELIF nt_pushSalto
    (33) CUERPO -> . left_cb CUERPO_AUX right_cb

    left_cb         shift and go to state 76

    CUERPO                         shift and go to state 268

state 235

    (97) EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot . EXPRESION_B
    (101) EXPRESION_B -> . and nt_pushPOper EXPRESION
    (102) EXPRESION_B -> . or nt_pushPOper EXPRESION
    (103) EXPRESION_B -> . empty
    (164) empty -> .

    and             shift and go to state 269
    or              shift and go to state 271
    right_par       reduce using rule 164 (empty -> .)
    semicolon       reduce using rule 164 (empty -> .)
    comma           reduce using rule 164 (empty -> .)

    EXPRESION_B                    shift and go to state 270
    empty                          shift and go to state 272

state 236

    (98) nt_checaAndOrNot -> empty .

    and             reduce using rule 98 (nt_checaAndOrNot -> empty .)
    or              reduce using rule 98 (nt_checaAndOrNot -> empty .)
    right_par       reduce using rule 98 (nt_checaAndOrNot -> empty .)
    semicolon       reduce using rule 98 (nt_checaAndOrNot -> empty .)
    comma           reduce using rule 98 (nt_checaAndOrNot -> empty .)


state 237

    (108) EXPRESIONLOGICA_AUX -> ge . nt_pushPOper EXP nt_checarRelop
    (162) nt_pushPOper -> . empty
    (164) empty -> .

    left_par        reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    true            reduce using rule 164 (empty -> .)
    false           reduce using rule 164 (empty -> .)
    cteString       reduce using rule 164 (empty -> .)
    cteInt          reduce using rule 164 (empty -> .)
    cteFloat        reduce using rule 164 (empty -> .)

    empty                          shift and go to state 180
    nt_pushPOper                   shift and go to state 273

state 238

    (106) EXPRESIONLOGICA_AUX -> gt . nt_pushPOper EXP nt_checarRelop
    (162) nt_pushPOper -> . empty
    (164) empty -> .

    left_par        reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    true            reduce using rule 164 (empty -> .)
    false           reduce using rule 164 (empty -> .)
    cteString       reduce using rule 164 (empty -> .)
    cteInt          reduce using rule 164 (empty -> .)
    cteFloat        reduce using rule 164 (empty -> .)

    empty                          shift and go to state 180
    nt_pushPOper                   shift and go to state 274

state 239

    (104) EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .

    and             reduce using rule 104 (EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .)
    or              reduce using rule 104 (EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .)
    right_par       reduce using rule 104 (EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .)
    semicolon       reduce using rule 104 (EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .)
    comma           reduce using rule 104 (EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX .)


state 240

    (107) EXPRESIONLOGICA_AUX -> ne . nt_pushPOper EXP nt_checarRelop
    (162) nt_pushPOper -> . empty
    (164) empty -> .

    left_par        reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    true            reduce using rule 164 (empty -> .)
    false           reduce using rule 164 (empty -> .)
    cteString       reduce using rule 164 (empty -> .)
    cteInt          reduce using rule 164 (empty -> .)
    cteFloat        reduce using rule 164 (empty -> .)

    empty                          shift and go to state 180
    nt_pushPOper                   shift and go to state 275

state 241

    (105) EXPRESIONLOGICA_AUX -> lt . nt_pushPOper EXP nt_checarRelop
    (162) nt_pushPOper -> . empty
    (164) empty -> .

    left_par        reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    true            reduce using rule 164 (empty -> .)
    false           reduce using rule 164 (empty -> .)
    cteString       reduce using rule 164 (empty -> .)
    cteInt          reduce using rule 164 (empty -> .)
    cteFloat        reduce using rule 164 (empty -> .)

    empty                          shift and go to state 180
    nt_pushPOper                   shift and go to state 276

state 242

    (109) EXPRESIONLOGICA_AUX -> le . nt_pushPOper EXP nt_checarRelop
    (162) nt_pushPOper -> . empty
    (164) empty -> .

    left_par        reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    true            reduce using rule 164 (empty -> .)
    false           reduce using rule 164 (empty -> .)
    cteString       reduce using rule 164 (empty -> .)
    cteInt          reduce using rule 164 (empty -> .)
    cteFloat        reduce using rule 164 (empty -> .)

    empty                          shift and go to state 180
    nt_pushPOper                   shift and go to state 277

state 243

    (110) EXPRESIONLOGICA_AUX -> et . nt_pushPOper EXP nt_checarRelop
    (162) nt_pushPOper -> . empty
    (164) empty -> .

    left_par        reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    true            reduce using rule 164 (empty -> .)
    false           reduce using rule 164 (empty -> .)
    cteString       reduce using rule 164 (empty -> .)
    cteInt          reduce using rule 164 (empty -> .)
    cteFloat        reduce using rule 164 (empty -> .)

    empty                          shift and go to state 180
    nt_pushPOper                   shift and go to state 278

state 244

    (111) EXPRESIONLOGICA_AUX -> empty .

    and             reduce using rule 111 (EXPRESIONLOGICA_AUX -> empty .)
    or              reduce using rule 111 (EXPRESIONLOGICA_AUX -> empty .)
    right_par       reduce using rule 111 (EXPRESIONLOGICA_AUX -> empty .)
    semicolon       reduce using rule 111 (EXPRESIONLOGICA_AUX -> empty .)
    comma           reduce using rule 111 (EXPRESIONLOGICA_AUX -> empty .)


state 245

    (92) LLAMADA -> id nt_verificaFuncId left_par nt_pushPOper nt_startERA . LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub
    (93) LLAMADA_EXPRESION -> . LLAMADA_EXPRESION_AUX
    (94) LLAMADA_EXPRESION -> . empty
    (95) LLAMADA_EXPRESION_AUX -> . EXPRESION nt_verifyArgType
    (96) LLAMADA_EXPRESION_AUX -> . LLAMADA_EXPRESION_AUX comma nt_paramPP EXPRESION nt_verifyArgType
    (164) empty -> .
    (97) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (99) EXPRESION_NOT -> . not nt_pushPOper
    (100) EXPRESION_NOT -> . empty

    right_par       reduce using rule 164 (empty -> .)
    left_par        reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    true            reduce using rule 164 (empty -> .)
    false           reduce using rule 164 (empty -> .)
    cteString       reduce using rule 164 (empty -> .)
    cteInt          reduce using rule 164 (empty -> .)
    cteFloat        reduce using rule 164 (empty -> .)
    not             shift and go to state 157

    EXPRESION                      shift and go to state 279
    EXPRESION_NOT                  shift and go to state 156
    LLAMADA_EXPRESION              shift and go to state 280
    LLAMADA_EXPRESION_AUX          shift and go to state 282
    empty                          shift and go to state 281

state 246

    (136) nt_startERA -> empty .

    not             reduce using rule 136 (nt_startERA -> empty .)
    right_par       reduce using rule 136 (nt_startERA -> empty .)
    left_par        reduce using rule 136 (nt_startERA -> empty .)
    id              reduce using rule 136 (nt_startERA -> empty .)
    plus            reduce using rule 136 (nt_startERA -> empty .)
    minus           reduce using rule 136 (nt_startERA -> empty .)
    true            reduce using rule 136 (nt_startERA -> empty .)
    false           reduce using rule 136 (nt_startERA -> empty .)
    cteString       reduce using rule 136 (nt_startERA -> empty .)
    cteInt          reduce using rule 136 (nt_startERA -> empty .)
    cteFloat        reduce using rule 136 (nt_startERA -> empty .)


state 247

    (130) LLAMADA_F -> left_par . nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet
    (162) nt_pushPOper -> . empty
    (164) empty -> .

    not             reduce using rule 164 (empty -> .)
    right_par       reduce using rule 164 (empty -> .)
    left_par        reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    true            reduce using rule 164 (empty -> .)
    false           reduce using rule 164 (empty -> .)
    cteString       reduce using rule 164 (empty -> .)
    cteInt          reduce using rule 164 (empty -> .)
    cteFloat        reduce using rule 164 (empty -> .)

    empty                          shift and go to state 180
    nt_pushPOper                   shift and go to state 283

state 248

    (128) FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .

    multiply        reduce using rule 128 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    divide          reduce using rule 128 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    plus            reduce using rule 128 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    minus           reduce using rule 128 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    right_sb        reduce using rule 128 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    semicolon       reduce using rule 128 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    and             reduce using rule 128 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    or              reduce using rule 128 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    right_par       reduce using rule 128 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    comma           reduce using rule 128 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    lt              reduce using rule 128 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    gt              reduce using rule 128 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    ne              reduce using rule 128 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    ge              reduce using rule 128 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    le              reduce using rule 128 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)
    et              reduce using rule 128 (FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F .)


state 249

    (146) NUMERICA -> plus nt_sigMas NUMERICA_AUX .

    multiply        reduce using rule 146 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    divide          reduce using rule 146 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    plus            reduce using rule 146 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    minus           reduce using rule 146 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    semicolon       reduce using rule 146 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    right_sb        reduce using rule 146 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    lt              reduce using rule 146 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    gt              reduce using rule 146 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    ne              reduce using rule 146 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    ge              reduce using rule 146 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    le              reduce using rule 146 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    et              reduce using rule 146 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    and             reduce using rule 146 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    or              reduce using rule 146 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    right_par       reduce using rule 146 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)
    comma           reduce using rule 146 (NUMERICA -> plus nt_sigMas NUMERICA_AUX .)


state 250

    (116) EXP_AUX -> minus . nt_pushPOper EXP
    (162) nt_pushPOper -> . empty
    (164) empty -> .

    left_par        reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    true            reduce using rule 164 (empty -> .)
    false           reduce using rule 164 (empty -> .)
    cteString       reduce using rule 164 (empty -> .)
    cteInt          reduce using rule 164 (empty -> .)
    cteFloat        reduce using rule 164 (empty -> .)

    empty                          shift and go to state 180
    nt_pushPOper                   shift and go to state 284

state 251

    (117) EXP_AUX -> empty .

    right_sb        reduce using rule 117 (EXP_AUX -> empty .)
    lt              reduce using rule 117 (EXP_AUX -> empty .)
    gt              reduce using rule 117 (EXP_AUX -> empty .)
    ne              reduce using rule 117 (EXP_AUX -> empty .)
    ge              reduce using rule 117 (EXP_AUX -> empty .)
    le              reduce using rule 117 (EXP_AUX -> empty .)
    et              reduce using rule 117 (EXP_AUX -> empty .)
    and             reduce using rule 117 (EXP_AUX -> empty .)
    or              reduce using rule 117 (EXP_AUX -> empty .)
    right_par       reduce using rule 117 (EXP_AUX -> empty .)
    semicolon       reduce using rule 117 (EXP_AUX -> empty .)
    comma           reduce using rule 117 (EXP_AUX -> empty .)


state 252

    (115) EXP_AUX -> plus . nt_pushPOper EXP
    (162) nt_pushPOper -> . empty
    (164) empty -> .

    left_par        reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    true            reduce using rule 164 (empty -> .)
    false           reduce using rule 164 (empty -> .)
    cteString       reduce using rule 164 (empty -> .)
    cteInt          reduce using rule 164 (empty -> .)
    cteFloat        reduce using rule 164 (empty -> .)

    empty                          shift and go to state 180
    nt_pushPOper                   shift and go to state 285

state 253

    (113) EXP -> TERMINO nt_checar_sumas EXP_AUX .

    and             reduce using rule 113 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    or              reduce using rule 113 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    right_par       reduce using rule 113 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    semicolon       reduce using rule 113 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    comma           reduce using rule 113 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    right_sb        reduce using rule 113 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    lt              reduce using rule 113 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    gt              reduce using rule 113 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    ne              reduce using rule 113 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    ge              reduce using rule 113 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    le              reduce using rule 113 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)
    et              reduce using rule 113 (EXP -> TERMINO nt_checar_sumas EXP_AUX .)


state 254

    (123) FACTOR -> left_par nt_pushPOper EXPRESION . right_par nt_popPOper

    right_par       shift and go to state 286


state 255

    (118) TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .

    plus            reduce using rule 118 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    minus           reduce using rule 118 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    and             reduce using rule 118 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    or              reduce using rule 118 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    right_par       reduce using rule 118 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    semicolon       reduce using rule 118 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    comma           reduce using rule 118 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    right_sb        reduce using rule 118 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    lt              reduce using rule 118 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    gt              reduce using rule 118 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    ne              reduce using rule 118 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    ge              reduce using rule 118 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    le              reduce using rule 118 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)
    et              reduce using rule 118 (TERMINO -> FACTOR nt_checar_multis TERMINO_AUX .)


state 256

    (121) TERMINO_AUX -> divide . nt_pushPOper TERMINO
    (162) nt_pushPOper -> . empty
    (164) empty -> .

    left_par        reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    true            reduce using rule 164 (empty -> .)
    false           reduce using rule 164 (empty -> .)
    cteString       reduce using rule 164 (empty -> .)
    cteInt          reduce using rule 164 (empty -> .)
    cteFloat        reduce using rule 164 (empty -> .)

    empty                          shift and go to state 180
    nt_pushPOper                   shift and go to state 287

state 257

    (120) TERMINO_AUX -> multiply . nt_pushPOper TERMINO
    (162) nt_pushPOper -> . empty
    (164) empty -> .

    left_par        reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    true            reduce using rule 164 (empty -> .)
    false           reduce using rule 164 (empty -> .)
    cteString       reduce using rule 164 (empty -> .)
    cteInt          reduce using rule 164 (empty -> .)
    cteFloat        reduce using rule 164 (empty -> .)

    empty                          shift and go to state 180
    nt_pushPOper                   shift and go to state 288

state 258

    (122) TERMINO_AUX -> empty .

    plus            reduce using rule 122 (TERMINO_AUX -> empty .)
    minus           reduce using rule 122 (TERMINO_AUX -> empty .)
    right_sb        reduce using rule 122 (TERMINO_AUX -> empty .)
    lt              reduce using rule 122 (TERMINO_AUX -> empty .)
    gt              reduce using rule 122 (TERMINO_AUX -> empty .)
    ne              reduce using rule 122 (TERMINO_AUX -> empty .)
    ge              reduce using rule 122 (TERMINO_AUX -> empty .)
    le              reduce using rule 122 (TERMINO_AUX -> empty .)
    et              reduce using rule 122 (TERMINO_AUX -> empty .)
    and             reduce using rule 122 (TERMINO_AUX -> empty .)
    or              reduce using rule 122 (TERMINO_AUX -> empty .)
    right_par       reduce using rule 122 (TERMINO_AUX -> empty .)
    semicolon       reduce using rule 122 (TERMINO_AUX -> empty .)
    comma           reduce using rule 122 (TERMINO_AUX -> empty .)


state 259

    (147) NUMERICA -> minus nt_sigMenos NUMERICA_AUX .

    multiply        reduce using rule 147 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    divide          reduce using rule 147 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    plus            reduce using rule 147 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    minus           reduce using rule 147 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    semicolon       reduce using rule 147 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    right_sb        reduce using rule 147 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    lt              reduce using rule 147 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    gt              reduce using rule 147 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    ne              reduce using rule 147 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    ge              reduce using rule 147 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    le              reduce using rule 147 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    et              reduce using rule 147 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    and             reduce using rule 147 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    or              reduce using rule 147 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    right_par       reduce using rule 147 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)
    comma           reduce using rule 147 (NUMERICA -> minus nt_sigMenos NUMERICA_AUX .)


state 260

    (90) ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par . semicolon

    semicolon       shift and go to state 289


state 261

    (157) ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals . semicolon

    semicolon       shift and go to state 290


state 262

    (158) nt_checaEquals -> empty .

    semicolon       reduce using rule 158 (nt_checaEquals -> empty .)


state 263

    (85) CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool . right_par CUERPO nt_pushLoop

    right_par       shift and go to state 291


state 264

    (42) CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .

    list            reduce using rule 42 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    var             reduce using rule 42 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    if              reduce using rule 42 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    while           reduce using rule 42 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    cread           reduce using rule 42 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    cwrite          reduce using rule 42 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    id              reduce using rule 42 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    right_cb        reduce using rule 42 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)
    return          reduce using rule 42 (CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO .)


state 265

    (54) nt_checaRet -> empty .

    semicolon       reduce using rule 54 (nt_checaRet -> empty .)


state 266

    (53) RETORNO -> return EXP nt_checaRet . semicolon

    semicolon       shift and go to state 292


state 267

    (88) LECTURA -> cread left_par id nt_leer right_par semicolon .

    right_cb        reduce using rule 88 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    list            reduce using rule 88 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    var             reduce using rule 88 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    if              reduce using rule 88 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    while           reduce using rule 88 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    cread           reduce using rule 88 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    cwrite          reduce using rule 88 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    id              reduce using rule 88 (LECTURA -> cread left_par id nt_leer right_par semicolon .)
    return          reduce using rule 88 (LECTURA -> cread left_par id nt_leer right_par semicolon .)


state 268

    (76) CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO . ELSE_ELIF nt_pushSalto
    (77) ELSE_ELIF -> . ELSE
    (78) ELSE_ELIF -> . ELIF
    (79) ELSE_ELIF -> . empty
    (80) ELSE -> . else nt_pushElse CUERPO
    (81) ELIF -> . elseif nt_pushElse CONDICION_AUX
    (164) empty -> .

    else            shift and go to state 297
    elseif          shift and go to state 296
    right_cb        reduce using rule 164 (empty -> .)
    list            reduce using rule 164 (empty -> .)
    var             reduce using rule 164 (empty -> .)
    if              reduce using rule 164 (empty -> .)
    while           reduce using rule 164 (empty -> .)
    cread           reduce using rule 164 (empty -> .)
    cwrite          reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    return          reduce using rule 164 (empty -> .)

    ELIF                           shift and go to state 294
    ELSE_ELIF                      shift and go to state 293
    ELSE                           shift and go to state 295
    empty                          shift and go to state 298

state 269

    (101) EXPRESION_B -> and . nt_pushPOper EXPRESION
    (162) nt_pushPOper -> . empty
    (164) empty -> .

    not             reduce using rule 164 (empty -> .)
    left_par        reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    true            reduce using rule 164 (empty -> .)
    false           reduce using rule 164 (empty -> .)
    cteString       reduce using rule 164 (empty -> .)
    cteInt          reduce using rule 164 (empty -> .)
    cteFloat        reduce using rule 164 (empty -> .)

    empty                          shift and go to state 180
    nt_pushPOper                   shift and go to state 299

state 270

    (97) EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B .

    right_par       reduce using rule 97 (EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B .)
    semicolon       reduce using rule 97 (EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B .)
    comma           reduce using rule 97 (EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B .)


state 271

    (102) EXPRESION_B -> or . nt_pushPOper EXPRESION
    (162) nt_pushPOper -> . empty
    (164) empty -> .

    not             reduce using rule 164 (empty -> .)
    left_par        reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    true            reduce using rule 164 (empty -> .)
    false           reduce using rule 164 (empty -> .)
    cteString       reduce using rule 164 (empty -> .)
    cteInt          reduce using rule 164 (empty -> .)
    cteFloat        reduce using rule 164 (empty -> .)

    empty                          shift and go to state 180
    nt_pushPOper                   shift and go to state 300

state 272

    (103) EXPRESION_B -> empty .

    right_par       reduce using rule 103 (EXPRESION_B -> empty .)
    semicolon       reduce using rule 103 (EXPRESION_B -> empty .)
    comma           reduce using rule 103 (EXPRESION_B -> empty .)


state 273

    (108) EXPRESIONLOGICA_AUX -> ge nt_pushPOper . EXP nt_checarRelop
    (113) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (118) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (123) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (124) FACTOR -> . CONSTANTE
    (125) FACTOR -> . LISTA
    (126) FACTOR -> . FACTOR_AUX
    (142) CONSTANTE -> . NUMERICA
    (143) CONSTANTE -> . BOOLEANA
    (144) CONSTANTE -> . STRINGS
    (141) LISTA -> . id left_sb EXP right_sb
    (127) FACTOR_AUX -> . id nt_pushPilaO
    (128) FACTOR_AUX -> . id nt_verificaFuncId LLAMADA_F
    (145) NUMERICA -> . NUMERICA_AUX
    (146) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (147) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (154) BOOLEANA -> . true
    (155) BOOLEANA -> . false
    (156) STRINGS -> . cteString
    (150) NUMERICA_AUX -> . cteInt nt_pushInt
    (151) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 169
    id              shift and go to state 164
    plus            shift and go to state 165
    minus           shift and go to state 178
    true            shift and go to state 170
    false           shift and go to state 160
    cteString       shift and go to state 168
    cteInt          shift and go to state 173
    cteFloat        shift and go to state 162

    BOOLEANA                       shift and go to state 163
    EXP                            shift and go to state 301
    FACTOR_AUX                     shift and go to state 166
    NUMERICA_AUX                   shift and go to state 174
    TERMINO                        shift and go to state 167
    STRINGS                        shift and go to state 171
    CONSTANTE                      shift and go to state 172
    NUMERICA                       shift and go to state 175
    FACTOR                         shift and go to state 176
    LISTA                          shift and go to state 177

state 274

    (106) EXPRESIONLOGICA_AUX -> gt nt_pushPOper . EXP nt_checarRelop
    (113) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (118) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (123) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (124) FACTOR -> . CONSTANTE
    (125) FACTOR -> . LISTA
    (126) FACTOR -> . FACTOR_AUX
    (142) CONSTANTE -> . NUMERICA
    (143) CONSTANTE -> . BOOLEANA
    (144) CONSTANTE -> . STRINGS
    (141) LISTA -> . id left_sb EXP right_sb
    (127) FACTOR_AUX -> . id nt_pushPilaO
    (128) FACTOR_AUX -> . id nt_verificaFuncId LLAMADA_F
    (145) NUMERICA -> . NUMERICA_AUX
    (146) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (147) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (154) BOOLEANA -> . true
    (155) BOOLEANA -> . false
    (156) STRINGS -> . cteString
    (150) NUMERICA_AUX -> . cteInt nt_pushInt
    (151) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 169
    id              shift and go to state 164
    plus            shift and go to state 165
    minus           shift and go to state 178
    true            shift and go to state 170
    false           shift and go to state 160
    cteString       shift and go to state 168
    cteInt          shift and go to state 173
    cteFloat        shift and go to state 162

    BOOLEANA                       shift and go to state 163
    EXP                            shift and go to state 302
    FACTOR_AUX                     shift and go to state 166
    NUMERICA_AUX                   shift and go to state 174
    TERMINO                        shift and go to state 167
    STRINGS                        shift and go to state 171
    CONSTANTE                      shift and go to state 172
    NUMERICA                       shift and go to state 175
    FACTOR                         shift and go to state 176
    LISTA                          shift and go to state 177

state 275

    (107) EXPRESIONLOGICA_AUX -> ne nt_pushPOper . EXP nt_checarRelop
    (113) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (118) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (123) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (124) FACTOR -> . CONSTANTE
    (125) FACTOR -> . LISTA
    (126) FACTOR -> . FACTOR_AUX
    (142) CONSTANTE -> . NUMERICA
    (143) CONSTANTE -> . BOOLEANA
    (144) CONSTANTE -> . STRINGS
    (141) LISTA -> . id left_sb EXP right_sb
    (127) FACTOR_AUX -> . id nt_pushPilaO
    (128) FACTOR_AUX -> . id nt_verificaFuncId LLAMADA_F
    (145) NUMERICA -> . NUMERICA_AUX
    (146) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (147) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (154) BOOLEANA -> . true
    (155) BOOLEANA -> . false
    (156) STRINGS -> . cteString
    (150) NUMERICA_AUX -> . cteInt nt_pushInt
    (151) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 169
    id              shift and go to state 164
    plus            shift and go to state 165
    minus           shift and go to state 178
    true            shift and go to state 170
    false           shift and go to state 160
    cteString       shift and go to state 168
    cteInt          shift and go to state 173
    cteFloat        shift and go to state 162

    BOOLEANA                       shift and go to state 163
    EXP                            shift and go to state 303
    FACTOR_AUX                     shift and go to state 166
    NUMERICA_AUX                   shift and go to state 174
    TERMINO                        shift and go to state 167
    STRINGS                        shift and go to state 171
    CONSTANTE                      shift and go to state 172
    NUMERICA                       shift and go to state 175
    FACTOR                         shift and go to state 176
    LISTA                          shift and go to state 177

state 276

    (105) EXPRESIONLOGICA_AUX -> lt nt_pushPOper . EXP nt_checarRelop
    (113) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (118) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (123) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (124) FACTOR -> . CONSTANTE
    (125) FACTOR -> . LISTA
    (126) FACTOR -> . FACTOR_AUX
    (142) CONSTANTE -> . NUMERICA
    (143) CONSTANTE -> . BOOLEANA
    (144) CONSTANTE -> . STRINGS
    (141) LISTA -> . id left_sb EXP right_sb
    (127) FACTOR_AUX -> . id nt_pushPilaO
    (128) FACTOR_AUX -> . id nt_verificaFuncId LLAMADA_F
    (145) NUMERICA -> . NUMERICA_AUX
    (146) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (147) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (154) BOOLEANA -> . true
    (155) BOOLEANA -> . false
    (156) STRINGS -> . cteString
    (150) NUMERICA_AUX -> . cteInt nt_pushInt
    (151) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 169
    id              shift and go to state 164
    plus            shift and go to state 165
    minus           shift and go to state 178
    true            shift and go to state 170
    false           shift and go to state 160
    cteString       shift and go to state 168
    cteInt          shift and go to state 173
    cteFloat        shift and go to state 162

    BOOLEANA                       shift and go to state 163
    EXP                            shift and go to state 304
    FACTOR_AUX                     shift and go to state 166
    NUMERICA_AUX                   shift and go to state 174
    TERMINO                        shift and go to state 167
    STRINGS                        shift and go to state 171
    CONSTANTE                      shift and go to state 172
    NUMERICA                       shift and go to state 175
    FACTOR                         shift and go to state 176
    LISTA                          shift and go to state 177

state 277

    (109) EXPRESIONLOGICA_AUX -> le nt_pushPOper . EXP nt_checarRelop
    (113) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (118) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (123) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (124) FACTOR -> . CONSTANTE
    (125) FACTOR -> . LISTA
    (126) FACTOR -> . FACTOR_AUX
    (142) CONSTANTE -> . NUMERICA
    (143) CONSTANTE -> . BOOLEANA
    (144) CONSTANTE -> . STRINGS
    (141) LISTA -> . id left_sb EXP right_sb
    (127) FACTOR_AUX -> . id nt_pushPilaO
    (128) FACTOR_AUX -> . id nt_verificaFuncId LLAMADA_F
    (145) NUMERICA -> . NUMERICA_AUX
    (146) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (147) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (154) BOOLEANA -> . true
    (155) BOOLEANA -> . false
    (156) STRINGS -> . cteString
    (150) NUMERICA_AUX -> . cteInt nt_pushInt
    (151) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 169
    id              shift and go to state 164
    plus            shift and go to state 165
    minus           shift and go to state 178
    true            shift and go to state 170
    false           shift and go to state 160
    cteString       shift and go to state 168
    cteInt          shift and go to state 173
    cteFloat        shift and go to state 162

    BOOLEANA                       shift and go to state 163
    EXP                            shift and go to state 305
    FACTOR_AUX                     shift and go to state 166
    NUMERICA_AUX                   shift and go to state 174
    TERMINO                        shift and go to state 167
    STRINGS                        shift and go to state 171
    CONSTANTE                      shift and go to state 172
    NUMERICA                       shift and go to state 175
    FACTOR                         shift and go to state 176
    LISTA                          shift and go to state 177

state 278

    (110) EXPRESIONLOGICA_AUX -> et nt_pushPOper . EXP nt_checarRelop
    (113) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (118) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (123) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (124) FACTOR -> . CONSTANTE
    (125) FACTOR -> . LISTA
    (126) FACTOR -> . FACTOR_AUX
    (142) CONSTANTE -> . NUMERICA
    (143) CONSTANTE -> . BOOLEANA
    (144) CONSTANTE -> . STRINGS
    (141) LISTA -> . id left_sb EXP right_sb
    (127) FACTOR_AUX -> . id nt_pushPilaO
    (128) FACTOR_AUX -> . id nt_verificaFuncId LLAMADA_F
    (145) NUMERICA -> . NUMERICA_AUX
    (146) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (147) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (154) BOOLEANA -> . true
    (155) BOOLEANA -> . false
    (156) STRINGS -> . cteString
    (150) NUMERICA_AUX -> . cteInt nt_pushInt
    (151) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 169
    id              shift and go to state 164
    plus            shift and go to state 165
    minus           shift and go to state 178
    true            shift and go to state 170
    false           shift and go to state 160
    cteString       shift and go to state 168
    cteInt          shift and go to state 173
    cteFloat        shift and go to state 162

    BOOLEANA                       shift and go to state 163
    EXP                            shift and go to state 306
    FACTOR_AUX                     shift and go to state 166
    NUMERICA_AUX                   shift and go to state 174
    TERMINO                        shift and go to state 167
    STRINGS                        shift and go to state 171
    CONSTANTE                      shift and go to state 172
    NUMERICA                       shift and go to state 175
    FACTOR                         shift and go to state 176
    LISTA                          shift and go to state 177

state 279

    (95) LLAMADA_EXPRESION_AUX -> EXPRESION . nt_verifyArgType
    (137) nt_verifyArgType -> . empty
    (164) empty -> .

    comma           reduce using rule 164 (empty -> .)
    right_par       reduce using rule 164 (empty -> .)

    empty                          shift and go to state 307
    nt_verifyArgType               shift and go to state 308

state 280

    (92) LLAMADA -> id nt_verificaFuncId left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION . nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub
    (138) nt_verificaUltimo -> . empty
    (164) empty -> .

    right_par       reduce using rule 164 (empty -> .)

    nt_verificaUltimo              shift and go to state 309
    empty                          shift and go to state 310

state 281

    (94) LLAMADA_EXPRESION -> empty .
    (100) EXPRESION_NOT -> empty .

    right_par       reduce using rule 94 (LLAMADA_EXPRESION -> empty .)
    left_par        reduce using rule 100 (EXPRESION_NOT -> empty .)
    id              reduce using rule 100 (EXPRESION_NOT -> empty .)
    plus            reduce using rule 100 (EXPRESION_NOT -> empty .)
    minus           reduce using rule 100 (EXPRESION_NOT -> empty .)
    true            reduce using rule 100 (EXPRESION_NOT -> empty .)
    false           reduce using rule 100 (EXPRESION_NOT -> empty .)
    cteString       reduce using rule 100 (EXPRESION_NOT -> empty .)
    cteInt          reduce using rule 100 (EXPRESION_NOT -> empty .)
    cteFloat        reduce using rule 100 (EXPRESION_NOT -> empty .)


state 282

    (93) LLAMADA_EXPRESION -> LLAMADA_EXPRESION_AUX .
    (96) LLAMADA_EXPRESION_AUX -> LLAMADA_EXPRESION_AUX . comma nt_paramPP EXPRESION nt_verifyArgType

    right_par       reduce using rule 93 (LLAMADA_EXPRESION -> LLAMADA_EXPRESION_AUX .)
    comma           shift and go to state 311


state 283

    (130) LLAMADA_F -> left_par nt_pushPOper . nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet
    (136) nt_startERA -> . empty
    (164) empty -> .

    not             reduce using rule 164 (empty -> .)
    right_par       reduce using rule 164 (empty -> .)
    left_par        reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    true            reduce using rule 164 (empty -> .)
    false           reduce using rule 164 (empty -> .)
    cteString       reduce using rule 164 (empty -> .)
    cteInt          reduce using rule 164 (empty -> .)
    cteFloat        reduce using rule 164 (empty -> .)

    nt_startERA                    shift and go to state 312
    empty                          shift and go to state 246

state 284

    (116) EXP_AUX -> minus nt_pushPOper . EXP
    (113) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (118) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (123) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (124) FACTOR -> . CONSTANTE
    (125) FACTOR -> . LISTA
    (126) FACTOR -> . FACTOR_AUX
    (142) CONSTANTE -> . NUMERICA
    (143) CONSTANTE -> . BOOLEANA
    (144) CONSTANTE -> . STRINGS
    (141) LISTA -> . id left_sb EXP right_sb
    (127) FACTOR_AUX -> . id nt_pushPilaO
    (128) FACTOR_AUX -> . id nt_verificaFuncId LLAMADA_F
    (145) NUMERICA -> . NUMERICA_AUX
    (146) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (147) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (154) BOOLEANA -> . true
    (155) BOOLEANA -> . false
    (156) STRINGS -> . cteString
    (150) NUMERICA_AUX -> . cteInt nt_pushInt
    (151) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 169
    id              shift and go to state 164
    plus            shift and go to state 165
    minus           shift and go to state 178
    true            shift and go to state 170
    false           shift and go to state 160
    cteString       shift and go to state 168
    cteInt          shift and go to state 173
    cteFloat        shift and go to state 162

    BOOLEANA                       shift and go to state 163
    EXP                            shift and go to state 313
    FACTOR_AUX                     shift and go to state 166
    NUMERICA_AUX                   shift and go to state 174
    TERMINO                        shift and go to state 167
    STRINGS                        shift and go to state 171
    CONSTANTE                      shift and go to state 172
    NUMERICA                       shift and go to state 175
    FACTOR                         shift and go to state 176
    LISTA                          shift and go to state 177

state 285

    (115) EXP_AUX -> plus nt_pushPOper . EXP
    (113) EXP -> . TERMINO nt_checar_sumas EXP_AUX
    (118) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (123) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (124) FACTOR -> . CONSTANTE
    (125) FACTOR -> . LISTA
    (126) FACTOR -> . FACTOR_AUX
    (142) CONSTANTE -> . NUMERICA
    (143) CONSTANTE -> . BOOLEANA
    (144) CONSTANTE -> . STRINGS
    (141) LISTA -> . id left_sb EXP right_sb
    (127) FACTOR_AUX -> . id nt_pushPilaO
    (128) FACTOR_AUX -> . id nt_verificaFuncId LLAMADA_F
    (145) NUMERICA -> . NUMERICA_AUX
    (146) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (147) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (154) BOOLEANA -> . true
    (155) BOOLEANA -> . false
    (156) STRINGS -> . cteString
    (150) NUMERICA_AUX -> . cteInt nt_pushInt
    (151) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 169
    id              shift and go to state 164
    plus            shift and go to state 165
    minus           shift and go to state 178
    true            shift and go to state 170
    false           shift and go to state 160
    cteString       shift and go to state 168
    cteInt          shift and go to state 173
    cteFloat        shift and go to state 162

    BOOLEANA                       shift and go to state 163
    EXP                            shift and go to state 314
    FACTOR_AUX                     shift and go to state 166
    NUMERICA_AUX                   shift and go to state 174
    TERMINO                        shift and go to state 167
    STRINGS                        shift and go to state 171
    CONSTANTE                      shift and go to state 172
    NUMERICA                       shift and go to state 175
    FACTOR                         shift and go to state 176
    LISTA                          shift and go to state 177

state 286

    (123) FACTOR -> left_par nt_pushPOper EXPRESION right_par . nt_popPOper
    (163) nt_popPOper -> . empty
    (164) empty -> .

    multiply        reduce using rule 164 (empty -> .)
    divide          reduce using rule 164 (empty -> .)
    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    right_sb        reduce using rule 164 (empty -> .)
    lt              reduce using rule 164 (empty -> .)
    gt              reduce using rule 164 (empty -> .)
    ne              reduce using rule 164 (empty -> .)
    ge              reduce using rule 164 (empty -> .)
    le              reduce using rule 164 (empty -> .)
    et              reduce using rule 164 (empty -> .)
    and             reduce using rule 164 (empty -> .)
    or              reduce using rule 164 (empty -> .)
    right_par       reduce using rule 164 (empty -> .)
    semicolon       reduce using rule 164 (empty -> .)
    comma           reduce using rule 164 (empty -> .)

    nt_popPOper                    shift and go to state 315
    empty                          shift and go to state 316

state 287

    (121) TERMINO_AUX -> divide nt_pushPOper . TERMINO
    (118) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (123) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (124) FACTOR -> . CONSTANTE
    (125) FACTOR -> . LISTA
    (126) FACTOR -> . FACTOR_AUX
    (142) CONSTANTE -> . NUMERICA
    (143) CONSTANTE -> . BOOLEANA
    (144) CONSTANTE -> . STRINGS
    (141) LISTA -> . id left_sb EXP right_sb
    (127) FACTOR_AUX -> . id nt_pushPilaO
    (128) FACTOR_AUX -> . id nt_verificaFuncId LLAMADA_F
    (145) NUMERICA -> . NUMERICA_AUX
    (146) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (147) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (154) BOOLEANA -> . true
    (155) BOOLEANA -> . false
    (156) STRINGS -> . cteString
    (150) NUMERICA_AUX -> . cteInt nt_pushInt
    (151) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 169
    id              shift and go to state 164
    plus            shift and go to state 165
    minus           shift and go to state 178
    true            shift and go to state 170
    false           shift and go to state 160
    cteString       shift and go to state 168
    cteInt          shift and go to state 173
    cteFloat        shift and go to state 162

    BOOLEANA                       shift and go to state 163
    FACTOR_AUX                     shift and go to state 166
    NUMERICA_AUX                   shift and go to state 174
    TERMINO                        shift and go to state 317
    STRINGS                        shift and go to state 171
    CONSTANTE                      shift and go to state 172
    NUMERICA                       shift and go to state 175
    FACTOR                         shift and go to state 176
    LISTA                          shift and go to state 177

state 288

    (120) TERMINO_AUX -> multiply nt_pushPOper . TERMINO
    (118) TERMINO -> . FACTOR nt_checar_multis TERMINO_AUX
    (123) FACTOR -> . left_par nt_pushPOper EXPRESION right_par nt_popPOper
    (124) FACTOR -> . CONSTANTE
    (125) FACTOR -> . LISTA
    (126) FACTOR -> . FACTOR_AUX
    (142) CONSTANTE -> . NUMERICA
    (143) CONSTANTE -> . BOOLEANA
    (144) CONSTANTE -> . STRINGS
    (141) LISTA -> . id left_sb EXP right_sb
    (127) FACTOR_AUX -> . id nt_pushPilaO
    (128) FACTOR_AUX -> . id nt_verificaFuncId LLAMADA_F
    (145) NUMERICA -> . NUMERICA_AUX
    (146) NUMERICA -> . plus nt_sigMas NUMERICA_AUX
    (147) NUMERICA -> . minus nt_sigMenos NUMERICA_AUX
    (154) BOOLEANA -> . true
    (155) BOOLEANA -> . false
    (156) STRINGS -> . cteString
    (150) NUMERICA_AUX -> . cteInt nt_pushInt
    (151) NUMERICA_AUX -> . cteFloat nt_pushFloat

    left_par        shift and go to state 169
    id              shift and go to state 164
    plus            shift and go to state 165
    minus           shift and go to state 178
    true            shift and go to state 170
    false           shift and go to state 160
    cteString       shift and go to state 168
    cteInt          shift and go to state 173
    cteFloat        shift and go to state 162

    BOOLEANA                       shift and go to state 163
    FACTOR_AUX                     shift and go to state 166
    NUMERICA_AUX                   shift and go to state 174
    TERMINO                        shift and go to state 318
    STRINGS                        shift and go to state 171
    CONSTANTE                      shift and go to state 172
    NUMERICA                       shift and go to state 175
    FACTOR                         shift and go to state 176
    LISTA                          shift and go to state 177

state 289

    (90) ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .

    right_cb        reduce using rule 90 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    list            reduce using rule 90 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    var             reduce using rule 90 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    if              reduce using rule 90 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    while           reduce using rule 90 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    cread           reduce using rule 90 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    cwrite          reduce using rule 90 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    id              reduce using rule 90 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)
    return          reduce using rule 90 (ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon .)


state 290

    (157) ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .

    list            reduce using rule 157 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    var             reduce using rule 157 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    if              reduce using rule 157 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    while           reduce using rule 157 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    cread           reduce using rule 157 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    cwrite          reduce using rule 157 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    id              reduce using rule 157 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    return          reduce using rule 157 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)
    right_cb        reduce using rule 157 (ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon .)


state 291

    (85) CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par . CUERPO nt_pushLoop
    (33) CUERPO -> . left_cb CUERPO_AUX right_cb

    left_cb         shift and go to state 76

    CUERPO                         shift and go to state 319

state 292

    (53) RETORNO -> return EXP nt_checaRet semicolon .

    right_cb        reduce using rule 53 (RETORNO -> return EXP nt_checaRet semicolon .)
    list            reduce using rule 53 (RETORNO -> return EXP nt_checaRet semicolon .)
    var             reduce using rule 53 (RETORNO -> return EXP nt_checaRet semicolon .)
    return          reduce using rule 53 (RETORNO -> return EXP nt_checaRet semicolon .)
    if              reduce using rule 53 (RETORNO -> return EXP nt_checaRet semicolon .)
    while           reduce using rule 53 (RETORNO -> return EXP nt_checaRet semicolon .)
    cread           reduce using rule 53 (RETORNO -> return EXP nt_checaRet semicolon .)
    cwrite          reduce using rule 53 (RETORNO -> return EXP nt_checaRet semicolon .)
    id              reduce using rule 53 (RETORNO -> return EXP nt_checaRet semicolon .)


state 293

    (76) CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF . nt_pushSalto
    (83) nt_pushSalto -> . empty
    (164) empty -> .

    right_cb        reduce using rule 164 (empty -> .)
    list            reduce using rule 164 (empty -> .)
    var             reduce using rule 164 (empty -> .)
    if              reduce using rule 164 (empty -> .)
    while           reduce using rule 164 (empty -> .)
    cread           reduce using rule 164 (empty -> .)
    cwrite          reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    return          reduce using rule 164 (empty -> .)

    nt_pushSalto                   shift and go to state 320
    empty                          shift and go to state 321

state 294

    (78) ELSE_ELIF -> ELIF .

    right_cb        reduce using rule 78 (ELSE_ELIF -> ELIF .)
    list            reduce using rule 78 (ELSE_ELIF -> ELIF .)
    var             reduce using rule 78 (ELSE_ELIF -> ELIF .)
    if              reduce using rule 78 (ELSE_ELIF -> ELIF .)
    while           reduce using rule 78 (ELSE_ELIF -> ELIF .)
    cread           reduce using rule 78 (ELSE_ELIF -> ELIF .)
    cwrite          reduce using rule 78 (ELSE_ELIF -> ELIF .)
    id              reduce using rule 78 (ELSE_ELIF -> ELIF .)
    return          reduce using rule 78 (ELSE_ELIF -> ELIF .)


state 295

    (77) ELSE_ELIF -> ELSE .

    right_cb        reduce using rule 77 (ELSE_ELIF -> ELSE .)
    list            reduce using rule 77 (ELSE_ELIF -> ELSE .)
    var             reduce using rule 77 (ELSE_ELIF -> ELSE .)
    if              reduce using rule 77 (ELSE_ELIF -> ELSE .)
    while           reduce using rule 77 (ELSE_ELIF -> ELSE .)
    cread           reduce using rule 77 (ELSE_ELIF -> ELSE .)
    cwrite          reduce using rule 77 (ELSE_ELIF -> ELSE .)
    id              reduce using rule 77 (ELSE_ELIF -> ELSE .)
    return          reduce using rule 77 (ELSE_ELIF -> ELSE .)


state 296

    (81) ELIF -> elseif . nt_pushElse CONDICION_AUX
    (84) nt_pushElse -> . empty
    (164) empty -> .

    left_par        reduce using rule 164 (empty -> .)

    nt_pushElse                    shift and go to state 322
    empty                          shift and go to state 323

state 297

    (80) ELSE -> else . nt_pushElse CUERPO
    (84) nt_pushElse -> . empty
    (164) empty -> .

    left_cb         reduce using rule 164 (empty -> .)

    nt_pushElse                    shift and go to state 324
    empty                          shift and go to state 323

state 298

    (79) ELSE_ELIF -> empty .

    right_cb        reduce using rule 79 (ELSE_ELIF -> empty .)
    list            reduce using rule 79 (ELSE_ELIF -> empty .)
    var             reduce using rule 79 (ELSE_ELIF -> empty .)
    if              reduce using rule 79 (ELSE_ELIF -> empty .)
    while           reduce using rule 79 (ELSE_ELIF -> empty .)
    cread           reduce using rule 79 (ELSE_ELIF -> empty .)
    cwrite          reduce using rule 79 (ELSE_ELIF -> empty .)
    id              reduce using rule 79 (ELSE_ELIF -> empty .)
    return          reduce using rule 79 (ELSE_ELIF -> empty .)


state 299

    (101) EXPRESION_B -> and nt_pushPOper . EXPRESION
    (97) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (99) EXPRESION_NOT -> . not nt_pushPOper
    (100) EXPRESION_NOT -> . empty
    (164) empty -> .

    not             shift and go to state 157
    left_par        reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    true            reduce using rule 164 (empty -> .)
    false           reduce using rule 164 (empty -> .)
    cteString       reduce using rule 164 (empty -> .)
    cteInt          reduce using rule 164 (empty -> .)
    cteFloat        reduce using rule 164 (empty -> .)

    EXPRESION                      shift and go to state 325
    EXPRESION_NOT                  shift and go to state 156
    empty                          shift and go to state 158

state 300

    (102) EXPRESION_B -> or nt_pushPOper . EXPRESION
    (97) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (99) EXPRESION_NOT -> . not nt_pushPOper
    (100) EXPRESION_NOT -> . empty
    (164) empty -> .

    not             shift and go to state 157
    left_par        reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    true            reduce using rule 164 (empty -> .)
    false           reduce using rule 164 (empty -> .)
    cteString       reduce using rule 164 (empty -> .)
    cteInt          reduce using rule 164 (empty -> .)
    cteFloat        reduce using rule 164 (empty -> .)

    EXPRESION                      shift and go to state 326
    EXPRESION_NOT                  shift and go to state 156
    empty                          shift and go to state 158

state 301

    (108) EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP . nt_checarRelop
    (112) nt_checarRelop -> . empty
    (164) empty -> .

    and             reduce using rule 164 (empty -> .)
    or              reduce using rule 164 (empty -> .)
    right_par       reduce using rule 164 (empty -> .)
    semicolon       reduce using rule 164 (empty -> .)
    comma           reduce using rule 164 (empty -> .)

    nt_checarRelop                 shift and go to state 327
    empty                          shift and go to state 328

state 302

    (106) EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP . nt_checarRelop
    (112) nt_checarRelop -> . empty
    (164) empty -> .

    and             reduce using rule 164 (empty -> .)
    or              reduce using rule 164 (empty -> .)
    right_par       reduce using rule 164 (empty -> .)
    semicolon       reduce using rule 164 (empty -> .)
    comma           reduce using rule 164 (empty -> .)

    nt_checarRelop                 shift and go to state 329
    empty                          shift and go to state 328

state 303

    (107) EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP . nt_checarRelop
    (112) nt_checarRelop -> . empty
    (164) empty -> .

    and             reduce using rule 164 (empty -> .)
    or              reduce using rule 164 (empty -> .)
    right_par       reduce using rule 164 (empty -> .)
    semicolon       reduce using rule 164 (empty -> .)
    comma           reduce using rule 164 (empty -> .)

    nt_checarRelop                 shift and go to state 330
    empty                          shift and go to state 328

state 304

    (105) EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP . nt_checarRelop
    (112) nt_checarRelop -> . empty
    (164) empty -> .

    and             reduce using rule 164 (empty -> .)
    or              reduce using rule 164 (empty -> .)
    right_par       reduce using rule 164 (empty -> .)
    semicolon       reduce using rule 164 (empty -> .)
    comma           reduce using rule 164 (empty -> .)

    nt_checarRelop                 shift and go to state 331
    empty                          shift and go to state 328

state 305

    (109) EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP . nt_checarRelop
    (112) nt_checarRelop -> . empty
    (164) empty -> .

    and             reduce using rule 164 (empty -> .)
    or              reduce using rule 164 (empty -> .)
    right_par       reduce using rule 164 (empty -> .)
    semicolon       reduce using rule 164 (empty -> .)
    comma           reduce using rule 164 (empty -> .)

    nt_checarRelop                 shift and go to state 332
    empty                          shift and go to state 328

state 306

    (110) EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP . nt_checarRelop
    (112) nt_checarRelop -> . empty
    (164) empty -> .

    and             reduce using rule 164 (empty -> .)
    or              reduce using rule 164 (empty -> .)
    right_par       reduce using rule 164 (empty -> .)
    semicolon       reduce using rule 164 (empty -> .)
    comma           reduce using rule 164 (empty -> .)

    nt_checarRelop                 shift and go to state 333
    empty                          shift and go to state 328

state 307

    (137) nt_verifyArgType -> empty .

    comma           reduce using rule 137 (nt_verifyArgType -> empty .)
    right_par       reduce using rule 137 (nt_verifyArgType -> empty .)


state 308

    (95) LLAMADA_EXPRESION_AUX -> EXPRESION nt_verifyArgType .

    comma           reduce using rule 95 (LLAMADA_EXPRESION_AUX -> EXPRESION nt_verifyArgType .)
    right_par       reduce using rule 95 (LLAMADA_EXPRESION_AUX -> EXPRESION nt_verifyArgType .)


state 309

    (92) LLAMADA -> id nt_verificaFuncId left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo . right_par nt_popPOper semicolon nt_pushGoSub

    right_par       shift and go to state 334


state 310

    (138) nt_verificaUltimo -> empty .

    right_par       reduce using rule 138 (nt_verificaUltimo -> empty .)


state 311

    (96) LLAMADA_EXPRESION_AUX -> LLAMADA_EXPRESION_AUX comma . nt_paramPP EXPRESION nt_verifyArgType
    (135) nt_paramPP -> . empty
    (164) empty -> .

    not             reduce using rule 164 (empty -> .)
    left_par        reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    true            reduce using rule 164 (empty -> .)
    false           reduce using rule 164 (empty -> .)
    cteString       reduce using rule 164 (empty -> .)
    cteInt          reduce using rule 164 (empty -> .)
    cteFloat        reduce using rule 164 (empty -> .)

    empty                          shift and go to state 336
    nt_paramPP                     shift and go to state 335

state 312

    (130) LLAMADA_F -> left_par nt_pushPOper nt_startERA . LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet
    (131) LLAMADAF_AUX -> . LLAMADAF_AUX2
    (132) LLAMADAF_AUX -> . empty
    (133) LLAMADAF_AUX2 -> . EXPRESION nt_verifyArgType
    (134) LLAMADAF_AUX2 -> . LLAMADAF_AUX2 comma nt_paramPP EXPRESION nt_verifyArgType
    (164) empty -> .
    (97) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (99) EXPRESION_NOT -> . not nt_pushPOper
    (100) EXPRESION_NOT -> . empty

    right_par       reduce using rule 164 (empty -> .)
    left_par        reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    true            reduce using rule 164 (empty -> .)
    false           reduce using rule 164 (empty -> .)
    cteString       reduce using rule 164 (empty -> .)
    cteInt          reduce using rule 164 (empty -> .)
    cteFloat        reduce using rule 164 (empty -> .)
    not             shift and go to state 157

    EXPRESION                      shift and go to state 337
    EXPRESION_NOT                  shift and go to state 156
    LLAMADAF_AUX                   shift and go to state 338
    LLAMADAF_AUX2                  shift and go to state 339
    empty                          shift and go to state 340

state 313

    (116) EXP_AUX -> minus nt_pushPOper EXP .

    right_sb        reduce using rule 116 (EXP_AUX -> minus nt_pushPOper EXP .)
    lt              reduce using rule 116 (EXP_AUX -> minus nt_pushPOper EXP .)
    gt              reduce using rule 116 (EXP_AUX -> minus nt_pushPOper EXP .)
    ne              reduce using rule 116 (EXP_AUX -> minus nt_pushPOper EXP .)
    ge              reduce using rule 116 (EXP_AUX -> minus nt_pushPOper EXP .)
    le              reduce using rule 116 (EXP_AUX -> minus nt_pushPOper EXP .)
    et              reduce using rule 116 (EXP_AUX -> minus nt_pushPOper EXP .)
    and             reduce using rule 116 (EXP_AUX -> minus nt_pushPOper EXP .)
    or              reduce using rule 116 (EXP_AUX -> minus nt_pushPOper EXP .)
    right_par       reduce using rule 116 (EXP_AUX -> minus nt_pushPOper EXP .)
    semicolon       reduce using rule 116 (EXP_AUX -> minus nt_pushPOper EXP .)
    comma           reduce using rule 116 (EXP_AUX -> minus nt_pushPOper EXP .)


state 314

    (115) EXP_AUX -> plus nt_pushPOper EXP .

    right_sb        reduce using rule 115 (EXP_AUX -> plus nt_pushPOper EXP .)
    lt              reduce using rule 115 (EXP_AUX -> plus nt_pushPOper EXP .)
    gt              reduce using rule 115 (EXP_AUX -> plus nt_pushPOper EXP .)
    ne              reduce using rule 115 (EXP_AUX -> plus nt_pushPOper EXP .)
    ge              reduce using rule 115 (EXP_AUX -> plus nt_pushPOper EXP .)
    le              reduce using rule 115 (EXP_AUX -> plus nt_pushPOper EXP .)
    et              reduce using rule 115 (EXP_AUX -> plus nt_pushPOper EXP .)
    and             reduce using rule 115 (EXP_AUX -> plus nt_pushPOper EXP .)
    or              reduce using rule 115 (EXP_AUX -> plus nt_pushPOper EXP .)
    right_par       reduce using rule 115 (EXP_AUX -> plus nt_pushPOper EXP .)
    semicolon       reduce using rule 115 (EXP_AUX -> plus nt_pushPOper EXP .)
    comma           reduce using rule 115 (EXP_AUX -> plus nt_pushPOper EXP .)


state 315

    (123) FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .

    multiply        reduce using rule 123 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    divide          reduce using rule 123 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    plus            reduce using rule 123 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    minus           reduce using rule 123 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    right_sb        reduce using rule 123 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    lt              reduce using rule 123 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    gt              reduce using rule 123 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    ne              reduce using rule 123 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    ge              reduce using rule 123 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    le              reduce using rule 123 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    et              reduce using rule 123 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    and             reduce using rule 123 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    or              reduce using rule 123 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    right_par       reduce using rule 123 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    semicolon       reduce using rule 123 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)
    comma           reduce using rule 123 (FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper .)


state 316

    (163) nt_popPOper -> empty .

    semicolon       reduce using rule 163 (nt_popPOper -> empty .)
    multiply        reduce using rule 163 (nt_popPOper -> empty .)
    divide          reduce using rule 163 (nt_popPOper -> empty .)
    plus            reduce using rule 163 (nt_popPOper -> empty .)
    minus           reduce using rule 163 (nt_popPOper -> empty .)
    right_sb        reduce using rule 163 (nt_popPOper -> empty .)
    lt              reduce using rule 163 (nt_popPOper -> empty .)
    gt              reduce using rule 163 (nt_popPOper -> empty .)
    ne              reduce using rule 163 (nt_popPOper -> empty .)
    ge              reduce using rule 163 (nt_popPOper -> empty .)
    le              reduce using rule 163 (nt_popPOper -> empty .)
    et              reduce using rule 163 (nt_popPOper -> empty .)
    and             reduce using rule 163 (nt_popPOper -> empty .)
    or              reduce using rule 163 (nt_popPOper -> empty .)
    right_par       reduce using rule 163 (nt_popPOper -> empty .)
    comma           reduce using rule 163 (nt_popPOper -> empty .)


state 317

    (121) TERMINO_AUX -> divide nt_pushPOper TERMINO .

    plus            reduce using rule 121 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    minus           reduce using rule 121 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    right_sb        reduce using rule 121 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    lt              reduce using rule 121 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    gt              reduce using rule 121 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    ne              reduce using rule 121 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    ge              reduce using rule 121 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    le              reduce using rule 121 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    et              reduce using rule 121 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    and             reduce using rule 121 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    or              reduce using rule 121 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    right_par       reduce using rule 121 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    semicolon       reduce using rule 121 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)
    comma           reduce using rule 121 (TERMINO_AUX -> divide nt_pushPOper TERMINO .)


state 318

    (120) TERMINO_AUX -> multiply nt_pushPOper TERMINO .

    plus            reduce using rule 120 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    minus           reduce using rule 120 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    right_sb        reduce using rule 120 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    lt              reduce using rule 120 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    gt              reduce using rule 120 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    ne              reduce using rule 120 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    ge              reduce using rule 120 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    le              reduce using rule 120 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    et              reduce using rule 120 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    and             reduce using rule 120 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    or              reduce using rule 120 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    right_par       reduce using rule 120 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    semicolon       reduce using rule 120 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)
    comma           reduce using rule 120 (TERMINO_AUX -> multiply nt_pushPOper TERMINO .)


state 319

    (85) CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO . nt_pushLoop
    (87) nt_pushLoop -> . empty
    (164) empty -> .

    right_cb        reduce using rule 164 (empty -> .)
    list            reduce using rule 164 (empty -> .)
    var             reduce using rule 164 (empty -> .)
    if              reduce using rule 164 (empty -> .)
    while           reduce using rule 164 (empty -> .)
    cread           reduce using rule 164 (empty -> .)
    cwrite          reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    return          reduce using rule 164 (empty -> .)

    nt_pushLoop                    shift and go to state 341
    empty                          shift and go to state 342

state 320

    (76) CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .

    right_cb        reduce using rule 76 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    list            reduce using rule 76 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    var             reduce using rule 76 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    if              reduce using rule 76 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    while           reduce using rule 76 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    cread           reduce using rule 76 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    cwrite          reduce using rule 76 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    id              reduce using rule 76 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)
    return          reduce using rule 76 (CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto .)


state 321

    (83) nt_pushSalto -> empty .

    right_cb        reduce using rule 83 (nt_pushSalto -> empty .)
    list            reduce using rule 83 (nt_pushSalto -> empty .)
    var             reduce using rule 83 (nt_pushSalto -> empty .)
    if              reduce using rule 83 (nt_pushSalto -> empty .)
    while           reduce using rule 83 (nt_pushSalto -> empty .)
    cread           reduce using rule 83 (nt_pushSalto -> empty .)
    cwrite          reduce using rule 83 (nt_pushSalto -> empty .)
    id              reduce using rule 83 (nt_pushSalto -> empty .)
    return          reduce using rule 83 (nt_pushSalto -> empty .)


state 322

    (81) ELIF -> elseif nt_pushElse . CONDICION_AUX
    (76) CONDICION_AUX -> . left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto

    left_par        shift and go to state 129

    CONDICION_AUX                  shift and go to state 343

state 323

    (84) nt_pushElse -> empty .

    left_cb         reduce using rule 84 (nt_pushElse -> empty .)
    left_par        reduce using rule 84 (nt_pushElse -> empty .)


state 324

    (80) ELSE -> else nt_pushElse . CUERPO
    (33) CUERPO -> . left_cb CUERPO_AUX right_cb

    left_cb         shift and go to state 76

    CUERPO                         shift and go to state 344

state 325

    (101) EXPRESION_B -> and nt_pushPOper EXPRESION .

    right_par       reduce using rule 101 (EXPRESION_B -> and nt_pushPOper EXPRESION .)
    semicolon       reduce using rule 101 (EXPRESION_B -> and nt_pushPOper EXPRESION .)
    comma           reduce using rule 101 (EXPRESION_B -> and nt_pushPOper EXPRESION .)


state 326

    (102) EXPRESION_B -> or nt_pushPOper EXPRESION .

    right_par       reduce using rule 102 (EXPRESION_B -> or nt_pushPOper EXPRESION .)
    semicolon       reduce using rule 102 (EXPRESION_B -> or nt_pushPOper EXPRESION .)
    comma           reduce using rule 102 (EXPRESION_B -> or nt_pushPOper EXPRESION .)


state 327

    (108) EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop .

    and             reduce using rule 108 (EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop .)
    or              reduce using rule 108 (EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop .)
    right_par       reduce using rule 108 (EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop .)
    semicolon       reduce using rule 108 (EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop .)
    comma           reduce using rule 108 (EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop .)


state 328

    (112) nt_checarRelop -> empty .

    and             reduce using rule 112 (nt_checarRelop -> empty .)
    or              reduce using rule 112 (nt_checarRelop -> empty .)
    right_par       reduce using rule 112 (nt_checarRelop -> empty .)
    semicolon       reduce using rule 112 (nt_checarRelop -> empty .)
    comma           reduce using rule 112 (nt_checarRelop -> empty .)


state 329

    (106) EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop .

    and             reduce using rule 106 (EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop .)
    or              reduce using rule 106 (EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop .)
    right_par       reduce using rule 106 (EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop .)
    semicolon       reduce using rule 106 (EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop .)
    comma           reduce using rule 106 (EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop .)


state 330

    (107) EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop .

    and             reduce using rule 107 (EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop .)
    or              reduce using rule 107 (EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop .)
    right_par       reduce using rule 107 (EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop .)
    semicolon       reduce using rule 107 (EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop .)
    comma           reduce using rule 107 (EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop .)


state 331

    (105) EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop .

    and             reduce using rule 105 (EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop .)
    or              reduce using rule 105 (EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop .)
    right_par       reduce using rule 105 (EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop .)
    semicolon       reduce using rule 105 (EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop .)
    comma           reduce using rule 105 (EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop .)


state 332

    (109) EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop .

    and             reduce using rule 109 (EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop .)
    or              reduce using rule 109 (EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop .)
    right_par       reduce using rule 109 (EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop .)
    semicolon       reduce using rule 109 (EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop .)
    comma           reduce using rule 109 (EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop .)


state 333

    (110) EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop .

    and             reduce using rule 110 (EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop .)
    or              reduce using rule 110 (EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop .)
    right_par       reduce using rule 110 (EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop .)
    semicolon       reduce using rule 110 (EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop .)
    comma           reduce using rule 110 (EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop .)


state 334

    (92) LLAMADA -> id nt_verificaFuncId left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par . nt_popPOper semicolon nt_pushGoSub
    (163) nt_popPOper -> . empty
    (164) empty -> .

    semicolon       reduce using rule 164 (empty -> .)

    nt_popPOper                    shift and go to state 345
    empty                          shift and go to state 316

state 335

    (96) LLAMADA_EXPRESION_AUX -> LLAMADA_EXPRESION_AUX comma nt_paramPP . EXPRESION nt_verifyArgType
    (97) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (99) EXPRESION_NOT -> . not nt_pushPOper
    (100) EXPRESION_NOT -> . empty
    (164) empty -> .

    not             shift and go to state 157
    left_par        reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    true            reduce using rule 164 (empty -> .)
    false           reduce using rule 164 (empty -> .)
    cteString       reduce using rule 164 (empty -> .)
    cteInt          reduce using rule 164 (empty -> .)
    cteFloat        reduce using rule 164 (empty -> .)

    EXPRESION                      shift and go to state 346
    EXPRESION_NOT                  shift and go to state 156
    empty                          shift and go to state 158

state 336

    (135) nt_paramPP -> empty .

    not             reduce using rule 135 (nt_paramPP -> empty .)
    left_par        reduce using rule 135 (nt_paramPP -> empty .)
    id              reduce using rule 135 (nt_paramPP -> empty .)
    plus            reduce using rule 135 (nt_paramPP -> empty .)
    minus           reduce using rule 135 (nt_paramPP -> empty .)
    true            reduce using rule 135 (nt_paramPP -> empty .)
    false           reduce using rule 135 (nt_paramPP -> empty .)
    cteString       reduce using rule 135 (nt_paramPP -> empty .)
    cteInt          reduce using rule 135 (nt_paramPP -> empty .)
    cteFloat        reduce using rule 135 (nt_paramPP -> empty .)


state 337

    (133) LLAMADAF_AUX2 -> EXPRESION . nt_verifyArgType
    (137) nt_verifyArgType -> . empty
    (164) empty -> .

    comma           reduce using rule 164 (empty -> .)
    right_par       reduce using rule 164 (empty -> .)

    empty                          shift and go to state 307
    nt_verifyArgType               shift and go to state 347

state 338

    (130) LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX . nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet
    (138) nt_verificaUltimo -> . empty
    (164) empty -> .

    right_par       reduce using rule 164 (empty -> .)

    nt_verificaUltimo              shift and go to state 348
    empty                          shift and go to state 310

state 339

    (131) LLAMADAF_AUX -> LLAMADAF_AUX2 .
    (134) LLAMADAF_AUX2 -> LLAMADAF_AUX2 . comma nt_paramPP EXPRESION nt_verifyArgType

    right_par       reduce using rule 131 (LLAMADAF_AUX -> LLAMADAF_AUX2 .)
    comma           shift and go to state 349


state 340

    (132) LLAMADAF_AUX -> empty .
    (100) EXPRESION_NOT -> empty .

    right_par       reduce using rule 132 (LLAMADAF_AUX -> empty .)
    left_par        reduce using rule 100 (EXPRESION_NOT -> empty .)
    id              reduce using rule 100 (EXPRESION_NOT -> empty .)
    plus            reduce using rule 100 (EXPRESION_NOT -> empty .)
    minus           reduce using rule 100 (EXPRESION_NOT -> empty .)
    true            reduce using rule 100 (EXPRESION_NOT -> empty .)
    false           reduce using rule 100 (EXPRESION_NOT -> empty .)
    cteString       reduce using rule 100 (EXPRESION_NOT -> empty .)
    cteInt          reduce using rule 100 (EXPRESION_NOT -> empty .)
    cteFloat        reduce using rule 100 (EXPRESION_NOT -> empty .)


state 341

    (85) CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .

    right_cb        reduce using rule 85 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    list            reduce using rule 85 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    var             reduce using rule 85 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    if              reduce using rule 85 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    while           reduce using rule 85 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    cread           reduce using rule 85 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    cwrite          reduce using rule 85 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    id              reduce using rule 85 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)
    return          reduce using rule 85 (CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop .)


state 342

    (87) nt_pushLoop -> empty .

    right_cb        reduce using rule 87 (nt_pushLoop -> empty .)
    list            reduce using rule 87 (nt_pushLoop -> empty .)
    var             reduce using rule 87 (nt_pushLoop -> empty .)
    if              reduce using rule 87 (nt_pushLoop -> empty .)
    while           reduce using rule 87 (nt_pushLoop -> empty .)
    cread           reduce using rule 87 (nt_pushLoop -> empty .)
    cwrite          reduce using rule 87 (nt_pushLoop -> empty .)
    id              reduce using rule 87 (nt_pushLoop -> empty .)
    return          reduce using rule 87 (nt_pushLoop -> empty .)


state 343

    (81) ELIF -> elseif nt_pushElse CONDICION_AUX .

    right_cb        reduce using rule 81 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    list            reduce using rule 81 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    var             reduce using rule 81 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    if              reduce using rule 81 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    while           reduce using rule 81 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    cread           reduce using rule 81 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    cwrite          reduce using rule 81 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    id              reduce using rule 81 (ELIF -> elseif nt_pushElse CONDICION_AUX .)
    return          reduce using rule 81 (ELIF -> elseif nt_pushElse CONDICION_AUX .)


state 344

    (80) ELSE -> else nt_pushElse CUERPO .

    right_cb        reduce using rule 80 (ELSE -> else nt_pushElse CUERPO .)
    list            reduce using rule 80 (ELSE -> else nt_pushElse CUERPO .)
    var             reduce using rule 80 (ELSE -> else nt_pushElse CUERPO .)
    if              reduce using rule 80 (ELSE -> else nt_pushElse CUERPO .)
    while           reduce using rule 80 (ELSE -> else nt_pushElse CUERPO .)
    cread           reduce using rule 80 (ELSE -> else nt_pushElse CUERPO .)
    cwrite          reduce using rule 80 (ELSE -> else nt_pushElse CUERPO .)
    id              reduce using rule 80 (ELSE -> else nt_pushElse CUERPO .)
    return          reduce using rule 80 (ELSE -> else nt_pushElse CUERPO .)


state 345

    (92) LLAMADA -> id nt_verificaFuncId left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper . semicolon nt_pushGoSub

    semicolon       shift and go to state 350


state 346

    (96) LLAMADA_EXPRESION_AUX -> LLAMADA_EXPRESION_AUX comma nt_paramPP EXPRESION . nt_verifyArgType
    (137) nt_verifyArgType -> . empty
    (164) empty -> .

    comma           reduce using rule 164 (empty -> .)
    right_par       reduce using rule 164 (empty -> .)

    empty                          shift and go to state 307
    nt_verifyArgType               shift and go to state 351

state 347

    (133) LLAMADAF_AUX2 -> EXPRESION nt_verifyArgType .

    comma           reduce using rule 133 (LLAMADAF_AUX2 -> EXPRESION nt_verifyArgType .)
    right_par       reduce using rule 133 (LLAMADAF_AUX2 -> EXPRESION nt_verifyArgType .)


state 348

    (130) LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo . right_par nt_popPOper nt_pushGoSub nt_asignarRet

    right_par       shift and go to state 352


state 349

    (134) LLAMADAF_AUX2 -> LLAMADAF_AUX2 comma . nt_paramPP EXPRESION nt_verifyArgType
    (135) nt_paramPP -> . empty
    (164) empty -> .

    not             reduce using rule 164 (empty -> .)
    left_par        reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    true            reduce using rule 164 (empty -> .)
    false           reduce using rule 164 (empty -> .)
    cteString       reduce using rule 164 (empty -> .)
    cteInt          reduce using rule 164 (empty -> .)
    cteFloat        reduce using rule 164 (empty -> .)

    empty                          shift and go to state 336
    nt_paramPP                     shift and go to state 353

state 350

    (92) LLAMADA -> id nt_verificaFuncId left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon . nt_pushGoSub
    (139) nt_pushGoSub -> . empty
    (164) empty -> .

    right_cb        reduce using rule 164 (empty -> .)
    list            reduce using rule 164 (empty -> .)
    var             reduce using rule 164 (empty -> .)
    if              reduce using rule 164 (empty -> .)
    while           reduce using rule 164 (empty -> .)
    cread           reduce using rule 164 (empty -> .)
    cwrite          reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    return          reduce using rule 164 (empty -> .)

    nt_pushGoSub                   shift and go to state 354
    empty                          shift and go to state 355

state 351

    (96) LLAMADA_EXPRESION_AUX -> LLAMADA_EXPRESION_AUX comma nt_paramPP EXPRESION nt_verifyArgType .

    comma           reduce using rule 96 (LLAMADA_EXPRESION_AUX -> LLAMADA_EXPRESION_AUX comma nt_paramPP EXPRESION nt_verifyArgType .)
    right_par       reduce using rule 96 (LLAMADA_EXPRESION_AUX -> LLAMADA_EXPRESION_AUX comma nt_paramPP EXPRESION nt_verifyArgType .)


state 352

    (130) LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par . nt_popPOper nt_pushGoSub nt_asignarRet
    (163) nt_popPOper -> . empty
    (164) empty -> .

    multiply        reduce using rule 164 (empty -> .)
    divide          reduce using rule 164 (empty -> .)
    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    right_sb        reduce using rule 164 (empty -> .)
    lt              reduce using rule 164 (empty -> .)
    gt              reduce using rule 164 (empty -> .)
    ne              reduce using rule 164 (empty -> .)
    ge              reduce using rule 164 (empty -> .)
    le              reduce using rule 164 (empty -> .)
    et              reduce using rule 164 (empty -> .)
    and             reduce using rule 164 (empty -> .)
    or              reduce using rule 164 (empty -> .)
    right_par       reduce using rule 164 (empty -> .)
    semicolon       reduce using rule 164 (empty -> .)
    comma           reduce using rule 164 (empty -> .)

    nt_popPOper                    shift and go to state 356
    empty                          shift and go to state 316

state 353

    (134) LLAMADAF_AUX2 -> LLAMADAF_AUX2 comma nt_paramPP . EXPRESION nt_verifyArgType
    (97) EXPRESION -> . EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B
    (99) EXPRESION_NOT -> . not nt_pushPOper
    (100) EXPRESION_NOT -> . empty
    (164) empty -> .

    not             shift and go to state 157
    left_par        reduce using rule 164 (empty -> .)
    id              reduce using rule 164 (empty -> .)
    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    true            reduce using rule 164 (empty -> .)
    false           reduce using rule 164 (empty -> .)
    cteString       reduce using rule 164 (empty -> .)
    cteInt          reduce using rule 164 (empty -> .)
    cteFloat        reduce using rule 164 (empty -> .)

    EXPRESION                      shift and go to state 357
    EXPRESION_NOT                  shift and go to state 156
    empty                          shift and go to state 158

state 354

    (92) LLAMADA -> id nt_verificaFuncId left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub .

    right_cb        reduce using rule 92 (LLAMADA -> id nt_verificaFuncId left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub .)
    list            reduce using rule 92 (LLAMADA -> id nt_verificaFuncId left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub .)
    var             reduce using rule 92 (LLAMADA -> id nt_verificaFuncId left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub .)
    if              reduce using rule 92 (LLAMADA -> id nt_verificaFuncId left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub .)
    while           reduce using rule 92 (LLAMADA -> id nt_verificaFuncId left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub .)
    cread           reduce using rule 92 (LLAMADA -> id nt_verificaFuncId left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub .)
    cwrite          reduce using rule 92 (LLAMADA -> id nt_verificaFuncId left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub .)
    id              reduce using rule 92 (LLAMADA -> id nt_verificaFuncId left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub .)
    return          reduce using rule 92 (LLAMADA -> id nt_verificaFuncId left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub .)


state 355

    (139) nt_pushGoSub -> empty .

    multiply        reduce using rule 139 (nt_pushGoSub -> empty .)
    divide          reduce using rule 139 (nt_pushGoSub -> empty .)
    plus            reduce using rule 139 (nt_pushGoSub -> empty .)
    minus           reduce using rule 139 (nt_pushGoSub -> empty .)
    right_sb        reduce using rule 139 (nt_pushGoSub -> empty .)
    lt              reduce using rule 139 (nt_pushGoSub -> empty .)
    gt              reduce using rule 139 (nt_pushGoSub -> empty .)
    ne              reduce using rule 139 (nt_pushGoSub -> empty .)
    ge              reduce using rule 139 (nt_pushGoSub -> empty .)
    le              reduce using rule 139 (nt_pushGoSub -> empty .)
    et              reduce using rule 139 (nt_pushGoSub -> empty .)
    and             reduce using rule 139 (nt_pushGoSub -> empty .)
    or              reduce using rule 139 (nt_pushGoSub -> empty .)
    right_par       reduce using rule 139 (nt_pushGoSub -> empty .)
    semicolon       reduce using rule 139 (nt_pushGoSub -> empty .)
    comma           reduce using rule 139 (nt_pushGoSub -> empty .)
    right_cb        reduce using rule 139 (nt_pushGoSub -> empty .)
    list            reduce using rule 139 (nt_pushGoSub -> empty .)
    var             reduce using rule 139 (nt_pushGoSub -> empty .)
    if              reduce using rule 139 (nt_pushGoSub -> empty .)
    while           reduce using rule 139 (nt_pushGoSub -> empty .)
    cread           reduce using rule 139 (nt_pushGoSub -> empty .)
    cwrite          reduce using rule 139 (nt_pushGoSub -> empty .)
    id              reduce using rule 139 (nt_pushGoSub -> empty .)
    return          reduce using rule 139 (nt_pushGoSub -> empty .)


state 356

    (130) LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper . nt_pushGoSub nt_asignarRet
    (139) nt_pushGoSub -> . empty
    (164) empty -> .

    multiply        reduce using rule 164 (empty -> .)
    divide          reduce using rule 164 (empty -> .)
    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    right_sb        reduce using rule 164 (empty -> .)
    lt              reduce using rule 164 (empty -> .)
    gt              reduce using rule 164 (empty -> .)
    ne              reduce using rule 164 (empty -> .)
    ge              reduce using rule 164 (empty -> .)
    le              reduce using rule 164 (empty -> .)
    et              reduce using rule 164 (empty -> .)
    and             reduce using rule 164 (empty -> .)
    or              reduce using rule 164 (empty -> .)
    right_par       reduce using rule 164 (empty -> .)
    semicolon       reduce using rule 164 (empty -> .)
    comma           reduce using rule 164 (empty -> .)

    nt_pushGoSub                   shift and go to state 358
    empty                          shift and go to state 355

state 357

    (134) LLAMADAF_AUX2 -> LLAMADAF_AUX2 comma nt_paramPP EXPRESION . nt_verifyArgType
    (137) nt_verifyArgType -> . empty
    (164) empty -> .

    comma           reduce using rule 164 (empty -> .)
    right_par       reduce using rule 164 (empty -> .)

    empty                          shift and go to state 307
    nt_verifyArgType               shift and go to state 359

state 358

    (130) LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub . nt_asignarRet
    (140) nt_asignarRet -> . empty
    (164) empty -> .

    multiply        reduce using rule 164 (empty -> .)
    divide          reduce using rule 164 (empty -> .)
    plus            reduce using rule 164 (empty -> .)
    minus           reduce using rule 164 (empty -> .)
    right_sb        reduce using rule 164 (empty -> .)
    lt              reduce using rule 164 (empty -> .)
    gt              reduce using rule 164 (empty -> .)
    ne              reduce using rule 164 (empty -> .)
    ge              reduce using rule 164 (empty -> .)
    le              reduce using rule 164 (empty -> .)
    et              reduce using rule 164 (empty -> .)
    and             reduce using rule 164 (empty -> .)
    or              reduce using rule 164 (empty -> .)
    right_par       reduce using rule 164 (empty -> .)
    semicolon       reduce using rule 164 (empty -> .)
    comma           reduce using rule 164 (empty -> .)

    nt_asignarRet                  shift and go to state 360
    empty                          shift and go to state 361

state 359

    (134) LLAMADAF_AUX2 -> LLAMADAF_AUX2 comma nt_paramPP EXPRESION nt_verifyArgType .

    comma           reduce using rule 134 (LLAMADAF_AUX2 -> LLAMADAF_AUX2 comma nt_paramPP EXPRESION nt_verifyArgType .)
    right_par       reduce using rule 134 (LLAMADAF_AUX2 -> LLAMADAF_AUX2 comma nt_paramPP EXPRESION nt_verifyArgType .)


state 360

    (130) LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet .

    multiply        reduce using rule 130 (LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet .)
    divide          reduce using rule 130 (LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet .)
    plus            reduce using rule 130 (LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet .)
    minus           reduce using rule 130 (LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet .)
    right_sb        reduce using rule 130 (LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet .)
    lt              reduce using rule 130 (LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet .)
    gt              reduce using rule 130 (LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet .)
    ne              reduce using rule 130 (LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet .)
    ge              reduce using rule 130 (LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet .)
    le              reduce using rule 130 (LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet .)
    et              reduce using rule 130 (LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet .)
    and             reduce using rule 130 (LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet .)
    or              reduce using rule 130 (LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet .)
    right_par       reduce using rule 130 (LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet .)
    semicolon       reduce using rule 130 (LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet .)
    comma           reduce using rule 130 (LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet .)


state 361

    (140) nt_asignarRet -> empty .

    multiply        reduce using rule 140 (nt_asignarRet -> empty .)
    divide          reduce using rule 140 (nt_asignarRet -> empty .)
    plus            reduce using rule 140 (nt_asignarRet -> empty .)
    minus           reduce using rule 140 (nt_asignarRet -> empty .)
    right_sb        reduce using rule 140 (nt_asignarRet -> empty .)
    lt              reduce using rule 140 (nt_asignarRet -> empty .)
    gt              reduce using rule 140 (nt_asignarRet -> empty .)
    ne              reduce using rule 140 (nt_asignarRet -> empty .)
    ge              reduce using rule 140 (nt_asignarRet -> empty .)
    le              reduce using rule 140 (nt_asignarRet -> empty .)
    et              reduce using rule 140 (nt_asignarRet -> empty .)
    and             reduce using rule 140 (nt_asignarRet -> empty .)
    or              reduce using rule 140 (nt_asignarRet -> empty .)
    right_par       reduce using rule 140 (nt_asignarRet -> empty .)
    semicolon       reduce using rule 140 (nt_asignarRet -> empty .)
    comma           reduce using rule 140 (nt_asignarRet -> empty .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for list in state 15 resolved as shift
WARNING: shift/reduce conflict for var in state 15 resolved as shift
WARNING: shift/reduce conflict for int in state 16 resolved as shift
WARNING: shift/reduce conflict for float in state 16 resolved as shift
WARNING: shift/reduce conflict for bool in state 16 resolved as shift
WARNING: shift/reduce conflict for string in state 16 resolved as shift
WARNING: shift/reduce conflict for void in state 16 resolved as shift
WARNING: shift/reduce conflict for int in state 26 resolved as shift
WARNING: shift/reduce conflict for float in state 26 resolved as shift
WARNING: shift/reduce conflict for bool in state 26 resolved as shift
WARNING: shift/reduce conflict for string in state 26 resolved as shift
WARNING: shift/reduce conflict for void in state 26 resolved as shift
WARNING: shift/reduce conflict for list in state 76 resolved as shift
WARNING: shift/reduce conflict for var in state 76 resolved as shift
WARNING: shift/reduce conflict for if in state 86 resolved as shift
WARNING: shift/reduce conflict for while in state 86 resolved as shift
WARNING: shift/reduce conflict for cread in state 86 resolved as shift
WARNING: shift/reduce conflict for cwrite in state 86 resolved as shift
WARNING: shift/reduce conflict for id in state 86 resolved as shift
WARNING: shift/reduce conflict for right_cb in state 89 resolved as shift
WARNING: shift/reduce conflict for list in state 89 resolved as shift
WARNING: shift/reduce conflict for var in state 89 resolved as shift
WARNING: shift/reduce conflict for if in state 116 resolved as shift
WARNING: shift/reduce conflict for while in state 116 resolved as shift
WARNING: shift/reduce conflict for cread in state 116 resolved as shift
WARNING: shift/reduce conflict for cwrite in state 116 resolved as shift
WARNING: shift/reduce conflict for id in state 116 resolved as shift
WARNING: shift/reduce conflict for list in state 126 resolved as shift
WARNING: shift/reduce conflict for var in state 126 resolved as shift
WARNING: shift/reduce conflict for list in state 140 resolved as shift
WARNING: shift/reduce conflict for var in state 140 resolved as shift
WARNING: shift/reduce conflict for list in state 147 resolved as shift
WARNING: shift/reduce conflict for var in state 147 resolved as shift
WARNING: shift/reduce conflict for list in state 148 resolved as shift
WARNING: shift/reduce conflict for var in state 148 resolved as shift
WARNING: shift/reduce conflict for if in state 193 resolved as shift
WARNING: shift/reduce conflict for while in state 193 resolved as shift
WARNING: shift/reduce conflict for cread in state 193 resolved as shift
WARNING: shift/reduce conflict for cwrite in state 193 resolved as shift
WARNING: shift/reduce conflict for id in state 193 resolved as shift
WARNING: shift/reduce conflict for if in state 228 resolved as shift
WARNING: shift/reduce conflict for while in state 228 resolved as shift
WARNING: shift/reduce conflict for cread in state 228 resolved as shift
WARNING: shift/reduce conflict for cwrite in state 228 resolved as shift
WARNING: shift/reduce conflict for id in state 228 resolved as shift
WARNING: reduce/reduce conflict in state 42 resolved using rule (nt_cambiarScope -> empty)
WARNING: rejected rule (PROGRAMA_FUNC_AUX -> empty) in state 42
WARNING: reduce/reduce conflict in state 148 resolved using rule (CUERPOFUNC -> CUERPOFUNC_AUX)
WARNING: rejected rule (empty -> <empty>) in state 148
WARNING: reduce/reduce conflict in state 152 resolved using rule (CUERPOFUNC_VARS -> empty)
WARNING: rejected rule (CUERPORETORNO_CF_AUX -> empty) in state 152
WARNING: Rule (CUERPORETORNO_CF_AUX -> empty) is never reduced
