
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'and bool comma cread cteFloat cteInt cteString cwrite divide else elseif equals et false float ge gt id if int le left_cb left_dblquotes left_par left_sb list lt main minus multiply ne not or plus program return right_cb right_dblquotes right_par right_sb semicolon string true var void while\n    PROGRAMA : program id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO nt_endQuad\n    \n    nt_cambiarScope : empty\n    \n    nt_ambienteMain : nt_cambiarScope\n    \n    nt_endQuad : empty\n    \n    nt_pushJmpMain : empty\n    \n    PROGRAMA_VARS : VARS\n                  | empty\n    \n    PROGRAMA_FUNC : PROGRAMA_FUNC_AUX\n                  | PROGRAMA_FUNC PROGRAMA_FUNC_AUX\n    \n    PROGRAMA_FUNC_AUX : FUNC\n                      | empty\n    \n    VARS : VARS_AUX\n    \n    VARS_AUX : VARS_LIST_VAR\n             | VARS_AUX VARS_LIST_VAR\n    \n    VARS_LIST_VAR : VARS_LIST\n                  | VARS_VAR\n    \n    VARS_LIST : list nt_hacerLista TIPO VARS_LIST_AUX semicolon\n    \n    nt_hacerLista : empty\n    \n    VARS_LIST_AUX : id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar\n                  | VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar\n    \n    nt_agregarId : empty\n    \n    nt_agregarCteLista : empty\n    \n    nt_agregarDicVar : empty\n    \n    VARS_VAR : var nt_hacerVar TIPO VARS_VAR_AUX semicolon\n    \n    nt_hacerVar : empty\n    \n    VARS_VAR_AUX : id nt_agregarId nt_agregarDicVar\n                 | VARS_VAR_AUX comma id nt_agregarId nt_agregarDicVar\n    \n    TIPO : int nt_cambioTipoActual\n         | float nt_cambioTipoActual\n         | bool nt_cambioTipoActual\n         | string nt_cambioTipoActual\n    \n    nt_cambioTipoActual : empty\n    \n    CUERPO : left_cb CUERPO_AUX right_cb\n    \n    CUERPO_AUX : CUERPO_VARS CUERPO_ESTATUTO\n               | CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO\n    \n    CUERPO_VARS : VARS\n                | empty\n    \n    CUERPO_ESTATUTO : ESTATUTO\n                    | empty\n    \n    CUERPOFUNC : CUERPOFUNC_AUX\n    \n    CUERPOFUNC_AUX : CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO\n                   | CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO\n    \n    nt_funcInicio : empty\n    \n    CUERPOFUNC_VARS : VARS \n                    | empty\n    \n    CUERPOFUNC_ESTATUTO : ESTATUTO\n                        | empty\n    \n    CUERPORETORNO : left_cb CUERPORETORNO_AUX right_cb\n    \n    CUERPORETORNO_AUX : CUERPORETORNO_CF_AUX RETORNO\n                      | CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO\n    \n    CUERPORETORNO_CF_AUX : CUERPOFUNC\n                         | empty\n    \n    RETORNO : return EXP nt_checaRet semicolon\n    \n    nt_checaRet : empty\n    \n    FUNC : TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub\n         | VOIDFUNC nt_pushEndsub\n    \n    nt_pushEndsub : empty\n    \n    nt_cambioFuncActual : empty\n    \n    nt_agregarIdFunc : empty\n    \n    FUNC_PARA : TIPO id nt_agregarParametro\n              | FUNC_PARA comma TIPO id nt_agregarParametro\n              | empty\n    \n    nt_agregarParametro : empty\n    \n    VOIDFUNC : void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb\n    \n    nt_hacerVoid : empty\n    \n    VOIDFUNC_PARA : TIPO id nt_agregarParametro\n                  | VOIDFUNC_PARA comma TIPO id nt_agregarParametro\n                  | empty\n    \n    ESTATUTO : ASIGNACION\n             | CONDICION\n             | CICLO\n             | LECTURA\n             | ESCRITURA\n             | LLAMADA\n    \n    CONDICION : if CONDICION_AUX\n    \n    CONDICION_AUX : left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto\n    \n    ELSE_ELIF : ELSE\n              | ELIF\n              | empty\n    \n    ELSE : else nt_pushElse CUERPO\n    \n    ELIF : elseif nt_pushElse CONDICION_AUX\n    \n    nt_checarBool : empty\n    \n    nt_pushSalto : empty\n    \n    nt_pushElse : empty\n    \n    CICLO : while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop\n    \n    nt_saltoLoop : empty\n    \n    nt_pushLoop : empty\n    \n    LECTURA : cread left_par id nt_leer right_par semicolon\n    \n    nt_leer : empty\n    \n    ESCRITURA : cwrite left_par EXPRESION nt_escribir right_par semicolon\n    \n    nt_escribir : empty\n    \n    LLAMADA : id nt_verificaFuncId left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub\n    \n    LLAMADA_EXPRESION : LLAMADA_EXPRESION_AUX\n                      | empty\n    \n    LLAMADA_EXPRESION_AUX : EXPRESION nt_verifyArgType\n                      | LLAMADA_EXPRESION_AUX comma nt_paramPP EXPRESION nt_verifyArgType\n    \n    EXPRESION : EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B\n    \n    nt_checaAndOrNot : empty\n    \n    EXPRESION_NOT : not nt_pushPOper\n                | empty\n    \n\tEXPRESION_B : and nt_pushPOper EXPRESION\n\t           | or nt_pushPOper EXPRESION\n\t\t\t   | empty\n\t\n    EXPRESIONLOGICA :  EXP EXPRESIONLOGICA_AUX\n    \n    EXPRESIONLOGICA_AUX : lt nt_pushPOper EXP nt_checarRelop\n                        | gt nt_pushPOper EXP nt_checarRelop\n                        | ne nt_pushPOper EXP nt_checarRelop\n                        | ge nt_pushPOper EXP nt_checarRelop\n                        | le nt_pushPOper EXP nt_checarRelop\n                        | et nt_pushPOper EXP nt_checarRelop\n                        | empty\n    \n    nt_checarRelop : empty\n    \n    EXP : TERMINO nt_checar_sumas EXP_AUX\n    \n    nt_checar_sumas : empty\n    \n    EXP_AUX : plus nt_pushPOper EXP\n            | minus nt_pushPOper EXP\n            | empty\n    \n    TERMINO : FACTOR nt_checar_multis TERMINO_AUX\n    \n    nt_checar_multis : empty\n    \n    TERMINO_AUX : multiply nt_pushPOper TERMINO\n                | divide nt_pushPOper TERMINO\n                | empty\n    \n    FACTOR : left_par nt_pushPOper EXPRESION right_par nt_popPOper\n            | CONSTANTE\n            | LISTA\n            | FACTOR_AUX\n    \n    FACTOR_AUX : id nt_pushPilaO\n                | id nt_verificaFuncId LLAMADA_F\n    \n    nt_verificaFuncId : empty\n    \n    LLAMADA_F : left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet\n    \n    LLAMADAF_AUX : LLAMADAF_AUX2\n                 | empty\n    \n    LLAMADAF_AUX2 : EXPRESION nt_verifyArgType\n                  | LLAMADAF_AUX2 comma nt_paramPP EXPRESION nt_verifyArgType\n    \n    nt_paramPP : empty\n    \n    nt_startERA : empty\n    \n    nt_verifyArgType : empty\n    \n    nt_verificaUltimo : empty\n    \n    nt_pushGoSub : empty\n    \n    nt_asignarRet : empty\n    \n    LISTA : id nt_verificarVarDim left_sb EXP nt_pushVer right_sb nt_quadsAcceso\n    \n    nt_verificarVarDim : empty\n    \n    nt_pushVer : empty\n    \n    nt_quadsAcceso : empty\n    \n    CONSTANTE : NUMERICA\n              | BOOLEANA\n              | STRINGS\n    \n    NUMERICA : NUMERICA_AUX\n             | plus nt_sigMas NUMERICA_AUX\n             | minus nt_sigMenos NUMERICA_AUX\n    \n    nt_sigMas : empty\n    \n    nt_sigMenos : empty\n    \n    NUMERICA_AUX : cteInt nt_pushInt\n                 | cteFloat nt_pushFloat\n    \n    nt_pushInt : empty\n    \n    nt_pushFloat : empty\n    \n    BOOLEANA : true\n             | false\n    \n    STRINGS : cteString\n    \n    ASIGNACION : ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon\n    \n    nt_checaEquals : empty\n    \n    ASIGNACION_AUX : id nt_pushPilaO\n                   | LISTA\n    \n    nt_pushPilaO : empty\n    \n    nt_pushPOper : empty\n    \n    nt_popPOper : empty\n    \n    empty :\n    '
    
_lr_action_items = {'and':([181,182,183,184,185,186,188,189,190,192,193,194,195,196,197,198,199,219,220,221,222,225,230,231,232,236,237,239,240,241,242,269,270,272,274,276,279,280,285,298,299,300,301,302,303,307,315,316,325,326,327,328,329,330,331,333,334,335,336,337,338,357,360,361,363,365,366,],[-167,-158,-167,-146,-167,-167,-126,-167,-159,-157,-147,-124,-167,-148,-145,-167,-125,258,-98,-154,-156,-104,-111,-164,-127,-114,-167,-155,-153,-167,-119,-128,-149,-117,-113,-118,-122,-150,-167,-167,-167,-167,-167,-167,-167,-167,-141,-144,-108,-112,-106,-107,-105,-109,-110,-116,-115,-123,-166,-121,-120,-167,-139,-167,-167,-130,-140,]),'gt':([182,183,184,185,186,188,189,190,192,193,194,195,196,197,198,199,221,222,231,232,236,237,239,240,241,242,269,270,272,274,276,279,280,285,307,315,316,333,334,335,336,337,338,357,360,361,363,365,366,],[-158,-167,-146,224,-167,-126,-167,-159,-157,-147,-124,-167,-148,-145,-167,-125,-154,-156,-164,-127,-114,-167,-155,-153,-167,-119,-128,-149,-117,-113,-118,-122,-150,-167,-167,-141,-144,-116,-115,-123,-166,-121,-120,-167,-139,-167,-167,-130,-140,]),'false':([129,135,136,156,157,158,159,160,162,163,164,172,191,201,202,223,224,226,227,228,229,238,245,246,258,260,262,263,264,265,266,267,268,271,273,277,278,283,296,297,304,305,306,308,309,314,332,340,341,349,354,358,],[-167,-167,-167,182,-167,-100,-167,182,-165,-167,-167,182,-167,-99,-167,-167,-167,-167,-167,-167,-167,-167,-167,-136,-167,-167,182,182,182,182,182,182,-167,-167,-167,-167,-167,-100,-167,-167,-167,182,182,182,182,-167,-167,-167,-135,-100,-167,-167,]),'right_sb':([80,95,96,121,143,182,183,184,186,188,189,190,192,193,194,195,196,197,198,199,203,221,222,231,232,236,237,239,240,241,242,247,248,269,270,272,274,276,279,280,285,307,315,316,333,334,335,336,337,338,357,360,361,363,365,366,],[-167,122,-22,-167,168,-158,-167,-146,-167,-126,-167,-159,-157,-147,-124,-167,-148,-145,-167,-125,-167,-154,-156,-164,-127,-114,-167,-155,-153,-167,-119,-143,285,-128,-149,-117,-113,-118,-122,-150,-167,-167,-141,-144,-116,-115,-123,-166,-121,-120,-167,-139,-167,-167,-130,-140,]),'semicolon':([3,4,5,50,51,52,59,60,69,70,71,78,93,122,144,168,181,182,183,184,185,186,188,189,190,192,193,194,195,196,197,198,199,206,210,213,217,219,220,221,222,225,230,231,232,236,237,239,240,241,242,249,250,251,254,255,259,261,269,270,272,274,276,279,280,285,298,299,300,301,302,303,307,315,316,323,324,325,326,327,328,329,330,331,333,334,335,336,337,338,339,350,357,360,361,363,365,366,],[-167,6,-5,57,-167,61,-21,-167,-167,-26,-23,-167,-27,-167,-19,-167,-167,-158,-167,-146,-167,-167,-126,-167,-159,-157,-147,-124,-167,-148,-145,-167,-125,-167,-20,-167,256,-167,-98,-154,-156,-104,-111,-164,-127,-114,-167,-155,-153,-167,-119,286,287,-161,-54,289,-97,-103,-128,-149,-117,-113,-118,-122,-150,-167,-167,-167,-167,-167,-167,-167,-167,-141,-144,-101,-102,-108,-112,-106,-107,-105,-109,-110,-116,-115,-123,-166,-121,-120,-167,355,-167,-139,-167,-167,-130,-140,]),'int':([6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,26,27,29,30,33,41,42,45,46,57,61,74,77,99,119,125,145,170,208,],[-167,-6,-167,-15,-167,-7,-13,-16,-167,-12,23,-2,23,-25,23,-18,-14,23,-8,-167,-11,-10,-9,-11,-56,-57,-24,-17,23,23,23,23,-167,-55,-48,-64,]),'float':([6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,26,27,29,30,33,41,42,45,46,57,61,74,77,99,119,125,145,170,208,],[-167,-6,-167,-15,-167,-7,-13,-16,-167,-12,24,-2,24,-25,24,-18,-14,24,-8,-167,-11,-10,-9,-11,-56,-57,-24,-17,24,24,24,24,-167,-55,-48,-64,]),'cteFloat':([129,135,136,156,157,158,159,160,162,163,164,172,187,191,200,201,202,223,224,226,227,228,229,234,235,238,243,244,245,246,258,260,262,263,264,265,266,267,268,271,273,277,278,283,296,297,304,305,306,308,309,314,332,340,341,349,354,358,],[-167,-167,-167,183,-167,-100,-167,183,-165,-167,-167,183,-167,-167,-167,-99,-167,-167,-167,-167,-167,-167,-167,183,-151,-167,-152,183,-167,-136,-167,-167,183,183,183,183,183,183,-167,-167,-167,-167,-167,-100,-167,-167,-167,183,183,183,183,-167,-167,-167,-135,-100,-167,-167,]),'left_sb':([53,59,63,72,79,106,132,134,186,231,],[-167,-21,73,-167,94,-167,-142,160,-167,-142,]),'multiply':([182,183,184,186,188,190,192,193,194,195,196,197,198,199,221,222,231,232,239,240,241,242,269,270,280,285,307,315,316,335,336,357,360,361,363,365,366,],[-158,-167,-146,-167,-126,-159,-157,-147,-124,-167,-148,-145,-167,-125,-154,-156,-164,-127,-155,-153,278,-119,-128,-149,-150,-167,-167,-141,-144,-123,-166,-167,-139,-167,-167,-130,-140,]),'ge':([182,183,184,185,186,188,189,190,192,193,194,195,196,197,198,199,221,222,231,232,236,237,239,240,241,242,269,270,272,274,276,279,280,285,307,315,316,333,334,335,336,337,338,357,360,361,363,365,366,],[-158,-167,-146,223,-167,-126,-167,-159,-157,-147,-124,-167,-148,-145,-167,-125,-154,-156,-164,-127,-114,-167,-155,-153,-167,-119,-128,-149,-117,-113,-118,-122,-150,-167,-167,-141,-144,-116,-115,-123,-166,-121,-120,-167,-139,-167,-167,-130,-140,]),'comma':([50,51,52,59,60,69,70,71,74,77,78,82,83,90,91,93,97,120,122,123,124,142,144,153,167,168,176,181,182,183,184,185,186,188,189,190,192,193,194,195,196,197,198,199,209,210,219,220,221,222,225,230,231,232,236,237,239,240,241,242,259,261,269,270,272,274,276,279,280,281,284,285,298,299,300,301,302,303,307,310,311,315,316,323,324,325,326,327,328,329,330,331,333,334,335,336,337,338,346,348,351,352,356,357,360,361,362,363,364,365,366,],[58,-167,62,-21,-167,-167,-26,-23,-167,-167,-167,-62,99,119,-68,-27,-167,-167,-167,-63,-60,-66,-19,-167,-167,-167,-61,-167,-158,-167,-146,-167,-167,-126,-167,-159,-157,-147,-124,-167,-148,-145,-167,-125,-67,-20,-167,-98,-154,-156,-104,-111,-164,-127,-114,-167,-155,-153,-167,-119,-97,-103,-128,-149,-117,-113,-118,-122,-150,-167,314,-167,-167,-167,-167,-167,-167,-167,-167,-137,-95,-141,-144,-101,-102,-108,-112,-106,-107,-105,-109,-110,-116,-115,-123,-166,-121,-120,-167,354,-167,-133,-96,-167,-139,-167,-167,-167,-134,-130,-140,]),'cread':([9,12,13,15,22,57,61,76,86,87,88,89,100,102,104,105,109,110,111,112,113,116,117,126,130,139,140,147,148,150,151,152,166,171,173,174,175,211,212,214,215,216,253,256,257,286,287,289,290,291,292,295,317,318,319,342,343,344,345,355,359,360,],[-15,-13,-16,-12,-14,-24,-17,-167,101,-36,-37,-167,-71,-72,-69,-38,-73,-39,-74,-70,-34,101,-33,-167,-75,-35,-167,-167,-167,-44,-167,-45,-45,-167,-49,-43,101,-50,101,-41,-46,-47,-42,-88,-167,-90,-160,-53,-167,-78,-77,-79,-167,-76,-83,-85,-87,-81,-80,-167,-92,-139,]),'right_par':([74,77,82,83,90,91,97,120,123,124,142,153,154,155,159,161,162,167,176,177,178,179,180,181,182,183,184,185,186,188,189,190,192,193,194,195,196,197,198,199,202,204,205,207,209,219,220,221,222,225,230,231,232,236,237,239,240,241,242,245,246,252,259,261,268,269,270,272,274,275,276,279,280,281,282,283,284,285,298,299,300,301,302,303,304,307,310,311,312,313,315,316,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,346,347,348,349,351,352,353,356,357,360,361,362,363,364,365,366,],[-167,-167,-62,98,118,-68,-167,-167,-63,-60,-66,-167,-167,-167,-167,-167,-165,-167,-61,217,-89,218,-82,-167,-158,-167,-146,-167,-167,-126,-167,-159,-157,-147,-124,-167,-148,-145,-167,-125,-167,249,-91,-167,-67,-167,-98,-154,-156,-104,-111,-164,-127,-114,-167,-155,-153,-167,-119,-167,-136,288,-97,-103,-167,-128,-149,-117,-113,307,-118,-122,-150,-167,-167,-94,-93,-167,-167,-167,-167,-167,-167,-167,-167,-167,-137,-95,339,-138,-141,-144,-101,-102,-108,-112,-106,-107,-105,-109,-110,-167,-116,-115,-123,-166,-121,-120,-167,-167,-131,-132,-167,-133,357,-96,-167,-139,-167,-167,-167,-134,-130,-140,]),'cteString':([129,135,136,156,157,158,159,160,162,163,164,172,191,201,202,223,224,226,227,228,229,238,245,246,258,260,262,263,264,265,266,267,268,271,273,277,278,283,296,297,304,305,306,308,309,314,332,340,341,349,354,358,],[-167,-167,-167,190,-167,-100,-167,190,-165,-167,-167,190,-167,-99,-167,-167,-167,-167,-167,-167,-167,-167,-167,-136,-167,-167,190,190,190,190,190,190,-167,-167,-167,-167,-167,-100,-167,-167,-167,190,190,190,190,-167,-167,-167,-135,-100,-167,-167,]),'id':([1,9,12,13,15,22,23,24,25,28,31,32,34,35,36,37,38,39,40,44,47,48,49,57,58,61,62,76,81,86,87,88,89,92,100,102,104,105,109,110,111,112,113,116,117,126,127,128,129,130,135,136,139,140,141,147,148,150,151,152,156,157,158,159,160,162,163,164,166,171,172,173,174,175,191,201,202,211,212,214,215,216,223,224,226,227,228,229,238,245,246,253,256,257,258,260,262,263,264,265,266,267,268,271,273,277,278,283,286,287,289,290,291,292,295,296,297,304,305,306,308,309,314,317,318,319,332,340,341,342,343,344,345,349,354,355,358,359,360,],[3,-15,-13,-16,-12,-14,-167,-167,-167,-167,-167,-167,51,53,-28,-32,-29,54,-58,-30,-31,-65,56,-24,69,-17,72,-167,97,106,-36,-37,-167,120,-71,-72,-69,-38,-73,-39,-74,-70,-34,106,-33,-167,153,154,-167,-75,-167,-167,-35,-167,167,-167,-167,-44,-167,-45,186,-167,-100,-167,186,-165,-167,-167,-45,-167,186,-49,-43,106,-167,-99,-167,-50,106,-41,-46,-47,-167,-167,-167,-167,-167,-167,-167,-167,-136,-42,-88,-167,-167,-167,186,186,186,186,186,186,-167,-167,-167,-167,-167,-100,-90,-160,-53,-167,-78,-77,-79,-167,-167,-167,186,186,186,186,-167,-167,-76,-83,-167,-167,-135,-85,-87,-81,-80,-100,-167,-167,-167,-92,-139,]),'if':([9,12,13,15,22,57,61,76,86,87,88,89,100,102,104,105,109,110,111,112,113,116,117,126,130,139,140,147,148,150,151,152,166,171,173,174,175,211,212,214,215,216,253,256,257,286,287,289,290,291,292,295,317,318,319,342,343,344,345,355,359,360,],[-15,-13,-16,-12,-14,-24,-17,-167,103,-36,-37,-167,-71,-72,-69,-38,-73,-39,-74,-70,-34,103,-33,-167,-75,-35,-167,-167,-167,-44,-167,-45,-45,-167,-49,-43,103,-50,103,-41,-46,-47,-42,-88,-167,-90,-160,-53,-167,-78,-77,-79,-167,-76,-83,-85,-87,-81,-80,-167,-92,-139,]),'le':([182,183,184,185,186,188,189,190,192,193,194,195,196,197,198,199,221,222,231,232,236,237,239,240,241,242,269,270,272,274,276,279,280,285,307,315,316,333,334,335,336,337,338,357,360,361,363,365,366,],[-158,-167,-146,228,-167,-126,-167,-159,-157,-147,-124,-167,-148,-145,-167,-125,-154,-156,-164,-127,-114,-167,-155,-153,-167,-119,-128,-149,-117,-113,-118,-122,-150,-167,-167,-141,-144,-116,-115,-123,-166,-121,-120,-167,-139,-167,-167,-130,-140,]),'divide':([182,183,184,186,188,190,192,193,194,195,196,197,198,199,221,222,231,232,239,240,241,242,269,270,280,285,307,315,316,335,336,357,360,361,363,365,366,],[-158,-167,-146,-167,-126,-159,-157,-147,-124,-167,-148,-145,-167,-125,-154,-156,-164,-127,-155,-153,277,-119,-128,-149,-150,-167,-167,-141,-144,-123,-166,-167,-139,-167,-167,-130,-140,]),'right_cb':([9,12,13,15,22,57,61,76,86,87,88,89,100,102,104,105,109,110,111,112,113,116,117,130,139,140,147,148,150,151,165,166,171,173,174,175,211,212,214,215,216,253,256,257,286,287,289,290,291,292,295,317,318,319,342,343,344,345,355,359,360,],[-15,-13,-16,-12,-14,-24,-17,-167,-167,-36,-37,117,-71,-72,-69,-38,-73,-39,-74,-70,-34,-167,-33,-75,-35,-167,170,-40,-44,-167,208,-45,-167,-49,-43,-167,-50,-167,-41,-46,-47,-42,-88,-167,-90,-160,-53,-167,-78,-77,-79,-167,-76,-83,-85,-87,-81,-80,-167,-92,-139,]),'ne':([182,183,184,185,186,188,189,190,192,193,194,195,196,197,198,199,221,222,231,232,236,237,239,240,241,242,269,270,272,274,276,279,280,285,307,315,316,333,334,335,336,337,338,357,360,361,363,365,366,],[-158,-167,-146,226,-167,-126,-167,-159,-157,-147,-124,-167,-148,-145,-167,-125,-154,-156,-164,-127,-114,-167,-155,-153,-167,-119,-128,-149,-117,-113,-118,-122,-150,-167,-167,-141,-144,-116,-115,-123,-166,-121,-120,-167,-139,-167,-167,-130,-140,]),'lt':([182,183,184,185,186,188,189,190,192,193,194,195,196,197,198,199,221,222,231,232,236,237,239,240,241,242,269,270,272,274,276,279,280,285,307,315,316,333,334,335,336,337,338,357,360,361,363,365,366,],[-158,-167,-146,227,-167,-126,-167,-159,-157,-147,-124,-167,-148,-145,-167,-125,-154,-156,-164,-127,-114,-167,-155,-153,-167,-119,-128,-149,-117,-113,-118,-122,-150,-167,-167,-141,-144,-116,-115,-123,-166,-121,-120,-167,-139,-167,-167,-130,-140,]),'program':([0,],[1,]),'bool':([6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,26,27,29,30,33,41,42,45,46,57,61,74,77,99,119,125,145,170,208,],[-167,-6,-167,-15,-167,-7,-13,-16,-167,-12,28,-2,28,-25,28,-18,-14,28,-8,-167,-11,-10,-9,-11,-56,-57,-24,-17,28,28,28,28,-167,-55,-48,-64,]),'cwrite':([9,12,13,15,22,57,61,76,86,87,88,89,100,102,104,105,109,110,111,112,113,116,117,126,130,139,140,147,148,150,151,152,166,171,173,174,175,211,212,214,215,216,253,256,257,286,287,289,290,291,292,295,317,318,319,342,343,344,345,355,359,360,],[-15,-13,-16,-12,-14,-24,-17,-167,107,-36,-37,-167,-71,-72,-69,-38,-73,-39,-74,-70,-34,107,-33,-167,-75,-35,-167,-167,-167,-44,-167,-45,-45,-167,-49,-43,107,-50,107,-41,-46,-47,-42,-88,-167,-90,-160,-53,-167,-78,-77,-79,-167,-76,-83,-85,-87,-81,-80,-167,-92,-139,]),'var':([6,9,12,13,15,22,57,61,76,86,87,88,89,100,102,104,105,109,110,111,112,113,116,117,126,130,139,140,147,148,150,151,152,166,171,173,174,175,211,212,214,215,216,253,256,257,286,287,289,290,291,292,295,317,318,319,342,343,344,345,355,359,360,],[10,-15,-13,-16,10,-14,-24,-17,10,-167,-36,-37,10,-71,-72,-69,-38,-73,-39,-74,-70,-34,-167,-33,10,-75,-35,10,10,10,-44,-167,-45,-45,-167,-49,-43,-167,-50,-167,-41,-46,-47,-42,-88,-167,-90,-160,-53,-167,-78,-77,-79,-167,-76,-83,-85,-87,-81,-80,-167,-92,-139,]),'main':([6,7,8,9,11,12,13,15,16,17,22,26,27,29,30,33,41,42,43,45,46,57,61,125,145,170,208,],[-167,-6,-167,-15,-7,-13,-16,-12,-167,-2,-14,-167,-8,-167,-11,-10,-9,-2,55,-56,-57,-24,-17,-167,-55,-48,-64,]),'$end':([2,75,84,85,117,],[0,-167,-4,-1,-33,]),'return':([9,12,13,15,22,57,61,100,102,104,109,111,112,117,126,130,146,147,148,149,150,151,152,166,169,171,173,174,175,211,212,214,215,216,253,256,257,286,287,289,290,291,292,295,317,318,319,342,343,344,345,355,359,360,],[-15,-13,-16,-12,-14,-24,-17,-71,-72,-69,-73,-74,-70,-33,-167,-75,-51,-167,-40,172,-44,-167,-45,-45,172,-167,-49,-43,-167,-50,-167,-41,-46,-47,-42,-88,-167,-90,-160,-53,-167,-78,-77,-79,-167,-76,-83,-85,-87,-81,-80,-167,-92,-139,]),'string':([6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,26,27,29,30,33,41,42,45,46,57,61,74,77,99,119,125,145,170,208,],[-167,-6,-167,-15,-167,-7,-13,-16,-167,-12,31,-2,31,-25,31,-18,-14,31,-8,-167,-11,-10,-9,-11,-56,-57,-24,-17,31,31,31,31,-167,-55,-48,-64,]),'et':([182,183,184,185,186,188,189,190,192,193,194,195,196,197,198,199,221,222,231,232,236,237,239,240,241,242,269,270,272,274,276,279,280,285,307,315,316,333,334,335,336,337,338,357,360,361,363,365,366,],[-158,-167,-146,229,-167,-126,-167,-159,-157,-147,-124,-167,-148,-145,-167,-125,-154,-156,-164,-127,-114,-167,-155,-153,-167,-119,-128,-149,-117,-113,-118,-122,-150,-167,-167,-141,-144,-116,-115,-123,-166,-121,-120,-167,-139,-167,-167,-130,-140,]),'void':([6,7,8,9,11,12,13,15,16,17,22,26,27,29,30,33,41,42,45,46,57,61,125,145,170,208,],[-167,-6,-167,-15,-7,-13,-16,-12,32,-2,-14,32,-8,-167,-11,-10,-9,-11,-56,-57,-24,-17,-167,-55,-48,-64,]),'equals':([106,108,115,132,133,285,315,316,],[-167,136,-163,-164,-162,-167,-141,-144,]),'else':([117,257,],[-33,294,]),'elseif':([117,257,],[-33,293,]),'left_par':([54,56,64,65,68,101,103,106,107,114,129,131,132,135,136,137,138,156,157,158,159,160,162,163,164,172,186,191,201,202,223,224,226,227,228,229,231,233,238,245,246,258,260,262,263,264,265,266,267,268,271,273,277,278,283,293,296,297,304,305,306,308,309,314,320,321,332,340,341,349,354,358,],[-167,-167,74,-59,77,128,129,-167,135,-167,-167,159,-129,-167,-167,-86,164,191,-167,-100,-167,191,-165,-167,-167,191,-167,-167,-99,-167,-167,-167,-167,-167,-167,-167,-129,268,-167,-167,-136,-167,-167,191,191,191,191,191,191,-167,-167,-167,-167,-167,-100,-167,-167,-167,-167,191,191,191,191,-167,129,-84,-167,-167,-135,-100,-167,-167,]),'not':([129,135,136,159,162,163,164,191,202,238,245,246,258,260,268,296,297,304,314,332,340,341,354,358,],[157,157,-167,-167,-165,157,157,-167,-167,157,157,-136,-167,-167,-167,157,157,-167,-167,157,157,-135,-167,157,]),'true':([129,135,136,156,157,158,159,160,162,163,164,172,191,201,202,223,224,226,227,228,229,238,245,246,258,260,262,263,264,265,266,267,268,271,273,277,278,283,296,297,304,305,306,308,309,314,332,340,341,349,354,358,],[-167,-167,-167,192,-167,-100,-167,192,-165,-167,-167,192,-167,-99,-167,-167,-167,-167,-167,-167,-167,-167,-167,-136,-167,-167,192,192,192,192,192,192,-167,-167,-167,-167,-167,-100,-167,-167,-167,192,192,192,192,-167,-167,-167,-135,-100,-167,-167,]),'left_cb':([17,55,66,67,98,118,218,288,294,321,322,],[-2,-167,76,-3,126,140,76,76,-167,-84,76,]),'cteInt':([73,94,129,135,136,156,157,158,159,160,162,163,164,172,187,191,200,201,202,223,224,226,227,228,229,234,235,238,243,244,245,246,258,260,262,263,264,265,266,267,268,271,273,277,278,283,296,297,304,305,306,308,309,314,332,340,341,349,354,358,],[80,121,-167,-167,-167,195,-167,-100,-167,195,-165,-167,-167,195,-167,-167,-167,-99,-167,-167,-167,-167,-167,-167,-167,195,-151,-167,-152,195,-167,-136,-167,-167,195,195,195,195,195,195,-167,-167,-167,-167,-167,-100,-167,-167,-167,195,195,195,195,-167,-167,-167,-135,-100,-167,-167,]),'list':([6,9,12,13,15,22,57,61,76,86,87,88,89,100,102,104,105,109,110,111,112,113,116,117,126,130,139,140,147,148,150,151,152,166,171,173,174,175,211,212,214,215,216,253,256,257,286,287,289,290,291,292,295,317,318,319,342,343,344,345,355,359,360,],[14,-15,-13,-16,14,-14,-24,-17,14,-167,-36,-37,14,-71,-72,-69,-38,-73,-39,-74,-70,-34,-167,-33,14,-75,-35,14,14,14,-44,-167,-45,-45,-167,-49,-43,-167,-50,-167,-41,-46,-47,-42,-88,-167,-90,-160,-53,-167,-78,-77,-79,-167,-76,-83,-85,-87,-81,-80,-167,-92,-139,]),'or':([181,182,183,184,185,186,188,189,190,192,193,194,195,196,197,198,199,219,220,221,222,225,230,231,232,236,237,239,240,241,242,269,270,272,274,276,279,280,285,298,299,300,301,302,303,307,315,316,325,326,327,328,329,330,331,333,334,335,336,337,338,357,360,361,363,365,366,],[-167,-158,-167,-146,-167,-167,-126,-167,-159,-157,-147,-124,-167,-148,-145,-167,-125,260,-98,-154,-156,-104,-111,-164,-127,-114,-167,-155,-153,-167,-119,-128,-149,-117,-113,-118,-122,-150,-167,-167,-167,-167,-167,-167,-167,-167,-141,-144,-108,-112,-106,-107,-105,-109,-110,-116,-115,-123,-166,-121,-120,-167,-139,-167,-167,-130,-140,]),'while':([9,12,13,15,22,57,61,76,86,87,88,89,100,102,104,105,109,110,111,112,113,116,117,126,130,139,140,147,148,150,151,152,166,171,173,174,175,211,212,214,215,216,253,256,257,286,287,289,290,291,292,295,317,318,319,342,343,344,345,355,359,360,],[-15,-13,-16,-12,-14,-24,-17,-167,114,-36,-37,-167,-71,-72,-69,-38,-73,-39,-74,-70,-34,114,-33,-167,-75,-35,-167,-167,-167,-44,-167,-45,-45,-167,-49,-43,114,-50,114,-41,-46,-47,-42,-88,-167,-90,-160,-53,-167,-78,-77,-79,-167,-76,-83,-85,-87,-81,-80,-167,-92,-139,]),'plus':([129,135,136,156,157,158,159,160,162,163,164,172,182,183,184,186,188,189,190,191,192,193,194,195,196,197,198,199,201,202,221,222,223,224,226,227,228,229,231,232,236,237,238,239,240,241,242,245,246,258,260,262,263,264,265,266,267,268,269,270,271,273,276,277,278,279,280,283,285,296,297,304,305,306,307,308,309,314,315,316,332,335,336,337,338,340,341,349,354,357,358,360,361,363,365,366,],[-167,-167,-167,187,-167,-100,-167,187,-165,-167,-167,187,-158,-167,-146,-167,-126,-167,-159,-167,-157,-147,-124,-167,-148,-145,-167,-125,-99,-167,-154,-156,-167,-167,-167,-167,-167,-167,-164,-127,-114,273,-167,-155,-153,-167,-119,-167,-136,-167,-167,187,187,187,187,187,187,-167,-128,-149,-167,-167,-118,-167,-167,-122,-150,-100,-167,-167,-167,-167,187,187,-167,187,187,-167,-141,-144,-167,-123,-166,-121,-120,-167,-135,-100,-167,-167,-167,-139,-167,-167,-130,-140,]),'minus':([129,135,136,156,157,158,159,160,162,163,164,172,182,183,184,186,188,189,190,191,192,193,194,195,196,197,198,199,201,202,221,222,223,224,226,227,228,229,231,232,236,237,238,239,240,241,242,245,246,258,260,262,263,264,265,266,267,268,269,270,271,273,276,277,278,279,280,283,285,296,297,304,305,306,307,308,309,314,315,316,332,335,336,337,338,340,341,349,354,357,358,360,361,363,365,366,],[-167,-167,-167,200,-167,-100,-167,200,-165,-167,-167,200,-158,-167,-146,-167,-126,-167,-159,-167,-157,-147,-124,-167,-148,-145,-167,-125,-99,-167,-154,-156,-167,-167,-167,-167,-167,-167,-164,-127,-114,271,-167,-155,-153,-167,-119,-167,-136,-167,-167,200,200,200,200,200,200,-167,-128,-149,-167,-167,-118,-167,-167,-122,-150,-100,-167,-167,-167,-167,200,200,-167,200,200,-167,-141,-144,-167,-123,-166,-121,-120,-167,-135,-100,-167,-167,-167,-139,-167,-167,-130,-140,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'nt_asignarRet':([363,],[365,]),'nt_cambioFuncActual':([25,],[39,]),'CICLO':([86,116,175,212,],[100,100,100,100,]),'VARS_LIST':([6,15,76,89,126,140,147,148,],[9,9,9,9,9,9,9,9,]),'TERMINO_AUX':([241,],[276,]),'CUERPO':([66,218,288,322,],[75,257,317,345,]),'EXP':([156,160,172,262,263,264,265,266,267,305,306,],[185,203,213,298,299,300,301,302,303,333,334,]),'CUERPO_AUX':([76,],[89,]),'nt_hacerVoid':([32,],[49,]),'LECTURA':([86,116,175,212,],[102,102,102,102,]),'ESCRITURA':([86,116,175,212,],[109,109,109,109,]),'nt_checarRelop':([298,299,300,301,302,303,],[325,327,328,329,330,331,]),'VOIDFUNC_PARA':([77,],[90,]),'nt_quadsAcceso':([285,],[315,]),'nt_pushLoop':([317,],[342,]),'VOIDFUNC':([16,26,],[29,29,]),'EXPRESION_B':([219,],[259,]),'LLAMADA':([86,116,175,212,],[111,111,111,111,]),'nt_checar_multis':([198,],[241,]),'CONDICION':([86,116,175,212,],[112,112,112,112,]),'nt_pushGoSub':([355,361,],[359,363,]),'RETORNO':([149,169,],[173,211,]),'STRINGS':([156,160,172,262,263,264,265,266,267,305,306,308,309,],[193,193,193,193,193,193,193,193,193,193,193,193,193,]),'nt_agregarId':([51,53,69,72,],[60,63,78,79,]),'CUERPORETORNO_AUX':([126,],[147,]),'nt_pushPilaO':([106,186,],[133,232,]),'PROGRAMA':([0,],[2,]),'nt_sigMas':([187,],[234,]),'nt_cambiarScope':([8,26,55,],[16,43,67,]),'LISTA':([86,116,156,160,172,175,212,262,263,264,265,266,267,305,306,308,309,],[115,115,199,199,199,115,115,199,199,199,199,199,199,199,199,199,199,]),'FUNC_PARA':([74,],[83,]),'EXPRESIONLOGICA':([156,],[181,]),'nt_pushEndsub':([29,125,],[45,145,]),'PROGRAMA_VARS':([6,],[8,]),'nt_pushFloat':([183,],[221,]),'nt_funcInicio':([151,171,],[175,212,]),'nt_leer':([154,],[177,]),'CUERPOFUNC_AUX':([126,140,147,],[148,148,148,]),'CONDICION_AUX':([103,320,],[130,344,]),'nt_saltoLoop':([114,],[138,]),'CUERPOFUNC_ESTATUTO':([175,212,],[214,253,]),'nt_checaEquals':([206,],[250,]),'ASIGNACION':([86,116,175,212,],[104,104,104,104,]),'VARS_AUX':([6,76,89,126,140,147,148,],[15,15,15,15,15,15,15,]),'VARS_LIST_AUX':([35,],[52,]),'nt_pushElse':([293,294,],[320,322,]),'PROGRAMA_FUNC_AUX':([16,26,],[27,41,]),'nt_popPOper':([307,339,357,],[335,350,361,]),'CUERPOFUNC_VARS':([126,140,147,148,],[151,151,151,171,]),'ASIGNACION_AUX':([86,116,175,212,],[108,108,108,108,]),'FACTOR_AUX':([156,160,172,262,263,264,265,266,267,305,306,308,309,],[188,188,188,188,188,188,188,188,188,188,188,188,188,]),'NUMERICA_AUX':([156,160,172,234,244,262,263,264,265,266,267,305,306,308,309,],[196,196,196,270,280,196,196,196,196,196,196,196,196,196,196,]),'nt_startERA':([202,304,],[245,332,]),'nt_sigMenos':([200,],[244,]),'ELSE':([257,],[292,]),'CUERPORETORNO':([98,],[125,]),'FUNC':([16,26,],[33,33,]),'nt_verificarVarDim':([106,186,],[134,134,]),'CUERPO_ESTATUTO':([86,116,],[113,139,]),'nt_hacerVar':([10,],[18,]),'CONSTANTE':([156,160,172,262,263,264,265,266,267,305,306,308,309,],[194,194,194,194,194,194,194,194,194,194,194,194,194,]),'nt_verificaFuncId':([106,186,],[131,233,]),'nt_verificaUltimo':([282,347,],[312,353,]),'NUMERICA':([156,160,172,262,263,264,265,266,267,305,306,308,309,],[197,197,197,197,197,197,197,197,197,197,197,197,197,]),'FACTOR':([156,160,172,262,263,264,265,266,267,305,306,308,309,],[198,198,198,198,198,198,198,198,198,198,198,198,198,]),'nt_checar_sumas':([189,],[237,]),'EXPRESION':([129,135,163,164,238,245,296,297,332,340,358,],[155,161,206,207,275,281,323,324,346,351,362,]),'EXPRESION_NOT':([129,135,163,164,238,245,296,297,332,340,358,],[156,156,156,156,156,156,156,156,156,156,156,]),'ELSE_ELIF':([257,],[290,]),'nt_agregarDicVar':([60,78,122,168,],[70,93,144,210,]),'BOOLEANA':([156,160,172,262,263,264,265,266,267,305,306,308,309,],[184,184,184,184,184,184,184,184,184,184,184,184,184,]),'nt_pushJmpMain':([3,],[4,]),'CUERPORETORNO_CF_AUX':([126,147,],[149,169,]),'CUERPOFUNC':([126,140,147,],[146,165,146,]),'nt_checaAndOrNot':([181,],[219,]),'PROGRAMA_FUNC':([16,],[26,]),'TERMINO':([156,160,172,262,263,264,265,266,267,305,306,308,309,],[189,189,189,189,189,189,189,189,189,189,189,337,338,]),'nt_pushInt':([195,],[240,]),'EXP_AUX':([237,],[274,]),'empty':([3,6,8,10,14,16,23,24,25,26,28,29,31,32,51,53,54,55,56,60,69,72,74,75,76,77,78,80,86,89,97,106,114,116,120,121,122,125,126,129,135,136,140,147,148,151,153,154,155,157,159,161,163,164,167,168,171,175,181,183,185,186,187,189,191,195,198,200,202,203,206,207,212,213,219,223,224,226,227,228,229,237,238,241,245,257,258,260,268,271,273,277,278,281,282,285,290,293,294,296,297,298,299,300,301,302,303,304,307,314,317,332,339,340,346,347,351,354,355,357,358,361,362,363,],[5,11,17,19,21,30,37,37,40,42,37,46,37,48,59,59,65,17,65,71,59,59,82,84,88,91,71,96,110,88,123,132,137,110,123,96,71,46,152,158,158,162,166,152,166,174,123,178,180,162,162,205,158,158,123,71,174,216,220,222,230,231,235,236,162,239,242,243,246,247,251,180,216,254,261,162,162,162,162,162,162,272,158,279,283,295,162,162,162,162,162,162,162,310,313,316,319,321,321,158,158,326,326,326,326,326,326,246,336,341,343,349,336,158,310,313,310,341,360,336,158,360,310,366,]),'nt_pushSalto':([290,],[318,]),'nt_verifyArgType':([281,346,351,362,],[311,352,356,364,]),'VARS_VAR_AUX':([34,],[50,]),'VARS_LIST_VAR':([6,15,76,89,126,140,147,148,],[12,22,12,12,12,12,12,12,]),'nt_agregarIdFunc':([54,56,],[64,68,]),'VARS_VAR':([6,15,76,89,126,140,147,148,],[13,13,13,13,13,13,13,13,]),'CUERPO_VARS':([76,89,],[86,116,]),'nt_hacerLista':([14,],[20,]),'nt_escribir':([161,],[204,]),'nt_pushVer':([203,],[248,]),'LLAMADA_EXPRESION_AUX':([245,],[284,]),'nt_agregarCteLista':([80,121,],[95,143,]),'nt_paramPP':([314,354,],[340,358,]),'ELIF':([257,],[291,]),'LLAMADA_EXPRESION':([245,],[282,]),'nt_ambienteMain':([55,],[66,]),'VARS':([6,76,89,126,140,147,148,],[7,87,87,150,150,150,150,]),'nt_checarBool':([155,207,],[179,252,]),'LLAMADA_F':([233,],[269,]),'TIPO':([16,18,20,26,74,77,99,119,],[25,34,35,25,81,92,127,141,]),'ESTATUTO':([86,116,175,212,],[105,105,215,215,]),'LLAMADAF_AUX2':([332,],[348,]),'nt_cambioTipoActual':([23,24,28,31,],[36,38,44,47,]),'nt_agregarParametro':([97,120,153,167,],[124,142,176,209,]),'nt_checaRet':([213,],[255,]),'nt_pushPOper':([136,157,159,191,223,224,226,227,228,229,258,260,268,271,273,277,278,],[163,201,202,238,262,263,264,265,266,267,296,297,304,305,306,308,309,]),'LLAMADAF_AUX':([332,],[347,]),'EXPRESIONLOGICA_AUX':([185,],[225,]),'nt_endQuad':([75,],[85,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> PROGRAMA","S'",1,None,None,None),
  ('PROGRAMA -> program id nt_pushJmpMain semicolon PROGRAMA_VARS nt_cambiarScope PROGRAMA_FUNC nt_cambiarScope main nt_ambienteMain CUERPO nt_endQuad','PROGRAMA',12,'p_PROGRAMA','CSP_yacc.py',67),
  ('nt_cambiarScope -> empty','nt_cambiarScope',1,'p_nt_cambiarScope','CSP_yacc.py',109),
  ('nt_ambienteMain -> nt_cambiarScope','nt_ambienteMain',1,'p_nt_ambienteMain','CSP_yacc.py',119),
  ('nt_endQuad -> empty','nt_endQuad',1,'p_nt_endQuad','CSP_yacc.py',128),
  ('nt_pushJmpMain -> empty','nt_pushJmpMain',1,'p_nt_pushJmpMain','CSP_yacc.py',138),
  ('PROGRAMA_VARS -> VARS','PROGRAMA_VARS',1,'p_PROGRAMA_VARS','CSP_yacc.py',150),
  ('PROGRAMA_VARS -> empty','PROGRAMA_VARS',1,'p_PROGRAMA_VARS','CSP_yacc.py',151),
  ('PROGRAMA_FUNC -> PROGRAMA_FUNC_AUX','PROGRAMA_FUNC',1,'p_PROGRAMA_FUNC','CSP_yacc.py',156),
  ('PROGRAMA_FUNC -> PROGRAMA_FUNC PROGRAMA_FUNC_AUX','PROGRAMA_FUNC',2,'p_PROGRAMA_FUNC','CSP_yacc.py',157),
  ('PROGRAMA_FUNC_AUX -> FUNC','PROGRAMA_FUNC_AUX',1,'p_PROGRAMA_FUNC_AUX','CSP_yacc.py',162),
  ('PROGRAMA_FUNC_AUX -> empty','PROGRAMA_FUNC_AUX',1,'p_PROGRAMA_FUNC_AUX','CSP_yacc.py',163),
  ('VARS -> VARS_AUX','VARS',1,'p_VARS','CSP_yacc.py',168),
  ('VARS_AUX -> VARS_LIST_VAR','VARS_AUX',1,'p_VARS_AUX','CSP_yacc.py',173),
  ('VARS_AUX -> VARS_AUX VARS_LIST_VAR','VARS_AUX',2,'p_VARS_AUX','CSP_yacc.py',174),
  ('VARS_LIST_VAR -> VARS_LIST','VARS_LIST_VAR',1,'p_VARS_LIST_VAR','CSP_yacc.py',179),
  ('VARS_LIST_VAR -> VARS_VAR','VARS_LIST_VAR',1,'p_VARS_LIST_VAR','CSP_yacc.py',180),
  ('VARS_LIST -> list nt_hacerLista TIPO VARS_LIST_AUX semicolon','VARS_LIST',5,'p_VARS_LIST','CSP_yacc.py',185),
  ('nt_hacerLista -> empty','nt_hacerLista',1,'p_nt_hacerLista','CSP_yacc.py',190),
  ('VARS_LIST_AUX -> id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar','VARS_LIST_AUX',7,'p_VARS_LIST_AUX','CSP_yacc.py',197),
  ('VARS_LIST_AUX -> VARS_LIST_AUX comma id nt_agregarId left_sb cteInt nt_agregarCteLista right_sb nt_agregarDicVar','VARS_LIST_AUX',9,'p_VARS_LIST_AUX','CSP_yacc.py',198),
  ('nt_agregarId -> empty','nt_agregarId',1,'p_nt_agregarId','CSP_yacc.py',203),
  ('nt_agregarCteLista -> empty','nt_agregarCteLista',1,'p_nt_agregarCteLista','CSP_yacc.py',210),
  ('nt_agregarDicVar -> empty','nt_agregarDicVar',1,'p_nt_agregarDicVar','CSP_yacc.py',222),
  ('VARS_VAR -> var nt_hacerVar TIPO VARS_VAR_AUX semicolon','VARS_VAR',5,'p_VARS_VAR','CSP_yacc.py',245),
  ('nt_hacerVar -> empty','nt_hacerVar',1,'p_nt_hacerVar','CSP_yacc.py',250),
  ('VARS_VAR_AUX -> id nt_agregarId nt_agregarDicVar','VARS_VAR_AUX',3,'p_VARS_VAR_AUX','CSP_yacc.py',259),
  ('VARS_VAR_AUX -> VARS_VAR_AUX comma id nt_agregarId nt_agregarDicVar','VARS_VAR_AUX',5,'p_VARS_VAR_AUX','CSP_yacc.py',260),
  ('TIPO -> int nt_cambioTipoActual','TIPO',2,'p_TIPO','CSP_yacc.py',265),
  ('TIPO -> float nt_cambioTipoActual','TIPO',2,'p_TIPO','CSP_yacc.py',266),
  ('TIPO -> bool nt_cambioTipoActual','TIPO',2,'p_TIPO','CSP_yacc.py',267),
  ('TIPO -> string nt_cambioTipoActual','TIPO',2,'p_TIPO','CSP_yacc.py',268),
  ('nt_cambioTipoActual -> empty','nt_cambioTipoActual',1,'p_nt_cambioTipoActual','CSP_yacc.py',273),
  ('CUERPO -> left_cb CUERPO_AUX right_cb','CUERPO',3,'p_CUERPO','CSP_yacc.py',280),
  ('CUERPO_AUX -> CUERPO_VARS CUERPO_ESTATUTO','CUERPO_AUX',2,'p_CUERPO_AUX','CSP_yacc.py',285),
  ('CUERPO_AUX -> CUERPO_AUX CUERPO_VARS CUERPO_ESTATUTO','CUERPO_AUX',3,'p_CUERPO_AUX','CSP_yacc.py',286),
  ('CUERPO_VARS -> VARS','CUERPO_VARS',1,'p_CUERPO_VARS','CSP_yacc.py',291),
  ('CUERPO_VARS -> empty','CUERPO_VARS',1,'p_CUERPO_VARS','CSP_yacc.py',292),
  ('CUERPO_ESTATUTO -> ESTATUTO','CUERPO_ESTATUTO',1,'p_CUERPO_ESTATUTO','CSP_yacc.py',297),
  ('CUERPO_ESTATUTO -> empty','CUERPO_ESTATUTO',1,'p_CUERPO_ESTATUTO','CSP_yacc.py',298),
  ('CUERPOFUNC -> CUERPOFUNC_AUX','CUERPOFUNC',1,'p_CUERPOFUNC','CSP_yacc.py',303),
  ('CUERPOFUNC_AUX -> CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO','CUERPOFUNC_AUX',3,'p_CUERPOFUNC_AUX','CSP_yacc.py',308),
  ('CUERPOFUNC_AUX -> CUERPOFUNC_AUX CUERPOFUNC_VARS nt_funcInicio CUERPOFUNC_ESTATUTO','CUERPOFUNC_AUX',4,'p_CUERPOFUNC_AUX','CSP_yacc.py',309),
  ('nt_funcInicio -> empty','nt_funcInicio',1,'p_nt_funcInicio','CSP_yacc.py',313),
  ('CUERPOFUNC_VARS -> VARS','CUERPOFUNC_VARS',1,'p_CUERPOFUNC_VARS','CSP_yacc.py',322),
  ('CUERPOFUNC_VARS -> empty','CUERPOFUNC_VARS',1,'p_CUERPOFUNC_VARS','CSP_yacc.py',323),
  ('CUERPOFUNC_ESTATUTO -> ESTATUTO','CUERPOFUNC_ESTATUTO',1,'p_CUERPOFUNC_ESTATUTO','CSP_yacc.py',328),
  ('CUERPOFUNC_ESTATUTO -> empty','CUERPOFUNC_ESTATUTO',1,'p_CUERPOFUNC_ESTATUTO','CSP_yacc.py',329),
  ('CUERPORETORNO -> left_cb CUERPORETORNO_AUX right_cb','CUERPORETORNO',3,'p_CUERPORETORNO','CSP_yacc.py',335),
  ('CUERPORETORNO_AUX -> CUERPORETORNO_CF_AUX RETORNO','CUERPORETORNO_AUX',2,'p_CUERPORETORNO_AUX','CSP_yacc.py',340),
  ('CUERPORETORNO_AUX -> CUERPORETORNO_AUX CUERPORETORNO_CF_AUX RETORNO','CUERPORETORNO_AUX',3,'p_CUERPORETORNO_AUX','CSP_yacc.py',341),
  ('CUERPORETORNO_CF_AUX -> CUERPOFUNC','CUERPORETORNO_CF_AUX',1,'p_CUERPORETORNO_CF_AUX','CSP_yacc.py',346),
  ('CUERPORETORNO_CF_AUX -> empty','CUERPORETORNO_CF_AUX',1,'p_CUERPORETORNO_CF_AUX','CSP_yacc.py',347),
  ('RETORNO -> return EXP nt_checaRet semicolon','RETORNO',4,'p_RETORNO','CSP_yacc.py',354),
  ('nt_checaRet -> empty','nt_checaRet',1,'p_nt_checaRet','CSP_yacc.py',359),
  ('FUNC -> TIPO nt_cambioFuncActual id nt_agregarIdFunc left_par FUNC_PARA right_par CUERPORETORNO nt_pushEndsub','FUNC',9,'p_FUNC','CSP_yacc.py',393),
  ('FUNC -> VOIDFUNC nt_pushEndsub','FUNC',2,'p_FUNC','CSP_yacc.py',394),
  ('nt_pushEndsub -> empty','nt_pushEndsub',1,'p_nt_pushEndsub','CSP_yacc.py',432),
  ('nt_cambioFuncActual -> empty','nt_cambioFuncActual',1,'p_nt_cambioFuncActual','CSP_yacc.py',442),
  ('nt_agregarIdFunc -> empty','nt_agregarIdFunc',1,'p_nt_agregarIdFunc','CSP_yacc.py',453),
  ('FUNC_PARA -> TIPO id nt_agregarParametro','FUNC_PARA',3,'p_FUNC_PARA','CSP_yacc.py',479),
  ('FUNC_PARA -> FUNC_PARA comma TIPO id nt_agregarParametro','FUNC_PARA',5,'p_FUNC_PARA','CSP_yacc.py',480),
  ('FUNC_PARA -> empty','FUNC_PARA',1,'p_FUNC_PARA','CSP_yacc.py',481),
  ('nt_agregarParametro -> empty','nt_agregarParametro',1,'p_nt_agregarParametro','CSP_yacc.py',493),
  ('VOIDFUNC -> void nt_hacerVoid id nt_agregarIdFunc left_par VOIDFUNC_PARA right_par left_cb CUERPOFUNC right_cb','VOIDFUNC',10,'p_VOIDFUNC','CSP_yacc.py',512),
  ('nt_hacerVoid -> empty','nt_hacerVoid',1,'p_nt_hacerVoid','CSP_yacc.py',517),
  ('VOIDFUNC_PARA -> TIPO id nt_agregarParametro','VOIDFUNC_PARA',3,'p_VOIDFUNC_PARA','CSP_yacc.py',525),
  ('VOIDFUNC_PARA -> VOIDFUNC_PARA comma TIPO id nt_agregarParametro','VOIDFUNC_PARA',5,'p_VOIDFUNC_PARA','CSP_yacc.py',526),
  ('VOIDFUNC_PARA -> empty','VOIDFUNC_PARA',1,'p_VOIDFUNC_PARA','CSP_yacc.py',527),
  ('ESTATUTO -> ASIGNACION','ESTATUTO',1,'p_ESTATUTO','CSP_yacc.py',537),
  ('ESTATUTO -> CONDICION','ESTATUTO',1,'p_ESTATUTO','CSP_yacc.py',538),
  ('ESTATUTO -> CICLO','ESTATUTO',1,'p_ESTATUTO','CSP_yacc.py',539),
  ('ESTATUTO -> LECTURA','ESTATUTO',1,'p_ESTATUTO','CSP_yacc.py',540),
  ('ESTATUTO -> ESCRITURA','ESTATUTO',1,'p_ESTATUTO','CSP_yacc.py',541),
  ('ESTATUTO -> LLAMADA','ESTATUTO',1,'p_ESTATUTO','CSP_yacc.py',542),
  ('CONDICION -> if CONDICION_AUX','CONDICION',2,'p_CONDICION','CSP_yacc.py',547),
  ('CONDICION_AUX -> left_par EXPRESION nt_checarBool right_par CUERPO ELSE_ELIF nt_pushSalto','CONDICION_AUX',7,'p_CONDICION_AUX','CSP_yacc.py',552),
  ('ELSE_ELIF -> ELSE','ELSE_ELIF',1,'p_ELSE_ELIF','CSP_yacc.py',556),
  ('ELSE_ELIF -> ELIF','ELSE_ELIF',1,'p_ELSE_ELIF','CSP_yacc.py',557),
  ('ELSE_ELIF -> empty','ELSE_ELIF',1,'p_ELSE_ELIF','CSP_yacc.py',558),
  ('ELSE -> else nt_pushElse CUERPO','ELSE',3,'p_ELSE','CSP_yacc.py',563),
  ('ELIF -> elseif nt_pushElse CONDICION_AUX','ELIF',3,'p_ELIF','CSP_yacc.py',568),
  ('nt_checarBool -> empty','nt_checarBool',1,'p_nt_checarBool','CSP_yacc.py',573),
  ('nt_pushSalto -> empty','nt_pushSalto',1,'p_nt_pushSalto','CSP_yacc.py',597),
  ('nt_pushElse -> empty','nt_pushElse',1,'p_nt_pushElse','CSP_yacc.py',609),
  ('CICLO -> while nt_saltoLoop left_par EXPRESION nt_checarBool right_par CUERPO nt_pushLoop','CICLO',8,'p_CICLO','CSP_yacc.py',626),
  ('nt_saltoLoop -> empty','nt_saltoLoop',1,'p_nt_saltoLoop','CSP_yacc.py',631),
  ('nt_pushLoop -> empty','nt_pushLoop',1,'p_nt_pushLoop','CSP_yacc.py',640),
  ('LECTURA -> cread left_par id nt_leer right_par semicolon','LECTURA',6,'p_LECTURA','CSP_yacc.py',654),
  ('nt_leer -> empty','nt_leer',1,'p_nt_leer','CSP_yacc.py',660),
  ('ESCRITURA -> cwrite left_par EXPRESION nt_escribir right_par semicolon','ESCRITURA',6,'p_ESCRITURA','CSP_yacc.py',684),
  ('nt_escribir -> empty','nt_escribir',1,'p_nt_escribir','CSP_yacc.py',689),
  ('LLAMADA -> id nt_verificaFuncId left_par nt_pushPOper nt_startERA LLAMADA_EXPRESION nt_verificaUltimo right_par nt_popPOper semicolon nt_pushGoSub','LLAMADA',11,'p_LLAMADA','CSP_yacc.py',705),
  ('LLAMADA_EXPRESION -> LLAMADA_EXPRESION_AUX','LLAMADA_EXPRESION',1,'p_LLAMADA_EXPRESION','CSP_yacc.py',710),
  ('LLAMADA_EXPRESION -> empty','LLAMADA_EXPRESION',1,'p_LLAMADA_EXPRESION','CSP_yacc.py',711),
  ('LLAMADA_EXPRESION_AUX -> EXPRESION nt_verifyArgType','LLAMADA_EXPRESION_AUX',2,'p_LLAMADA_EXPRESION_AUX','CSP_yacc.py',716),
  ('LLAMADA_EXPRESION_AUX -> LLAMADA_EXPRESION_AUX comma nt_paramPP EXPRESION nt_verifyArgType','LLAMADA_EXPRESION_AUX',5,'p_LLAMADA_EXPRESION_AUX','CSP_yacc.py',717),
  ('EXPRESION -> EXPRESION_NOT EXPRESIONLOGICA nt_checaAndOrNot EXPRESION_B','EXPRESION',4,'p_EXPRESION','CSP_yacc.py',722),
  ('nt_checaAndOrNot -> empty','nt_checaAndOrNot',1,'p_nt_checaAndOrNot','CSP_yacc.py',727),
  ('EXPRESION_NOT -> not nt_pushPOper','EXPRESION_NOT',2,'p_EXPRESION_NOT','CSP_yacc.py',784),
  ('EXPRESION_NOT -> empty','EXPRESION_NOT',1,'p_EXPRESION_NOT','CSP_yacc.py',785),
  ('EXPRESION_B -> and nt_pushPOper EXPRESION','EXPRESION_B',3,'p_EXPRESION_B','CSP_yacc.py',790),
  ('EXPRESION_B -> or nt_pushPOper EXPRESION','EXPRESION_B',3,'p_EXPRESION_B','CSP_yacc.py',791),
  ('EXPRESION_B -> empty','EXPRESION_B',1,'p_EXPRESION_B','CSP_yacc.py',792),
  ('EXPRESIONLOGICA -> EXP EXPRESIONLOGICA_AUX','EXPRESIONLOGICA',2,'p_EXPRESIONLOGICA','CSP_yacc.py',797),
  ('EXPRESIONLOGICA_AUX -> lt nt_pushPOper EXP nt_checarRelop','EXPRESIONLOGICA_AUX',4,'p_EXPRESIONLOGICA_AUX','CSP_yacc.py',802),
  ('EXPRESIONLOGICA_AUX -> gt nt_pushPOper EXP nt_checarRelop','EXPRESIONLOGICA_AUX',4,'p_EXPRESIONLOGICA_AUX','CSP_yacc.py',803),
  ('EXPRESIONLOGICA_AUX -> ne nt_pushPOper EXP nt_checarRelop','EXPRESIONLOGICA_AUX',4,'p_EXPRESIONLOGICA_AUX','CSP_yacc.py',804),
  ('EXPRESIONLOGICA_AUX -> ge nt_pushPOper EXP nt_checarRelop','EXPRESIONLOGICA_AUX',4,'p_EXPRESIONLOGICA_AUX','CSP_yacc.py',805),
  ('EXPRESIONLOGICA_AUX -> le nt_pushPOper EXP nt_checarRelop','EXPRESIONLOGICA_AUX',4,'p_EXPRESIONLOGICA_AUX','CSP_yacc.py',806),
  ('EXPRESIONLOGICA_AUX -> et nt_pushPOper EXP nt_checarRelop','EXPRESIONLOGICA_AUX',4,'p_EXPRESIONLOGICA_AUX','CSP_yacc.py',807),
  ('EXPRESIONLOGICA_AUX -> empty','EXPRESIONLOGICA_AUX',1,'p_EXPRESIONLOGICA_AUX','CSP_yacc.py',808),
  ('nt_checarRelop -> empty','nt_checarRelop',1,'p_nt_checarRelop','CSP_yacc.py',813),
  ('EXP -> TERMINO nt_checar_sumas EXP_AUX','EXP',3,'p_EXP','CSP_yacc.py',851),
  ('nt_checar_sumas -> empty','nt_checar_sumas',1,'p_nt_checar_sumas','CSP_yacc.py',856),
  ('EXP_AUX -> plus nt_pushPOper EXP','EXP_AUX',3,'p_EXP_AUX','CSP_yacc.py',896),
  ('EXP_AUX -> minus nt_pushPOper EXP','EXP_AUX',3,'p_EXP_AUX','CSP_yacc.py',897),
  ('EXP_AUX -> empty','EXP_AUX',1,'p_EXP_AUX','CSP_yacc.py',898),
  ('TERMINO -> FACTOR nt_checar_multis TERMINO_AUX','TERMINO',3,'p_TERMINO','CSP_yacc.py',904),
  ('nt_checar_multis -> empty','nt_checar_multis',1,'p_nt_checar_multis','CSP_yacc.py',909),
  ('TERMINO_AUX -> multiply nt_pushPOper TERMINO','TERMINO_AUX',3,'p_TERMINO_AUX','CSP_yacc.py',948),
  ('TERMINO_AUX -> divide nt_pushPOper TERMINO','TERMINO_AUX',3,'p_TERMINO_AUX','CSP_yacc.py',949),
  ('TERMINO_AUX -> empty','TERMINO_AUX',1,'p_TERMINO_AUX','CSP_yacc.py',950),
  ('FACTOR -> left_par nt_pushPOper EXPRESION right_par nt_popPOper','FACTOR',5,'p_FACTOR','CSP_yacc.py',955),
  ('FACTOR -> CONSTANTE','FACTOR',1,'p_FACTOR','CSP_yacc.py',956),
  ('FACTOR -> LISTA','FACTOR',1,'p_FACTOR','CSP_yacc.py',957),
  ('FACTOR -> FACTOR_AUX','FACTOR',1,'p_FACTOR','CSP_yacc.py',958),
  ('FACTOR_AUX -> id nt_pushPilaO','FACTOR_AUX',2,'p_FACTOR_AUX','CSP_yacc.py',963),
  ('FACTOR_AUX -> id nt_verificaFuncId LLAMADA_F','FACTOR_AUX',3,'p_FACTOR_AUX','CSP_yacc.py',964),
  ('nt_verificaFuncId -> empty','nt_verificaFuncId',1,'p_nt_verificaFuncId','CSP_yacc.py',969),
  ('LLAMADA_F -> left_par nt_pushPOper nt_startERA LLAMADAF_AUX nt_verificaUltimo right_par nt_popPOper nt_pushGoSub nt_asignarRet','LLAMADA_F',9,'p_LLAMADAF','CSP_yacc.py',989),
  ('LLAMADAF_AUX -> LLAMADAF_AUX2','LLAMADAF_AUX',1,'p_LLAMADAF_AUX','CSP_yacc.py',994),
  ('LLAMADAF_AUX -> empty','LLAMADAF_AUX',1,'p_LLAMADAF_AUX','CSP_yacc.py',995),
  ('LLAMADAF_AUX2 -> EXPRESION nt_verifyArgType','LLAMADAF_AUX2',2,'p_LLAMADAF_AUX2','CSP_yacc.py',1000),
  ('LLAMADAF_AUX2 -> LLAMADAF_AUX2 comma nt_paramPP EXPRESION nt_verifyArgType','LLAMADAF_AUX2',5,'p_LLAMADAF_AUX2','CSP_yacc.py',1001),
  ('nt_paramPP -> empty','nt_paramPP',1,'p_nt_paramPP','CSP_yacc.py',1006),
  ('nt_startERA -> empty','nt_startERA',1,'p_nt_startERA','CSP_yacc.py',1013),
  ('nt_verifyArgType -> empty','nt_verifyArgType',1,'p_nt_verifyArgType','CSP_yacc.py',1026),
  ('nt_verificaUltimo -> empty','nt_verificaUltimo',1,'p_nt_verificaUltimo','CSP_yacc.py',1052),
  ('nt_pushGoSub -> empty','nt_pushGoSub',1,'p_nt_pushGoSub','CSP_yacc.py',1068),
  ('nt_asignarRet -> empty','nt_asignarRet',1,'p_nt_asignarRet','CSP_yacc.py',1081),
  ('LISTA -> id nt_verificarVarDim left_sb EXP nt_pushVer right_sb nt_quadsAcceso','LISTA',7,'p_LISTA','CSP_yacc.py',1108),
  ('nt_verificarVarDim -> empty','nt_verificarVarDim',1,'p_nt_verificaVarDim','CSP_yacc.py',1113),
  ('nt_pushVer -> empty','nt_pushVer',1,'p_nt_pushVer','CSP_yacc.py',1140),
  ('nt_quadsAcceso -> empty','nt_quadsAcceso',1,'p_nt_quadsAcceso','CSP_yacc.py',1193),
  ('CONSTANTE -> NUMERICA','CONSTANTE',1,'p_CONSTANTE','CSP_yacc.py',1209),
  ('CONSTANTE -> BOOLEANA','CONSTANTE',1,'p_CONSTANTE','CSP_yacc.py',1210),
  ('CONSTANTE -> STRINGS','CONSTANTE',1,'p_CONSTANTE','CSP_yacc.py',1211),
  ('NUMERICA -> NUMERICA_AUX','NUMERICA',1,'p_NUMERICA','CSP_yacc.py',1217),
  ('NUMERICA -> plus nt_sigMas NUMERICA_AUX','NUMERICA',3,'p_NUMERICA','CSP_yacc.py',1218),
  ('NUMERICA -> minus nt_sigMenos NUMERICA_AUX','NUMERICA',3,'p_NUMERICA','CSP_yacc.py',1219),
  ('nt_sigMas -> empty','nt_sigMas',1,'p_nt_sigMas','CSP_yacc.py',1224),
  ('nt_sigMenos -> empty','nt_sigMenos',1,'p_nt_sigMenos','CSP_yacc.py',1231),
  ('NUMERICA_AUX -> cteInt nt_pushInt','NUMERICA_AUX',2,'p_NUMERICA_AUX','CSP_yacc.py',1238),
  ('NUMERICA_AUX -> cteFloat nt_pushFloat','NUMERICA_AUX',2,'p_NUMERICA_AUX','CSP_yacc.py',1239),
  ('nt_pushInt -> empty','nt_pushInt',1,'p_nt_pushInt','CSP_yacc.py',1245),
  ('nt_pushFloat -> empty','nt_pushFloat',1,'p_nt_pushFloat','CSP_yacc.py',1273),
  ('BOOLEANA -> true','BOOLEANA',1,'p_BOOLEANA','CSP_yacc.py',1301),
  ('BOOLEANA -> false','BOOLEANA',1,'p_BOOLEANA','CSP_yacc.py',1302),
  ('STRINGS -> cteString','STRINGS',1,'p_STRINGS','CSP_yacc.py',1319),
  ('ASIGNACION -> ASIGNACION_AUX equals nt_pushPOper EXPRESION nt_checaEquals semicolon','ASIGNACION',6,'p_ASIGNACION','CSP_yacc.py',1336),
  ('nt_checaEquals -> empty','nt_checaEquals',1,'p_nt_checaEquals','CSP_yacc.py',1341),
  ('ASIGNACION_AUX -> id nt_pushPilaO','ASIGNACION_AUX',2,'p_ASIGNACION_AUX','CSP_yacc.py',1368),
  ('ASIGNACION_AUX -> LISTA','ASIGNACION_AUX',1,'p_ASIGNACION_AUX','CSP_yacc.py',1369),
  ('nt_pushPilaO -> empty','nt_pushPilaO',1,'p_nt_pushPilaO','CSP_yacc.py',1374),
  ('nt_pushPOper -> empty','nt_pushPOper',1,'p_nt_pushPOper','CSP_yacc.py',1394),
  ('nt_popPOper -> empty','nt_popPOper',1,'p_nt_popPOper','CSP_yacc.py',1403),
  ('empty -> <empty>','empty',0,'p_empty','CSP_yacc.py',1410),
]
